getNextImage.php:7:header("Cache-Control: max-age=2592000"); //TODO Header control for caching
getNextImage.php:9:error_reporting(-1);
getNextImage.php:17:  $stmt = $conn->prepare("SELECT Images.image_id, Images.path FROM Images WHERE Images.image_id NOT IN (SELECT image_id FROM MarkedData WHERE author = ?) LIMIT 1");
getNextImage.php:18:  $stmt->bind_param("s", $author);
getNextImage.php:19:  $stmt->execute();
getNextImage.php:21:  $res = $stmt->get_result();
getNextImage.php:22:  $row = $res->fetch_assoc();
getNextImage.php:24:    return array("id" => -1, "name" => null);  // done
getNextImage.php:44:    "errorMessage" => $e->getMessage()
composer.json:2:    "require-dev": {
getImage.php:4:error_reporting(-1);
getImage.php:15:  $stmt = $conn->prepare("SELECT path FROM Images WHERE image_id = ?");
getImage.php:16:  $stmt->bind_param("i", $id);
getImage.php:17:  $stmt->execute();
getImage.php:19:  $res = $stmt->get_result();
getImage.php:20:  $row = $res->fetch_assoc();
getImage.php:34:  header("Content-Type: image/jpeg");
getImage.php:39:    "errorMessage" => $e->getMessage()
getOutput.php:6:error_reporting(-1);
getOutput.php:14:  $stmt = $conn->prepare("SELECT * FROM MarkedData WHERE author = ?");
getOutput.php:15:  $stmt->bind_param("s", $author);
getOutput.php:16:  $stmt->execute();
getOutput.php:17:  $res = $stmt->get_result();
getOutput.php:24:  while ($row = $res->fetch_assoc()) {
getOutput.php:28:	  $sev_stmt = $conn->prepare("SELECT disease, severity FROM Severity WHERE mark_id = ?");
getOutput.php:29:	  $sev_stmt->bind_param("i", $mark_id);
getOutput.php:30:	  $sev_stmt->execute();
getOutput.php:31:	  $sev_res = $sev_stmt->get_result();
getOutput.php:33:	  while ($sev_row = $sev_res->fetch_assoc()) {
getOutput.php:36:	  $sev_stmt->close();
getOutput.php:40:  $stmt->close();
getOutput.php:53:    "errorMessage" => $e->getMessage()
addNewImages.php:17:$insert_stmt = $conn->prepare("INSERT INTO Images (path, orderIndex) VALUES (?, ?)");
addNewImages.php:18:$exists_stmt = $conn->prepare("SELECT EXISTS(SELECT 1 FROM Images WHERE path = ?) as e");
addNewImages.php:27:  $exists_stmt->bind_param("s", $rel_path);
addNewImages.php:28:  $exists_stmt->execute();
addNewImages.php:29:  $res = $exists_stmt->get_result();
addNewImages.php:30:  $row = $res->fetch_assoc();
addNewImages.php:32:    echo "----duplicate<br/>";
addNewImages.php:38:    $insert_stmt->bind_param("si", $rel_path, rand(0, 10000));
addNewImages.php:39:    $insert_stmt->execute();
getAllOutput.php:9://  * - using Chrome, and my computer that has a huge amount of RAM
getAllOutput.php:18://error_reporting(-1);
getAllOutput.php:28:	  $stmt = $conn->prepare("SELECT * FROM MarkedData WHERE author = ? ORDER BY mark_id LIMIT 700");
getAllOutput.php:32:	  $stmt = $conn->prepare("SELECT * FROM MarkedData WHERE author = ? ORDER BY mark_id LIMIT 700, 700");
getAllOutput.php:35:  $stmt->bind_param("s", $author);
getAllOutput.php:36:  $stmt->execute();
getAllOutput.php:37:  $res = $stmt->get_result();
getAllOutput.php:43:  while ($row = $res->fetch_assoc()) {
getAllOutput.php:47:  $stmt->close();
getAllOutput.php:58:    "errorMessage" => $e->getMessage()
getDiseases.php:4:error_reporting(-1);
getDiseases.php:12:  $stmt = $conn->prepare("SELECT * FROM Diseases");
getDiseases.php:13:  $stmt->execute();
getDiseases.php:15:  $res = $stmt->get_result();
getDiseases.php:17:  while ($row = $res->fetch_assoc()) {
getDiseases.php:21:  $stmt->close();
getDiseases.php:31:    "errorMessage" => $e->getMessage()
getMultipleDiseases.php:5:error_reporting(-1);
getMultipleDiseases.php:22:  header('Content-Type: application/csv');
getMultipleDiseases.php:23:  header('Content-Disposition: attachment; filename="'.$filename.'";');
getMultipleDiseases.php:26:  // see http://www.php.net/manual/en/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq
getMultipleDiseases.php:31:  $imagesStmt = $conn->prepare("SELECT i.image_id as image_id FROM Images i where 2 < (SELECT count(*) from MarkedData m where m.image_id = i.image_id);");
getMultipleDiseases.php:32:  $imagesStmt->execute();
getMultipleDiseases.php:33:  $imagesRes = $imagesStmt->get_result();
getMultipleDiseases.php:35:  while($imageRow = $imagesRes->fetch_assoc()){
getMultipleDiseases.php:44:	  $authorsStmt = $conn->prepare("SELECT m.mark_id as mark_id, m.image_id as image_id, m.author as author, m.path as path, i.path as name, m.poor_quality as poor_quality FROM MarkedData m, Images i where i.image_id = m.image_id AND i.image_id = ?");
getMultipleDiseases.php:45:	  $authorsStmt->bind_param("i", $image_id);
getMultipleDiseases.php:46:	  $authorsStmt->execute();
getMultipleDiseases.php:47:	  $authorsRes = $authorsStmt->get_result();
getMultipleDiseases.php:49:	  while($authorRow = $authorsRes->fetch_assoc()) {
getMultipleDiseases.php:89:				$xj = $diseasePath[count($diseasePath) - 2][1];
getMultipleDiseases.php:90:				$yj = 512 - $diseasePath[count($diseasePath) - 2][2];
getMultipleDiseases.php:97:						$yi = 512 - $diseasePathCoord[2];
getMultipleDiseases.php:99:						$pathArea += ($xj + $xi) * ($yj - $yi);
getMultipleDiseases.php:116:			$sevStmt = $conn->prepare("Select severity from Severity where mark_id = ? and disease = ?");
getMultipleDiseases.php:117:			$sevStmt->bind_param("ii", $mark_id, $diseaseId);
getMultipleDiseases.php:119:			$sevStmt->execute();
getMultipleDiseases.php:120:			$sev_res = $sevStmt->get_result();
getMultipleDiseases.php:122:			$obj = $sev_res->fetch_assoc();
getMultipleDiseases.php:124:			$sevStmt->close();
getMultipleDiseases.php:199:  $imagesStmt->close();
getMultipleDiseases.php:213:        return ($a[4] < $b[4]) ? -1 : 1;
getMultipleDiseases.php:215:    return ($a[2] < $b[2]) ? -1 : 1;
getMultipleDiseases.php:232:		"errorMessage" => $e->getMessage()
getImageToReMark.php:4:error_reporting(-1);
getImageToReMark.php:12:  $stmt = $conn->prepare("SELECT Images.image_id, Images.path FROM Images WHERE Images.image_id = ? LIMIT 1");
getImageToReMark.php:14:  $stmt->bind_param("i", $image_id);
getImageToReMark.php:15:  $stmt->execute();
getImageToReMark.php:17:  $res = $stmt->get_result();
getImageToReMark.php:18:  $row = $res->fetch_assoc();
getImageToReMark.php:20:	return array( "id" => -1, "name" => "No image with id: " . $image_id);  // done
getImageToReMark.php:40:    "errorMessage" => $e->getMessage()
getRowsCSV.php:5:error_reporting(-1);
getRowsCSV.php:14:  header('Content-Type: application/csv');
getRowsCSV.php:15:  header('Content-Disposition: attachment; filename="'.$filename.'";');
getRowsCSV.php:18:  // see http://www.php.net/manual/en/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq
getRowsCSV.php:23:  $stmt = $conn->prepare("SELECT m.mark_id as mark_id, m.image_id as image_id, m.author as author, m.path as path, m.poor_quality as poor_quality, i.path as name FROM MarkedData m, Images i where i.image_id = m.image_id AND m.author = 'David'");
getRowsCSV.php:24:  //$stmt->bind_param("s", $author);
getRowsCSV.php:25:  $stmt->execute();
getRowsCSV.php:26:  $res = $stmt->get_result();
getRowsCSV.php:31:  while ($row = $res->fetch_assoc()) {
getRowsCSV.php:84:	  $sev_stmt = $conn->prepare("SELECT disease, severity FROM Severity WHERE mark_id = ?");
getRowsCSV.php:85:	  $sev_stmt->bind_param("i", $mark_id);
getRowsCSV.php:86:	  $sev_stmt->execute();
getRowsCSV.php:87:	  $sev_res = $sev_stmt->get_result();
getRowsCSV.php:89:	  while ($sev_row = $sev_res->fetch_assoc()) {
getRowsCSV.php:93:	  $sev_stmt->close();
getRowsCSV.php:97:  $stmt->close();
getRowsCSV.php:107:    "errorMessage" => $e->getMessage()
getAreaSeparated.php:5:error_reporting(-1);
getAreaSeparated.php:22:  header('Content-Type: application/csv');
getAreaSeparated.php:23:  header('Content-Disposition: attachment; filename="'.$filename.'";');
getAreaSeparated.php:26:  // see http://www.php.net/manual/en/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq
getAreaSeparated.php:31:  $imagesStmt = $conn->prepare("SELECT i.image_id as image_id FROM Images i where 2 < (SELECT count(*) from MarkedData m where m.image_id = i.image_id and m.poor_quality != 1);");
getAreaSeparated.php:32:  $imagesStmt->execute();
getAreaSeparated.php:33:  $imagesRes = $imagesStmt->get_result();
getAreaSeparated.php:35:  while($imageRow = $imagesRes->fetch_assoc()){
getAreaSeparated.php:44:	  $authorsStmt = $conn->prepare("SELECT m.mark_id as mark_id, m.image_id as image_id, m.author as author, m.path as path, i.path as name FROM MarkedData m, Images i where i.image_id = m.image_id AND i.image_id = ?");
getAreaSeparated.php:45:	  $authorsStmt->bind_param("i", $image_id);
getAreaSeparated.php:46:	  $authorsStmt->execute();
getAreaSeparated.php:47:	  $authorsRes = $authorsStmt->get_result();
getAreaSeparated.php:49:	  while($authorRow = $authorsRes->fetch_assoc()) {
getAreaSeparated.php:85:				$xj = $diseasePath[count($diseasePath) - 2][1];
getAreaSeparated.php:86:				$yj = 512 - $diseasePath[count($diseasePath) - 2][2];
getAreaSeparated.php:93:						$yi = 512 - $diseasePathCoord[2];
getAreaSeparated.php:95:						$pathArea += ($xj + $xi) * ($yj - $yi);
getAreaSeparated.php:112:			$sevStmt = $conn->prepare("Select severity from Severity where mark_id = ? and disease = ?");
getAreaSeparated.php:113:			$sevStmt->bind_param("ii", $mark_id, $diseaseId);
getAreaSeparated.php:115:			$sevStmt->execute();
getAreaSeparated.php:116:			$sev_res = $sevStmt->get_result();
getAreaSeparated.php:118:			$obj = $sev_res->fetch_assoc();
getAreaSeparated.php:120:			$sevStmt->close();
getAreaSeparated.php:177:  $imagesStmt->close();
getAreaSeparated.php:191:        return ($a[4] < $b[4]) ? -1 : 1;
getAreaSeparated.php:193:    return ($a[2] < $b[2]) ? -1 : 1;
getAreaSeparated.php:207:		"errorMessage" => $e->getMessage()
getCSV.php:5:error_reporting(-1);
getCSV.php:14:  header('Content-Type: application/csv');
getCSV.php:15:  header('Content-Disposition: attachment; filename="'.$filename.'";');
getCSV.php:18:  // see http://www.php.net/manual/en/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq
getCSV.php:23:  $stmt = $conn->prepare("SELECT m.mark_id as mark_id, m.image_id as image_id, m.author as author, m.path as path, m.poor_quality as poor_quality, i.path as name FROM MarkedData m, Images i where i.image_id = m.image_id AND m.author = 'jstimes'");
getCSV.php:24:  //$stmt->bind_param("s", $author);
getCSV.php:25:  $stmt->execute();
getCSV.php:26:  $res = $stmt->get_result();
getCSV.php:31:  while ($row = $res->fetch_assoc()) {
getCSV.php:77:	  $sev_stmt = $conn->prepare("SELECT disease, severity FROM Severity WHERE mark_id = ?");
getCSV.php:78:	  $sev_stmt->bind_param("i", $mark_id);
getCSV.php:79:	  $sev_stmt->execute();
getCSV.php:80:	  $sev_res = $sev_stmt->get_result();
getCSV.php:82:	  while ($sev_row = $sev_res->fetch_assoc()) {
getCSV.php:86:	  $sev_stmt->close();
getCSV.php:89:  $stmt->close();
getCSV.php:99:    "errorMessage" => $e->getMessage()
getProgress.php:4:error_reporting(-1);
getProgress.php:12:  $stmt = $conn->prepare("SELECT COUNT(*) as cnt FROM MarkedData WHERE author = ?");
getProgress.php:13:  $stmt->bind_param("s", $user);
getProgress.php:14:  $stmt->execute();
getProgress.php:16:  $res = $stmt->get_result();
getProgress.php:17:  $row = $res->fetch_assoc();
getProgress.php:19:  $stmt->close();
getProgress.php:21:  $stmt = $conn->prepare("SELECT COUNT(*) as cnt FROM Images");
getProgress.php:22:  $stmt->execute();
getProgress.php:24:  $res = $stmt->get_result();
getProgress.php:25:  $row = $res->fetch_assoc();
getProgress.php:27:  $stmt->close();
getProgress.php:42:  echo json_encode(array ("errorMessage" => $e->getMessage()));
vendor/psy/psysh/Makefile:2:PSYSH_SRC_FILES = $(shell find src -type f -name "*.php")
vendor/psy/psysh/Makefile:3:VERSION = $(shell git describe --tag --always --dirty=-dev)
vendor/psy/psysh/Makefile:5:COMPOSER_OPTS = --no-interaction --no-progress --verbose
vendor/psy/psysh/Makefile:6:COMPOSER_REQUIRE_OPTS = $(COMPOSER_OPTS) --no-update
vendor/psy/psysh/Makefile:7:COMPOSER_UPDATE_OPTS = $(COMPOSER_OPTS) --prefer-stable --no-dev --classmap-authoritative --prefer-dist
vendor/psy/psysh/Makefile:17:	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[32m%-7s\033[0m %s\n", $$1, $$2}'
vendor/psy/psysh/Makefile:20:	rm -rf build/*
vendor/psy/psysh/Makefile:21:	rm -rf dist/*
vendor/psy/psysh/Makefile:22:	rm -rf vendor-bin/*/vendor/
vendor/psy/psysh/Makefile:25:build: build/psysh/psysh build/psysh-compat/psysh build/psysh-php54/psysh build/psysh-php54-compat/psysh
vendor/psy/psysh/Makefile:28:dist: dist/psysh-$(VERSION).tar.gz dist/psysh-$(VERSION)-compat.tar.gz dist/psysh-$(VERSION)-php54.tar.gz dist/psysh-$(VERSION)-php54-compat.tar.gz
vendor/psy/psysh/Makefile:48:build/stub: bin/build-stub bin/psysh LICENSE
vendor/psy/psysh/Makefile:49:	bin/build-stub
vendor/psy/psysh/Makefile:52:	rm -rf $@ || true
vendor/psy/psysh/Makefile:54:	cp -R $(PSYSH_SRC) $@/
vendor/psy/psysh/Makefile:55:	composer config --working-dir $@ platform.php 7.0
vendor/psy/psysh/Makefile:56:	composer require --working-dir $@ $(COMPOSER_REQUIRE_OPTS) php:'>=7.0.0'
vendor/psy/psysh/Makefile:57:	composer update --working-dir $@ $(COMPOSER_UPDATE_OPTS)
vendor/psy/psysh/Makefile:59:build/psysh-compat: $(PSYSH_SRC) $(PSYSH_SRC_FILES)
vendor/psy/psysh/Makefile:60:	rm -rf $@ || true
vendor/psy/psysh/Makefile:62:	cp -R $(PSYSH_SRC) $@/
vendor/psy/psysh/Makefile:63:	composer config --working-dir $@ platform.php 7.0
vendor/psy/psysh/Makefile:64:	composer require --working-dir $@ $(COMPOSER_REQUIRE_OPTS) php:'>=7.0.0'
vendor/psy/psysh/Makefile:65:	composer require --working-dir $@ $(COMPOSER_REQUIRE_OPTS) symfony/polyfill-iconv symfony/polyfill-mbstring hoa/console
vendor/psy/psysh/Makefile:66:	composer update --working-dir $@ $(COMPOSER_UPDATE_OPTS)
vendor/psy/psysh/Makefile:68:build/psysh-php54: $(PSYSH_SRC) $(PSYSH_SRC_FILES)
vendor/psy/psysh/Makefile:69:	rm -rf $@ || true
vendor/psy/psysh/Makefile:71:	cp -R $(PSYSH_SRC) $@/
vendor/psy/psysh/Makefile:72:	composer config --working-dir $@ platform.php 5.4
vendor/psy/psysh/Makefile:73:	composer update --working-dir $@ $(COMPOSER_UPDATE_OPTS)
vendor/psy/psysh/Makefile:75:build/psysh-php54-compat: $(PSYSH_SRC) $(PSYSH_SRC_FILES)
vendor/psy/psysh/Makefile:76:	rm -rf $@ || true
vendor/psy/psysh/Makefile:78:	cp -R $(PSYSH_SRC) $@/
vendor/psy/psysh/Makefile:79:	composer config --working-dir $@ platform.php 5.4
vendor/psy/psysh/Makefile:80:	composer require --working-dir $@ $(COMPOSER_REQUIRE_OPTS) symfony/polyfill-iconv symfony/polyfill-mbstring hoa/console:^2.15
vendor/psy/psysh/Makefile:81:	composer update --working-dir $@ $(COMPOSER_UPDATE_OPTS)
vendor/psy/psysh/Makefile:84:	vendor/bin/box compile --working-dir $(dir $@)
vendor/psy/psysh/Makefile:89:dist/psysh-$(VERSION).tar.gz: build/psysh/psysh
vendor/psy/psysh/Makefile:90:	@mkdir -p $(@D)
vendor/psy/psysh/Makefile:91:	tar -C $(dir $<) -czf $@ $(notdir $<)
vendor/psy/psysh/Makefile:93:dist/psysh-$(VERSION)-%.tar.gz: build/psysh-%/psysh
vendor/psy/psysh/Makefile:94:	@mkdir -p $(@D)
vendor/psy/psysh/Makefile:95:	tar -C $(dir $<) -czf $@ $(notdir $<)
vendor/psy/psysh/composer.json:18:        "symfony/var-dumper": "~2.7|~3.0|~4.0",
vendor/psy/psysh/composer.json:19:        "nikic/php-parser": "~1.3|~2.0|~3.0|~4.0",
vendor/psy/psysh/composer.json:20:        "dnoegel/php-xdg-base-dir": "0.1",
vendor/psy/psysh/composer.json:21:        "jakub-onderka/php-console-highlighter": "0.3.*"
vendor/psy/psysh/composer.json:23:    "require-dev": {
vendor/psy/psysh/composer.json:26:        "bamarni/composer-bin-plugin": "^1.2"
vendor/psy/psysh/composer.json:29:        "ext-pcntl": "Enabling the PCNTL extension makes PsySH a lot happier :)",
vendor/psy/psysh/composer.json:30:        "ext-posix": "If you have PCNTL, you'll want the POSIX extension as well.",
vendor/psy/psysh/composer.json:31:        "ext-readline": "Enables support for arrow-key history navigation, and showing and manipulating command history.",
vendor/psy/psysh/composer.json:32:        "ext-pdo-sqlite": "The doc command requires SQLite to work.",
vendor/psy/psysh/composer.json:37:        "psr-4": {
vendor/psy/psysh/composer.json:41:    "autoload-dev": {
vendor/psy/psysh/composer.json:42:        "psr-4": {
vendor/psy/psysh/composer.json:48:        "branch-alias": {
vendor/psy/psysh/composer.json:49:            "dev-develop": "0.9.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.json:2:    "minimum-stability": "dev",
vendor/psy/psysh/vendor-bin/box/composer.json:3:    "prefer-stable": true,
vendor/psy/psysh/vendor-bin/box/composer.lock:4:        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
vendor/psy/psysh/vendor-bin/box/composer.lock:7:    "content-hash": "d98ffe050f0ba4e81c2d1a98ca945200",
vendor/psy/psysh/vendor-bin/box/composer.lock:26:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:27:                "amphp/phpunit-util": "^1",
vendor/psy/psysh/vendor-bin/box/composer.lock:28:                "friendsofphp/php-cs-fixer": "^2.3",
vendor/psy/psysh/vendor-bin/box/composer.lock:35:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:36:                    "dev-master": "2.0.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:40:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:48:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:70:            "description": "A non-blocking concurrency framework for PHP applications.",
vendor/psy/psysh/vendor-bin/box/composer.lock:78:                "event-loop",
vendor/psy/psysh/vendor-bin/box/composer.lock:80:                "non-blocking",
vendor/psy/psysh/vendor-bin/box/composer.lock:83:            "time": "2018-04-30T20:49:57+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:86:            "name": "amphp/byte-stream",
vendor/psy/psysh/vendor-bin/box/composer.lock:90:                "url": "https://github.com/amphp/byte-stream.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:95:                "url": "https://api.github.com/repos/amphp/byte-stream/zipball/1b75b122e6f069e7d102eef065dc192119d99ca7",
vendor/psy/psysh/vendor-bin/box/composer.lock:102:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:103:                "amphp/phpunit-util": "^1",
vendor/psy/psysh/vendor-bin/box/composer.lock:104:                "friendsofphp/php-cs-fixer": "^2.3",
vendor/psy/psysh/vendor-bin/box/composer.lock:109:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:116:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:130:            "description": "A stream abstraction to make working with non-blocking I/O simple.",
vendor/psy/psysh/vendor-bin/box/composer.lock:131:            "homepage": "http://amphp.org/byte-stream",
vendor/psy/psysh/vendor-bin/box/composer.lock:137:                "non-blocking",
vendor/psy/psysh/vendor-bin/box/composer.lock:140:            "time": "2018-04-04T05:33:09+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:158:                "amphp/byte-stream": "^1.2",
vendor/psy/psysh/vendor-bin/box/composer.lock:163:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:164:                "amphp/phpunit-util": "^1",
vendor/psy/psysh/vendor-bin/box/composer.lock:165:                "friendsofphp/php-cs-fixer": "^2.3",
vendor/psy/psysh/vendor-bin/box/composer.lock:169:                "ext-pthreads": "Required for thread contexts"
vendor/psy/psysh/vendor-bin/box/composer.lock:173:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:180:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:200:                "multi-processing",
vendor/psy/psysh/vendor-bin/box/composer.lock:201:                "multi-threading"
vendor/psy/psysh/vendor-bin/box/composer.lock:203:            "time": "2018-03-21T14:37:51+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:206:            "name": "amphp/parallel-functions",
vendor/psy/psysh/vendor-bin/box/composer.lock:210:                "url": "https://github.com/amphp/parallel-functions.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:215:                "url": "https://api.github.com/repos/amphp/parallel-functions/zipball/999ba8a00adaf4d1fd3a7cb40bf7e565e507ff48",
vendor/psy/psysh/vendor-bin/box/composer.lock:225:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:226:                "amphp/phpunit-util": "^1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:227:                "friendsofphp/php-cs-fixer": "^2.9",
vendor/psy/psysh/vendor-bin/box/composer.lock:232:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:239:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:250:            "time": "2017-12-17T18:33:29+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:269:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:270:                "friendsofphp/php-cs-fixer": "^2.3",
vendor/psy/psysh/vendor-bin/box/composer.lock:275:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:279:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:297:                "non-blocking",
vendor/psy/psysh/vendor-bin/box/composer.lock:301:            "time": "2017-06-06T05:29:10+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:319:                "amphp/byte-stream": "^1",
vendor/psy/psysh/vendor-bin/box/composer.lock:322:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:323:                "amphp/phpunit-util": "^1",
vendor/psy/psysh/vendor-bin/box/composer.lock:324:                "friendsofphp/php-cs-fixer": "^2.3",
vendor/psy/psysh/vendor-bin/box/composer.lock:329:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:336:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:356:            "time": "2018-04-08T18:55:42+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:375:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:376:                "amphp/phpunit-util": "^1",
vendor/psy/psysh/vendor-bin/box/composer.lock:377:                "friendsofphp/php-cs-fixer": "^2.3",
vendor/psy/psysh/vendor-bin/box/composer.lock:382:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:389:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:412:            "time": "2017-11-29T21:48:53+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:429:                "ext-mbstring": "*",
vendor/psy/psysh/vendor-bin/box/composer.lock:432:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:433:                "friendsofphp/php-cs-fixer": "^2.1.1",
vendor/psy/psysh/vendor-bin/box/composer.lock:438:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:445:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:447:                "BSD-2-Clause"
vendor/psy/psysh/vendor-bin/box/composer.lock:467:            "time": "2018-04-16T11:18:27+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:470:            "name": "composer/ca-bundle",
vendor/psy/psysh/vendor-bin/box/composer.lock:474:                "url": "https://github.com/composer/ca-bundle.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:479:                "url": "https://api.github.com/repos/composer/ca-bundle/zipball/d2c0a83b7533d6912e8d516756ebd34f893e9169",
vendor/psy/psysh/vendor-bin/box/composer.lock:484:                "ext-openssl": "*",
vendor/psy/psysh/vendor-bin/box/composer.lock:485:                "ext-pcre": "*",
vendor/psy/psysh/vendor-bin/box/composer.lock:488:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:495:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:496:                    "dev-master": "1.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:500:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:504:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:523:            "time": "2018-03-29T19:57:20+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:540:                "composer/ca-bundle": "^1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:542:                "composer/spdx-licenses": "^1.2",
vendor/psy/psysh/vendor-bin/box/composer.lock:543:                "justinrainbow/json-schema": "^3.0 || ^4.0 || ^5.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:546:                "seld/cli-prompt": "^1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:548:                "seld/phar-utils": "^1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:557:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:559:                "phpunit/phpunit-mock-objects": "^2.3 || ^3.0"
vendor/psy/psysh/vendor-bin/box/composer.lock:562:                "ext-openssl": "Enabling the openssl extension allows you to access https URLs for repositories and packages",
vendor/psy/psysh/vendor-bin/box/composer.lock:563:                "ext-zip": "Enabling the zip extension allows you to unzip archives",
vendor/psy/psysh/vendor-bin/box/composer.lock:564:                "ext-zlib": "Allow gzip compression of HTTP requests"
vendor/psy/psysh/vendor-bin/box/composer.lock:571:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:572:                    "dev-master": "1.6-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:576:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:580:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:603:            "time": "2018-05-04T09:44:59+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:622:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:624:                "phpunit/phpunit-mock-objects": "2.3.0 || ^3.0"
vendor/psy/psysh/vendor-bin/box/composer.lock:628:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:629:                    "dev-master": "1.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:633:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:637:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:665:            "time": "2016-08-30T16:08:34+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:668:            "name": "composer/spdx-licenses",
vendor/psy/psysh/vendor-bin/box/composer.lock:672:                "url": "https://github.com/composer/spdx-licenses.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:677:                "url": "https://api.github.com/repos/composer/spdx-licenses/zipball/cb17687e9f936acd7e7245ad3890f953770dec1b",
vendor/psy/psysh/vendor-bin/box/composer.lock:684:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:686:                "phpunit/phpunit-mock-objects": "2.3.0 || ^3.0"
vendor/psy/psysh/vendor-bin/box/composer.lock:690:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:691:                    "dev-master": "1.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:695:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:699:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:726:            "time": "2018-04-30T10:33:04+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:729:            "name": "composer/xdebug-handler",
vendor/psy/psysh/vendor-bin/box/composer.lock:733:                "url": "https://github.com/composer/xdebug-handler.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:738:                "url": "https://api.github.com/repos/composer/xdebug-handler/zipball/c919dc6c62e221fc6406f861ea13433c0aa24f08",
vendor/psy/psysh/vendor-bin/box/composer.lock:746:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:751:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:755:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:762:                    "email": "john-stevenson@blueyonder.co.uk"
vendor/psy/psysh/vendor-bin/box/composer.lock:770:            "time": "2018-04-11T15:42:36+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:790:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:796:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:797:                    "dev-master": "1.6.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:801:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:805:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:812:                    "email": "roman@code-factory.org"
vendor/psy/psysh/vendor-bin/box/composer.lock:832:            "homepage": "http://www.doctrine-project.org",
vendor/psy/psysh/vendor-bin/box/composer.lock:838:            "time": "2017-12-06T07:11:42+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:859:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:860:                    "dev-master": "1.0.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:864:                "psr-0": {
vendor/psy/psysh/vendor-bin/box/composer.lock:868:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:875:                    "email": "roman@code-factory.org"
vendor/psy/psysh/vendor-bin/box/composer.lock:886:            "description": "Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.",
vendor/psy/psysh/vendor-bin/box/composer.lock:887:            "homepage": "http://www.doctrine-project.org",
vendor/psy/psysh/vendor-bin/box/composer.lock:892:            "time": "2014-09-09T13:34:57+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:895:            "name": "herrera-io/annotations",
vendor/psy/psysh/vendor-bin/box/composer.lock:899:                "url": "https://github.com/kherge-abandoned/php-annotations.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:904:                "url": "https://api.github.com/repos/kherge-abandoned/php-annotations/zipball/7d8b9a536da7f12aad8de7f28b2cb5266bde8da1",
vendor/psy/psysh/vendor-bin/box/composer.lock:912:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:913:                "herrera-io/phpunit-test-case": "1.*",
vendor/psy/psysh/vendor-bin/box/composer.lock:918:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:919:                    "dev-master": "1.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:923:                "psr-0": {
vendor/psy/psysh/vendor-bin/box/composer.lock:927:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:939:            "homepage": "https://github.com/herrera-io/php-annotations",
vendor/psy/psysh/vendor-bin/box/composer.lock:946:            "time": "2014-02-03T17:34:08+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:950:            "version": "3.0.0-alpha.5",
vendor/psy/psysh/vendor-bin/box/composer.lock:963:                "amphp/parallel-functions": "^0.1.2",
vendor/psy/psysh/vendor-bin/box/composer.lock:966:                "composer/xdebug-handler": "^1.1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:967:                "ext-phar": "*",
vendor/psy/psysh/vendor-bin/box/composer.lock:968:                "herrera-io/annotations": "~1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:969:                "humbug/php-scoper": "^1.0@dev",
vendor/psy/psysh/vendor-bin/box/composer.lock:970:                "justinrainbow/json-schema": "^5.2",
vendor/psy/psysh/vendor-bin/box/composer.lock:978:                "symfony/var-dumper": "^3.4 || ^4.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:979:                "webmozart/path-util": "^2.3"
vendor/psy/psysh/vendor-bin/box/composer.lock:981:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:982:                "bamarni/composer-bin-plugin": "^1.2",
vendor/psy/psysh/vendor-bin/box/composer.lock:988:                "ext-openssl": "To accelerate private key generation."
vendor/psy/psysh/vendor-bin/box/composer.lock:995:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:996:                    "dev-master": "3.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:998:                "bamarni-bin": {
vendor/psy/psysh/vendor-bin/box/composer.lock:999:                    "bin-links": false
vendor/psy/psysh/vendor-bin/box/composer.lock:1003:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1010:                "exclude-from-classmap": [
vendor/psy/psysh/vendor-bin/box/composer.lock:1014:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1033:            "time": "2018-05-04T22:04:10+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1036:            "name": "humbug/php-scoper",
vendor/psy/psysh/vendor-bin/box/composer.lock:1037:            "version": "dev-master",
vendor/psy/psysh/vendor-bin/box/composer.lock:1040:                "url": "https://github.com/humbug/php-scoper.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:1045:                "url": "https://api.github.com/repos/humbug/php-scoper/zipball/450fe36a7457847d0cb431e7379b5df9d05992a4",
vendor/psy/psysh/vendor-bin/box/composer.lock:1050:                "nikic/php-parser": "^3.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1051:                "ocramius/package-versions": "^1.1",
vendor/psy/psysh/vendor-bin/box/composer.lock:1052:                "padraic/phar-updater": "^1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1054:                "roave/better-reflection": "^2.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1059:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1060:                "bamarni/composer-bin-plugin": "^1.1",
vendor/psy/psysh/vendor-bin/box/composer.lock:1064:                "bin/php-scoper"
vendor/psy/psysh/vendor-bin/box/composer.lock:1068:                "bamarni-bin": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1069:                    "bin-links": false
vendor/psy/psysh/vendor-bin/box/composer.lock:1071:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1072:                    "dev-master": "1.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1079:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1083:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1102:            "time": "2018-04-25T21:59:07+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1105:            "name": "justinrainbow/json-schema",
vendor/psy/psysh/vendor-bin/box/composer.lock:1109:                "url": "https://github.com/justinrainbow/json-schema.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:1114:                "url": "https://api.github.com/repos/justinrainbow/json-schema/zipball/8560d4314577199ba51bf2032f02cd1315587c23",
vendor/psy/psysh/vendor-bin/box/composer.lock:1121:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1122:                "friendsofphp/php-cs-fixer": "^2.1",
vendor/psy/psysh/vendor-bin/box/composer.lock:1123:                "json-schema/json-schema-test-suite": "1.2.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1127:                "bin/validate-json"
vendor/psy/psysh/vendor-bin/box/composer.lock:1131:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1132:                    "dev-master": "5.0.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1136:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1140:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1163:            "homepage": "https://github.com/justinrainbow/json-schema",
vendor/psy/psysh/vendor-bin/box/composer.lock:1168:            "time": "2018-02-14T22:26:30+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1187:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1196:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1198:                "BSD-3-Clause"
vendor/psy/psysh/vendor-bin/box/composer.lock:1212:            "time": "2017-11-10T22:56:03+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1215:            "name": "nikic/php-parser",
vendor/psy/psysh/vendor-bin/box/composer.lock:1219:                "url": "https://github.com/nikic/PHP-Parser.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:1224:                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/bb87e28e7d7b8d9a7fda231d37457c9210faf6ce",
vendor/psy/psysh/vendor-bin/box/composer.lock:1229:                "ext-tokenizer": "*",
vendor/psy/psysh/vendor-bin/box/composer.lock:1232:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1236:                "bin/php-parse"
vendor/psy/psysh/vendor-bin/box/composer.lock:1240:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1241:                    "dev-master": "3.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1245:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1249:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1251:                "BSD-3-Clause"
vendor/psy/psysh/vendor-bin/box/composer.lock:1263:            "time": "2018-02-28T20:30:58+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1266:            "name": "ocramius/package-versions",
vendor/psy/psysh/vendor-bin/box/composer.lock:1280:                "composer-plugin-api": "^1.0.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1283:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1285:                "ext-zip": "*",
vendor/psy/psysh/vendor-bin/box/composer.lock:1289:            "type": "composer-plugin",
vendor/psy/psysh/vendor-bin/box/composer.lock:1292:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1293:                    "dev-master": "2.0.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1297:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1301:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1312:            "time": "2018-02-05T13:05:30+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1331:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1337:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1338:                    "dev-master": "3.0.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1342:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1349:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1369:            "time": "2018-02-23T08:08:14+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1386:                "composer/ca-bundle": "^1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1387:                "ext-openssl": "*",
vendor/psy/psysh/vendor-bin/box/composer.lock:1390:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1391:                "bamarni/composer-bin-plugin": "^1.1",
vendor/psy/psysh/vendor-bin/box/composer.lock:1397:                "bamarni-bin": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1398:                    "bin-links": false
vendor/psy/psysh/vendor-bin/box/composer.lock:1400:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1401:                    "dev-master": "2.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1405:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1413:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1415:                "BSD-3-Clause"
vendor/psy/psysh/vendor-bin/box/composer.lock:1438:            "time": "2018-02-12T18:47:17+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1441:            "name": "padraic/phar-updater",
vendor/psy/psysh/vendor-bin/box/composer.lock:1445:                "url": "https://github.com/humbug/phar-updater.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:1450:                "url": "https://api.github.com/repos/humbug/phar-updater/zipball/d01d3b8f26e541ac9b9eeba1e18d005d852f7ff1",
vendor/psy/psysh/vendor-bin/box/composer.lock:1458:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1463:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1464:                    "dev-master": "1.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1468:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1472:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1474:                "BSD-3-Clause"
vendor/psy/psysh/vendor-bin/box/composer.lock:1483:            "description": "A thing to make PHAR self-updating easy and secure.",
vendor/psy/psysh/vendor-bin/box/composer.lock:1487:                "self-update",
vendor/psy/psysh/vendor-bin/box/composer.lock:1490:            "time": "2018-03-30T12:52:15+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1493:            "name": "phpdocumentor/reflection-common",
vendor/psy/psysh/vendor-bin/box/composer.lock:1509:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1514:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1515:                    "dev-master": "1.0.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1519:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1525:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1544:            "time": "2017-09-11T18:02:19+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1547:            "name": "phpdocumentor/reflection-docblock",
vendor/psy/psysh/vendor-bin/box/composer.lock:1562:                "phpdocumentor/reflection-common": "^1.0.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1563:                "phpdocumentor/type-resolver": "^0.4.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1566:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1573:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1574:                    "dev-master": "4.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1578:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1584:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1595:            "time": "2017-11-30T07:14:17+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1598:            "name": "phpdocumentor/type-resolver",
vendor/psy/psysh/vendor-bin/box/composer.lock:1613:                "phpdocumentor/reflection-common": "^1.0"
vendor/psy/psysh/vendor-bin/box/composer.lock:1615:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1621:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1622:                    "dev-master": "1.0.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1626:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1632:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1642:            "time": "2017-07-14T14:27:02+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1661:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1668:                "ext-gmp": "Install the GMP (GNU Multiple Precision) extension in order to speed up arbitrary precision integer arithmetic operations.",
vendor/psy/psysh/vendor-bin/box/composer.lock:1669:                "ext-libsodium": "SSH2/SFTP can make use of some algorithms provided by the libsodium-php extension.",
vendor/psy/psysh/vendor-bin/box/composer.lock:1670:                "ext-mcrypt": "Install the Mcrypt extension in order to speed up a few other cryptographic operations.",
vendor/psy/psysh/vendor-bin/box/composer.lock:1671:                "ext-openssl": "Install the OpenSSL extension in order to speed up a wide variety of cryptographic operations."
vendor/psy/psysh/vendor-bin/box/composer.lock:1678:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1682:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1703:                    "name": "Hans-Jürgen Petrich",
vendor/psy/psysh/vendor-bin/box/composer.lock:1704:                    "email": "petrich@tronic-media.com",
vendor/psy/psysh/vendor-bin/box/composer.lock:1709:                    "email": "graham@alt-three.com",
vendor/psy/psysh/vendor-bin/box/composer.lock:1713:            "description": "PHP Secure Communications Library - Pure-PHP implementations of RSA, AES, SSH2, SFTP, X.509 etc.",
vendor/psy/psysh/vendor-bin/box/composer.lock:1734:            "time": "2018-04-15T16:55:05+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1741:                "url": "https://github.com/php-fig/log.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:1746:                "url": "https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
vendor/psy/psysh/vendor-bin/box/composer.lock:1755:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1756:                    "dev-master": "1.0.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1760:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1764:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1770:                    "name": "PHP-FIG",
vendor/psy/psysh/vendor-bin/box/composer.lock:1771:                    "homepage": "http://www.php-fig.org/"
vendor/psy/psysh/vendor-bin/box/composer.lock:1775:            "homepage": "https://github.com/php-fig/log",
vendor/psy/psysh/vendor-bin/box/composer.lock:1779:                "psr-3"
vendor/psy/psysh/vendor-bin/box/composer.lock:1781:            "time": "2016-10-10T12:19:37+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1784:            "name": "roave/better-reflection",
vendor/psy/psysh/vendor-bin/box/composer.lock:1798:                "nikic/php-parser": "^3.1.1",
vendor/psy/psysh/vendor-bin/box/composer.lock:1800:                "phpdocumentor/reflection-docblock": "^4.1.1",
vendor/psy/psysh/vendor-bin/box/composer.lock:1801:                "phpdocumentor/type-resolver": "^0.4.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:1804:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1812:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1816:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1842:            "description": "Better Reflection - an improved code reflection API",
vendor/psy/psysh/vendor-bin/box/composer.lock:1843:            "time": "2018-02-05T08:08:57+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1862:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1867:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1871:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1876:            "time": "2017-02-17T13:53:21+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1879:            "name": "seld/cli-prompt",
vendor/psy/psysh/vendor-bin/box/composer.lock:1883:                "url": "https://github.com/Seldaek/cli-prompt.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:1888:                "url": "https://api.github.com/repos/Seldaek/cli-prompt/zipball/a19a7376a4689d4d94cab66ab4f3c816019ba8dd",
vendor/psy/psysh/vendor-bin/box/composer.lock:1897:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1898:                    "dev-master": "1.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1902:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1906:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1924:            "time": "2017-03-18T11:32:45+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1943:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1951:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1955:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:1973:            "time": "2018-01-24T12:46:19+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:1976:            "name": "seld/phar-utils",
vendor/psy/psysh/vendor-bin/box/composer.lock:1980:                "url": "https://github.com/Seldaek/phar-utils.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:1985:                "url": "https://api.github.com/repos/Seldaek/phar-utils/zipball/7009b5139491975ef6486545a39f3e6dad5ac30a",
vendor/psy/psysh/vendor-bin/box/composer.lock:1994:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:1995:                    "dev-master": "1.x-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:1999:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2003:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2017:            "time": "2015-10-13T18:44:15+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2035:                "symfony/polyfill-mbstring": "~1.0"
vendor/psy/psysh/vendor-bin/box/composer.lock:2038:                "symfony/dependency-injection": "<3.4",
vendor/psy/psysh/vendor-bin/box/composer.lock:2041:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2044:                "symfony/dependency-injection": "~3.4|~4.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:2045:                "symfony/event-dispatcher": "~3.4|~4.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:2050:                "psr/log-implementation": "For using the console logger",
vendor/psy/psysh/vendor-bin/box/composer.lock:2051:                "symfony/event-dispatcher": "",
vendor/psy/psysh/vendor-bin/box/composer.lock:2057:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2058:                    "dev-master": "4.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2062:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2065:                "exclude-from-classmap": [
vendor/psy/psysh/vendor-bin/box/composer.lock:2069:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2085:            "time": "2018-04-30T01:23:47+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2106:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2107:                    "dev-master": "4.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2111:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2114:                "exclude-from-classmap": [
vendor/psy/psysh/vendor-bin/box/composer.lock:2118:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2134:            "time": "2018-02-22T10:50:29+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2155:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2156:                    "dev-master": "4.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2160:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2163:                "exclude-from-classmap": [
vendor/psy/psysh/vendor-bin/box/composer.lock:2167:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2183:            "time": "2018-04-04T05:10:37+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2186:            "name": "symfony/polyfill-mbstring",
vendor/psy/psysh/vendor-bin/box/composer.lock:2190:                "url": "https://github.com/symfony/polyfill-mbstring.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:2195:                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/3296adf6a6454a050679cde90f95350ad604b171",
vendor/psy/psysh/vendor-bin/box/composer.lock:2203:                "ext-mbstring": "For best performance"
vendor/psy/psysh/vendor-bin/box/composer.lock:2207:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2208:                    "dev-master": "1.8-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2212:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2219:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2242:            "time": "2018-04-26T10:06:28+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2245:            "name": "symfony/polyfill-php72",
vendor/psy/psysh/vendor-bin/box/composer.lock:2249:                "url": "https://github.com/symfony/polyfill-php72.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:2254:                "url": "https://api.github.com/repos/symfony/polyfill-php72/zipball/a4576e282d782ad82397f3e4ec1df8e0f0cafb46",
vendor/psy/psysh/vendor-bin/box/composer.lock:2263:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2264:                    "dev-master": "1.8-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2268:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2275:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2297:            "time": "2018-04-26T10:06:28+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2318:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2319:                    "dev-master": "4.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2323:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2326:                "exclude-from-classmap": [
vendor/psy/psysh/vendor-bin/box/composer.lock:2330:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2346:            "time": "2018-04-03T05:24:00+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2349:            "name": "symfony/var-dumper",
vendor/psy/psysh/vendor-bin/box/composer.lock:2353:                "url": "https://github.com/symfony/var-dumper.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:2358:                "url": "https://api.github.com/repos/symfony/var-dumper/zipball/3c34cf3f4bbac9e003d9325225e9ef1a49180a18",
vendor/psy/psysh/vendor-bin/box/composer.lock:2364:                "symfony/polyfill-mbstring": "~1.0",
vendor/psy/psysh/vendor-bin/box/composer.lock:2365:                "symfony/polyfill-php72": "~1.5"
vendor/psy/psysh/vendor-bin/box/composer.lock:2370:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2371:                "ext-iconv": "*",
vendor/psy/psysh/vendor-bin/box/composer.lock:2375:                "ext-iconv": "To convert non-UTF-8 strings to UTF-8 (or symfony/polyfill-iconv in case ext-iconv cannot be used).",
vendor/psy/psysh/vendor-bin/box/composer.lock:2376:                "ext-intl": "To show region name in time zone dump"
vendor/psy/psysh/vendor-bin/box/composer.lock:2380:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2381:                    "dev-master": "4.0-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2388:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2391:                "exclude-from-classmap": [
vendor/psy/psysh/vendor-bin/box/composer.lock:2395:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2415:            "time": "2018-04-26T16:12:06+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2434:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2440:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2441:                    "dev-master": "1.3-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2445:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2449:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2465:            "time": "2018-01-29T19:49:41+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2468:            "name": "webmozart/path-util",
vendor/psy/psysh/vendor-bin/box/composer.lock:2472:                "url": "https://github.com/webmozart/path-util.git",
vendor/psy/psysh/vendor-bin/box/composer.lock:2477:                "url": "https://api.github.com/repos/webmozart/path-util/zipball/d939f7edc24c9a1bb9c0dee5cb05d8e859490725",
vendor/psy/psysh/vendor-bin/box/composer.lock:2485:            "require-dev": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2491:                "branch-alias": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2492:                    "dev-master": "2.3-dev"
vendor/psy/psysh/vendor-bin/box/composer.lock:2496:                "psr-4": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2500:            "notification-url": "https://packagist.org/downloads/",
vendor/psy/psysh/vendor-bin/box/composer.lock:2510:            "description": "A robust cross-platform utility for normalizing, comparing and modifying file paths.",
vendor/psy/psysh/vendor-bin/box/composer.lock:2511:            "time": "2015-12-17T08:42:14+00:00"
vendor/psy/psysh/vendor-bin/box/composer.lock:2514:    "packages-dev": [],
vendor/psy/psysh/vendor-bin/box/composer.lock:2516:    "minimum-stability": "dev",
vendor/psy/psysh/vendor-bin/box/composer.lock:2517:    "stability-flags": {
vendor/psy/psysh/vendor-bin/box/composer.lock:2520:    "prefer-stable": true,
vendor/psy/psysh/vendor-bin/box/composer.lock:2521:    "prefer-lowest": false,
vendor/psy/psysh/vendor-bin/box/composer.lock:2523:    "platform-dev": []
vendor/psy/psysh/.phan/config.php:15:    // Thus, both first-party and third-party code being used by
vendor/psy/psysh/.phan/config.php:19:        'vendor/dnoegel/php-xdg-base-dir/src/',
vendor/psy/psysh/.phan/config.php:22:        'vendor/jakub-onderka/php-console-color/src/',
vendor/psy/psysh/.phan/config.php:23:        'vendor/jakub-onderka/php-console-highlighter/src/',
vendor/psy/psysh/.phan/config.php:24:        'vendor/nikic/php-parser/lib/',
vendor/psy/psysh/.phan/config.php:25:        'vendor/phpdocumentor/reflection-docblock/',
vendor/psy/psysh/.phan/config.php:29:        'vendor/symfony/var-dumper/',
vendor/psy/psysh/.phan/config.php:37:    // third-party code (such as "vendor/") in this list.
vendor/psy/psysh/README.md:6:[![Package version](https://img.shields.io/packagist/v/psy/psysh.svg?style=flat-square)](https://packagist.org/packages/psy/psysh)
vendor/psy/psysh/README.md:7:[![Monthly downloads](http://img.shields.io/packagist/dm/psy/psysh.svg?style=flat-square)](https://packagist.org/packages/psy/psysh)
vendor/psy/psysh/README.md:8:[![Made out of awesome](https://img.shields.io/badge/made_out_of_awesome-✓-brightgreen.svg?style=flat-square)](http://psysh.org)
vendor/psy/psysh/README.md:10:[![Build status](https://img.shields.io/travis/bobthecow/psysh/master.svg?style=flat-square)](http://travis-ci.org/bobthecow/psysh)
vendor/psy/psysh/README.md:14:<a id="downloading-the-manual"></a>
vendor/psy/psysh/README.md:19: * [📕 PHP manual installation](https://github.com/bobthecow/psysh/wiki/PHP-manual)
vendor/psy/psysh/README.md:20: * <a class="internal present" href="https://github.com/bobthecow/psysh/wiki/Windows"><img src="https://user-images.githubusercontent.com/53660/40878809-407e8368-664b-11e8-8455-f11602c41dfe.png" width="18"> Windows</a>
vendor/psy/psysh/README.md:23: * [✨ Magic variables](https://github.com/bobthecow/psysh/wiki/Magic-variables)
vendor/psy/psysh/README.md:25: * [💲 System shell integration](https://github.com/bobthecow/psysh/wiki/Shell-integration)
vendor/psy/psysh/README.md:31: * [🎛 Config options](https://github.com/bobthecow/psysh/wiki/Config-options)
vendor/psy/psysh/README.md:32: * [📄 Sample config file](https://github.com/bobthecow/psysh/wiki/Sample-config)
vendor/psy/psysh/.php_cs:4:    ->in(__DIR__)
vendor/psy/psysh/.php_cs:5:    ->name('.php_cs')
vendor/psy/psysh/.php_cs:6:    ->name('build-manual')
vendor/psy/psysh/.php_cs:7:    ->name('build-phar')
vendor/psy/psysh/.php_cs:8:    ->exclude('build-vendor');
vendor/psy/psysh/.php_cs:13:(c) 2012-2018 Justin Hileman
vendor/psy/psysh/.php_cs:20:    ->setRules(array(
vendor/psy/psysh/.php_cs:32:    ->setFinder($finder);
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:22:        $this->assertInstanceOf('Psy\Exception\Exception', $e);
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:23:        $this->assertInstanceOf('Psy\Exception\TypeErrorException', $e);
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:25:        $this->assertEquals('TypeError: {{message}}', $e->getMessage());
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:26:        $this->assertEquals('{{message}}', $e->getRawMessage());
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:27:        $this->assertEquals(13, $e->getCode());
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:34:        $this->assertEquals($message, $e->getRawMessage());
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:35:        $this->assertEquals('TypeError: Something or other', $e->getMessage());
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:41:            $this->markTestSkipped();
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:47:        $this->assertInstanceOf('Psy\Exception\TypeErrorException', $e);
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:48:        $this->assertEquals('TypeError: {{message}}', $e->getMessage());
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:49:        $this->assertEquals('{{message}}', $e->getRawMessage());
vendor/psy/psysh/test/Exception/TypeErrorExceptionTest.php:50:        $this->assertEquals(13, $e->getCode());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:23:        $this->assertInstanceOf('Psy\Exception\Exception', $e);
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:24:        $this->assertInstanceOf('Psy\Exception\ThrowUpException', $e);
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:26:        $this->assertEquals("Throwing Exception with message '{{message}}'", $e->getMessage());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:27:        $this->assertEquals('{{message}}', $e->getRawMessage());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:28:        $this->assertEquals(123, $e->getCode());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:29:        $this->assertSame($previous, $e->getPrevious());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:37:        $this->assertInstanceOf('Psy\Exception\ThrowUpException', $e);
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:38:        $this->assertSame($previous, $e->getPrevious());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:44:            $this->markTestSkipped();
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:50:        $this->assertInstanceOf('Psy\Exception\ThrowUpException', $e);
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:51:        $this->assertInstanceOf('Psy\Exception\ErrorException', $e->getPrevious());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:53:        $this->assertNotSame($previous, $e->getPrevious());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:54:        $this->assertSame($previous, $e->getPrevious()->getPrevious());
vendor/psy/psysh/test/Exception/ThrowUpExceptionTest.php:59:     * @expectedExceptionMessage throw-up can only throw Exceptions and Errors
vendor/psy/psysh/test/Exception/ParseErrorExceptionTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Exception/ParseErrorExceptionTest.php:22:        $this->assertInstanceOf('Psy\Exception\Exception', $e);
vendor/psy/psysh/test/Exception/ParseErrorExceptionTest.php:23:        $this->assertInstanceOf('PhpParser\Error', $e);
vendor/psy/psysh/test/Exception/ParseErrorExceptionTest.php:24:        $this->assertInstanceOf('Psy\Exception\ParseErrorException', $e);
vendor/psy/psysh/test/Exception/ParseErrorExceptionTest.php:31:        $this->assertContains('{msg}', $e->getMessage());
vendor/psy/psysh/test/Exception/ParseErrorExceptionTest.php:32:        $this->assertContains('PHP Parse error:', $e->getMessage());
vendor/psy/psysh/test/Exception/ParseErrorExceptionTest.php:39:        $this->assertContains('{msg}', $e->getRawMessage());
vendor/psy/psysh/test/Exception/ParseErrorExceptionTest.php:40:        $this->assertContains('PHP Parse error:', $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:22:        $this->assertInstanceOf('Psy\Exception\Exception', $e);
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:23:        $this->assertInstanceOf('ErrorException', $e);
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:24:        $this->assertInstanceOf('Psy\Exception\ErrorException', $e);
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:31:        $this->assertContains('foo', $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:32:        $this->assertSame('foo', $e->getRawMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:41:        $this->assertContains('PHP ' . $type, $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:52:            $this->assertContains('PHP ' . $type, $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:53:            $this->assertContains('{whot}', $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:54:            $this->assertContains('in {file}', $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:55:            $this->assertContains('on line 13', $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:83:            $this->assertContains('PHP ' . $type, $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:84:            $this->assertContains('{whot}', $e->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:102:        $this->assertEmpty($e->getFile());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:105:        $this->assertEmpty($e->getFile());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:108:        $this->assertNotEmpty($e->getFile());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:114:            $this->markTestSkipped();
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:120:        $this->assertContains('PHP Error:  {{message}}', $exception->getMessage());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:121:        $this->assertEquals(0, $exception->getCode());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:122:        $this->assertEquals($error->getFile(), $exception->getFile());
vendor/psy/psysh/test/Exception/ErrorExceptionTest.php:123:        $this->assertSame($exception->getPrevious(), $error);
vendor/psy/psysh/test/Exception/BreakExceptionTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Exception/BreakExceptionTest.php:22:        $this->assertInstanceOf('Psy\Exception\Exception', $e);
vendor/psy/psysh/test/Exception/BreakExceptionTest.php:23:        $this->assertInstanceOf('Psy\Exception\BreakException', $e);
vendor/psy/psysh/test/Exception/BreakExceptionTest.php:30:        $this->assertContains('foo', $e->getMessage());
vendor/psy/psysh/test/Exception/BreakExceptionTest.php:31:        $this->assertSame('foo', $e->getRawMessage());
vendor/psy/psysh/test/Exception/RuntimeExceptionTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Exception/RuntimeExceptionTest.php:23:        $this->assertInstanceOf('Psy\Exception\Exception', $e);
vendor/psy/psysh/test/Exception/RuntimeExceptionTest.php:24:        $this->assertInstanceOf('RuntimeException', $e);
vendor/psy/psysh/test/Exception/RuntimeExceptionTest.php:25:        $this->assertInstanceOf('Psy\Exception\RuntimeException', $e);
vendor/psy/psysh/test/Exception/RuntimeExceptionTest.php:27:        $this->assertSame($msg, $e->getMessage());
vendor/psy/psysh/test/Exception/RuntimeExceptionTest.php:28:        $this->assertSame($msg, $e->getRawMessage());
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:22:        $this->assertInstanceOf('Psy\Exception\Exception', $e);
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:23:        $this->assertInstanceOf('ErrorException', $e);
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:24:        $this->assertInstanceOf('Psy\Exception\FatalErrorException', $e);
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:31:        $this->assertSame('{msg}', $e->getRawMessage());
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:32:        $this->assertContains('{msg}', $e->getMessage());
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:33:        $this->assertContains('{filename}', $e->getMessage());
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:34:        $this->assertContains('line 13', $e->getMessage());
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:41:        $this->assertSame('{msg}', $e->getRawMessage());
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:42:        $this->assertContains('{msg}', $e->getMessage());
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:43:        $this->assertContains('eval()\'d code', $e->getMessage());
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:48:        $e = new FatalErrorException('{msg}', 0, 1, null, -1);
vendor/psy/psysh/test/Exception/FatalErrorExceptionTest.php:49:        $this->assertEquals(0, $e->getLine());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructTest.php:24:        $this->assertEquals($keyword, $refl->getName());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructTest.php:25:        $this->assertEquals($keyword, (string) $refl);
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructTest.php:33:        $this->assertTrue(ReflectionLanguageConstruct::isLanguageConstruct($keyword));
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructTest.php:42:        $this->assertFalse($refl->getFileName());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructTest.php:51:        $this->assertFalse($refl->returnsReference());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructTest.php:60:        $this->assertNotEmpty($refl->getParameters());
vendor/psy/psysh/test/Reflection/ReflectionConstantBCTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Reflection/ReflectionConstantBCTest.php:23:        $this->assertInstanceOf('Psy\Reflection\ReflectionConstant', $refl);
vendor/psy/psysh/test/Reflection/ReflectionConstantBCTest.php:24:        $this->assertInstanceOf('Psy\Reflection\ReflectionClassConstant', $refl);
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:30:        $this->assertNull($refl->getClass());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:31:        $this->assertEquals('one', $refl->getName());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:32:        $this->assertFalse($refl->isArray());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:33:        $this->assertTrue($refl->isDefaultValueAvailable());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:34:        $this->assertNull($refl->getDefaultValue());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:35:        $this->assertFalse($refl->isOptional());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:36:        $this->assertFalse($refl->isPassedByReference());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:44:        $this->assertNull($refl->getClass());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:45:        $this->assertEquals('two', $reflTwo->getName());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:46:        $this->assertTrue($reflTwo->isArray());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:47:        $this->assertFalse($reflTwo->isDefaultValueAvailable());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:48:        $this->assertNull($reflTwo->getDefaultValue());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:49:        $this->assertTrue($reflTwo->isOptional());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:50:        $this->assertTrue($reflTwo->isPassedByReference());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:56:        $this->assertNull($refl->getClass());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:57:        $this->assertEquals('three', $refl->getName());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:58:        $this->assertFalse($refl->isArray());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:59:        $this->assertTrue($refl->isDefaultValueAvailable());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:60:        $this->assertEquals(3, $refl->getDefaultValue());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:61:        $this->assertFalse($refl->isOptional());
vendor/psy/psysh/test/Reflection/ReflectionLanguageConstructParameterTest.php:62:        $this->assertFalse($refl->isPassedByReference());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:23:        $class = $refl->getDeclaringClass();
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:25:        $this->assertInstanceOf('ReflectionClass', $class);
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:26:        $this->assertSame('Psy\Test\Reflection\ReflectionClassConstantTest', $class->getName());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:27:        $this->assertSame('CONSTANT_ONE', $refl->getName());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:28:        $this->assertSame('CONSTANT_ONE', (string) $refl);
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:29:        $this->assertSame('one', $refl->getValue());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:30:        $this->assertNull($refl->getFileName());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:31:        $this->assertFalse($refl->getDocComment());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:45:        $this->assertEquals($ret, 'Constant [ public string CONSTANT_ONE ] { one }');
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:50:        $this->expectOutputString("Constant [ public string CONSTANT_ONE ] { one }\n");
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:58:        $this->assertEquals(\ReflectionMethod::IS_PUBLIC, $refl->getModifiers());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:59:        $this->assertFalse($refl->isPrivate());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:60:        $this->assertFalse($refl->isProtected());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:61:        $this->assertTrue($refl->isPublic());
vendor/psy/psysh/test/Reflection/ReflectionClassConstantTest.php:71:        $refl->$method();
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:24:        $this->assertFalse($refl->getDocComment());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:25:        $this->assertEquals('Psy\\Test\\Reflection\\SOME_CONSTANT', $refl->getName());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:26:        $this->assertEquals('Psy\\Test\\Reflection', $refl->getNamespaceName());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:27:        $this->assertEquals('yep', $refl->getValue());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:28:        $this->assertTrue($refl->inNamespace());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:29:        $this->assertEquals('Psy\\Test\\Reflection\\SOME_CONSTANT', (string) $refl);
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:30:        $this->assertNull($refl->getFileName());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:37:        $this->assertEquals('PHP_VERSION', $refl->getName());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:38:        $this->assertEquals('PHP_VERSION', (string) $refl);
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:39:        $this->assertEquals(PHP_VERSION, $refl->getValue());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:40:        $this->assertFalse($refl->inNamespace());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:41:        $this->assertSame('', $refl->getNamespaceName());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:49:        $this->assertEquals($is, ReflectionConstant_::isMagicConstant($name));
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:82:        $this->assertEquals($ret, 'Constant [ string Psy\\Test\\Reflection\\SOME_CONSTANT ] { yep }');
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:87:        $this->expectOutputString("Constant [ string Psy\\Test\\Reflection\\SOME_CONSTANT ] { yep }\n");
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:94:        $this->assertNull($refl->getFileName());
vendor/psy/psysh/test/Reflection/ReflectionConstantTest.php:104:        $refl->$method();
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:23:        $this->cleaner = new CodeCleaner();
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:24:        $this->setPass(new NamespacePass($this->cleaner));
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:29:        $this->parseAndTraverse('');
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:30:        $this->assertNull($this->cleaner->getNamespace());
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:32:        $this->parseAndTraverse('array_merge()');
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:33:        $this->assertNull($this->cleaner->getNamespace());
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:35:        // A non-block namespace statement should set the current namespace.
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:36:        $this->parseAndTraverse('namespace Alpha');
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:37:        $this->assertSame(['Alpha'], $this->cleaner->getNamespace());
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:39:        // A new non-block namespace statement should override the current namespace.
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:40:        $this->parseAndTraverse('namespace Beta; class B {}');
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:41:        $this->assertSame(['Beta'], $this->cleaner->getNamespace());
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:44:        $this->parseAndTraverse('namespace Gamma { array_merge(); }');
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:47:            $this->assertNull($this->cleaner->getNamespace());
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:49:            // But not for PHP-Parser < v3.1.2 :(
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:50:            $this->assertSame(['Gamma'], $this->cleaner->getNamespace());
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:53:        $this->parseAndTraverse('namespace Delta');
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:56:        $this->parseAndTraverse('namespace { array_merge(); }');
vendor/psy/psysh/test/CodeCleaner/NamespacePassTest.php:57:        $this->assertNull($this->cleaner->getNamespace());
vendor/psy/psysh/test/CodeCleaner/LegacyEmptyPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/LegacyEmptyPassTest.php:20:        $this->setPass(new LegacyEmptyPass());
vendor/psy/psysh/test/CodeCleaner/LegacyEmptyPassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/LegacyEmptyPassTest.php:55:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/LegacyEmptyPassTest.php:56:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:20:        $this->setPass(new ListPass());
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:30:            $this->setExpectedException('Psy\Exception\ParseErrorException', $expectedMessage);
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:32:            $this->expectExceptionMessage($expectedMessage);
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:35:        $stmts = $this->parse($code);
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:36:        $this->traverser->traverse($stmts);
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:75:        $stmts = $this->parse($code);
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:76:        $this->traverser->traverse($stmts);
vendor/psy/psysh/test/CodeCleaner/ListPassTest.php:77:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/ImplicitReturnPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/ImplicitReturnPassTest.php:20:        $this->setPass(new ImplicitReturnPass());
vendor/psy/psysh/test/CodeCleaner/ImplicitReturnPassTest.php:28:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:20:        $this->setPass(new PassableByReferencePass());
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:46:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:47:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:55:            ['array_pop($foo->bar)'],
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:66:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:67:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/PassableByReferencePassTest.php:93:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/Fixtures/ClassWithStatic.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/Fixtures/ClassWithCallStatic.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:21:        $this->setPass(new FunctionReturnInWriteContextPass());
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:31:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:38:            ['array(& $object->method())'],
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:39:            ['$a->method(& $closure())'],
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:49:            $this->traverser->traverse($this->parse('isset(strtolower("A"))'));
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:50:            $this->fail();
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:53:                $this->assertContains(
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:55:                    $e->getMessage()
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:58:                $this->assertContains("Can't use function return value in write context", $e->getMessage());
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:70:            $this->markTestSkipped();
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:73:        $this->traverser->traverse($this->parse('empty(strtolower("A"))'));
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:81:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/FunctionReturnInWriteContextPassTest.php:82:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/ValidConstantPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/ValidConstantPassTest.php:20:        $this->setPass(new ValidConstantPass());
vendor/psy/psysh/test/CodeCleaner/ValidConstantPassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidConstantPassTest.php:48:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidConstantPassTest.php:49:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/AbstractClassPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/AbstractClassPassTest.php:20:        $this->setPass(new AbstractClassPass());
vendor/psy/psysh/test/CodeCleaner/AbstractClassPassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/AbstractClassPassTest.php:46:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/AbstractClassPassTest.php:47:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/RequirePassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/RequirePassTest.php:20:        $this->setPass(new RequirePass());
vendor/psy/psysh/test/CodeCleaner/RequirePassTest.php:28:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/CodeCleaner/RequirePassTest.php:74:            $this->markTestSkipped();
vendor/psy/psysh/test/CodeCleaner/RequirePassTest.php:91:        $this->assertEquals(__FILE__, RequirePass::resolve(__FILE__, 3));
vendor/psy/psysh/test/CodeCleaner/NoReturnValueTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/NoReturnValueTest.php:27:        $this->assertSame(
vendor/psy/psysh/test/CodeCleaner/NoReturnValueTest.php:28:            $this->prettyPrint($this->parse('new \\Psy\CodeCleaner\\NoReturnValue()')),
vendor/psy/psysh/test/CodeCleaner/NoReturnValueTest.php:29:            $this->prettyPrint([$stmt])
vendor/psy/psysh/test/CodeCleaner/UseStatementPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/UseStatementPassTest.php:20:        $this->setPass(new UseStatementPass());
vendor/psy/psysh/test/CodeCleaner/UseStatementPassTest.php:28:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/CodeCleaner/UseStatementPassTest.php:78:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/CodeCleaner/UseStatementPassTest.php:84:            $this->markTestSkipped();
vendor/psy/psysh/test/CodeCleaner/CodeCleanerTestCase.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/CodeCleanerTestCase.php:24:        $this->pass = null;
vendor/psy/psysh/test/CodeCleaner/CodeCleanerTestCase.php:30:        $this->pass = $pass;
vendor/psy/psysh/test/CodeCleaner/CodeCleanerTestCase.php:31:        if (!isset($this->traverser)) {
vendor/psy/psysh/test/CodeCleaner/CodeCleanerTestCase.php:32:            $this->traverser = new NodeTraverser();
vendor/psy/psysh/test/CodeCleaner/CodeCleanerTestCase.php:34:        $this->traverser->addVisitor($this->pass);
vendor/psy/psysh/test/CodeCleaner/CodeCleanerTestCase.php:39:        return $this->traverse($this->parse($code, $prefix));
vendor/psy/psysh/test/CodeCleaner/InstanceOfPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/InstanceOfPassTest.php:20:        $this->setPass(new InstanceOfPass());
vendor/psy/psysh/test/CodeCleaner/InstanceOfPassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/InstanceOfPassTest.php:54:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/InstanceOfPassTest.php:55:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/ValidClassNamePassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/ValidClassNamePassTest.php:20:        $this->setPass(new ValidClassNamePass());
vendor/psy/psysh/test/CodeCleaner/ValidClassNamePassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidClassNamePassTest.php:121:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidClassNamePassTest.php:122:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/ValidFunctionNamePassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/ValidFunctionNamePassTest.php:20:        $this->setPass(new ValidFunctionNamePass());
vendor/psy/psysh/test/CodeCleaner/ValidFunctionNamePassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidFunctionNamePassTest.php:69:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidFunctionNamePassTest.php:70:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/FinalClassPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/FinalClassPassTest.php:20:        $this->setPass(new FinalClassPass());
vendor/psy/psysh/test/CodeCleaner/FinalClassPassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/FinalClassPassTest.php:53:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/FinalClassPassTest.php:54:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/CalledClassPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/CalledClassPassTest.php:20:        $this->setPass(new CalledClassPass());
vendor/psy/psysh/test/CodeCleaner/CalledClassPassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/CalledClassPassTest.php:51:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/CalledClassPassTest.php:52:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/CalledClassPassTest.php:77:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/CalledClassPassTest.php:78:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/AssignThisVariablePassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/AssignThisVariablePassTest.php:20:        $this->setPass(new AssignThisVariablePass());
vendor/psy/psysh/test/CodeCleaner/AssignThisVariablePassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/AssignThisVariablePassTest.php:45:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/AssignThisVariablePassTest.php:46:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:21:            $this->markTestSkipped();
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:24:        $this->setPass(new StrictTypesPass());
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:29:        $this->assertProcessesAs('declare(strict_types=1)', 'declare (strict_types=1);');
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:30:        $this->assertProcessesAs('null', "declare (strict_types=1);\nnull;");
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:31:        $this->assertProcessesAs('declare(strict_types=0)', 'declare (strict_types=0);');
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:32:        $this->assertProcessesAs('null', 'null;');
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:41:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/StrictTypesPassTest.php:47:            ['declare(strict_types=-1)'],
vendor/psy/psysh/test/CodeCleaner/FunctionContextPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/FunctionContextPassTest.php:20:        $this->setPass(new FunctionContextPass());
vendor/psy/psysh/test/CodeCleaner/FunctionContextPassTest.php:28:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/FunctionContextPassTest.php:29:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/FunctionContextPassTest.php:46:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/LoopContextPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/LoopContextPassTest.php:20:        $this->setPass(new LoopContextPass());
vendor/psy/psysh/test/CodeCleaner/LoopContextPassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/LoopContextPassTest.php:63:            ['while (true) { break -1; }'],
vendor/psy/psysh/test/CodeCleaner/LoopContextPassTest.php:64:            ['while (true) { continue -1; }'],
vendor/psy/psysh/test/CodeCleaner/LoopContextPassTest.php:81:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/LoopContextPassTest.php:82:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:20:        $this->setPass(new LeavePsyshAlonePass());
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:25:        $inline = $this->parse('not php at all!', '');
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:26:        $this->traverse($inline);
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:27:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:35:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:36:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:57:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/LeavePsyshAlonePassTest.php:66:            ['$__psysh__->fakeFunctionCall()'],
vendor/psy/psysh/test/CodeCleaner/CallTimePassByReferencePassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/CallTimePassByReferencePassTest.php:20:        $this->setPass(new CallTimePassByReferencePass());
vendor/psy/psysh/test/CodeCleaner/CallTimePassByReferencePassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/CallTimePassByReferencePassTest.php:36:            ['$object->method($first, &$arg)'],
vendor/psy/psysh/test/CodeCleaner/CallTimePassByReferencePassTest.php:47:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/CallTimePassByReferencePassTest.php:48:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/ValidConstructorPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/ValidConstructorPassTest.php:20:        $this->setPass(new ValidConstructorPass());
vendor/psy/psysh/test/CodeCleaner/ValidConstructorPassTest.php:29:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidConstructorPassTest.php:38:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidConstructorPassTest.php:73:        $this->parseAndTraverse($code);
vendor/psy/psysh/test/CodeCleaner/ValidConstructorPassTest.php:74:        $this->assertTrue(true);
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:25:        $this->setPass(new ExitPass());
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:33:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:44:            ['exit;', "{$this->expectedExceptionString};"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:45:            ['exit();', "{$this->expectedExceptionString};"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:46:            ['die;', "{$this->expectedExceptionString};"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:47:            ['exit(die(die));', "{$this->expectedExceptionString};"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:48:            ['if (true) { exit; }', "if (true) {\n    {$this->expectedExceptionString};\n}"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:49:            ['if (false) { exit; }', "if (false) {\n    {$this->expectedExceptionString};\n}"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:50:            ['1 and exit();', "1 and {$this->expectedExceptionString};"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:51:            ['foo() or die', "foo() or {$this->expectedExceptionString};"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:52:            ['exit and 1;', "{$this->expectedExceptionString} and 1;"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:53:            ['if (exit) { echo $wat; }', "if ({$this->expectedExceptionString}) {\n    echo \$wat;\n}"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:54:            ['exit or die;', "{$this->expectedExceptionString} or {$this->expectedExceptionString};"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:55:            ['switch (die) { }', "switch ({$this->expectedExceptionString}) {\n}"],
vendor/psy/psysh/test/CodeCleaner/ExitPassTest.php:56:            ['for ($i = 1; $i < 10; die) {}', "for (\$i = 1; \$i < 10; {$this->expectedExceptionString}) {\n}"],
vendor/psy/psysh/test/CodeCleaner/MagicConstantsPassTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleaner/MagicConstantsPassTest.php:20:        $this->setPass(new MagicConstantsPass());
vendor/psy/psysh/test/CodeCleaner/MagicConstantsPassTest.php:28:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/ShellTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/ShellTest.php:27:        foreach ($this->streams as $stream) {
vendor/psy/psysh/test/ShellTest.php:41:        $shell = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:42:        $shell->setScopeVariables(compact('one', 'two', 'three', '__psysh__', '_', '_e', 'this'));
vendor/psy/psysh/test/ShellTest.php:44:        $this->assertNotContains('__psysh__', $shell->getScopeVariableNames());
vendor/psy/psysh/test/ShellTest.php:45:        $this->assertSame(['one', 'two', 'three', '_'], $shell->getScopeVariableNames());
vendor/psy/psysh/test/ShellTest.php:46:        $this->assertSame('banana', $shell->getScopeVariable('one'));
vendor/psy/psysh/test/ShellTest.php:47:        $this->assertSame(123, $shell->getScopeVariable('two'));
vendor/psy/psysh/test/ShellTest.php:48:        $this->assertSame($three, $shell->getScopeVariable('three'));
vendor/psy/psysh/test/ShellTest.php:49:        $this->assertNull($shell->getScopeVariable('_'));
vendor/psy/psysh/test/ShellTest.php:51:        $shell->setScopeVariables([]);
vendor/psy/psysh/test/ShellTest.php:52:        $this->assertSame(['_'], $shell->getScopeVariableNames());
vendor/psy/psysh/test/ShellTest.php:54:        $shell->setBoundObject($this);
vendor/psy/psysh/test/ShellTest.php:55:        $this->assertSame(['_', 'this'], $shell->getScopeVariableNames());
vendor/psy/psysh/test/ShellTest.php:56:        $this->assertSame($this, $shell->getScopeVariable('this'));
vendor/psy/psysh/test/ShellTest.php:57:        $this->assertSame(['_' => null], $shell->getScopeVariables(false));
vendor/psy/psysh/test/ShellTest.php:58:        $this->assertSame(['_' => null, 'this' => $this], $shell->getScopeVariables());
vendor/psy/psysh/test/ShellTest.php:66:        $shell = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:67:        $shell->setScopeVariables(['foo' => 'FOO', 'bar' => 1]);
vendor/psy/psysh/test/ShellTest.php:68:        $shell->getScopeVariable('baz');
vendor/psy/psysh/test/ShellTest.php:80:        $config = $this->getConfig(['usePcntl' => false]);
vendor/psy/psysh/test/ShellTest.php:83:        $shell->setScopeVariables(compact('one', 'two', 'three', '__psysh__', '_', '_e', 'this'));
vendor/psy/psysh/test/ShellTest.php:84:        $shell->addInput('exit', true);
vendor/psy/psysh/test/ShellTest.php:87:        $shell->run(null, $this->getOutput());
vendor/psy/psysh/test/ShellTest.php:89:        $this->assertNotContains('__psysh__', $shell->getScopeVariableNames());
vendor/psy/psysh/test/ShellTest.php:90:        $this->assertSame(['one', 'two', 'three', '_', '_e'], $shell->getScopeVariableNames());
vendor/psy/psysh/test/ShellTest.php:91:        $this->assertSame('banana', $shell->getScopeVariable('one'));
vendor/psy/psysh/test/ShellTest.php:92:        $this->assertSame(123, $shell->getScopeVariable('two'));
vendor/psy/psysh/test/ShellTest.php:93:        $this->assertSame($three, $shell->getScopeVariable('three'));
vendor/psy/psysh/test/ShellTest.php:94:        $this->assertNull($shell->getScopeVariable('_'));
vendor/psy/psysh/test/ShellTest.php:99:        $config = $this->getConfig(['configFile' => __DIR__ . '/fixtures/empty.php']);
vendor/psy/psysh/test/ShellTest.php:102:        $this->assertEmpty($shell->getIncludes());
vendor/psy/psysh/test/ShellTest.php:103:        $shell->setIncludes(['foo', 'bar', 'baz']);
vendor/psy/psysh/test/ShellTest.php:104:        $this->assertSame(['foo', 'bar', 'baz'], $shell->getIncludes());
vendor/psy/psysh/test/ShellTest.php:109:        $config = $this->getConfig([
vendor/psy/psysh/test/ShellTest.php:116:        $includes = $shell->getIncludes();
vendor/psy/psysh/test/ShellTest.php:117:        $this->assertSame('/file.php', $includes[0]);
vendor/psy/psysh/test/ShellTest.php:125:        $config = $this->getConfig([
vendor/psy/psysh/test/ShellTest.php:128:        $config->setShell($shell);
vendor/psy/psysh/test/ShellTest.php:130:        $this->assertSame([$matcher], $shell->matchers);
vendor/psy/psysh/test/ShellTest.php:138:        $config = $this->getConfig([]);
vendor/psy/psysh/test/ShellTest.php:139:        $config->setShell($shell);
vendor/psy/psysh/test/ShellTest.php:140:        $config->addMatchers([$matcher]);
vendor/psy/psysh/test/ShellTest.php:142:        $this->assertSame([$matcher], $shell->matchers);
vendor/psy/psysh/test/ShellTest.php:147:        $shell  = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:148:        $output = $this->getOutput();
vendor/psy/psysh/test/ShellTest.php:149:        $stream = $output->getStream();
vendor/psy/psysh/test/ShellTest.php:152:        $shell->setOutput($output);
vendor/psy/psysh/test/ShellTest.php:153:        $shell->addCode('code');
vendor/psy/psysh/test/ShellTest.php:154:        $this->assertTrue($shell->hasCode());
vendor/psy/psysh/test/ShellTest.php:155:        $this->assertNotEmpty($shell->getCodeBuffer());
vendor/psy/psysh/test/ShellTest.php:157:        $shell->writeException($e);
vendor/psy/psysh/test/ShellTest.php:159:        $this->assertSame($e, $shell->getScopeVariable('_e'));
vendor/psy/psysh/test/ShellTest.php:160:        $this->assertFalse($shell->hasCode());
vendor/psy/psysh/test/ShellTest.php:161:        $this->assertEmpty($shell->getCodeBuffer());
vendor/psy/psysh/test/ShellTest.php:166:        $this->assertContains('PHP Parse error', $streamContents);
vendor/psy/psysh/test/ShellTest.php:167:        $this->assertContains('message', $streamContents);
vendor/psy/psysh/test/ShellTest.php:168:        $this->assertContains('line 13', $streamContents);
vendor/psy/psysh/test/ShellTest.php:173:        $shell  = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:174:        $output = $this->getOutput();
vendor/psy/psysh/test/ShellTest.php:175:        $stream = $output->getStream();
vendor/psy/psysh/test/ShellTest.php:176:        $shell->setOutput($output);
vendor/psy/psysh/test/ShellTest.php:182:            $shell->handleError(E_USER_NOTICE, 'wheee', null, 13);
vendor/psy/psysh/test/ShellTest.php:185:            $this->fail('Unexpected error exception');
vendor/psy/psysh/test/ShellTest.php:192:        $this->assertContains('PHP Notice:', $streamContents);
vendor/psy/psysh/test/ShellTest.php:193:        $this->assertContains('wheee',       $streamContents);
vendor/psy/psysh/test/ShellTest.php:194:        $this->assertContains('line 13',     $streamContents);
vendor/psy/psysh/test/ShellTest.php:202:        $shell    = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:207:            $shell->handleError(E_USER_NOTICE, 'wheee', null, 13);
vendor/psy/psysh/test/ShellTest.php:216:        $shell = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:218:        $this->assertInstanceOf('Symfony\Component\Console\Application', $shell);
vendor/psy/psysh/test/ShellTest.php:219:        $this->assertContains(Shell::VERSION, $shell->getVersion());
vendor/psy/psysh/test/ShellTest.php:220:        $this->assertContains(phpversion(), $shell->getVersion());
vendor/psy/psysh/test/ShellTest.php:221:        $this->assertContains(php_sapi_name(), $shell->getVersion());
vendor/psy/psysh/test/ShellTest.php:226:        $shell = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:228:        $shell->addCode('class');
vendor/psy/psysh/test/ShellTest.php:229:        $this->assertNull($shell->flushCode());
vendor/psy/psysh/test/ShellTest.php:230:        $this->assertTrue($shell->hasCode());
vendor/psy/psysh/test/ShellTest.php:232:        $shell->addCode('a');
vendor/psy/psysh/test/ShellTest.php:233:        $this->assertNull($shell->flushCode());
vendor/psy/psysh/test/ShellTest.php:234:        $this->assertTrue($shell->hasCode());
vendor/psy/psysh/test/ShellTest.php:236:        $shell->addCode('{}');
vendor/psy/psysh/test/ShellTest.php:237:        $code = $shell->flushCode();
vendor/psy/psysh/test/ShellTest.php:238:        $this->assertFalse($shell->hasCode());
vendor/psy/psysh/test/ShellTest.php:240:        $this->assertNotNull($code);
vendor/psy/psysh/test/ShellTest.php:241:        $this->assertSame('class a { } return new \\Psy\\CodeCleaner\\NoReturnValue();', $code);
vendor/psy/psysh/test/ShellTest.php:246:        $shell = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:248:        $shell->addCode('1 \\');
vendor/psy/psysh/test/ShellTest.php:249:        $this->assertNull($shell->flushCode());
vendor/psy/psysh/test/ShellTest.php:250:        $this->assertTrue($shell->hasCode());
vendor/psy/psysh/test/ShellTest.php:252:        $shell->addCode('+ 1 \\');
vendor/psy/psysh/test/ShellTest.php:253:        $this->assertNull($shell->flushCode());
vendor/psy/psysh/test/ShellTest.php:254:        $this->assertTrue($shell->hasCode());
vendor/psy/psysh/test/ShellTest.php:256:        $shell->addCode('+ 1');
vendor/psy/psysh/test/ShellTest.php:257:        $code = $shell->flushCode();
vendor/psy/psysh/test/ShellTest.php:258:        $this->assertFalse($shell->hasCode());
vendor/psy/psysh/test/ShellTest.php:260:        $this->assertNotNull($code);
vendor/psy/psysh/test/ShellTest.php:261:        $this->assertSame('return 1 + 1 + 1;', $code);
vendor/psy/psysh/test/ShellTest.php:269:        $shell = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:270:        $shell->addCode('this is not valid');
vendor/psy/psysh/test/ShellTest.php:271:        $shell->flushCode();
vendor/psy/psysh/test/ShellTest.php:276:        $shell = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:278:        $shell->addCode($code);
vendor/psy/psysh/test/ShellTest.php:279:        $shell->flushCode();
vendor/psy/psysh/test/ShellTest.php:281:        $shell->addCode($code);
vendor/psy/psysh/test/ShellTest.php:282:        $this->assertSame($shell->flushCode(), 'return $test();');
vendor/psy/psysh/test/ShellTest.php:287:        $output = $this->getOutput();
vendor/psy/psysh/test/ShellTest.php:288:        $stream = $output->getStream();
vendor/psy/psysh/test/ShellTest.php:289:        $shell  = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:290:        $shell->setOutput($output);
vendor/psy/psysh/test/ShellTest.php:292:        $shell->writeStdout("{{stdout}}\n");
vendor/psy/psysh/test/ShellTest.php:297:        $this->assertSame('{{stdout}}' . PHP_EOL, $streamContents);
vendor/psy/psysh/test/ShellTest.php:302:        $output = $this->getOutput();
vendor/psy/psysh/test/ShellTest.php:303:        $stream = $output->getStream();
vendor/psy/psysh/test/ShellTest.php:304:        $shell  = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:305:        $shell->setOutput($output);
vendor/psy/psysh/test/ShellTest.php:307:        $shell->writeStdout('{{stdout}}');
vendor/psy/psysh/test/ShellTest.php:312:        $this->assertSame('{{stdout}}<aside>⏎</aside>' . PHP_EOL, $streamContents);
vendor/psy/psysh/test/ShellTest.php:320:        $output = $this->getOutput();
vendor/psy/psysh/test/ShellTest.php:321:        $stream = $output->getStream();
vendor/psy/psysh/test/ShellTest.php:322:        $shell  = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:323:        $shell->setOutput($output);
vendor/psy/psysh/test/ShellTest.php:325:        $shell->writeReturnValue($input);
vendor/psy/psysh/test/ShellTest.php:327:        $this->assertEquals($expected, stream_get_contents($stream));
vendor/psy/psysh/test/ShellTest.php:343:        $output = $this->getOutput();
vendor/psy/psysh/test/ShellTest.php:344:        $stream = $output->getStream();
vendor/psy/psysh/test/ShellTest.php:345:        $shell  = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:346:        $shell->setOutput($output);
vendor/psy/psysh/test/ShellTest.php:348:        $shell->writeException($exception);
vendor/psy/psysh/test/ShellTest.php:350:        $this->assertSame($expected, stream_get_contents($stream));
vendor/psy/psysh/test/ShellTest.php:365:        $output = $this->getOutput();
vendor/psy/psysh/test/ShellTest.php:366:        $stream = $output->getStream();
vendor/psy/psysh/test/ShellTest.php:367:        $shell  = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:368:        $shell->setOutput($output);
vendor/psy/psysh/test/ShellTest.php:369:        $this->assertEquals($expected, $shell->execute($input));
vendor/psy/psysh/test/ShellTest.php:371:        $this->assertSame('', stream_get_contents($stream));
vendor/psy/psysh/test/ShellTest.php:388:        $shell = new Shell($this->getConfig());
vendor/psy/psysh/test/ShellTest.php:390:        // :-/
vendor/psy/psysh/test/ShellTest.php:392:        $method = $refl->getMethod('hasCommand');
vendor/psy/psysh/test/ShellTest.php:393:        $method->setAccessible(true);
vendor/psy/psysh/test/ShellTest.php:395:        $this->assertEquals($method->invokeArgs($shell, [$command]), $has);
vendor/psy/psysh/test/ShellTest.php:405:            ['ls -al ', true],
vendor/psy/psysh/test/ShellTest.php:406:            ['ls "-al" ', true],
vendor/psy/psysh/test/ShellTest.php:407:            ['ls"-al"', false],
vendor/psy/psysh/test/ShellTest.php:409:            ['   q  --help', true],
vendor/psy/psysh/test/ShellTest.php:418:        $this->streams[] = $stream;
vendor/psy/psysh/test/ClassWithSecrets.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Readline/LibeditTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Readline/LibeditTest.php:23:            $this->markTestSkipped('Libedit not enabled');
vendor/psy/psysh/test/Readline/LibeditTest.php:26:        $this->historyFile = tempnam(sys_get_temp_dir(), 'psysh_test_history');
vendor/psy/psysh/test/Readline/LibeditTest.php:27:        if (false === file_put_contents($this->historyFile, "_HiStOrY_V2_\n")) {
vendor/psy/psysh/test/Readline/LibeditTest.php:28:            $this->fail('Unable to write history file: ' . $this->historyFile);
vendor/psy/psysh/test/Readline/LibeditTest.php:32:        readline_read_history($this->historyFile);
vendor/psy/psysh/test/Readline/LibeditTest.php:38:        if (is_file($this->historyFile)) {
vendor/psy/psysh/test/Readline/LibeditTest.php:39:            unlink($this->historyFile);
vendor/psy/psysh/test/Readline/LibeditTest.php:45:        $readline = new Libedit($this->historyFile);
vendor/psy/psysh/test/Readline/LibeditTest.php:46:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:47:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/LibeditTest.php:48:        $this->assertSame(['foo'], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:49:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/LibeditTest.php:50:        $this->assertSame(['foo', 'bar'], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:51:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/LibeditTest.php:52:        $this->assertSame(['foo', 'bar', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:53:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/LibeditTest.php:54:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:62:        $readline = new Libedit($this->historyFile, 2);
vendor/psy/psysh/test/Readline/LibeditTest.php:63:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:64:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/LibeditTest.php:65:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/LibeditTest.php:66:        $this->assertSame(['foo', 'bar'], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:67:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/LibeditTest.php:68:        $this->assertSame(['bar', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:69:        $readline->addHistory('w00t');
vendor/psy/psysh/test/Readline/LibeditTest.php:70:        $this->assertSame(['baz', 'w00t'], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:71:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/LibeditTest.php:72:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:80:        $readline = new Libedit($this->historyFile, 0, true);
vendor/psy/psysh/test/Readline/LibeditTest.php:81:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:82:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/LibeditTest.php:83:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/LibeditTest.php:84:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/LibeditTest.php:85:        $this->assertSame(['bar', 'foo'], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:86:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/LibeditTest.php:87:        $readline->addHistory('w00t');
vendor/psy/psysh/test/Readline/LibeditTest.php:88:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/LibeditTest.php:89:        $this->assertSame(['bar', 'foo', 'w00t', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:90:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/LibeditTest.php:91:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:96:        $readline = new Libedit($this->historyFile);
vendor/psy/psysh/test/Readline/LibeditTest.php:98:            $this->historyFile,
vendor/psy/psysh/test/Readline/LibeditTest.php:102:        $this->assertSame([
vendor/psy/psysh/test/Readline/LibeditTest.php:105:        ], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:106:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/LibeditTest.php:111:     * it doesn't support non-unix line separators.
vendor/psy/psysh/test/Readline/LibeditTest.php:115:        $readline = new Libedit($this->historyFile);
vendor/psy/psysh/test/Readline/LibeditTest.php:117:            $this->historyFile,
vendor/psy/psysh/test/Readline/LibeditTest.php:121:        $this->assertSame([
vendor/psy/psysh/test/Readline/LibeditTest.php:125:        ], $readline->listHistory());
vendor/psy/psysh/test/Readline/LibeditTest.php:126:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/TransientTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Readline/TransientTest.php:21:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:22:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/TransientTest.php:23:        $this->assertSame(['foo'], $readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:24:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/TransientTest.php:25:        $this->assertSame(['foo', 'bar'], $readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:26:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/TransientTest.php:27:        $this->assertSame(['foo', 'bar', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:28:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/TransientTest.php:29:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:38:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:39:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/TransientTest.php:40:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/TransientTest.php:41:        $this->assertSame(['foo', 'bar'], $readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:42:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/TransientTest.php:43:        $this->assertSame(['bar', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:44:        $readline->addHistory('w00t');
vendor/psy/psysh/test/Readline/TransientTest.php:45:        $this->assertSame(['baz', 'w00t'], $readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:46:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/TransientTest.php:47:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:56:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:57:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/TransientTest.php:58:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/TransientTest.php:59:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/TransientTest.php:60:        $this->assertSame(['bar', 'foo'], $readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:61:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/TransientTest.php:62:        $readline->addHistory('w00t');
vendor/psy/psysh/test/Readline/TransientTest.php:63:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/TransientTest.php:64:        $this->assertSame(['bar', 'foo', 'w00t', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:65:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/TransientTest.php:66:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:72:        $this->assertTrue(Transient::isSupported());
vendor/psy/psysh/test/Readline/TransientTest.php:73:        $this->assertTrue($readline->readHistory());
vendor/psy/psysh/test/Readline/TransientTest.php:74:        $this->assertTrue($readline->writeHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:23:            $this->markTestSkipped('GNUReadline not enabled');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:26:        $this->historyFile = tempnam(sys_get_temp_dir(), 'psysh_test_history');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:27:        file_put_contents($this->historyFile, "_HiStOrY_V2_\n");
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:32:        $readline = new GNUReadline($this->historyFile);
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:33:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:34:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:35:        $this->assertSame(['foo'], $readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:36:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:37:        $this->assertSame(['foo', 'bar'], $readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:38:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:39:        $this->assertSame(['foo', 'bar', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:40:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:41:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:49:        $readline = new GNUReadline($this->historyFile, 2);
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:50:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:51:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:52:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:53:        $this->assertSame(['foo', 'bar'], $readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:54:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:55:        $this->assertSame(['bar', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:56:        $readline->addHistory('w00t');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:57:        $this->assertSame(['baz', 'w00t'], $readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:58:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:59:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:67:        $readline = new GNUReadline($this->historyFile, 0, true);
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:68:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:69:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:70:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:71:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:72:        $this->assertSame(['bar', 'foo'], $readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:73:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:74:        $readline->addHistory('w00t');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:75:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:76:        $this->assertSame(['bar', 'foo', 'w00t', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:77:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/GNUReadlineTest.php:78:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:21:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:22:        $readline->addHistory('foo');
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:23:        $this->assertSame(['foo'], $readline->listHistory());
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:24:        $readline->addHistory('bar');
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:25:        $this->assertSame(['foo', 'bar'], $readline->listHistory());
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:26:        $readline->addHistory('baz');
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:27:        $this->assertSame(['foo', 'bar', 'baz'], $readline->listHistory());
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:28:        $readline->clearHistory();
vendor/psy/psysh/test/Readline/HoaConsoleTest.php:29:        $this->assertEmpty($readline->listHistory());
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:22:        $this->traverser = new NodeTraverser();
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:23:        $this->traverser->addVisitor(new SudoVisitor());
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:31:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:37:            ['$a->b', "\Psy\Sudo::fetchProperty(\$a, 'b');"],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:38:            ['$a->$b', '\Psy\Sudo::fetchProperty($a, $b);'],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:39:            ["\$a->{'b'}", "\Psy\Sudo::fetchProperty(\$a, 'b');"],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:48:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:54:            ['$a->b = $c', "\Psy\Sudo::assignProperty(\$a, 'b', \$c);"],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:55:            ['$a->$b = $c', '\Psy\Sudo::assignProperty($a, $b, $c);'],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:56:            ["\$a->{'b'} = \$c", "\Psy\Sudo::assignProperty(\$a, 'b', \$c);"],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:65:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:71:            ['$a->b()', "\Psy\Sudo::callMethod(\$a, 'b');"],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:72:            ['$a->$b()', '\Psy\Sudo::callMethod($a, $b);'],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:73:            ["\$a->b(\$c, 'd')", "\Psy\Sudo::callMethod(\$a, 'b', \$c, 'd');"],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:74:            ["\$a->\$b(\$c, 'd')", "\Psy\Sudo::callMethod(\$a, \$b, \$c, 'd');"],
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:83:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:99:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:115:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/Sudo/SudoVisitorTest.php:133:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/fixtures/empty.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/fixtures/unvis_fixtures.json:1:[["", ""], ["\\^A", "\u0001"], ["\\^B", "\u0002"], ["\\^C", "\u0003"], ["\\^D", "\u0004"], ["\\^E", "\u0005"], ["\\^F", "\u0006"], ["\\^G", "\u0007"], ["\\^H", "\b"], ["\\^I", "\t"], ["\\^J", "\n"], ["\\^K", "\u000b"], ["\\^L", "\f"], ["\\^M", "\r"], ["\\^N", "\u000e"], ["\\^O", "\u000f"], ["\\^P", "\u0010"], ["\\^Q", "\u0011"], ["\\^R", "\u0012"], ["\\^S", "\u0013"], ["\\^T", "\u0014"], ["\\^U", "\u0015"], ["\\^V", "\u0016"], ["\\^W", "\u0017"], ["\\^X", "\u0018"], ["\\^Y", "\u0019"], ["\\^Z", "\u001a"], ["\\^[", "\u001b"], ["\\^\\", "\u001c"], ["\\^]", "\u001d"], ["\\^^", "\u001e"], ["\\^_", "\u001f`", "`"], ["a", "a"], ["b", "b"], ["c", "c"], ["d", "d"], ["e", "e"], ["f", "f"], ["g", "g"], ["h", "h"], ["i", "i"], ["j", "j"], ["k", "k"], ["l", "l"], ["m", "m"], ["n", "n"], ["o", "o"], ["p", "p"], ["q", "q"], ["r", "r"], ["s", "s"], ["t", "t"], ["u", "u"], ["v", "v"], ["w", "w"], ["x", "x"], ["y", "y"], ["z", "z"], ["{", "{"], ["|", "|"], ["}", "}"], ["~", "~"], ["\\^?", "\u007f"], ["\\M-B\\M^@", "\u0080"], ["\\M-B\\M^A", "\u0081"], ["\\M-B\\M^B", "\u0082"], ["\\M-B\\M^C", "\u0083"], ["\\M-B\\M^D", "\u0084"], ["\\M-B\\M^E", "\u0085"], ["\\M-B\\M^F", "\u0086"], ["\\M-B\\M^G", "\u0087"], ["\\M-B\\M^H", "\u0088"], ["\\M-B\\M^I", "\u0089"], ["\\M-B\\M^J", "\u008a"], ["\\M-B\\M^K", "\u008b"], ["\\M-B\\M^L", "\u008c"], ["\\M-B\\M^M", "\u008d"], ["\\M-B\\M^N", "\u008e"], ["\\M-B\\M^O", "\u008f"], ["\\M-B\\M^P", "\u0090"], ["\\M-B\\M^Q", "\u0091"], ["\\M-B\\M^R", "\u0092"], ["\\M-B\\M^S", "\u0093"], ["\\M-B\\M^T", "\u0094"], ["\\M-B\\M^U", "\u0095"], ["\\M-B\\M^V", "\u0096"], ["\\M-B\\M^W", "\u0097"], ["\\M-B\\M^X", "\u0098"], ["\\M-B\\M^Y", "\u0099"], ["\\M-B\\M^Z", "\u009a"], ["\\M-B\\M^[", "\u009b"], ["\\M-B\\M^\\", "\u009c"], ["\\M-B\\M^]", "\u009d"], ["\\M-B\\M^^", "\u009e"], ["\\M-B\\M^_", "\u009f"], ["\\M-B\\240", "\u00a0"], ["\\M-B\\M-!", "\u00a1"], ["\\M-B\\M-\"", "\u00a2"], ["\\M-B\\M-#", "\u00a3"], ["\\M-B\\M-$", "\u00a4"], ["\\M-B\\M-%", "\u00a5"], ["\\M-B\\M-&", "\u00a6"], ["\\M-B\\M-'", "\u00a7"], ["\\M-B\\M-(", "\u00a8"], ["\\M-B\\M-)", "\u00a9"], ["\\M-B\\M-*", "\u00aa"], ["\\M-B\\M-+", "\u00ab"], ["\\M-B\\M-,", "\u00ac"], ["\\M-B\\M--", "\u00ad"], ["\\M-B\\M-.", "\u00ae"], ["\\M-B\\M-/", "\u00af"], ["\\M-B\\M-0", "\u00b0"], ["\\M-B\\M-1", "\u00b1"], ["\\M-B\\M-2", "\u00b2"], ["\\M-B\\M-3", "\u00b3"], ["\\M-B\\M-4", "\u00b4"], ["\\M-B\\M-5", "\u00b5"], ["\\M-B\\M-6", "\u00b6"], ["\\M-B\\M-7", "\u00b7"], ["\\M-B\\M-8", "\u00b8"], ["\\M-B\\M-9", "\u00b9"], ["\\M-B\\M-:", "\u00ba"], ["\\M-B\\M-;", "\u00bb"], ["\\M-B\\M-<", "\u00bc"], ["\\M-B\\M-=", "\u00bd"], ["\\M-B\\M->", "\u00be"], ["\\M-B\\M-?", "\u00bf"], ["\\M-C\\M^@", "\u00c0"], ["\\M-C\\M^A", "\u00c1"], ["\\M-C\\M^B", "\u00c2"], ["\\M-C\\M^C", "\u00c3"], ["\\M-C\\M^D", "\u00c4"], ["\\M-C\\M^E", "\u00c5"], ["\\M-C\\M^F", "\u00c6"], ["\\M-C\\M^G", "\u00c7"], ["\\M-C\\M^H", "\u00c8"], ["\\M-C\\M^I", "\u00c9"], ["\\M-C\\M^J", "\u00ca"], ["\\M-C\\M^K", "\u00cb"], ["\\M-C\\M^L", "\u00cc"], ["\\M-C\\M^M", "\u00cd"], ["\\M-C\\M^N", "\u00ce"], ["\\M-C\\M^O", "\u00cf"], ["\\M-C\\M^P", "\u00d0"], ["\\M-C\\M^Q", "\u00d1"], ["\\M-C\\M^R", "\u00d2"], ["\\M-C\\M^S", "\u00d3"], ["\\M-C\\M^T", "\u00d4"], ["\\M-C\\M^U", "\u00d5"], ["\\M-C\\M^V", "\u00d6"], ["\\M-C\\M^W", "\u00d7"], ["\\M-C\\M^X", "\u00d8"], ["\\M-C\\M^Y", "\u00d9"], ["\\M-C\\M^Z", "\u00da"], ["\\M-C\\M^[", "\u00db"], ["\\M-C\\M^\\", "\u00dc"], ["\\M-C\\M^]", "\u00dd"], ["\\M-C\\M^^", "\u00de"], ["\\M-C\\M^_", "\u00df"], ["\\M-C\\240", "\u00e0"], ["\\M-C\\M-!", "\u00e1"], ["\\M-C\\M-\"", "\u00e2"], ["\\M-C\\M-#", "\u00e3"], ["\\M-C\\M-$", "\u00e4"], ["\\M-C\\M-%", "\u00e5"], ["\\M-C\\M-&", "\u00e6"], ["\\M-C\\M-'", "\u00e7"], ["\\M-C\\M-(", "\u00e8"], ["\\M-C\\M-)", "\u00e9"], ["\\M-C\\M-*", "\u00ea"], ["\\M-C\\M-+", "\u00eb"], ["\\M-C\\M-,", "\u00ec"], ["\\M-C\\M--", "\u00ed"], ["\\M-C\\M-.", "\u00ee"], ["\\M-C\\M-/", "\u00ef"], ["\\M-C\\M-0", "\u00f0"], ["\\M-C\\M-1", "\u00f1"], ["\\M-C\\M-2", "\u00f2"], ["\\M-C\\M-3", "\u00f3"], ["\\M-C\\M-4", "\u00f4"], ["\\M-C\\M-5", "\u00f5"], ["\\M-C\\M-6", "\u00f6"], ["\\M-C\\M-7", "\u00f7"], ["\\M-C\\M-8", "\u00f8"], ["\\M-C\\M-9", "\u00f9"], ["\\M-C\\M-:", "\u00fa"], ["\\M-C\\M-;", "\u00fb"], ["\\M-C\\M-<", "\u00fc"], ["\\M-C\\M-=", "\u00fd"], ["\\M-C\\M->", "\u00fe"], ["\\M-C\\M-?", "\u00ff"], ["\\M-D\\M^@", "\u0100"], ["\\M-D\\M^A", "\u0101"], ["\\M-D\\M^B", "\u0102"], ["\\M-D\\M^C", "\u0103"], ["\\M-D\\M^D", "\u0104"], ["\\M-D\\M^E", "\u0105"], ["\\M-D\\M^F", "\u0106"], ["\\M-D\\M^G", "\u0107"], ["\\M-D\\M^H", "\u0108"], ["\\M-D\\M^I", "\u0109"], ["\\M-D\\M^J", "\u010a"], ["\\M-D\\M^K", "\u010b"], ["\\M-D\\M^L", "\u010c"], ["\\M-D\\M^M", "\u010d"], ["\\M-D\\M^N", "\u010e"], ["\\M-D\\M^O", "\u010f"], ["\\M-D\\M^P", "\u0110"], ["\\M-D\\M^Q", "\u0111"], ["\\M-D\\M^R", "\u0112"], ["\\M-D\\M^S", "\u0113"], ["\\M-D\\M^T", "\u0114"], ["\\M-D\\M^U", "\u0115"], ["\\M-D\\M^V", "\u0116"], ["\\M-D\\M^W", "\u0117"], ["\\M-D\\M^X", "\u0118"], ["\\M-D\\M^Y", "\u0119"], ["\\M-D\\M^Z", "\u011a"], ["\\M-D\\M^[", "\u011b"], ["\\M-D\\M^\\", "\u011c"], ["\\M-D\\M^]", "\u011d"], ["\\M-D\\M^^", "\u011e"], ["\\M-D\\M^_", "\u011f"], ["\\M-D\\240", "\u0120"], ["\\M-D\\M-!", "\u0121"], ["\\M-D\\M-\"", "\u0122"], ["\\M-D\\M-#", "\u0123"], ["\\M-D\\M-$", "\u0124"], ["\\M-D\\M-%", "\u0125"], ["\\M-D\\M-&", "\u0126"], ["\\M-D\\M-'", "\u0127"], ["\\M-D\\M-(", "\u0128"], ["\\M-D\\M-)", "\u0129"], ["\\M-D\\M-*", "\u012a"], ["\\M-D\\M-+", "\u012b"], ["\\M-D\\M-,", "\u012c"], ["\\M-D\\M--", "\u012d"], ["\\M-D\\M-.", "\u012e"], ["\\M-D\\M-/", "\u012f"], ["\\M-D\\M-0", "\u0130"], ["\\M-D\\M-1", "\u0131"], ["\\M-D\\M-2", "\u0132"], ["\\M-D\\M-3", "\u0133"], ["\\M-D\\M-4", "\u0134"], ["\\M-D\\M-5", "\u0135"], ["\\M-D\\M-6", "\u0136"], ["\\M-D\\M-7", "\u0137"], ["\\M-D\\M-8", "\u0138"], ["\\M-D\\M-9", "\u0139"], ["\\M-D\\M-:", "\u013a"], ["\\M-D\\M-;", "\u013b"], ["\\M-D\\M-<", "\u013c"], ["\\M-D\\M-=", "\u013d"], ["\\M-D\\M->", "\u013e"], ["\\M-D\\M-?", "\u013f"], ["\\M-E\\M^@", "\u0140"], ["\\M-E\\M^A", "\u0141"], ["\\M-E\\M^B", "\u0142"], ["\\M-E\\M^C", "\u0143"], ["\\M-E\\M^D", "\u0144"], ["\\M-E\\M^E", "\u0145"], ["\\M-E\\M^F", "\u0146"], ["\\M-E\\M^G", "\u0147"], ["\\M-E\\M^H", "\u0148"], ["\\M-E\\M^I", "\u0149"], ["\\M-E\\M^J", "\u014a"], ["\\M-E\\M^K", "\u014b"], ["\\M-E\\M^L", "\u014c"], ["\\M-E\\M^M", "\u014d"], ["\\M-E\\M^N", "\u014e"], ["\\M-E\\M^O", "\u014f"], ["\\M-E\\M^P", "\u0150"], ["\\M-E\\M^Q", "\u0151"], ["\\M-E\\M^R", "\u0152"], ["\\M-E\\M^S", "\u0153"], ["\\M-E\\M^T", "\u0154"], ["\\M-E\\M^U", "\u0155"], ["\\M-E\\M^V", "\u0156"], ["\\M-E\\M^W", "\u0157"], ["\\M-E\\M^X", "\u0158"], ["\\M-E\\M^Y", "\u0159"], ["\\M-E\\M^Z", "\u015a"], ["\\M-E\\M^[", "\u015b"], ["\\M-E\\M^\\", "\u015c"], ["\\M-E\\M^]", "\u015d"], ["\\M-E\\M^^", "\u015e"], ["\\M-E\\M^_", "\u015f"], ["\\M-E\\240", "\u0160"], ["\\M-E\\M-!", "\u0161"], ["\\M-E\\M-\"", "\u0162"], ["\\M-E\\M-#", "\u0163"], ["\\M-E\\M-$", "\u0164"], ["\\M-E\\M-%", "\u0165"], ["\\M-E\\M-&", "\u0166"], ["\\M-E\\M-'", "\u0167"], ["\\M-E\\M-(", "\u0168"], ["\\M-E\\M-)", "\u0169"], ["\\M-E\\M-*", "\u016a"], ["\\M-E\\M-+", "\u016b"], ["\\M-E\\M-,", "\u016c"], ["\\M-E\\M--", "\u016d"], ["\\M-E\\M-.", "\u016e"], ["\\M-E\\M-/", "\u016f"], ["\\M-E\\M-0", "\u0170"], ["\\M-E\\M-1", "\u0171"], ["\\M-E\\M-2", "\u0172"], ["\\M-E\\M-3", "\u0173"], ["\\M-E\\M-4", "\u0174"], ["\\M-E\\M-5", "\u0175"], ["\\M-E\\M-6", "\u0176"], ["\\M-E\\M-7", "\u0177"], ["\\M-E\\M-8", "\u0178"], ["\\M-E\\M-9", "\u0179"], ["\\M-E\\M-:", "\u017a"], ["\\M-E\\M-;", "\u017b"], ["\\M-E\\M-<", "\u017c"], ["\\M-E\\M-=", "\u017d"], ["\\M-E\\M->", "\u017e"], ["\\M-E\\M-?", "\u017f"], ["\\M-F\\M^@", "\u0180"], ["\\M-F\\M^A", "\u0181"], ["\\M-F\\M^B", "\u0182"], ["\\M-F\\M^C", "\u0183"], ["\\M-F\\M^D", "\u0184"], ["\\M-F\\M^E", "\u0185"], ["\\M-F\\M^F", "\u0186"], ["\\M-F\\M^G", "\u0187"], ["\\M-F\\M^H", "\u0188"], ["\\M-F\\M^I", "\u0189"], ["\\M-F\\M^J", "\u018a"], ["\\M-F\\M^K", "\u018b"], ["\\M-F\\M^L", "\u018c"], ["\\M-F\\M^M", "\u018d"], ["\\M-F\\M^N", "\u018e"], ["\\M-F\\M^O", "\u018f"], ["\\M-F\\M^P", "\u0190"], ["\\M-F\\M^Q", "\u0191"], ["\\M-F\\M^R", "\u0192"], ["\\M-F\\M^S", "\u0193"], ["\\M-F\\M^T", "\u0194"], ["\\M-F\\M^U", "\u0195"], ["\\M-F\\M^V", "\u0196"], ["\\M-F\\M^W", "\u0197"], ["\\M-F\\M^X", "\u0198"], ["\\M-F\\M^Y", "\u0199"], ["\\M-F\\M^Z", "\u019a"], ["\\M-F\\M^[", "\u019b"], ["\\M-F\\M^\\", "\u019c"], ["\\M-F\\M^]", "\u019d"], ["\\M-F\\M^^", "\u019e"], ["\\M-F\\M^_", "\u019f"], ["\\M-F\\240", "\u01a0"], ["\\M-F\\M-!", "\u01a1"], ["\\M-F\\M-\"", "\u01a2"], ["\\M-F\\M-#", "\u01a3"], ["\\M-F\\M-$", "\u01a4"], ["\\M-F\\M-%", "\u01a5"], ["\\M-F\\M-&", "\u01a6"], ["\\M-F\\M-'", "\u01a7"], ["\\M-F\\M-(", "\u01a8"], ["\\M-F\\M-)", "\u01a9"], ["\\M-F\\M-*", "\u01aa"], ["\\M-F\\M-+", "\u01ab"], ["\\M-F\\M-,", "\u01ac"], ["\\M-F\\M--", "\u01ad"], ["\\M-F\\M-.", "\u01ae"], ["\\M-F\\M-/", "\u01af"], ["\\M-F\\M-0", "\u01b0"], ["\\M-F\\M-1", "\u01b1"], ["\\M-F\\M-2", "\u01b2"], ["\\M-F\\M-3", "\u01b3"], ["\\M-F\\M-4", "\u01b4"], ["\\M-F\\M-5", "\u01b5"], ["\\M-F\\M-6", "\u01b6"], ["\\M-F\\M-7", "\u01b7"], ["\\M-F\\M-8", "\u01b8"], ["\\M-F\\M-9", "\u01b9"], ["\\M-F\\M-:", "\u01ba"], ["\\M-F\\M-;", "\u01bb"], ["\\M-F\\M-<", "\u01bc"], ["\\M-F\\M-=", "\u01bd"], ["\\M-F\\M->", "\u01be"], ["\\M-F\\M-?", "\u01bf"], ["\\M-G\\M^@", "\u01c0"], ["\\M-G\\M^A", "\u01c1"], ["\\M-G\\M^B", "\u01c2"], ["\\M-G\\M^C", "\u01c3"], ["\\M-G\\M^D", "\u01c4"], ["\\M-G\\M^E", "\u01c5"], ["\\M-G\\M^F", "\u01c6"], ["\\M-G\\M^G", "\u01c7"], ["\\M-G\\M^H", "\u01c8"], ["\\M-G\\M^I", "\u01c9"], ["\\M-G\\M^J", "\u01ca"], ["\\M-G\\M^K", "\u01cb"], ["\\M-G\\M^L", "\u01cc"], ["\\M-G\\M^M", "\u01cd"], ["\\M-G\\M^N", "\u01ce"], ["\\M-G\\M^O", "\u01cf"], ["\\M-G\\M^P", "\u01d0"], ["\\M-G\\M^Q", "\u01d1"], ["\\M-G\\M^R", "\u01d2"], ["\\M-G\\M^S", "\u01d3"], ["\\M-G\\M^T", "\u01d4"], ["\\M-G\\M^U", "\u01d5"], ["\\M-G\\M^V", "\u01d6"], ["\\M-G\\M^W", "\u01d7"], ["\\M-G\\M^X", "\u01d8"], ["\\M-G\\M^Y", "\u01d9"], ["\\M-G\\M^Z", "\u01da"], ["\\M-G\\M^[", "\u01db"], ["\\M-G\\M^\\", "\u01dc"], ["\\M-G\\M^]", "\u01dd"], ["\\M-G\\M^^", "\u01de"], ["\\M-G\\M^_", "\u01df"], ["\\M-G\\240", "\u01e0"], ["\\M-G\\M-!", "\u01e1"], ["\\M-G\\M-\"", "\u01e2"], ["\\M-G\\M-#", "\u01e3"], ["\\M-G\\M-$", "\u01e4"], ["\\M-G\\M-%", "\u01e5"], ["\\M-G\\M-&", "\u01e6"], ["\\M-G\\M-'", "\u01e7"], ["\\M-G\\M-(", "\u01e8"], ["\\M-G\\M-)", "\u01e9"], ["\\M-G\\M-*", "\u01ea"], ["\\M-G\\M-+", "\u01eb"], ["\\M-G\\M-,", "\u01ec"], ["\\M-G\\M--", "\u01ed"], ["\\M-G\\M-.", "\u01ee"], ["\\M-G\\M-/", "\u01ef"], ["\\M-G\\M-0", "\u01f0"], ["\\M-G\\M-1", "\u01f1"], ["\\M-G\\M-2", "\u01f2"], ["\\M-G\\M-3", "\u01f3"], ["\\M-G\\M-4", "\u01f4"], ["\\M-G\\M-5", "\u01f5"], ["\\M-G\\M-6", "\u01f6"], ["\\M-G\\M-7", "\u01f7"], ["\\M-G\\M-8", "\u01f8"], ["\\M-G\\M-9", "\u01f9"], ["\\M-G\\M-:", "\u01fa"], ["\\M-G\\M-;", "\u01fb"], ["\\M-G\\M-<", "\u01fc"], ["\\M-G\\M-=", "\u01fd"], ["\\M-G\\M->", "\u01fe"], ["\\M-G\\M-?", "\u01ff"], ["\\M-H\\M^@", "\u0200"], ["\\M-H\\M^A", "\u0201"], ["\\M-H\\M^B", "\u0202"], ["\\M-H\\M^C", "\u0203"], ["\\M-H\\M^D", "\u0204"], ["\\M-H\\M^E", "\u0205"], ["\\M-H\\M^F", "\u0206"], ["\\M-H\\M^G", "\u0207"], ["\\M-H\\M^H", "\u0208"], ["\\M-H\\M^I", "\u0209"], ["\\M-H\\M^J", "\u020a"], ["\\M-H\\M^K", "\u020b"], ["\\M-H\\M^L", "\u020c"], ["\\M-H\\M^M", "\u020d"], ["\\M-H\\M^N", "\u020e"], ["\\M-H\\M^O", "\u020f"], ["\\M-H\\M^P", "\u0210"], ["\\M-H\\M^Q", "\u0211"], ["\\M-H\\M^R", "\u0212"], ["\\M-H\\M^S", "\u0213"], ["\\M-H\\M^T", "\u0214"], ["\\M-H\\M^U", "\u0215"], ["\\M-H\\M^V", "\u0216"], ["\\M-H\\M^W", "\u0217"], ["\\M-H\\M^X", "\u0218"], ["\\M-H\\M^Y", "\u0219"], ["\\M-H\\M^Z", "\u021a"], ["\\M-H\\M^[", "\u021b"], ["\\M-H\\M^\\", "\u021c"], ["\\M-H\\M^]", "\u021d"], ["\\M-H\\M^^", "\u021e"], ["\\M-H\\M^_", "\u021f"], ["\\M-H\\240", "\u0220"], ["\\M-H\\M-!", "\u0221"], ["\\M-H\\M-\"", "\u0222"], ["\\M-H\\M-#", "\u0223"], ["\\M-H\\M-$", "\u0224"], ["\\M-H\\M-%", "\u0225"], ["\\M-H\\M-&", "\u0226"], ["\\M-H\\M-'", "\u0227"], ["\\M-H\\M-(", "\u0228"], ["\\M-H\\M-)", "\u0229"], ["\\M-H\\M-*", "\u022a"], ["\\M-H\\M-+", "\u022b"], ["\\M-H\\M-,", "\u022c"], ["\\M-H\\M--", "\u022d"], ["\\M-H\\M-.", "\u022e"], ["\\M-H\\M-/", "\u022f"], ["\\M-H\\M-0", "\u0230"], ["\\M-H\\M-1", "\u0231"], ["\\M-H\\M-2", "\u0232"], ["\\M-H\\M-3", "\u0233"], ["\\M-H\\M-4", "\u0234"], ["\\M-H\\M-5", "\u0235"], ["\\M-H\\M-6", "\u0236"], ["\\M-H\\M-7", "\u0237"], ["\\M-H\\M-8", "\u0238"], ["\\M-H\\M-9", "\u0239"], ["\\M-H\\M-:", "\u023a"], ["\\M-H\\M-;", "\u023b"], ["\\M-H\\M-<", "\u023c"], ["\\M-H\\M-=", "\u023d"], ["\\M-H\\M->", "\u023e"], ["\\M-H\\M-?", "\u023f"], ["\\M-I\\M^@", "\u0240"], ["\\M-I\\M^A", "\u0241"], ["\\M-I\\M^B", "\u0242"], ["\\M-I\\M^C", "\u0243"], ["\\M-I\\M^D", "\u0244"], ["\\M-I\\M^E", "\u0245"], ["\\M-I\\M^F", "\u0246"], ["\\M-I\\M^G", "\u0247"], ["\\M-I\\M^H", "\u0248"], ["\\M-I\\M^I", "\u0249"], ["\\M-I\\M^J", "\u024a"], ["\\M-I\\M^K", "\u024b"], ["\\M-I\\M^L", "\u024c"], ["\\M-I\\M^M", "\u024d"], ["\\M-I\\M^N", "\u024e"], ["\\M-I\\M^O", "\u024f"], ["\\M-M\\M-0", "\u0370"], ["\\M-M\\M-1", "\u0371"], ["\\M-M\\M-2", "\u0372"], ["\\M-M\\M-3", "\u0373"], ["\\M-M\\M-4", "\u0374"], ["\\M-M\\M-5", "\u0375"], ["\\M-M\\M-6", "\u0376"], ["\\M-M\\M-7", "\u0377"], ["\\M-M\\M-8", "\u0378"], ["\\M-M\\M-9", "\u0379"], ["\\M-M\\M-:", "\u037a"], ["\\M-M\\M-;", "\u037b"], ["\\M-M\\M-<", "\u037c"], ["\\M-M\\M-=", "\u037d"], ["\\M-M\\M->", "\u037e"], ["\\M-M\\M-?", "\u037f"], ["\\M-N\\M^@", "\u0380"], ["\\M-N\\M^A", "\u0381"], ["\\M-N\\M^B", "\u0382"], ["\\M-N\\M^C", "\u0383"], ["\\M-N\\M^D", "\u0384"], ["\\M-N\\M^E", "\u0385"], ["\\M-N\\M^F", "\u0386"], ["\\M-N\\M^G", "\u0387"], ["\\M-N\\M^H", "\u0388"], ["\\M-N\\M^I", "\u0389"], ["\\M-N\\M^J", "\u038a"], ["\\M-N\\M^K", "\u038b"], ["\\M-N\\M^L", "\u038c"], ["\\M-N\\M^M", "\u038d"], ["\\M-N\\M^N", "\u038e"], ["\\M-N\\M^O", "\u038f"], ["\\M-N\\M^P", "\u0390"], ["\\M-N\\M^Q", "\u0391"], ["\\M-N\\M^R", "\u0392"], ["\\M-N\\M^S", "\u0393"], ["\\M-N\\M^T", "\u0394"], ["\\M-N\\M^U", "\u0395"], ["\\M-N\\M^V", "\u0396"], ["\\M-N\\M^W", "\u0397"], ["\\M-N\\M^X", "\u0398"], ["\\M-N\\M^Y", "\u0399"], ["\\M-N\\M^Z", "\u039a"], ["\\M-N\\M^[", "\u039b"], ["\\M-N\\M^\\", "\u039c"], ["\\M-N\\M^]", "\u039d"], ["\\M-N\\M^^", "\u039e"], ["\\M-N\\M^_", "\u039f"], ["\\M-N\\240", "\u03a0"], ["\\M-N\\M-!", "\u03a1"], ["\\M-N\\M-\"", "\u03a2"], ["\\M-N\\M-#", "\u03a3"], ["\\M-N\\M-$", "\u03a4"], ["\\M-N\\M-%", "\u03a5"], ["\\M-N\\M-&", "\u03a6"], ["\\M-N\\M-'", "\u03a7"], ["\\M-N\\M-(", "\u03a8"], ["\\M-N\\M-)", "\u03a9"], ["\\M-N\\M-*", "\u03aa"], ["\\M-N\\M-+", "\u03ab"], ["\\M-N\\M-,", "\u03ac"], ["\\M-N\\M--", "\u03ad"], ["\\M-N\\M-.", "\u03ae"], ["\\M-N\\M-/", "\u03af"], ["\\M-N\\M-0", "\u03b0"], ["\\M-N\\M-1", "\u03b1"], ["\\M-N\\M-2", "\u03b2"], ["\\M-N\\M-3", "\u03b3"], ["\\M-N\\M-4", "\u03b4"], ["\\M-N\\M-5", "\u03b5"], ["\\M-N\\M-6", "\u03b6"], ["\\M-N\\M-7", "\u03b7"], ["\\M-N\\M-8", "\u03b8"], ["\\M-N\\M-9", "\u03b9"], ["\\M-N\\M-:", "\u03ba"], ["\\M-N\\M-;", "\u03bb"], ["\\M-N\\M-<", "\u03bc"], ["\\M-N\\M-=", "\u03bd"], ["\\M-N\\M->", "\u03be"], ["\\M-N\\M-?", "\u03bf"], ["\\M-O\\M^@", "\u03c0"], ["\\M-O\\M^A", "\u03c1"], ["\\M-O\\M^B", "\u03c2"], ["\\M-O\\M^C", "\u03c3"], ["\\M-O\\M^D", "\u03c4"], ["\\M-O\\M^E", "\u03c5"], ["\\M-O\\M^F", "\u03c6"], ["\\M-O\\M^G", "\u03c7"], ["\\M-O\\M^H", "\u03c8"], ["\\M-O\\M^I", "\u03c9"], ["\\M-O\\M^J", "\u03ca"], ["\\M-O\\M^K", "\u03cb"], ["\\M-O\\M^L", "\u03cc"], ["\\M-O\\M^M", "\u03cd"], ["\\M-O\\M^N", "\u03ce"], ["\\M-O\\M^O", "\u03cf"], ["\\M-O\\M^P", "\u03d0"], ["\\M-O\\M^Q", "\u03d1"], ["\\M-O\\M^R", "\u03d2"], ["\\M-O\\M^S", "\u03d3"], ["\\M-O\\M^T", "\u03d4"], ["\\M-O\\M^U", "\u03d5"], ["\\M-O\\M^V", "\u03d6"], ["\\M-O\\M^W", "\u03d7"], ["\\M-O\\M^X", "\u03d8"], ["\\M-O\\M^Y", "\u03d9"], ["\\M-O\\M^Z", "\u03da"], ["\\M-O\\M^[", "\u03db"], ["\\M-O\\M^\\", "\u03dc"], ["\\M-O\\M^]", "\u03dd"], ["\\M-O\\M^^", "\u03de"], ["\\M-O\\M^_", "\u03df"], ["\\M-O\\240", "\u03e0"], ["\\M-O\\M-!", "\u03e1"], ["\\M-O\\M-\"", "\u03e2"], ["\\M-O\\M-#", "\u03e3"], ["\\M-O\\M-$", "\u03e4"], ["\\M-O\\M-%", "\u03e5"], ["\\M-O\\M-&", "\u03e6"], ["\\M-O\\M-'", "\u03e7"], ["\\M-O\\M-(", "\u03e8"], ["\\M-O\\M-)", "\u03e9"], ["\\M-O\\M-*", "\u03ea"], ["\\M-O\\M-+", "\u03eb"], ["\\M-O\\M-,", "\u03ec"], ["\\M-O\\M--", "\u03ed"], ["\\M-O\\M-.", "\u03ee"], ["\\M-O\\M-/", "\u03ef"], ["\\M-O\\M-0", "\u03f0"], ["\\M-O\\M-1", "\u03f1"], ["\\M-O\\M-2", "\u03f2"], ["\\M-O\\M-3", "\u03f3"], ["\\M-O\\M-4", "\u03f4"], ["\\M-O\\M-5", "\u03f5"], ["\\M-O\\M-6", "\u03f6"], ["\\M-O\\M-7", "\u03f7"], ["\\M-O\\M-8", "\u03f8"], ["\\M-O\\M-9", "\u03f9"], ["\\M-O\\M-:", "\u03fa"], ["\\M-O\\M-;", "\u03fb"], ["\\M-O\\M-<", "\u03fc"], ["\\M-O\\M-=", "\u03fd"], ["\\M-O\\M->", "\u03fe"], ["\\M-O\\M-?", "\u03ff"], ["\\M-P\\M^@", "\u0400"], ["\\M-P\\M^A", "\u0401"], ["\\M-P\\M^B", "\u0402"], ["\\M-P\\M^C", "\u0403"], ["\\M-P\\M^D", "\u0404"], ["\\M-P\\M^E", "\u0405"], ["\\M-P\\M^F", "\u0406"], ["\\M-P\\M^G", "\u0407"], ["\\M-P\\M^H", "\u0408"], ["\\M-P\\M^I", "\u0409"], ["\\M-P\\M^J", "\u040a"], ["\\M-P\\M^K", "\u040b"], ["\\M-P\\M^L", "\u040c"], ["\\M-P\\M^M", "\u040d"], ["\\M-P\\M^N", "\u040e"], ["\\M-P\\M^O", "\u040f"], ["\\M-P\\M^P", "\u0410"], ["\\M-P\\M^Q", "\u0411"], ["\\M-P\\M^R", "\u0412"], ["\\M-P\\M^S", "\u0413"], ["\\M-P\\M^T", "\u0414"], ["\\M-P\\M^U", "\u0415"], ["\\M-P\\M^V", "\u0416"], ["\\M-P\\M^W", "\u0417"], ["\\M-P\\M^X", "\u0418"], ["\\M-P\\M^Y", "\u0419"], ["\\M-P\\M^Z", "\u041a"], ["\\M-P\\M^[", "\u041b"], ["\\M-P\\M^\\", "\u041c"], ["\\M-P\\M^]", "\u041d"], ["\\M-P\\M^^", "\u041e"], ["\\M-P\\M^_", "\u041f"], ["\\M-P\\240", "\u0420"], ["\\M-P\\M-!", "\u0421"], ["\\M-P\\M-\"", "\u0422"], ["\\M-P\\M-#", "\u0423"], ["\\M-P\\M-$", "\u0424"], ["\\M-P\\M-%", "\u0425"], ["\\M-P\\M-&", "\u0426"], ["\\M-P\\M-'", "\u0427"], ["\\M-P\\M-(", "\u0428"], ["\\M-P\\M-)", "\u0429"], ["\\M-P\\M-*", "\u042a"], ["\\M-P\\M-+", "\u042b"], ["\\M-P\\M-,", "\u042c"], ["\\M-P\\M--", "\u042d"], ["\\M-P\\M-.", "\u042e"], ["\\M-P\\M-/", "\u042f"], ["\\M-P\\M-0", "\u0430"], ["\\M-P\\M-1", "\u0431"], ["\\M-P\\M-2", "\u0432"], ["\\M-P\\M-3", "\u0433"], ["\\M-P\\M-4", "\u0434"], ["\\M-P\\M-5", "\u0435"], ["\\M-P\\M-6", "\u0436"], ["\\M-P\\M-7", "\u0437"], ["\\M-P\\M-8", "\u0438"], ["\\M-P\\M-9", "\u0439"], ["\\M-P\\M-:", "\u043a"], ["\\M-P\\M-;", "\u043b"], ["\\M-P\\M-<", "\u043c"], ["\\M-P\\M-=", "\u043d"], ["\\M-P\\M->", "\u043e"], ["\\M-P\\M-?", "\u043f"], ["\\M-Q\\M^@", "\u0440"], ["\\M-Q\\M^A", "\u0441"], ["\\M-Q\\M^B", "\u0442"], ["\\M-Q\\M^C", "\u0443"], ["\\M-Q\\M^D", "\u0444"], ["\\M-Q\\M^E", "\u0445"], ["\\M-Q\\M^F", "\u0446"], ["\\M-Q\\M^G", "\u0447"], ["\\M-Q\\M^H", "\u0448"], ["\\M-Q\\M^I", "\u0449"], ["\\M-Q\\M^J", "\u044a"], ["\\M-Q\\M^K", "\u044b"], ["\\M-Q\\M^L", "\u044c"], ["\\M-Q\\M^M", "\u044d"], ["\\M-Q\\M^N", "\u044e"], ["\\M-Q\\M^O", "\u044f"], ["\\M-Q\\M^P", "\u0450"], ["\\M-Q\\M^Q", "\u0451"], ["\\M-Q\\M^R", "\u0452"], ["\\M-Q\\M^S", "\u0453"], ["\\M-Q\\M^T", "\u0454"], ["\\M-Q\\M^U", "\u0455"], ["\\M-Q\\M^V", "\u0456"], ["\\M-Q\\M^W", "\u0457"], ["\\M-Q\\M^X", "\u0458"], ["\\M-Q\\M^Y", "\u0459"], ["\\M-Q\\M^Z", "\u045a"], ["\\M-Q\\M^[", "\u045b"], ["\\M-Q\\M^\\", "\u045c"], ["\\M-Q\\M^]", "\u045d"], ["\\M-Q\\M^^", "\u045e"], ["\\M-Q\\M^_", "\u045f"], ["\\M-Q\\240", "\u0460"], ["\\M-Q\\M-!", "\u0461"], ["\\M-Q\\M-\"", "\u0462"], ["\\M-Q\\M-#", "\u0463"], ["\\M-Q\\M-$", "\u0464"], ["\\M-Q\\M-%", "\u0465"], ["\\M-Q\\M-&", "\u0466"], ["\\M-Q\\M-'", "\u0467"], ["\\M-Q\\M-(", "\u0468"], ["\\M-Q\\M-)", "\u0469"], ["\\M-Q\\M-*", "\u046a"], ["\\M-Q\\M-+", "\u046b"], ["\\M-Q\\M-,", "\u046c"], ["\\M-Q\\M--", "\u046d"], ["\\M-Q\\M-.", "\u046e"], ["\\M-Q\\M-/", "\u046f"], ["\\M-Q\\M-0", "\u0470"], ["\\M-Q\\M-1", "\u0471"], ["\\M-Q\\M-2", "\u0472"], ["\\M-Q\\M-3", "\u0473"], ["\\M-Q\\M-4", "\u0474"], ["\\M-Q\\M-5", "\u0475"], ["\\M-Q\\M-6", "\u0476"], ["\\M-Q\\M-7", "\u0477"], ["\\M-Q\\M-8", "\u0478"], ["\\M-Q\\M-9", "\u0479"], ["\\M-Q\\M-:", "\u047a"], ["\\M-Q\\M-;", "\u047b"], ["\\M-Q\\M-<", "\u047c"], ["\\M-Q\\M-=", "\u047d"], ["\\M-Q\\M->", "\u047e"], ["\\M-Q\\M-?", "\u047f"], ["\\M-R\\M^@", "\u0480"], ["\\M-R\\M^A", "\u0481"], ["\\M-R\\M^B", "\u0482"], ["\\M-R\\M^C", "\u0483"], ["\\M-R\\M^D", "\u0484"], ["\\M-R\\M^E", "\u0485"], ["\\M-R\\M^F", "\u0486"], ["\\M-R\\M^G", "\u0487"], ["\\M-R\\M^H", "\u0488"], ["\\M-R\\M^I", "\u0489"], ["\\M-R\\M^J", "\u048a"], ["\\M-R\\M^K", "\u048b"], ["\\M-R\\M^L", "\u048c"], ["\\M-R\\M^M", "\u048d"], ["\\M-R\\M^N", "\u048e"], ["\\M-R\\M^O", "\u048f"], ["\\M-R\\M^P", "\u0490"], ["\\M-R\\M^Q", "\u0491"], ["\\M-R\\M^R", "\u0492"], ["\\M-R\\M^S", "\u0493"], ["\\M-R\\M^T", "\u0494"], ["\\M-R\\M^U", "\u0495"], ["\\M-R\\M^V", "\u0496"], ["\\M-R\\M^W", "\u0497"], ["\\M-R\\M^X", "\u0498"], ["\\M-R\\M^Y", "\u0499"], ["\\M-R\\M^Z", "\u049a"], ["\\M-R\\M^[", "\u049b"], ["\\M-R\\M^\\", "\u049c"], ["\\M-R\\M^]", "\u049d"], ["\\M-R\\M^^", "\u049e"], ["\\M-R\\M^_", "\u049f"], ["\\M-R\\240", "\u04a0"], ["\\M-R\\M-!", "\u04a1"], ["\\M-R\\M-\"", "\u04a2"], ["\\M-R\\M-#", "\u04a3"], ["\\M-R\\M-$", "\u04a4"], ["\\M-R\\M-%", "\u04a5"], ["\\M-R\\M-&", "\u04a6"], ["\\M-R\\M-'", "\u04a7"], ["\\M-R\\M-(", "\u04a8"], ["\\M-R\\M-)", "\u04a9"], ["\\M-R\\M-*", "\u04aa"], ["\\M-R\\M-+", "\u04ab"], ["\\M-R\\M-,", "\u04ac"], ["\\M-R\\M--", "\u04ad"], ["\\M-R\\M-.", "\u04ae"], ["\\M-R\\M-/", "\u04af"], ["\\M-R\\M-0", "\u04b0"], ["\\M-R\\M-1", "\u04b1"], ["\\M-R\\M-2", "\u04b2"], ["\\M-R\\M-3", "\u04b3"], ["\\M-R\\M-4", "\u04b4"], ["\\M-R\\M-5", "\u04b5"], ["\\M-R\\M-6", "\u04b6"], ["\\M-R\\M-7", "\u04b7"], ["\\M-R\\M-8", "\u04b8"], ["\\M-R\\M-9", "\u04b9"], ["\\M-R\\M-:", "\u04ba"], ["\\M-R\\M-;", "\u04bb"], ["\\M-R\\M-<", "\u04bc"], ["\\M-R\\M-=", "\u04bd"], ["\\M-R\\M->", "\u04be"], ["\\M-R\\M-?", "\u04bf"], ["\\M-S\\M^@", "\u04c0"], ["\\M-S\\M^A", "\u04c1"], ["\\M-S\\M^B", "\u04c2"], ["\\M-S\\M^C", "\u04c3"], ["\\M-S\\M^D", "\u04c4"], ["\\M-S\\M^E", "\u04c5"], ["\\M-S\\M^F", "\u04c6"], ["\\M-S\\M^G", "\u04c7"], ["\\M-S\\M^H", "\u04c8"], ["\\M-S\\M^I", "\u04c9"], ["\\M-S\\M^J", "\u04ca"], ["\\M-S\\M^K", "\u04cb"], ["\\M-S\\M^L", "\u04cc"], ["\\M-S\\M^M", "\u04cd"], ["\\M-S\\M^N", "\u04ce"], ["\\M-S\\M^O", "\u04cf"], ["\\M-S\\M^P", "\u04d0"], ["\\M-S\\M^Q", "\u04d1"], ["\\M-S\\M^R", "\u04d2"], ["\\M-S\\M^S", "\u04d3"], ["\\M-S\\M^T", "\u04d4"], ["\\M-S\\M^U", "\u04d5"], ["\\M-S\\M^V", "\u04d6"], ["\\M-S\\M^W", "\u04d7"], ["\\M-S\\M^X", "\u04d8"], ["\\M-S\\M^Y", "\u04d9"], ["\\M-S\\M^Z", "\u04da"], ["\\M-S\\M^[", "\u04db"], ["\\M-S\\M^\\", "\u04dc"], ["\\M-S\\M^]", "\u04dd"], ["\\M-S\\M^^", "\u04de"], ["\\M-S\\M^_", "\u04df"], ["\\M-S\\240", "\u04e0"], ["\\M-S\\M-!", "\u04e1"], ["\\M-S\\M-\"", "\u04e2"], ["\\M-S\\M-#", "\u04e3"], ["\\M-S\\M-$", "\u04e4"], ["\\M-S\\M-%", "\u04e5"], ["\\M-S\\M-&", "\u04e6"], ["\\M-S\\M-'", "\u04e7"], ["\\M-S\\M-(", "\u04e8"], ["\\M-S\\M-)", "\u04e9"], ["\\M-S\\M-*", "\u04ea"], ["\\M-S\\M-+", "\u04eb"], ["\\M-S\\M-,", "\u04ec"], ["\\M-S\\M--", "\u04ed"], ["\\M-S\\M-.", "\u04ee"], ["\\M-S\\M-/", "\u04ef"], ["\\M-S\\M-0", "\u04f0"], ["\\M-S\\M-1", "\u04f1"], ["\\M-S\\M-2", "\u04f2"], ["\\M-S\\M-3", "\u04f3"], ["\\M-S\\M-4", "\u04f4"], ["\\M-S\\M-5", "\u04f5"], ["\\M-S\\M-6", "\u04f6"], ["\\M-S\\M-7", "\u04f7"], ["\\M-S\\M-8", "\u04f8"], ["\\M-S\\M-9", "\u04f9"], ["\\M-S\\M-:", "\u04fa"], ["\\M-S\\M-;", "\u04fb"], ["\\M-S\\M-<", "\u04fc"], ["\\M-S\\M-=", "\u04fd"], ["\\M-S\\M->", "\u04fe"], ["\\M-S\\M-?", "\u04ff"], ["\\M-T\\M^@", "\u0500"], ["\\M-T\\M^A", "\u0501"], ["\\M-T\\M^B", "\u0502"], ["\\M-T\\M^C", "\u0503"], ["\\M-T\\M^D", "\u0504"], ["\\M-T\\M^E", "\u0505"], ["\\M-T\\M^F", "\u0506"], ["\\M-T\\M^G", "\u0507"], ["\\M-T\\M^H", "\u0508"], ["\\M-T\\M^I", "\u0509"], ["\\M-T\\M^J", "\u050a"], ["\\M-T\\M^K", "\u050b"], ["\\M-T\\M^L", "\u050c"], ["\\M-T\\M^M", "\u050d"], ["\\M-T\\M^N", "\u050e"], ["\\M-T\\M^O", "\u050f"], ["\\M-T\\M^P", "\u0510"], ["\\M-T\\M^Q", "\u0511"], ["\\M-T\\M^R", "\u0512"], ["\\M-T\\M^S", "\u0513"], ["\\M-T\\M^T", "\u0514"], ["\\M-T\\M^U", "\u0515"], ["\\M-T\\M^V", "\u0516"], ["\\M-T\\M^W", "\u0517"], ["\\M-T\\M^X", "\u0518"], ["\\M-T\\M^Y", "\u0519"], ["\\M-T\\M^Z", "\u051a"], ["\\M-T\\M^[", "\u051b"], ["\\M-T\\M^\\", "\u051c"], ["\\M-T\\M^]", "\u051d"], ["\\M-T\\M^^", "\u051e"], ["\\M-T\\M^_", "\u051f"], ["\\M-T\\240", "\u0520"], ["\\M-T\\M-!", "\u0521"], ["\\M-T\\M-\"", "\u0522"], ["\\M-T\\M-#", "\u0523"], ["\\M-T\\M-$", "\u0524"], ["\\M-T\\M-%", "\u0525"], ["\\M-T\\M-&", "\u0526"], ["\\M-T\\M-'", "\u0527"], ["\\M-T\\M-(", "\u0528"], ["\\M-T\\M-)", "\u0529"], ["\\M-T\\M-*", "\u052a"], ["\\M-T\\M-+", "\u052b"], ["\\M-T\\M-,", "\u052c"], ["\\M-T\\M--", "\u052d"], ["\\M-T\\M-.", "\u052e"], ["\\M-T\\M-/", "\u052f"], ["\\M-V\\M^P", "\u0590"], ["\\M-V\\M^Q", "\u0591"], ["\\M-V\\M^R", "\u0592"], ["\\M-V\\M^S", "\u0593"], ["\\M-V\\M^T", "\u0594"], ["\\M-V\\M^U", "\u0595"], ["\\M-V\\M^V", "\u0596"], ["\\M-V\\M^W", "\u0597"], ["\\M-V\\M^X", "\u0598"], ["\\M-V\\M^Y", "\u0599"], ["\\M-V\\M^Z", "\u059a"], ["\\M-V\\M^[", "\u059b"], ["\\M-V\\M^\\", "\u059c"], ["\\M-V\\M^]", "\u059d"], ["\\M-V\\M^^", "\u059e"], ["\\M-V\\M^_", "\u059f"], ["\\M-V\\240", "\u05a0"], ["\\M-V\\M-!", "\u05a1"], ["\\M-V\\M-\"", "\u05a2"], ["\\M-V\\M-#", "\u05a3"], ["\\M-V\\M-$", "\u05a4"], ["\\M-V\\M-%", "\u05a5"], ["\\M-V\\M-&", "\u05a6"], ["\\M-V\\M-'", "\u05a7"], ["\\M-V\\M-(", "\u05a8"], ["\\M-V\\M-)", "\u05a9"], ["\\M-V\\M-*", "\u05aa"], ["\\M-V\\M-+", "\u05ab"], ["\\M-V\\M-,", "\u05ac"], ["\\M-V\\M--", "\u05ad"], ["\\M-V\\M-.", "\u05ae"], ["\\M-V\\M-/", "\u05af"], ["\\M-V\\M-0", "\u05b0"], ["\\M-V\\M-1", "\u05b1"], ["\\M-V\\M-2", "\u05b2"], ["\\M-V\\M-3", "\u05b3"], ["\\M-V\\M-4", "\u05b4"], ["\\M-V\\M-5", "\u05b5"], ["\\M-V\\M-6", "\u05b6"], ["\\M-V\\M-7", "\u05b7"], ["\\M-V\\M-8", "\u05b8"], ["\\M-V\\M-9", "\u05b9"], ["\\M-V\\M-:", "\u05ba"], ["\\M-V\\M-;", "\u05bb"], ["\\M-V\\M-<", "\u05bc"], ["\\M-V\\M-=", "\u05bd"], ["\\M-V\\M->", "\u05be"], ["\\M-V\\M-?", "\u05bf"], ["\\M-W\\M^@", "\u05c0"], ["\\M-W\\M^A", "\u05c1"], ["\\M-W\\M^B", "\u05c2"], ["\\M-W\\M^C", "\u05c3"], ["\\M-W\\M^D", "\u05c4"], ["\\M-W\\M^E", "\u05c5"], ["\\M-W\\M^F", "\u05c6"], ["\\M-W\\M^G", "\u05c7"], ["\\M-W\\M^H", "\u05c8"], ["\\M-W\\M^I", "\u05c9"], ["\\M-W\\M^J", "\u05ca"], ["\\M-W\\M^K", "\u05cb"], ["\\M-W\\M^L", "\u05cc"], ["\\M-W\\M^M", "\u05cd"], ["\\M-W\\M^N", "\u05ce"], ["\\M-W\\M^O", "\u05cf"], ["\\M-W\\M^P", "\u05d0"], ["\\M-W\\M^Q", "\u05d1"], ["\\M-W\\M^R", "\u05d2"], ["\\M-W\\M^S", "\u05d3"], ["\\M-W\\M^T", "\u05d4"], ["\\M-W\\M^U", "\u05d5"], ["\\M-W\\M^V", "\u05d6"], ["\\M-W\\M^W", "\u05d7"], ["\\M-W\\M^X", "\u05d8"], ["\\M-W\\M^Y", "\u05d9"], ["\\M-W\\M^Z", "\u05da"], ["\\M-W\\M^[", "\u05db"], ["\\M-W\\M^\\", "\u05dc"], ["\\M-W\\M^]", "\u05dd"], ["\\M-W\\M^^", "\u05de"], ["\\M-W\\M^_", "\u05df"], ["\\M-W\\240", "\u05e0"], ["\\M-W\\M-!", "\u05e1"], ["\\M-W\\M-\"", "\u05e2"], ["\\M-W\\M-#", "\u05e3"], ["\\M-W\\M-$", "\u05e4"], ["\\M-W\\M-%", "\u05e5"], ["\\M-W\\M-&", "\u05e6"], ["\\M-W\\M-'", "\u05e7"], ["\\M-W\\M-(", "\u05e8"], ["\\M-W\\M-)", "\u05e9"], ["\\M-W\\M-*", "\u05ea"], ["\\M-W\\M-+", "\u05eb"], ["\\M-W\\M-,", "\u05ec"], ["\\M-W\\M--", "\u05ed"], ["\\M-W\\M-.", "\u05ee"], ["\\M-W\\M-/", "\u05ef"], ["\\M-W\\M-0", "\u05f0"], ["\\M-W\\M-1", "\u05f1"], ["\\M-W\\M-2", "\u05f2"], ["\\M-W\\M-3", "\u05f3"], ["\\M-W\\M-4", "\u05f4"], ["\\M-W\\M-5", "\u05f5"], ["\\M-W\\M-6", "\u05f6"], ["\\M-W\\M-7", "\u05f7"], ["\\M-W\\M-8", "\u05f8"], ["\\M-W\\M-9", "\u05f9"], ["\\M-W\\M-:", "\u05fa"], ["\\M-W\\M-;", "\u05fb"], ["\\M-W\\M-<", "\u05fc"], ["\\M-W\\M-=", "\u05fd"], ["\\M-W\\M->", "\u05fe"], ["\\M-W\\M-?", "\u05ff"], ["\\M-X\\M^@", "\u0600"], ["\\M-X\\M^A", "\u0601"], ["\\M-X\\M^B", "\u0602"], ["\\M-X\\M^C", "\u0603"], ["\\M-X\\M^D", "\u0604"], ["\\M-X\\M^E", "\u0605"], ["\\M-X\\M^F", "\u0606"], ["\\M-X\\M^G", "\u0607"], ["\\M-X\\M^H", "\u0608"], ["\\M-X\\M^I", "\u0609"], ["\\M-X\\M^J", "\u060a"], ["\\M-X\\M^K", "\u060b"], ["\\M-X\\M^L", "\u060c"], ["\\M-X\\M^M", "\u060d"], ["\\M-X\\M^N", "\u060e"], ["\\M-X\\M^O", "\u060f"], ["\\M-X\\M^P", "\u0610"], ["\\M-X\\M^Q", "\u0611"], ["\\M-X\\M^R", "\u0612"], ["\\M-X\\M^S", "\u0613"], ["\\M-X\\M^T", "\u0614"], ["\\M-X\\M^U", "\u0615"], ["\\M-X\\M^V", "\u0616"], ["\\M-X\\M^W", "\u0617"], ["\\M-X\\M^X", "\u0618"], ["\\M-X\\M^Y", "\u0619"], ["\\M-X\\M^Z", "\u061a"], ["\\M-X\\M^[", "\u061b"], ["\\M-X\\M^\\", "\u061c"], ["\\M-X\\M^]", "\u061d"], ["\\M-X\\M^^", "\u061e"], ["\\M-X\\M^_", "\u061f"], ["\\M-X\\240", "\u0620"], ["\\M-X\\M-!", "\u0621"], ["\\M-X\\M-\"", "\u0622"], ["\\M-X\\M-#", "\u0623"], ["\\M-X\\M-$", "\u0624"], ["\\M-X\\M-%", "\u0625"], ["\\M-X\\M-&", "\u0626"], ["\\M-X\\M-'", "\u0627"], ["\\M-X\\M-(", "\u0628"], ["\\M-X\\M-)", "\u0629"], ["\\M-X\\M-*", "\u062a"], ["\\M-X\\M-+", "\u062b"], ["\\M-X\\M-,", "\u062c"], ["\\M-X\\M--", "\u062d"], ["\\M-X\\M-.", "\u062e"], ["\\M-X\\M-/", "\u062f"], ["\\M-X\\M-0", "\u0630"], ["\\M-X\\M-1", "\u0631"], ["\\M-X\\M-2", "\u0632"], ["\\M-X\\M-3", "\u0633"], ["\\M-X\\M-4", "\u0634"], ["\\M-X\\M-5", "\u0635"], ["\\M-X\\M-6", "\u0636"], ["\\M-X\\M-7", "\u0637"], ["\\M-X\\M-8", "\u0638"], ["\\M-X\\M-9", "\u0639"], ["\\M-X\\M-:", "\u063a"], ["\\M-X\\M-;", "\u063b"], ["\\M-X\\M-<", "\u063c"], ["\\M-X\\M-=", "\u063d"], ["\\M-X\\M->", "\u063e"], ["\\M-X\\M-?", "\u063f"], ["\\M-Y\\M^@", "\u0640"], ["\\M-Y\\M^A", "\u0641"], ["\\M-Y\\M^B", "\u0642"], ["\\M-Y\\M^C", "\u0643"], ["\\M-Y\\M^D", "\u0644"], ["\\M-Y\\M^E", "\u0645"], ["\\M-Y\\M^F", "\u0646"], ["\\M-Y\\M^G", "\u0647"], ["\\M-Y\\M^H", "\u0648"], ["\\M-Y\\M^I", "\u0649"], ["\\M-Y\\M^J", "\u064a"], ["\\M-Y\\M^K", "\u064b"], ["\\M-Y\\M^L", "\u064c"], ["\\M-Y\\M^M", "\u064d"], ["\\M-Y\\M^N", "\u064e"], ["\\M-Y\\M^O", "\u064f"], ["\\M-Y\\M^P", "\u0650"], ["\\M-Y\\M^Q", "\u0651"], ["\\M-Y\\M^R", "\u0652"], ["\\M-Y\\M^S", "\u0653"], ["\\M-Y\\M^T", "\u0654"], ["\\M-Y\\M^U", "\u0655"], ["\\M-Y\\M^V", "\u0656"], ["\\M-Y\\M^W", "\u0657"], ["\\M-Y\\M^X", "\u0658"], ["\\M-Y\\M^Y", "\u0659"], ["\\M-Y\\M^Z", "\u065a"], ["\\M-Y\\M^[", "\u065b"], ["\\M-Y\\M^\\", "\u065c"], ["\\M-Y\\M^]", "\u065d"], ["\\M-Y\\M^^", "\u065e"], ["\\M-Y\\M^_", "\u065f"], ["\\M-Y\\240", "\u0660"], ["\\M-Y\\M-!", "\u0661"], ["\\M-Y\\M-\"", "\u0662"], ["\\M-Y\\M-#", "\u0663"], ["\\M-Y\\M-$", "\u0664"], ["\\M-Y\\M-%", "\u0665"], ["\\M-Y\\M-&", "\u0666"], ["\\M-Y\\M-'", "\u0667"], ["\\M-Y\\M-(", "\u0668"], ["\\M-Y\\M-)", "\u0669"], ["\\M-Y\\M-*", "\u066a"], ["\\M-Y\\M-+", "\u066b"], ["\\M-Y\\M-,", "\u066c"], ["\\M-Y\\M--", "\u066d"], ["\\M-Y\\M-.", "\u066e"], ["\\M-Y\\M-/", "\u066f"], ["\\M-Y\\M-0", "\u0670"], ["\\M-Y\\M-1", "\u0671"], ["\\M-Y\\M-2", "\u0672"], ["\\M-Y\\M-3", "\u0673"], ["\\M-Y\\M-4", "\u0674"], ["\\M-Y\\M-5", "\u0675"], ["\\M-Y\\M-6", "\u0676"], ["\\M-Y\\M-7", "\u0677"], ["\\M-Y\\M-8", "\u0678"], ["\\M-Y\\M-9", "\u0679"], ["\\M-Y\\M-:", "\u067a"], ["\\M-Y\\M-;", "\u067b"], ["\\M-Y\\M-<", "\u067c"], ["\\M-Y\\M-=", "\u067d"], ["\\M-Y\\M->", "\u067e"], ["\\M-Y\\M-?", "\u067f"], ["\\M-Z\\M^@", "\u0680"], ["\\M-Z\\M^A", "\u0681"], ["\\M-Z\\M^B", "\u0682"], ["\\M-Z\\M^C", "\u0683"], ["\\M-Z\\M^D", "\u0684"], ["\\M-Z\\M^E", "\u0685"], ["\\M-Z\\M^F", "\u0686"], ["\\M-Z\\M^G", "\u0687"], ["\\M-Z\\M^H", "\u0688"], ["\\M-Z\\M^I", "\u0689"], ["\\M-Z\\M^J", "\u068a"], ["\\M-Z\\M^K", "\u068b"], ["\\M-Z\\M^L", "\u068c"], ["\\M-Z\\M^M", "\u068d"], ["\\M-Z\\M^N", "\u068e"], ["\\M-Z\\M^O", "\u068f"], ["\\M-Z\\M^P", "\u0690"], ["\\M-Z\\M^Q", "\u0691"], ["\\M-Z\\M^R", "\u0692"], ["\\M-Z\\M^S", "\u0693"], ["\\M-Z\\M^T", "\u0694"], ["\\M-Z\\M^U", "\u0695"], ["\\M-Z\\M^V", "\u0696"], ["\\M-Z\\M^W", "\u0697"], ["\\M-Z\\M^X", "\u0698"], ["\\M-Z\\M^Y", "\u0699"], ["\\M-Z\\M^Z", "\u069a"], ["\\M-Z\\M^[", "\u069b"], ["\\M-Z\\M^\\", "\u069c"], ["\\M-Z\\M^]", "\u069d"], ["\\M-Z\\M^^", "\u069e"], ["\\M-Z\\M^_", "\u069f"], ["\\M-Z\\240", "\u06a0"], ["\\M-Z\\M-!", "\u06a1"], ["\\M-Z\\M-\"", "\u06a2"], ["\\M-Z\\M-#", "\u06a3"], ["\\M-Z\\M-$", "\u06a4"], ["\\M-Z\\M-%", "\u06a5"], ["\\M-Z\\M-&", "\u06a6"], ["\\M-Z\\M-'", "\u06a7"], ["\\M-Z\\M-(", "\u06a8"], ["\\M-Z\\M-)", "\u06a9"], ["\\M-Z\\M-*", "\u06aa"], ["\\M-Z\\M-+", "\u06ab"], ["\\M-Z\\M-,", "\u06ac"], ["\\M-Z\\M--", "\u06ad"], ["\\M-Z\\M-.", "\u06ae"], ["\\M-Z\\M-/", "\u06af"], ["\\M-Z\\M-0", "\u06b0"], ["\\M-Z\\M-1", "\u06b1"], ["\\M-Z\\M-2", "\u06b2"], ["\\M-Z\\M-3", "\u06b3"], ["\\M-Z\\M-4", "\u06b4"], ["\\M-Z\\M-5", "\u06b5"], ["\\M-Z\\M-6", "\u06b6"], ["\\M-Z\\M-7", "\u06b7"], ["\\M-Z\\M-8", "\u06b8"], ["\\M-Z\\M-9", "\u06b9"], ["\\M-Z\\M-:", "\u06ba"], ["\\M-Z\\M-;", "\u06bb"], ["\\M-Z\\M-<", "\u06bc"], ["\\M-Z\\M-=", "\u06bd"], ["\\M-Z\\M->", "\u06be"], ["\\M-Z\\M-?", "\u06bf"], ["\\M-[\\M^@", "\u06c0"], ["\\M-[\\M^A", "\u06c1"], ["\\M-[\\M^B", "\u06c2"], ["\\M-[\\M^C", "\u06c3"], ["\\M-[\\M^D", "\u06c4"], ["\\M-[\\M^E", "\u06c5"], ["\\M-[\\M^F", "\u06c6"], ["\\M-[\\M^G", "\u06c7"], ["\\M-[\\M^H", "\u06c8"], ["\\M-[\\M^I", "\u06c9"], ["\\M-[\\M^J", "\u06ca"], ["\\M-[\\M^K", "\u06cb"], ["\\M-[\\M^L", "\u06cc"], ["\\M-[\\M^M", "\u06cd"], ["\\M-[\\M^N", "\u06ce"], ["\\M-[\\M^O", "\u06cf"], ["\\M-[\\M^P", "\u06d0"], ["\\M-[\\M^Q", "\u06d1"], ["\\M-[\\M^R", "\u06d2"], ["\\M-[\\M^S", "\u06d3"], ["\\M-[\\M^T", "\u06d4"], ["\\M-[\\M^U", "\u06d5"], ["\\M-[\\M^V", "\u06d6"], ["\\M-[\\M^W", "\u06d7"], ["\\M-[\\M^X", "\u06d8"], ["\\M-[\\M^Y", "\u06d9"], ["\\M-[\\M^Z", "\u06da"], ["\\M-[\\M^[", "\u06db"], ["\\M-[\\M^\\", "\u06dc"], ["\\M-[\\M^]", "\u06dd"], ["\\M-[\\M^^", "\u06de"], ["\\M-[\\M^_", "\u06df"], ["\\M-[\\240", "\u06e0"], ["\\M-[\\M-!", "\u06e1"], ["\\M-[\\M-\"", "\u06e2"], ["\\M-[\\M-#", "\u06e3"], ["\\M-[\\M-$", "\u06e4"], ["\\M-[\\M-%", "\u06e5"], ["\\M-[\\M-&", "\u06e6"], ["\\M-[\\M-'", "\u06e7"], ["\\M-[\\M-(", "\u06e8"], ["\\M-[\\M-)", "\u06e9"], ["\\M-[\\M-*", "\u06ea"], ["\\M-[\\M-+", "\u06eb"], ["\\M-[\\M-,", "\u06ec"], ["\\M-[\\M--", "\u06ed"], ["\\M-[\\M-.", "\u06ee"], ["\\M-[\\M-/", "\u06ef"], ["\\M-[\\M-0", "\u06f0"], ["\\M-[\\M-1", "\u06f1"], ["\\M-[\\M-2", "\u06f2"], ["\\M-[\\M-3", "\u06f3"], ["\\M-[\\M-4", "\u06f4"], ["\\M-[\\M-5", "\u06f5"], ["\\M-[\\M-6", "\u06f6"], ["\\M-[\\M-7", "\u06f7"], ["\\M-[\\M-8", "\u06f8"], ["\\M-[\\M-9", "\u06f9"], ["\\M-[\\M-:", "\u06fa"], ["\\M-[\\M-;", "\u06fb"], ["\\M-[\\M-<", "\u06fc"], ["\\M-[\\M-=", "\u06fd"], ["\\M-[\\M->", "\u06fe"], ["\\M-[\\M-?", "\u06ff"], ["\\M-b\\M-:\\M^@", "\u2e80"], ["\\M-b\\M-:\\M^A", "\u2e81"], ["\\M-b\\M-:\\M^B", "\u2e82"], ["\\M-b\\M-:\\M^C", "\u2e83"], ["\\M-b\\M-:\\M^D", "\u2e84"], ["\\M-b\\M-:\\M^E", "\u2e85"], ["\\M-b\\M-:\\M^F", "\u2e86"], ["\\M-b\\M-:\\M^G", "\u2e87"], ["\\M-b\\M-:\\M^H", "\u2e88"], ["\\M-b\\M-:\\M^I", "\u2e89"], ["\\M-b\\M-:\\M^J", "\u2e8a"], ["\\M-b\\M-:\\M^K", "\u2e8b"], ["\\M-b\\M-:\\M^L", "\u2e8c"], ["\\M-b\\M-:\\M^M", "\u2e8d"], ["\\M-b\\M-:\\M^N", "\u2e8e"], ["\\M-b\\M-:\\M^O", "\u2e8f"], ["\\M-b\\M-:\\M^P", "\u2e90"], ["\\M-b\\M-:\\M^Q", "\u2e91"], ["\\M-b\\M-:\\M^R", "\u2e92"], ["\\M-b\\M-:\\M^S", "\u2e93"], ["\\M-b\\M-:\\M^T", "\u2e94"], ["\\M-b\\M-:\\M^U", "\u2e95"], ["\\M-b\\M-:\\M^V", "\u2e96"], ["\\M-b\\M-:\\M^W", "\u2e97"], ["\\M-b\\M-:\\M^X", "\u2e98"], ["\\M-b\\M-:\\M^Y", "\u2e99"], ["\\M-b\\M-:\\M^Z", "\u2e9a"], ["\\M-b\\M-:\\M^[", "\u2e9b"], ["\\M-b\\M-:\\M^\\", "\u2e9c"], ["\\M-b\\M-:\\M^]", "\u2e9d"], ["\\M-b\\M-:\\M^^", "\u2e9e"], ["\\M-b\\M-:\\M^_", "\u2e9f"], ["\\M-b\\M-:\\240", "\u2ea0"], ["\\M-b\\M-:\\M-!", "\u2ea1"], ["\\M-b\\M-:\\M-\"", "\u2ea2"], ["\\M-b\\M-:\\M-#", "\u2ea3"], ["\\M-b\\M-:\\M-$", "\u2ea4"], ["\\M-b\\M-:\\M-%", "\u2ea5"], ["\\M-b\\M-:\\M-&", "\u2ea6"], ["\\M-b\\M-:\\M-'", "\u2ea7"], ["\\M-b\\M-:\\M-(", "\u2ea8"], ["\\M-b\\M-:\\M-)", "\u2ea9"], ["\\M-b\\M-:\\M-*", "\u2eaa"], ["\\M-b\\M-:\\M-+", "\u2eab"], ["\\M-b\\M-:\\M-,", "\u2eac"], ["\\M-b\\M-:\\M--", "\u2ead"], ["\\M-b\\M-:\\M-.", "\u2eae"], ["\\M-b\\M-:\\M-/", "\u2eaf"], ["\\M-b\\M-:\\M-0", "\u2eb0"], ["\\M-b\\M-:\\M-1", "\u2eb1"], ["\\M-b\\M-:\\M-2", "\u2eb2"], ["\\M-b\\M-:\\M-3", "\u2eb3"], ["\\M-b\\M-:\\M-4", "\u2eb4"], ["\\M-b\\M-:\\M-5", "\u2eb5"], ["\\M-b\\M-:\\M-6", "\u2eb6"], ["\\M-b\\M-:\\M-7", "\u2eb7"], ["\\M-b\\M-:\\M-8", "\u2eb8"], ["\\M-b\\M-:\\M-9", "\u2eb9"], ["\\M-b\\M-:\\M-:", "\u2eba"], ["\\M-b\\M-:\\M-;", "\u2ebb"], ["\\M-b\\M-:\\M-<", "\u2ebc"], ["\\M-b\\M-:\\M-=", "\u2ebd"], ["\\M-b\\M-:\\M->", "\u2ebe"], ["\\M-b\\M-:\\M-?", "\u2ebf"], ["\\M-b\\M-;\\M^@", "\u2ec0"], ["\\M-b\\M-;\\M^A", "\u2ec1"], ["\\M-b\\M-;\\M^B", "\u2ec2"], ["\\M-b\\M-;\\M^C", "\u2ec3"], ["\\M-b\\M-;\\M^D", "\u2ec4"], ["\\M-b\\M-;\\M^E", "\u2ec5"], ["\\M-b\\M-;\\M^F", "\u2ec6"], ["\\M-b\\M-;\\M^G", "\u2ec7"], ["\\M-b\\M-;\\M^H", "\u2ec8"], ["\\M-b\\M-;\\M^I", "\u2ec9"], ["\\M-b\\M-;\\M^J", "\u2eca"], ["\\M-b\\M-;\\M^K", "\u2ecb"], ["\\M-b\\M-;\\M^L", "\u2ecc"], ["\\M-b\\M-;\\M^M", "\u2ecd"], ["\\M-b\\M-;\\M^N", "\u2ece"], ["\\M-b\\M-;\\M^O", "\u2ecf"], ["\\M-b\\M-;\\M^P", "\u2ed0"], ["\\M-b\\M-;\\M^Q", "\u2ed1"], ["\\M-b\\M-;\\M^R", "\u2ed2"], ["\\M-b\\M-;\\M^S", "\u2ed3"], ["\\M-b\\M-;\\M^T", "\u2ed4"], ["\\M-b\\M-;\\M^U", "\u2ed5"], ["\\M-b\\M-;\\M^V", "\u2ed6"], ["\\M-b\\M-;\\M^W", "\u2ed7"], ["\\M-b\\M-;\\M^X", "\u2ed8"], ["\\M-b\\M-;\\M^Y", "\u2ed9"], ["\\M-b\\M-;\\M^Z", "\u2eda"], ["\\M-b\\M-;\\M^[", "\u2edb"], ["\\M-b\\M-;\\M^\\", "\u2edc"], ["\\M-b\\M-;\\M^]", "\u2edd"], ["\\M-b\\M-;\\M^^", "\u2ede"], ["\\M-b\\M-;\\M^_", "\u2edf"], ["\\M-b\\M-;\\240", "\u2ee0"], ["\\M-b\\M-;\\M-!", "\u2ee1"], ["\\M-b\\M-;\\M-\"", "\u2ee2"], ["\\M-b\\M-;\\M-#", "\u2ee3"], ["\\M-b\\M-;\\M-$", "\u2ee4"], ["\\M-b\\M-;\\M-%", "\u2ee5"], ["\\M-b\\M-;\\M-&", "\u2ee6"], ["\\M-b\\M-;\\M-'", "\u2ee7"], ["\\M-b\\M-;\\M-(", "\u2ee8"], ["\\M-b\\M-;\\M-)", "\u2ee9"], ["\\M-b\\M-;\\M-*", "\u2eea"], ["\\M-b\\M-;\\M-+", "\u2eeb"], ["\\M-b\\M-;\\M-,", "\u2eec"], ["\\M-b\\M-;\\M--", "\u2eed"], ["\\M-b\\M-;\\M-.", "\u2eee"], ["\\M-b\\M-;\\M-/", "\u2eef"], ["\\M-b\\M-;\\M-0", "\u2ef0"], ["\\M-b\\M-;\\M-1", "\u2ef1"], ["\\M-b\\M-;\\M-2", "\u2ef2"], ["\\M-b\\M-;\\M-3", "\u2ef3"], ["\\M-b\\M-;\\M-4", "\u2ef4"], ["\\M-b\\M-;\\M-5", "\u2ef5"], ["\\M-b\\M-;\\M-6", "\u2ef6"], ["\\M-b\\M-;\\M-7", "\u2ef7"], ["\\M-b\\M-;\\M-8", "\u2ef8"], ["\\M-b\\M-;\\M-9", "\u2ef9"], ["\\M-b\\M-;\\M-:", "\u2efa"], ["\\M-b\\M-;\\M-;", "\u2efb"], ["\\M-b\\M-;\\M-<", "\u2efc"], ["\\M-b\\M-;\\M-=", "\u2efd"], ["\\M-b\\M-;\\M->", "\u2efe"], ["\\M-b\\M-;\\M-?", "\u2eff"], ["\\M-c\\M^A\\M^@", "\u3040"], ["\\M-c\\M^A\\M^A", "\u3041"], ["\\M-c\\M^A\\M^B", "\u3042"], ["\\M-c\\M^A\\M^C", "\u3043"], ["\\M-c\\M^A\\M^D", "\u3044"], ["\\M-c\\M^A\\M^E", "\u3045"], ["\\M-c\\M^A\\M^F", "\u3046"], ["\\M-c\\M^A\\M^G", "\u3047"], ["\\M-c\\M^A\\M^H", "\u3048"], ["\\M-c\\M^A\\M^I", "\u3049"], ["\\M-c\\M^A\\M^J", "\u304a"], ["\\M-c\\M^A\\M^K", "\u304b"], ["\\M-c\\M^A\\M^L", "\u304c"], ["\\M-c\\M^A\\M^M", "\u304d"], ["\\M-c\\M^A\\M^N", "\u304e"], ["\\M-c\\M^A\\M^O", "\u304f"], ["\\M-c\\M^A\\M^P", "\u3050"], ["\\M-c\\M^A\\M^Q", "\u3051"], ["\\M-c\\M^A\\M^R", "\u3052"], ["\\M-c\\M^A\\M^S", "\u3053"], ["\\M-c\\M^A\\M^T", "\u3054"], ["\\M-c\\M^A\\M^U", "\u3055"], ["\\M-c\\M^A\\M^V", "\u3056"], ["\\M-c\\M^A\\M^W", "\u3057"], ["\\M-c\\M^A\\M^X", "\u3058"], ["\\M-c\\M^A\\M^Y", "\u3059"], ["\\M-c\\M^A\\M^Z", "\u305a"], ["\\M-c\\M^A\\M^[", "\u305b"], ["\\M-c\\M^A\\M^\\", "\u305c"], ["\\M-c\\M^A\\M^]", "\u305d"], ["\\M-c\\M^A\\M^^", "\u305e"], ["\\M-c\\M^A\\M^_", "\u305f"], ["\\M-c\\M^A\\240", "\u3060"], ["\\M-c\\M^A\\M-!", "\u3061"], ["\\M-c\\M^A\\M-\"", "\u3062"], ["\\M-c\\M^A\\M-#", "\u3063"], ["\\M-c\\M^A\\M-$", "\u3064"], ["\\M-c\\M^A\\M-%", "\u3065"], ["\\M-c\\M^A\\M-&", "\u3066"], ["\\M-c\\M^A\\M-'", "\u3067"], ["\\M-c\\M^A\\M-(", "\u3068"], ["\\M-c\\M^A\\M-)", "\u3069"], ["\\M-c\\M^A\\M-*", "\u306a"], ["\\M-c\\M^A\\M-+", "\u306b"], ["\\M-c\\M^A\\M-,", "\u306c"], ["\\M-c\\M^A\\M--", "\u306d"], ["\\M-c\\M^A\\M-.", "\u306e"], ["\\M-c\\M^A\\M-/", "\u306f"], ["\\M-c\\M^A\\M-0", "\u3070"], ["\\M-c\\M^A\\M-1", "\u3071"], ["\\M-c\\M^A\\M-2", "\u3072"], ["\\M-c\\M^A\\M-3", "\u3073"], ["\\M-c\\M^A\\M-4", "\u3074"], ["\\M-c\\M^A\\M-5", "\u3075"], ["\\M-c\\M^A\\M-6", "\u3076"], ["\\M-c\\M^A\\M-7", "\u3077"], ["\\M-c\\M^A\\M-8", "\u3078"], ["\\M-c\\M^A\\M-9", "\u3079"], ["\\M-c\\M^A\\M-:", "\u307a"], ["\\M-c\\M^A\\M-;", "\u307b"], ["\\M-c\\M^A\\M-<", "\u307c"], ["\\M-c\\M^A\\M-=", "\u307d"], ["\\M-c\\M^A\\M->", "\u307e"], ["\\M-c\\M^A\\M-?", "\u307f"], ["\\M-c\\M^B\\M^@", "\u3080"], ["\\M-c\\M^B\\M^A", "\u3081"], ["\\M-c\\M^B\\M^B", "\u3082"], ["\\M-c\\M^B\\M^C", "\u3083"], ["\\M-c\\M^B\\M^D", "\u3084"], ["\\M-c\\M^B\\M^E", "\u3085"], ["\\M-c\\M^B\\M^F", "\u3086"], ["\\M-c\\M^B\\M^G", "\u3087"], ["\\M-c\\M^B\\M^H", "\u3088"], ["\\M-c\\M^B\\M^I", "\u3089"], ["\\M-c\\M^B\\M^J", "\u308a"], ["\\M-c\\M^B\\M^K", "\u308b"], ["\\M-c\\M^B\\M^L", "\u308c"], ["\\M-c\\M^B\\M^M", "\u308d"], ["\\M-c\\M^B\\M^N", "\u308e"], ["\\M-c\\M^B\\M^O", "\u308f"], ["\\M-c\\M^B\\M^P", "\u3090"], ["\\M-c\\M^B\\M^Q", "\u3091"], ["\\M-c\\M^B\\M^R", "\u3092"], ["\\M-c\\M^B\\M^S", "\u3093"], ["\\M-c\\M^B\\M^T", "\u3094"], ["\\M-c\\M^B\\M^U", "\u3095"], ["\\M-c\\M^B\\M^V", "\u3096"], ["\\M-c\\M^B\\M^W", "\u3097"], ["\\M-c\\M^B\\M^X", "\u3098"], ["\\M-c\\M^B\\M^Y", "\u3099"], ["\\M-c\\M^B\\M^Z", "\u309a"], ["\\M-c\\M^B\\M^[", "\u309b"], ["\\M-c\\M^B\\M^\\", "\u309c"], ["\\M-c\\M^B\\M^]", "\u309d"], ["\\M-c\\M^B\\M^^", "\u309e"], ["\\M-c\\M^B\\M^_", "\u309f"], ["\\M-c\\M^B\\240", "\u30a0"], ["\\M-c\\M^B\\M-!", "\u30a1"], ["\\M-c\\M^B\\M-\"", "\u30a2"], ["\\M-c\\M^B\\M-#", "\u30a3"], ["\\M-c\\M^B\\M-$", "\u30a4"], ["\\M-c\\M^B\\M-%", "\u30a5"], ["\\M-c\\M^B\\M-&", "\u30a6"], ["\\M-c\\M^B\\M-'", "\u30a7"], ["\\M-c\\M^B\\M-(", "\u30a8"], ["\\M-c\\M^B\\M-)", "\u30a9"], ["\\M-c\\M^B\\M-*", "\u30aa"], ["\\M-c\\M^B\\M-+", "\u30ab"], ["\\M-c\\M^B\\M-,", "\u30ac"], ["\\M-c\\M^B\\M--", "\u30ad"], ["\\M-c\\M^B\\M-.", "\u30ae"], ["\\M-c\\M^B\\M-/", "\u30af"], ["\\M-c\\M^B\\M-0", "\u30b0"], ["\\M-c\\M^B\\M-1", "\u30b1"], ["\\M-c\\M^B\\M-2", "\u30b2"], ["\\M-c\\M^B\\M-3", "\u30b3"], ["\\M-c\\M^B\\M-4", "\u30b4"], ["\\M-c\\M^B\\M-5", "\u30b5"], ["\\M-c\\M^B\\M-6", "\u30b6"], ["\\M-c\\M^B\\M-7", "\u30b7"], ["\\M-c\\M^B\\M-8", "\u30b8"], ["\\M-c\\M^B\\M-9", "\u30b9"], ["\\M-c\\M^B\\M-:", "\u30ba"], ["\\M-c\\M^B\\M-;", "\u30bb"], ["\\M-c\\M^B\\M-<", "\u30bc"], ["\\M-c\\M^B\\M-=", "\u30bd"], ["\\M-c\\M^B\\M->", "\u30be"], ["\\M-c\\M^B\\M-?", "\u30bf"], ["\\M-c\\M^C\\M^@", "\u30c0"], ["\\M-c\\M^C\\M^A", "\u30c1"], ["\\M-c\\M^C\\M^B", "\u30c2"], ["\\M-c\\M^C\\M^C", "\u30c3"], ["\\M-c\\M^C\\M^D", "\u30c4"], ["\\M-c\\M^C\\M^E", "\u30c5"], ["\\M-c\\M^C\\M^F", "\u30c6"], ["\\M-c\\M^C\\M^G", "\u30c7"], ["\\M-c\\M^C\\M^H", "\u30c8"], ["\\M-c\\M^C\\M^I", "\u30c9"], ["\\M-c\\M^C\\M^J", "\u30ca"], ["\\M-c\\M^C\\M^K", "\u30cb"], ["\\M-c\\M^C\\M^L", "\u30cc"], ["\\M-c\\M^C\\M^M", "\u30cd"], ["\\M-c\\M^C\\M^N", "\u30ce"], ["\\M-c\\M^C\\M^O", "\u30cf"], ["\\M-c\\M^C\\M^P", "\u30d0"], ["\\M-c\\M^C\\M^Q", "\u30d1"], ["\\M-c\\M^C\\M^R", "\u30d2"], ["\\M-c\\M^C\\M^S", "\u30d3"], ["\\M-c\\M^C\\M^T", "\u30d4"], ["\\M-c\\M^C\\M^U", "\u30d5"], ["\\M-c\\M^C\\M^V", "\u30d6"], ["\\M-c\\M^C\\M^W", "\u30d7"], ["\\M-c\\M^C\\M^X", "\u30d8"], ["\\M-c\\M^C\\M^Y", "\u30d9"], ["\\M-c\\M^C\\M^Z", "\u30da"], ["\\M-c\\M^C\\M^[", "\u30db"], ["\\M-c\\M^C\\M^\\", "\u30dc"], ["\\M-c\\M^C\\M^]", "\u30dd"], ["\\M-c\\M^C\\M^^", "\u30de"], ["\\M-c\\M^C\\M^_", "\u30df"], ["\\M-c\\M^C\\240", "\u30e0"], ["\\M-c\\M^C\\M-!", "\u30e1"], ["\\M-c\\M^C\\M-\"", "\u30e2"], ["\\M-c\\M^C\\M-#", "\u30e3"], ["\\M-c\\M^C\\M-$", "\u30e4"], ["\\M-c\\M^C\\M-%", "\u30e5"], ["\\M-c\\M^C\\M-&", "\u30e6"], ["\\M-c\\M^C\\M-'", "\u30e7"], ["\\M-c\\M^C\\M-(", "\u30e8"], ["\\M-c\\M^C\\M-)", "\u30e9"], ["\\M-c\\M^C\\M-*", "\u30ea"], ["\\M-c\\M^C\\M-+", "\u30eb"], ["\\M-c\\M^C\\M-,", "\u30ec"], ["\\M-c\\M^C\\M--", "\u30ed"], ["\\M-c\\M^C\\M-.", "\u30ee"], ["\\M-c\\M^C\\M-/", "\u30ef"], ["\\M-c\\M^C\\M-0", "\u30f0"], ["\\M-c\\M^C\\M-1", "\u30f1"], ["\\M-c\\M^C\\M-2", "\u30f2"], ["\\M-c\\M^C\\M-3", "\u30f3"], ["\\M-c\\M^C\\M-4", "\u30f4"], ["\\M-c\\M^C\\M-5", "\u30f5"], ["\\M-c\\M^C\\M-6", "\u30f6"], ["\\M-c\\M^C\\M-7", "\u30f7"], ["\\M-c\\M^C\\M-8", "\u30f8"], ["\\M-c\\M^C\\M-9", "\u30f9"], ["\\M-c\\M^C\\M-:", "\u30fa"], ["\\M-c\\M^C\\M-;", "\u30fb"], ["\\M-c\\M^C\\M-<", "\u30fc"], ["\\M-c\\M^C\\M-=", "\u30fd"], ["\\M-c\\M^C\\M->", "\u30fe"], ["\\M-c\\M^C\\M-?", "\u30ff"], ["foo\\040bar", "foo bar"], ["foo\\^Jbar", "foo\nbar"], ["$bar\\040=\\040'baz';", "$bar = 'baz';"], ["$foo\\040=\\040\"\\\\x20\\\\\\\\x20\\\\\\\\\\\\x20\\\\\\\\\\\\\\\\x20\"", "$foo = \"\\x20\\\\x20\\\\\\x20\\\\\\\\x20\""], ["$foo\\040=\\040function($bar)\\040use($baz)\\040{\\^J\\^Ireturn\\040$baz->getFoo()\\^J};", "$foo = function($bar) use($baz) {\n\treturn $baz->getFoo()\n};"], ["", ""]]
vendor/psy/psysh/test/fixtures/project/.psysh.php:6: * (c) 2012-2017 Justin Hileman
vendor/psy/psysh/test/fixtures/config.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/fixtures/config.php:12:$config->setRuntimeDir(sys_get_temp_dir() . '/psysh_test/withconfig/temp');
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:52:        $tabCompletion = $config->getAutoCompleter();
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:55:                $matcher->setContext($context);
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:57:            $tabCompletion->addMatcher($matcher);
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:60:        $context->setAll(['foo' => 12, 'bar' => new \DOMDocument()]);
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:62:        $code = $tabCompletion->processCallback('', 0, [
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:69:            $this->assertContains($mc, $code);
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:73:            $this->assertNotContains($mnc, $code);
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:81:     * - [ ] if the variable is an array, return the square bracket for completion
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:82:     * - [ ] if the variable is a constructor or method, reflect to complete as a function call
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:83:     * - [ ] if the preceding token is a variable, call operators or keywords compatible for completion
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:84:     * - [X] a command always should be the second token after php_open_tag
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:85:     * - [X] keywords are never consecutive
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:86:     * - [X] namespacing completion should work just fine
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:87:     * - [X] after a new keyword, should always be a class constructor, never a function call or keyword, constant,
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:89:     * - [X] on a namespaced constructor the completion must show the classes related, not constants.
vendor/psy/psysh/test/TabCompletion/AutoCompleterTest.php:109:            ['$bar->', ['load'], []],
vendor/psy/psysh/test/TabCompletion/StaticSample.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Command/TimeitCommand/TimeitVisitorTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Command/TimeitCommand/TimeitVisitorTest.php:22:        $this->traverser = new NodeTraverser();
vendor/psy/psysh/test/Command/TimeitCommand/TimeitVisitorTest.php:23:        $this->traverser->addVisitor(new TimeitVisitor());
vendor/psy/psysh/test/Command/TimeitCommand/TimeitVisitorTest.php:31:        $this->assertProcessesAs($from, $to);
vendor/psy/psysh/test/Command/TimeitCommand/TimeitVisitorTest.php:44:            ['$c->d()', "$start(); $end(\$c->d());"],
vendor/psy/psysh/test/Command/ExitCommandTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Command/ExitCommandTest.php:27:        $tester->execute([]);
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:25:        $shell = $this->getMockBuilder('Psy\\Shell')
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:26:            ->setMethods(['hasCode', 'addCode'])
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:27:            ->getMock();
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:29:        $shell->expects($this->once())->method('hasCode')->willReturn($hasCode);
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:30:        $shell->expects($this->once())
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:31:            ->method('addCode')
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:32:            ->with($this->equalTo($expect), $this->equalTo($addSilent));
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:35:        $command->setApplication($shell);
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:37:        $tester->execute($args);
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:38:        $this->assertEquals('', $tester->getDisplay());
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:73:        $command->setApplication(new Shell());
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:75:        $tester->execute(['exception' => 'foo(); bar()']);
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:85:        $command->setApplication(new Shell());
vendor/psy/psysh/test/Command/ThrowUpCommandTest.php:87:        $tester->execute(['exception' => 'foo)']);
vendor/psy/psysh/test/ConfigurationTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/ConfigurationTest.php:31:        $config = $this->getConfig();
vendor/psy/psysh/test/ConfigurationTest.php:33:        $this->assertSame(function_exists('readline'), $config->hasReadline());
vendor/psy/psysh/test/ConfigurationTest.php:34:        $this->assertSame(function_exists('readline'), $config->useReadline());
vendor/psy/psysh/test/ConfigurationTest.php:35:        $this->assertSame(function_exists('pcntl_signal'), $config->hasPcntl());
vendor/psy/psysh/test/ConfigurationTest.php:36:        $this->assertSame(function_exists('pcntl_signal'), $config->usePcntl());
vendor/psy/psysh/test/ConfigurationTest.php:37:        $this->assertFalse($config->requireSemicolons());
vendor/psy/psysh/test/ConfigurationTest.php:38:        $this->assertSame(Configuration::COLOR_MODE_AUTO, $config->colorMode());
vendor/psy/psysh/test/ConfigurationTest.php:39:        $this->assertNull($config->getStartupMessage());
vendor/psy/psysh/test/ConfigurationTest.php:44:        $config = $this->getConfig();
vendor/psy/psysh/test/ConfigurationTest.php:46:        $this->assertNull($config->getDataDir());
vendor/psy/psysh/test/ConfigurationTest.php:47:        $config->setDataDir('wheee');
vendor/psy/psysh/test/ConfigurationTest.php:48:        $this->assertSame('wheee', $config->getDataDir());
vendor/psy/psysh/test/ConfigurationTest.php:50:        $this->assertNull($config->getConfigDir());
vendor/psy/psysh/test/ConfigurationTest.php:51:        $config->setConfigDir('wheee');
vendor/psy/psysh/test/ConfigurationTest.php:52:        $this->assertSame('wheee', $config->getConfigDir());
vendor/psy/psysh/test/ConfigurationTest.php:64:        $this->assertSame(realpath($configFile),   realpath($config->getConfigFile()));
vendor/psy/psysh/test/ConfigurationTest.php:65:        $this->assertSame(realpath($historyFile),  realpath($config->getHistoryFile()));
vendor/psy/psysh/test/ConfigurationTest.php:66:        $this->assertSame(realpath($manualDbFile), realpath($config->getManualDbFile()));
vendor/psy/psysh/test/ConfigurationTest.php:99:        $config  = $this->getConfig();
vendor/psy/psysh/test/ConfigurationTest.php:103:        $config->loadConfig([
vendor/psy/psysh/test/ConfigurationTest.php:114:        $this->assertFalse($config->useReadline());
vendor/psy/psysh/test/ConfigurationTest.php:115:        $this->assertFalse($config->usePcntl());
vendor/psy/psysh/test/ConfigurationTest.php:116:        $this->assertSame($cleaner, $config->getCodeCleaner());
vendor/psy/psysh/test/ConfigurationTest.php:117:        $this->assertSame($pager, $config->getPager());
vendor/psy/psysh/test/ConfigurationTest.php:118:        $this->assertTrue($config->requireSemicolons());
vendor/psy/psysh/test/ConfigurationTest.php:119:        $this->assertSame(E_ERROR | E_WARNING, $config->errorLoggingLevel());
vendor/psy/psysh/test/ConfigurationTest.php:120:        $this->assertSame(Configuration::COLOR_MODE_FORCED, $config->colorMode());
vendor/psy/psysh/test/ConfigurationTest.php:121:        $this->assertSame('Psysh is awesome!', $config->getStartupMessage());
vendor/psy/psysh/test/ConfigurationTest.php:126:        $config = $this->getConfig(__DIR__ . '/fixtures/config.php');
vendor/psy/psysh/test/ConfigurationTest.php:128:        $runtimeDir = $this->joinPath(realpath(sys_get_temp_dir()), 'psysh_test', 'withconfig', 'temp');
vendor/psy/psysh/test/ConfigurationTest.php:130:        $this->assertStringStartsWith($runtimeDir, realpath($config->getTempFile('foo', 123)));
vendor/psy/psysh/test/ConfigurationTest.php:131:        $this->assertStringStartsWith($runtimeDir, realpath(dirname($config->getPipe('pipe', 123))));
vendor/psy/psysh/test/ConfigurationTest.php:132:        $this->assertStringStartsWith($runtimeDir, realpath($config->getRuntimeDir()));
vendor/psy/psysh/test/ConfigurationTest.php:134:        $this->assertSame(function_exists('readline'), $config->useReadline());
vendor/psy/psysh/test/ConfigurationTest.php:135:        $this->assertFalse($config->usePcntl());
vendor/psy/psysh/test/ConfigurationTest.php:136:        $this->assertSame(E_ALL & ~E_NOTICE, $config->errorLoggingLevel());
vendor/psy/psysh/test/ConfigurationTest.php:147:        $this->assertTrue($config->requireSemicolons());
vendor/psy/psysh/test/ConfigurationTest.php:148:        $this->assertFalse($config->useUnicode());
vendor/psy/psysh/test/ConfigurationTest.php:153:        $this->assertFalse($config->requireSemicolons());
vendor/psy/psysh/test/ConfigurationTest.php:154:        $this->assertTrue($config->useUnicode());
vendor/psy/psysh/test/ConfigurationTest.php:179:        $includes = $config->getDefaultIncludes();
vendor/psy/psysh/test/ConfigurationTest.php:180:        $this->assertCount(1, $includes);
vendor/psy/psysh/test/ConfigurationTest.php:181:        $this->assertSame('/file.php', $includes[0]);
vendor/psy/psysh/test/ConfigurationTest.php:186:        $config = $this->getConfig();
vendor/psy/psysh/test/ConfigurationTest.php:187:        $output = $config->getOutput();
vendor/psy/psysh/test/ConfigurationTest.php:189:        $this->assertInstanceOf('Psy\Output\ShellOutput', $output);
vendor/psy/psysh/test/ConfigurationTest.php:213:        $config = $this->getConfig();
vendor/psy/psysh/test/ConfigurationTest.php:214:        $config->setColorMode($colorMode);
vendor/psy/psysh/test/ConfigurationTest.php:216:        $this->assertSame($expectation, $config->getOutputDecorated());
vendor/psy/psysh/test/ConfigurationTest.php:231:        $config = $this->getConfig();
vendor/psy/psysh/test/ConfigurationTest.php:232:        $config->setColorMode($colorMode);
vendor/psy/psysh/test/ConfigurationTest.php:234:        $this->assertSame($colorMode, $config->colorMode());
vendor/psy/psysh/test/ConfigurationTest.php:243:        $config = $this->getConfig();
vendor/psy/psysh/test/ConfigurationTest.php:244:        $config->setColorMode('some invalid mode');
vendor/psy/psysh/test/ConfigurationTest.php:249:        $config  = $this->getConfig();
vendor/psy/psysh/test/ConfigurationTest.php:252:        $config->setChecker($checker);
vendor/psy/psysh/test/ConfigurationTest.php:254:        $this->assertSame($checker, $config->getChecker());
vendor/psy/psysh/test/tools/gen_unvis_fixtures.py:23:    '$foo = function($bar) use($baz) {\n\treturn $baz->getFoo()\n};'
vendor/psy/psysh/test/tools/gen_unvis_fixtures.py:50:    argp.add_argument('-f', '--format-output', action='store_true',
vendor/psy/psysh/test/tools/gen_unvis_fixtures.py:52:    argp.add_argument('-a', '--all', action='store_true',
vendor/psy/psysh/test/tools/gen_unvis_fixtures.py:54:                      (same as --range=bmp). WARNING: You will need quite
vendor/psy/psysh/test/tools/gen_unvis_fixtures.py:57:    argp.add_argument('-r', '--range',
vendor/psy/psysh/test/tools/gen_unvis_fixtures.py:62:    argp.add_argument('-o', '--output-file',
vendor/psy/psysh/test/tools/vis.py:12:----------
vendor/psy/psysh/test/tools/vis.py:19:  (default is to encode all non-graphic except space, tab, and newline).
vendor/psy/psysh/test/tools/vis.py:28:  `VIS_HTTP1808`:   http-style escape % hex hex
vendor/psy/psysh/test/tools/vis.py:29:  `VIS_HTTPSTYLE`:  http-style escape % hex hex
vendor/psy/psysh/test/tools/vis.py:30:  `VIS_MIMESTYLE`:  mime-style escape = HEX HEX
vendor/psy/psysh/test/tools/vis.py:31:  `VIS_HTTP1866`:   http-style &#num; or &string;
vendor/psy/psysh/test/tools/vis.py:36:    - ju1ius (http://github.com/ju1ius)
vendor/psy/psysh/test/tools/vis.py:38::Date: 2014-01-05
vendor/psy/psysh/test/tools/vis.py:61:# (default is to encode all non-graphic except space, tab, and newline).
vendor/psy/psysh/test/tools/vis.py:99:    src = bytes(src, 'utf-8')
vendor/psy/psysh/test/tools/vis.py:105:    if -1 == bytes_written:
vendor/psy/psysh/test/tools/vis.py:108:    return dst_p.value.decode('utf-8')
vendor/psy/psysh/test/tools/vis.py:118:    src = bytes(src, 'utf-8')
vendor/psy/psysh/test/tools/vis.py:123:    if -1 == bytes_written:
vendor/psy/psysh/test/tools/vis.py:126:    return dst_p.value.decode('utf-8')
vendor/psy/psysh/test/FakeShell.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/FakeShell.php:27:        $this->matchers = $matchers;
vendor/psy/psysh/test/CodeCleanerTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/CodeCleanerTest.php:24:        $this->assertSame($expected, $cc->clean($lines, $requireSemicolons));
vendor/psy/psysh/test/CodeCleanerTest.php:47:        $res = $cc->clean($lines);
vendor/psy/psysh/test/CodeCleanerTest.php:50:            $this->assertFalse($res);
vendor/psy/psysh/test/CodeCleanerTest.php:52:            $this->assertNotFalse($res);
vendor/psy/psysh/test/CodeCleanerTest.php:83:            $this->markTestSkipped('HHVM not supported.');
vendor/psy/psysh/test/CodeCleanerTest.php:87:        $res = $cc->clean($lines);
vendor/psy/psysh/test/CodeCleanerTest.php:89:        $this->assertFalse($res);
vendor/psy/psysh/test/CodeCleanerTest.php:110:        $cc->clean([$code]);
vendor/psy/psysh/test/VersionUpdater/NoopCheckerTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/VersionUpdater/NoopCheckerTest.php:22:        $this->assertTrue($checker->isLatest());
vendor/psy/psysh/test/VersionUpdater/NoopCheckerTest.php:23:        $this->assertEquals(Shell::VERSION, $checker->getLatest());
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:27:        $checker = $this->getMockBuilder('Psy\\VersionUpdater\\GitHubChecker')
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:28:            ->setMethods(['fetchLatestRelease'])
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:29:            ->getMock();
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:30:        $checker->expects($this->once())->method('fetchLatestRelease')->willReturn($input);
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:31:        $checker->isLatest();
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:42:        $checker = $this->getMockBuilder('Psy\\VersionUpdater\\GitHubChecker')
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:43:            ->setMethods(['fetchLatestRelease'])
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:44:            ->getMock();
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:45:        $checker->expects($this->once())->method('fetchLatestRelease')->willReturn($input);
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:46:        $this->assertSame($assertion, $checker->isLatest());
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:58:            [true, json_decode('{"tag_name":"v0.4.1-alpha"}')],
vendor/psy/psysh/test/VersionUpdater/GitHubCheckerTest.php:59:            [true, json_decode('{"tag_name":"v0.4.2-beta3"}')],
vendor/psy/psysh/test/SudoTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/SudoTest.php:21:            $this->markTestSkipped('YOLO');
vendor/psy/psysh/test/SudoTest.php:28:        $this->assertSame('private and prop', Sudo::fetchProperty($obj, 'privateProp'));
vendor/psy/psysh/test/SudoTest.php:34:        $this->assertSame('private and prop', Sudo::fetchProperty($obj, 'privateProp'));
vendor/psy/psysh/test/SudoTest.php:35:        $this->assertSame('not so private now', Sudo::assignProperty($obj, 'privateProp', 'not so private now'));
vendor/psy/psysh/test/SudoTest.php:36:        $this->assertSame('not so private now', Sudo::fetchProperty($obj, 'privateProp'));
vendor/psy/psysh/test/SudoTest.php:42:        $this->assertSame('private and method', Sudo::callMethod($obj, 'privateMethod'));
vendor/psy/psysh/test/SudoTest.php:43:        $this->assertSame('private and method with 1', Sudo::callMethod($obj, 'privateMethod', 1));
vendor/psy/psysh/test/SudoTest.php:44:        $this->assertSame(
vendor/psy/psysh/test/SudoTest.php:53:        $this->assertSame('private and static and prop', Sudo::fetchStaticProperty($obj, 'privateStaticProp'));
vendor/psy/psysh/test/SudoTest.php:59:        $this->assertSame('private and static and prop', Sudo::fetchStaticProperty($obj, 'privateStaticProp'));
vendor/psy/psysh/test/SudoTest.php:60:        $this->assertSame('not so private now', Sudo::assignStaticProperty($obj, 'privateStaticProp', 'not so private now'));
vendor/psy/psysh/test/SudoTest.php:61:        $this->assertSame('not so private now', Sudo::fetchStaticProperty($obj, 'privateStaticProp'));
vendor/psy/psysh/test/SudoTest.php:67:        $this->assertSame('private and static and method', Sudo::callStatic($obj, 'privateStaticMethod'));
vendor/psy/psysh/test/SudoTest.php:68:        $this->assertSame('private and static and method with 1', Sudo::callStatic($obj, 'privateStaticMethod', 1));
vendor/psy/psysh/test/SudoTest.php:69:        $this->assertSame(
vendor/psy/psysh/test/SudoTest.php:78:        $this->assertSame('private and const', Sudo::fetchClassConst($obj, 'PRIVATE_CONST'));
vendor/psy/psysh/test/ContextTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/ContextTest.php:20:        $this->assertTrue(true);
vendor/psy/psysh/test/ContextTest.php:25:        $this->assertTrue(true);
vendor/psy/psysh/test/ContextTest.php:32:        $this->assertNull($context->get('_'));
vendor/psy/psysh/test/ContextTest.php:33:        $this->assertNull($context->getReturnValue());
vendor/psy/psysh/test/ContextTest.php:35:        $this->assertEquals(['_' => null], $context->getAll());
vendor/psy/psysh/test/ContextTest.php:39:        $context->setLastException($e);
vendor/psy/psysh/test/ContextTest.php:40:        $context->setLastStdout('out');
vendor/psy/psysh/test/ContextTest.php:41:        $context->setBoundObject($obj);
vendor/psy/psysh/test/ContextTest.php:43:        $context->setCommandScopeVariables([
vendor/psy/psysh/test/ContextTest.php:67:        $this->assertEquals($expected, $context->getAll());
vendor/psy/psysh/test/ContextTest.php:95:        $context->setAll($vars);
vendor/psy/psysh/test/ContextTest.php:97:        $this->assertEquals('Foo', $context->get('foo'));
vendor/psy/psysh/test/ContextTest.php:98:        $this->assertEquals(123, $context->get('bar'));
vendor/psy/psysh/test/ContextTest.php:99:        $this->assertSame($baz, $context->get('baz'));
vendor/psy/psysh/test/ContextTest.php:101:        $this->assertEquals(['foo' => 'Foo', 'bar' => 123, 'baz' => $baz, '_' => null], $context->getAll());
vendor/psy/psysh/test/ContextTest.php:112:        $context->setAll([$name => 'fail']);
vendor/psy/psysh/test/ContextTest.php:113:        $context->get($name);
vendor/psy/psysh/test/ContextTest.php:136:        $this->assertNull($context->getReturnValue());
vendor/psy/psysh/test/ContextTest.php:139:        $context->setReturnValue($val);
vendor/psy/psysh/test/ContextTest.php:140:        $this->assertEquals($val, $context->getReturnValue());
vendor/psy/psysh/test/ContextTest.php:141:        $this->assertEquals($val, $context->get('_'));
vendor/psy/psysh/test/ContextTest.php:144:        $context->setReturnValue($obj);
vendor/psy/psysh/test/ContextTest.php:145:        $this->assertSame($obj, $context->getReturnValue());
vendor/psy/psysh/test/ContextTest.php:146:        $this->assertSame($obj, $context->get('_'));
vendor/psy/psysh/test/ContextTest.php:148:        $context->setReturnValue(null);
vendor/psy/psysh/test/ContextTest.php:149:        $this->assertNull($context->getReturnValue());
vendor/psy/psysh/test/ContextTest.php:156:        $context->setLastException($e);
vendor/psy/psysh/test/ContextTest.php:157:        $this->assertSame($e, $context->getLastException());
vendor/psy/psysh/test/ContextTest.php:158:        $this->assertSame($e, $context->get('_e'));
vendor/psy/psysh/test/ContextTest.php:163:     * @expectedExceptionMessage No most-recent exception
vendor/psy/psysh/test/ContextTest.php:168:        $context->getLastException();
vendor/psy/psysh/test/ContextTest.php:174:        $context->setLastStdout('ouuuuut');
vendor/psy/psysh/test/ContextTest.php:175:        $this->assertEquals('ouuuuut', $context->getLastStdout());
vendor/psy/psysh/test/ContextTest.php:176:        $this->assertEquals('ouuuuut', $context->get('__out'));
vendor/psy/psysh/test/ContextTest.php:181:     * @expectedExceptionMessage No most-recent output
vendor/psy/psysh/test/ContextTest.php:186:        $context->getLastStdout();
vendor/psy/psysh/test/ContextTest.php:192:        $this->assertNull($context->getBoundObject());
vendor/psy/psysh/test/ContextTest.php:195:        $context->setBoundObject($obj);
vendor/psy/psysh/test/ContextTest.php:196:        $this->assertSame($obj, $context->getBoundObject());
vendor/psy/psysh/test/ContextTest.php:197:        $this->assertSame($obj, $context->get('this'));
vendor/psy/psysh/test/ContextTest.php:199:        $context->setBoundObject(null);
vendor/psy/psysh/test/ContextTest.php:200:        $this->assertNull($context->getBoundObject());
vendor/psy/psysh/test/ContextTest.php:210:        $context->get('this');
vendor/psy/psysh/test/ContextTest.php:216:        $this->assertNull($context->getBoundClass());
vendor/psy/psysh/test/ContextTest.php:218:        $context->setBoundClass('');
vendor/psy/psysh/test/ContextTest.php:219:        $this->assertNull($context->getBoundClass());
vendor/psy/psysh/test/ContextTest.php:221:        $context->setBoundClass('Psy\Shell');
vendor/psy/psysh/test/ContextTest.php:222:        $this->assertEquals('Psy\Shell', $context->getBoundClass());
vendor/psy/psysh/test/ContextTest.php:224:        $context->setBoundObject(new \StdClass());
vendor/psy/psysh/test/ContextTest.php:225:        $this->assertNotNull($context->getBoundObject());
vendor/psy/psysh/test/ContextTest.php:226:        $this->assertNull($context->getBoundClass());
vendor/psy/psysh/test/ContextTest.php:228:        $context->setBoundClass('Psy\Shell');
vendor/psy/psysh/test/ContextTest.php:229:        $this->assertEquals('Psy\Shell', $context->getBoundClass());
vendor/psy/psysh/test/ContextTest.php:230:        $this->assertNull($context->getBoundObject());
vendor/psy/psysh/test/ContextTest.php:232:        $context->setBoundClass(null);
vendor/psy/psysh/test/ContextTest.php:233:        $this->assertNull($context->getBoundClass());
vendor/psy/psysh/test/ContextTest.php:234:        $this->assertNull($context->getBoundObject());
vendor/psy/psysh/test/ContextTest.php:250:        $context->setCommandScopeVariables($vars);
vendor/psy/psysh/test/ContextTest.php:252:        $this->assertEquals($vars, $context->getCommandScopeVariables());
vendor/psy/psysh/test/ContextTest.php:254:        $this->assertEquals($__function, $context->get('__function'));
vendor/psy/psysh/test/ContextTest.php:255:        $this->assertEquals($__method, $context->get('__method'));
vendor/psy/psysh/test/ContextTest.php:256:        $this->assertEquals($__class, $context->get('__class'));
vendor/psy/psysh/test/ContextTest.php:257:        $this->assertEquals($__namespace, $context->get('__namespace'));
vendor/psy/psysh/test/ContextTest.php:258:        $this->assertEquals($__file, $context->get('__file'));
vendor/psy/psysh/test/ContextTest.php:259:        $this->assertEquals($__line, $context->get('__line'));
vendor/psy/psysh/test/ContextTest.php:260:        $this->assertEquals($__dir, $context->get('__dir'));
vendor/psy/psysh/test/ContextTest.php:263:        $context->setCommandScopeVariables($someVars);
vendor/psy/psysh/test/ContextTest.php:270:        $this->assertEquals(
vendor/psy/psysh/test/ContextTest.php:272:            $context->getUnusedCommandScopeVariableNames()
vendor/psy/psysh/test/ContextTest.php:275:        $context->setCommandScopeVariables([
vendor/psy/psysh/test/ContextTest.php:283:        $this->assertEquals(
vendor/psy/psysh/test/ContextTest.php:285:            array_values($context->getUnusedCommandScopeVariableNames())
vendor/psy/psysh/test/ContextTest.php:297:            $this->assertTrue($context->isSpecialVariableName($name));
vendor/psy/psysh/test/ContextTest.php:299:            $this->assertFalse($context->isSpecialVariableName($name));
vendor/psy/psysh/test/Input/CodeArgumentTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Input/CodeArgumentTest.php:42:        $this->assertInstanceOf('Psy\Input\CodeArgument', new CodeArgument('yeah', $mode));
vendor/psy/psysh/test/Input/ShellInputTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Input/ShellInputTest.php:34:        $input->bind($definition);
vendor/psy/psysh/test/Input/ShellInputTest.php:44:        $input = new ShellInput('--foo=bar echo "baz\\\\n";');
vendor/psy/psysh/test/Input/ShellInputTest.php:45:        $input->bind($definition);
vendor/psy/psysh/test/Input/ShellInputTest.php:46:        $this->assertSame('bar', $input->getOption('foo'));
vendor/psy/psysh/test/Input/ShellInputTest.php:47:        $this->assertSame('echo "baz\n";', $input->getArgument('code'));
vendor/psy/psysh/test/Input/ShellInputTest.php:59:        $input = new ShellInput('--foo=foo -q qux bar "baz\\\\n"');
vendor/psy/psysh/test/Input/ShellInputTest.php:60:        $input->bind($definition);
vendor/psy/psysh/test/Input/ShellInputTest.php:61:        $this->assertSame('foo', $input->getOption('foo'));
vendor/psy/psysh/test/Input/ShellInputTest.php:62:        $this->assertSame('qux', $input->getOption('qux'));
vendor/psy/psysh/test/Input/ShellInputTest.php:63:        $this->assertSame('bar', $input->getArgument('bar'));
vendor/psy/psysh/test/Input/ShellInputTest.php:64:        $this->assertSame('baz\\n', $input->getArgument('baz'));
vendor/psy/psysh/test/Input/ShellInputTest.php:74:        $input = new ShellInput('-- echo --foo::$bar');
vendor/psy/psysh/test/Input/ShellInputTest.php:75:        $input->bind($definition);
vendor/psy/psysh/test/Input/ShellInputTest.php:76:        $this->assertNull($input->getOption('foo'));
vendor/psy/psysh/test/Input/ShellInputTest.php:77:        $this->assertSame('echo --foo::$bar', $input->getArgument('code'));
vendor/psy/psysh/test/Input/ShellInputTest.php:87:        $input = new ShellInput('"" --foo bar');
vendor/psy/psysh/test/Input/ShellInputTest.php:88:        $input->bind($definition);
vendor/psy/psysh/test/Input/ShellInputTest.php:89:        $this->assertSame('"" --foo bar', $input->getArgument('code'));
vendor/psy/psysh/test/Input/ShellInputTest.php:99:        $p = $r->getProperty('tokenPairs');
vendor/psy/psysh/test/Input/ShellInputTest.php:100:        $p->setAccessible(true);
vendor/psy/psysh/test/Input/ShellInputTest.php:101:        $this->assertSame($tokens, $p->getValue($input), $message);
vendor/psy/psysh/test/Input/ShellInputTest.php:111:                '->tokenize() parses an empty string',
vendor/psy/psysh/test/Input/ShellInputTest.php:116:                '->tokenize() parses arguments',
vendor/psy/psysh/test/Input/ShellInputTest.php:121:                '->tokenize() ignores whitespaces between arguments',
vendor/psy/psysh/test/Input/ShellInputTest.php:126:                '->tokenize() parses quoted arguments',
vendor/psy/psysh/test/Input/ShellInputTest.php:131:                '->tokenize() parses quoted arguments',
vendor/psy/psysh/test/Input/ShellInputTest.php:136:                '->tokenize() parses whitespace chars in strings',
vendor/psy/psysh/test/Input/ShellInputTest.php:146:                '->tokenize() parses whitespace chars between args as spaces',
vendor/psy/psysh/test/Input/ShellInputTest.php:153:             * @todo Sort this out and re-enable these test cases.
vendor/psy/psysh/test/Input/ShellInputTest.php:158:            //     '->tokenize() parses escaped-quoted arguments',
vendor/psy/psysh/test/Input/ShellInputTest.php:163:            //     '->tokenize() parses escaped-quoted arguments',
vendor/psy/psysh/test/Input/ShellInputTest.php:167:                '-a',
vendor/psy/psysh/test/Input/ShellInputTest.php:168:                 [['-a', '-a']],
vendor/psy/psysh/test/Input/ShellInputTest.php:169:                 '->tokenize() parses short options',
vendor/psy/psysh/test/Input/ShellInputTest.php:172:                '-azc',
vendor/psy/psysh/test/Input/ShellInputTest.php:173:                [['-azc', '-azc']],
vendor/psy/psysh/test/Input/ShellInputTest.php:174:                '->tokenize() parses aggregated short options',
vendor/psy/psysh/test/Input/ShellInputTest.php:177:                '-awithavalue',
vendor/psy/psysh/test/Input/ShellInputTest.php:178:                [['-awithavalue', '-awithavalue']],
vendor/psy/psysh/test/Input/ShellInputTest.php:179:                '->tokenize() parses short options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:182:                '-a"foo bar"',
vendor/psy/psysh/test/Input/ShellInputTest.php:183:                [['-afoo bar', '-a"foo bar"']],
vendor/psy/psysh/test/Input/ShellInputTest.php:184:                '->tokenize() parses short options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:187:                '-a"foo bar""foo bar"',
vendor/psy/psysh/test/Input/ShellInputTest.php:188:                [['-afoo barfoo bar', '-a"foo bar""foo bar"']],
vendor/psy/psysh/test/Input/ShellInputTest.php:189:                '->tokenize() parses short options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:192:                '-a\'foo bar\'',
vendor/psy/psysh/test/Input/ShellInputTest.php:193:                [['-afoo bar', '-a\'foo bar\'']],
vendor/psy/psysh/test/Input/ShellInputTest.php:194:                '->tokenize() parses short options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:197:                '-a\'foo bar\'\'foo bar\'',
vendor/psy/psysh/test/Input/ShellInputTest.php:198:                [['-afoo barfoo bar', '-a\'foo bar\'\'foo bar\'']],
vendor/psy/psysh/test/Input/ShellInputTest.php:199:                '->tokenize() parses short options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:202:                '-a\'foo bar\'"foo bar"',
vendor/psy/psysh/test/Input/ShellInputTest.php:203:                [['-afoo barfoo bar', '-a\'foo bar\'"foo bar"']],
vendor/psy/psysh/test/Input/ShellInputTest.php:204:                '->tokenize() parses short options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:207:                '--long-option',
vendor/psy/psysh/test/Input/ShellInputTest.php:208:                [['--long-option', '--long-option']],
vendor/psy/psysh/test/Input/ShellInputTest.php:209:                '->tokenize() parses long options',
vendor/psy/psysh/test/Input/ShellInputTest.php:212:                '--long-option=foo',
vendor/psy/psysh/test/Input/ShellInputTest.php:213:                [['--long-option=foo', '--long-option=foo']],
vendor/psy/psysh/test/Input/ShellInputTest.php:214:                '->tokenize() parses long options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:217:                '--long-option="foo bar"',
vendor/psy/psysh/test/Input/ShellInputTest.php:218:                [['--long-option=foo bar', '--long-option="foo bar"']],
vendor/psy/psysh/test/Input/ShellInputTest.php:219:                '->tokenize() parses long options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:222:                '--long-option="foo bar""another"',
vendor/psy/psysh/test/Input/ShellInputTest.php:223:                [['--long-option=foo baranother', '--long-option="foo bar""another"']],
vendor/psy/psysh/test/Input/ShellInputTest.php:224:                '->tokenize() parses long options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:227:                '--long-option=\'foo bar\'',
vendor/psy/psysh/test/Input/ShellInputTest.php:228:                [['--long-option=foo bar', '--long-option=\'foo bar\'']],
vendor/psy/psysh/test/Input/ShellInputTest.php:229:                '->tokenize() parses long options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:232:                "--long-option='foo bar''another'",
vendor/psy/psysh/test/Input/ShellInputTest.php:233:                [['--long-option=foo baranother', "--long-option='foo bar''another'"]],
vendor/psy/psysh/test/Input/ShellInputTest.php:234:                '->tokenize() parses long options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:237:                "--long-option='foo bar'\"another\"",
vendor/psy/psysh/test/Input/ShellInputTest.php:238:                [['--long-option=foo baranother', "--long-option='foo bar'\"another\""]],
vendor/psy/psysh/test/Input/ShellInputTest.php:239:                '->tokenize() parses long options with a value',
vendor/psy/psysh/test/Input/ShellInputTest.php:242:                'foo -a -ffoo --long bar',
vendor/psy/psysh/test/Input/ShellInputTest.php:244:                    ['foo', 'foo -a -ffoo --long bar'],
vendor/psy/psysh/test/Input/ShellInputTest.php:245:                    ['-a', '-a -ffoo --long bar'],
vendor/psy/psysh/test/Input/ShellInputTest.php:246:                    ['-ffoo', '-ffoo --long bar'],
vendor/psy/psysh/test/Input/ShellInputTest.php:247:                    ['--long', '--long bar'],
vendor/psy/psysh/test/Input/ShellInputTest.php:250:                '->tokenize() parses when several arguments and options',
vendor/psy/psysh/test/Input/FilterOptionsTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Input/FilterOptionsTest.php:23:        $this->assertCount(3, $opts);
vendor/psy/psysh/test/Input/FilterOptionsTest.php:31:        $input = $this->getInput($input);
vendor/psy/psysh/test/Input/FilterOptionsTest.php:33:        $filterOptions->bind($input);
vendor/psy/psysh/test/Input/FilterOptionsTest.php:35:        $this->assertEquals($hasFilter, $filterOptions->hasFilter());
vendor/psy/psysh/test/Input/FilterOptionsTest.php:41:            ['--grep="bar"'],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:42:            ['--grep="bar" --invert'],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:43:            ['--grep="bar" --insensitive'],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:44:            ['--grep="bar" --invert --insensitive'],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:55:        $input = $this->getInput($input);
vendor/psy/psysh/test/Input/FilterOptionsTest.php:57:        $filterOptions->bind($input);
vendor/psy/psysh/test/Input/FilterOptionsTest.php:63:            ['--invert'],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:64:            ['--insensitive'],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:65:            ['--invert --insensitive'],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:68:            ['--grep /*/'],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:77:        $input = $this->getInput($input);
vendor/psy/psysh/test/Input/FilterOptionsTest.php:79:        $filterOptions->bind($input);
vendor/psy/psysh/test/Input/FilterOptionsTest.php:81:        $this->assertEquals($matches, $filterOptions->match($str));
vendor/psy/psysh/test/Input/FilterOptionsTest.php:88:            ['--grep FOO', 'foo', false],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:89:            ['--grep foo', 'foo', true],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:90:            ['--grep foo', 'food', true],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:91:            ['--grep oo', 'Food', true],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:92:            ['--grep oo -i', 'FOOD', true],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:93:            ['--grep foo -v', 'food', false],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:94:            ['--grep foo -v', 'whatever', true],
vendor/psy/psysh/test/Input/FilterOptionsTest.php:101:        $input->bind(new InputDefinition(FilterOptions::getOptions()));
vendor/psy/psysh/test/Util/StrTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Util/StrTest.php:23:        $this->assertSame($expected, Str::unvis($input));
vendor/psy/psysh/test/Util/DocblockTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Util/DocblockTest.php:24:            ->getMockBuilder('ReflectionClass')
vendor/psy/psysh/test/Util/DocblockTest.php:25:            ->disableOriginalConstructor()
vendor/psy/psysh/test/Util/DocblockTest.php:26:            ->getMock();
vendor/psy/psysh/test/Util/DocblockTest.php:28:        $reflector->expects($this->once())
vendor/psy/psysh/test/Util/DocblockTest.php:29:            ->method('getDocComment')
vendor/psy/psysh/test/Util/DocblockTest.php:30:            ->will($this->returnValue($comment));
vendor/psy/psysh/test/Util/DocblockTest.php:34:        $this->assertSame($body, $docblock->desc);
vendor/psy/psysh/test/Util/DocblockTest.php:37:            $this->assertTrue($docblock->hasTag($tag));
vendor/psy/psysh/test/Util/DocblockTest.php:38:            $this->assertEquals($value, $docblock->tag($tag));
vendor/psy/psysh/test/Util/DocblockTest.php:45:            $this->markTestSkipped('We have issues with PHPUnit mocks on HHVM.');
vendor/psy/psysh/test/Util/MirrorTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Util/MirrorTest.php:30:        $this->assertInstanceOf('ReflectionFunction', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:33:        $this->assertInstanceOf('ReflectionClass', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:36:        $this->assertInstanceOf('ReflectionObject', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:40:            $this->assertInstanceOf('ReflectionClassConstant', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:42:            $this->assertInstanceOf('Psy\Reflection\ReflectionClassConstant', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:46:        $this->assertInstanceOf('Psy\Reflection\ReflectionConstant_', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:49:        $this->assertInstanceOf('ReflectionProperty', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:52:        $this->assertInstanceOf('ReflectionProperty', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:55:        $this->assertInstanceOf('ReflectionMethod', $refl);
vendor/psy/psysh/test/Util/MirrorTest.php:58:        $this->assertInstanceOf('ReflectionProperty', $refl);
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:23:        $colors    = $factory->getConsoleColor();
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:24:        $themes    = $colors->getThemes();
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:26:        $this->assertFalse($colors->isStyleForced());
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:27:        $this->assertSame(['blue'], $themes['line_number']);
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:34:        $colors    = $factory->getConsoleColor();
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:35:        $themes    = $colors->getThemes();
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:37:        $this->assertTrue($colors->isStyleForced());
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:38:        $this->assertSame(['blue'], $themes['line_number']);
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:45:        $colors    = $factory->getConsoleColor();
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:46:        $themes    = $colors->getThemes();
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:48:        $this->assertFalse($colors->isStyleForced());
vendor/psy/psysh/test/ConsoleColorFactoryTest.php:49:        $this->assertSame(['none'], $themes['line_number']);
vendor/psy/psysh/test/ParserTestCase.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/ParserTestCase.php:26:        $this->traverser = null;
vendor/psy/psysh/test/ParserTestCase.php:27:        $this->parser = null;
vendor/psy/psysh/test/ParserTestCase.php:28:        $this->printer = null;
vendor/psy/psysh/test/ParserTestCase.php:35:            return $this->getParser()->parse($code);
vendor/psy/psysh/test/ParserTestCase.php:37:            if (!$this->parseErrorIsEOF($e)) {
vendor/psy/psysh/test/ParserTestCase.php:43:                return $this->getParser()->parse($code . ';');
vendor/psy/psysh/test/ParserTestCase.php:52:        if (!isset($this->traverser)) {
vendor/psy/psysh/test/ParserTestCase.php:56:        return $this->traverser->traverse($stmts);
vendor/psy/psysh/test/ParserTestCase.php:61:        return $this->getPrinter()->prettyPrint($stmts);
vendor/psy/psysh/test/ParserTestCase.php:66:        $stmts = $this->parse($from);
vendor/psy/psysh/test/ParserTestCase.php:67:        $stmts = $this->traverse($stmts);
vendor/psy/psysh/test/ParserTestCase.php:68:        $toStmts = $this->parse($to);
vendor/psy/psysh/test/ParserTestCase.php:69:        $this->assertSame($this->prettyPrint($toStmts), $this->prettyPrint($stmts));
vendor/psy/psysh/test/ParserTestCase.php:74:        if (!isset($this->parser)) {
vendor/psy/psysh/test/ParserTestCase.php:76:            $this->parser  = $parserFactory->createParser();
vendor/psy/psysh/test/ParserTestCase.php:79:        return $this->parser;
vendor/psy/psysh/test/ParserTestCase.php:84:        if (!isset($this->printer)) {
vendor/psy/psysh/test/ParserTestCase.php:85:            $this->printer = new Printer();
vendor/psy/psysh/test/ParserTestCase.php:88:        return $this->printer;
vendor/psy/psysh/test/ParserTestCase.php:93:        $msg = $e->getRawMessage();
vendor/psy/psysh/test/Formatter/Fixtures/BoringTrait.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Formatter/Fixtures/SomeClass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Formatter/SignatureFormatterTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Formatter/SignatureFormatterTest.php:32:        $this->assertSame($expected, strip_tags(SignatureFormatter::format($reflector)));
vendor/psy/psysh/test/Formatter/SignatureFormatterTest.php:92:        $refl = $this->getMockBuilder('Reflector')->getMock();
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:27:        $this->assertEquals($expected, self::trimLines($formattedWithoutColors));
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:28:        $this->assertNotEquals($expected, self::trimLines($formatted));
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:104:        $reflector = $this->getMockBuilder('ReflectionClass')
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:105:            ->disableOriginalConstructor()
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:106:            ->getMock();
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:109:            ->expects($this->once())
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:110:            ->method('getFileName')
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:111:            ->will($this->returnValue($filename));
vendor/psy/psysh/test/Formatter/CodeFormatterTest.php:119:            $this->markTestSkipped('We have issues with PHPUnit mocks on HHVM.');
vendor/psy/psysh/test/Formatter/DocblockFormatterTest.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/test/Formatter/DocblockFormatterTest.php:58:        $this->assertSame(
vendor/psy/psysh/.travis.yml:7:    - php: 5.4
vendor/psy/psysh/.travis.yml:8:    - php: 5.4
vendor/psy/psysh/.travis.yml:9:      env: 'COMPOSER_FLAGS="--prefer-lowest --prefer-stable"'
vendor/psy/psysh/.travis.yml:10:    - php: 5.5
vendor/psy/psysh/.travis.yml:11:    - php: 5.6
vendor/psy/psysh/.travis.yml:12:    - php: 7.0
vendor/psy/psysh/.travis.yml:13:    - php: 7.1
vendor/psy/psysh/.travis.yml:14:    - php: 7.2
vendor/psy/psysh/.travis.yml:15:    - php: hhvm
vendor/psy/psysh/.travis.yml:18:    - php: 5.4
vendor/psy/psysh/.travis.yml:19:      env: 'COMPOSER_FLAGS="--prefer-lowest --prefer-stable"'
vendor/psy/psysh/.travis.yml:20:    - php: hhvm
vendor/psy/psysh/.travis.yml:23:install: travis_retry composer update --no-interaction $COMPOSER_FLAGS
vendor/psy/psysh/.travis.yml:26: - vendor/bin/phpunit --verbose --coverage-clover=coverage.xml
vendor/psy/psysh/.travis.yml:27: - '[[ $TRAVIS_PHP_VERSION = 7.2* ]] && make build -j 4 || true'
vendor/psy/psysh/.travis.yml:30:  - bash <(curl -s https://codecov.io/bash)
vendor/psy/psysh/.travis.yml:32:before_deploy: make dist -j 4
vendor/psy/psysh/.travis.yml:39:  file: dist/psysh-*.tar.gz
vendor/psy/psysh/phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/psy/psysh/bin/psysh:7: * (c) 2012-2017 Justin Hileman
vendor/psy/psysh/bin/psysh:21:        if ($arg === '--cwd') {
vendor/psy/psysh/bin/psysh:22:            if ($i >= count($argv) - 1) {
vendor/psy/psysh/bin/psysh:23:                echo 'Missing --cwd argument.' . PHP_EOL;
vendor/psy/psysh/bin/psysh:30:        if (preg_match('/^--cwd=/', $arg)) {
vendor/psy/psysh/bin/psysh:65:                foreach (array_merge($cfg['packages'], $cfg['packages-dev']) as $pkg) {
vendor/psy/psysh/LICENSE:3:Copyright (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ExecutionLoop.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ExecutionLoop.php:24:     * @throws ThrowUpException if thrown by the `throw-up` command
vendor/psy/psysh/src/ExecutionLoop.php:30:        $this->loadIncludes($shell);
vendor/psy/psysh/src/ExecutionLoop.php:33:        $closure->execute();
vendor/psy/psysh/src/ExecutionLoop.php:37:     * Load user-defined includes.
vendor/psy/psysh/src/ExecutionLoop.php:43:        // Load user-defined includes
vendor/psy/psysh/src/ExecutionLoop.php:46:            foreach ($__psysh__->getIncludes() as $__psysh_include__) {
vendor/psy/psysh/src/ExecutionLoop.php:50:                    $__psysh__->writeException(ErrorException::fromError($_e));
vendor/psy/psysh/src/ExecutionLoop.php:52:                    $__psysh__->writeException($_e);
vendor/psy/psysh/src/ExecutionLoop.php:58:            // Override any new local variables with pre-defined scope variables
vendor/psy/psysh/src/ExecutionLoop.php:59:            extract($__psysh__->getScopeVariables(false));
vendor/psy/psysh/src/ExecutionLoop.php:62:            $__psysh__->setScopeVariables(get_defined_vars());
vendor/psy/psysh/src/Exception/FatalErrorException.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/FatalErrorException.php:33:        // Since these are basically always PHP Parser Node line numbers, treat -1 as null.
vendor/psy/psysh/src/Exception/FatalErrorException.php:34:        if ($lineno === -1) {
vendor/psy/psysh/src/Exception/FatalErrorException.php:38:        $this->rawMessage = $message;
vendor/psy/psysh/src/Exception/FatalErrorException.php:50:        return $this->rawMessage;
vendor/psy/psysh/src/Exception/Exception.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/DeprecatedException.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/ParseErrorException.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/ParseErrorException.php:23:     * @param int    $line    (default: -1)
vendor/psy/psysh/src/Exception/ParseErrorException.php:25:    public function __construct($message = '', $line = -1)
vendor/psy/psysh/src/Exception/ParseErrorException.php:40:        return new self($e->getRawMessage(), $e->getStartLine());
vendor/psy/psysh/src/Exception/BreakException.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/BreakException.php:26:        $this->rawMessage = $message;
vendor/psy/psysh/src/Exception/BreakException.php:37:        return $this->rawMessage;
vendor/psy/psysh/src/Exception/RuntimeException.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/RuntimeException.php:30:        $this->rawMessage = $message;
vendor/psy/psysh/src/Exception/RuntimeException.php:41:        return $this->rawMessage;
vendor/psy/psysh/src/Exception/TypeErrorException.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/TypeErrorException.php:29:        $this->rawMessage = $message;
vendor/psy/psysh/src/Exception/TypeErrorException.php:41:        return $this->rawMessage;
vendor/psy/psysh/src/Exception/TypeErrorException.php:53:        return new self($e->getMessage(), $e->getCode());
vendor/psy/psysh/src/Exception/ErrorException.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/ErrorException.php:33:        $this->rawMessage = $message;
vendor/psy/psysh/src/Exception/ErrorException.php:81:        return $this->rawMessage;
vendor/psy/psysh/src/Exception/ErrorException.php:112:        return new self($e->getMessage(), $e->getCode(), 1, $e->getFile(), $e->getLine(), $e);
vendor/psy/psysh/src/Exception/ThrowUpException.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Exception/ThrowUpException.php:15: * A throw-up exception, used for throwing an exception out of the Psy Shell.
vendor/psy/psysh/src/Exception/ThrowUpException.php:24:        $message = sprintf("Throwing %s with message '%s'", get_class($exception), $exception->getMessage());
vendor/psy/psysh/src/Exception/ThrowUpException.php:25:        parent::__construct($message, $exception->getCode(), $exception);
vendor/psy/psysh/src/Exception/ThrowUpException.php:35:        return $this->getPrevious()->getMessage();
vendor/psy/psysh/src/Exception/ThrowUpException.php:52:            throw new \InvalidArgumentException('throw-up can only throw Exceptions and Errors');
vendor/psy/psysh/src/ExecutionLoop/AbstractListener.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:91:                $shell->setScopeVariables(@unserialize($content));
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:106:        $this->up = $up;
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:116:        $this->createSavegame();
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:127:        if (isset($this->savegame)) {
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:128:            posix_kill($this->savegame, SIGKILL);
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:142:        if (isset($this->up)) {
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:143:            fwrite($this->up, $this->serializeReturn($shell->getScopeVariables(false)));
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:144:            fclose($this->up);
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:160:        $this->savegame = posix_getpid();
vendor/psy/psysh/src/ExecutionLoop/ProcessForker.php:175:            $this->createSavegame();
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:19: * A runkit-based code reloader, which is pretty much magic.
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:44:        $this->parser = $parserFactory->createParser();
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:55:        $this->reload($shell);
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:71:            if (!isset($this->timestamps[$file])) {
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:72:                $this->timestamps[$file] = $timestamp;
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:76:            if ($this->timestamps[$file] === $timestamp) {
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:80:            if (!$this->lintFile($file)) {
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:82:                $shell->writeException(new ParseErrorException($msg));
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:87:            $this->timestamps[$file] = $timestamp;
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:116:     * Should this file be re-imported?
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:118:     * Use PHP-Parser to ensure that the file is valid PHP.
vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:128:            $this->parser->parse(file_get_contents($file));
vendor/psy/psysh/src/ExecutionLoop/Listener.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Reflection/ReflectionConstant.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:47:        $this->name = $name;
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:54:            $this->value = @constant($name);
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:69:        $value = $refl->getValue();
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:71:        $str = sprintf('Constant [ %s %s ] { %s }', gettype($value), $refl->getName(), $value);
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:102:        return $this->name;
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:114:        if (!$this->inNamespace()) {
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:118:        return preg_replace('/\\\\[^\\\\]+$/', '', $this->name);
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:128:        return $this->value;
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:138:        return strpos($this->name, '\\') !== false;
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:148:        return $this->getName();
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:160:        // return $this->class->getFileName();
vendor/psy/psysh/src/Reflection/ReflectionConstant_.php:180:        return $this->getStartLine();
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:27:        $this->function  = $function;
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:28:        $this->parameter = $parameter;
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:29:        $this->opts      = $opts;
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:47:        return array_key_exists('isArray', $this->opts) && $this->opts['isArray'];
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:57:        if ($this->isDefaultValueAvailable()) {
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:58:            return $this->opts['defaultValue'];
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:69:        return $this->parameter;
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:79:        return array_key_exists('isOptional', $this->opts) && $this->opts['isOptional'];
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:89:        return array_key_exists('defaultValue', $this->opts);
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstructParameter.php:101:        return array_key_exists('isPassedByReference', $this->opts) && $this->opts['isPassedByReference'];
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:37:        $this->class = $class;
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:38:        $this->name  = $name;
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:40:        $constants = $class->getConstants();
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:45:        $this->value = $constants[$name];
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:60:        $value = $refl->getValue();
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:62:        $str = sprintf('Constant [ public %s %s ] { %s }', gettype($value), $refl->getName(), $value);
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:78:        $parent = $this->class;
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:87:            $parent = $class->getParentClass();
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:88:        } while ($parent && $parent->hasConstant($this->name) && $parent->getConstant($this->name) === $this->value);
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:124:        return $this->name;
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:134:        return $this->value;
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:174:        return $this->getName();
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:186:        // return $this->class->getFileName();
vendor/psy/psysh/src/Reflection/ReflectionClassConstant.php:206:        return $this->getStartLine();
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstruct.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstruct.php:83:        $this->keyword = $keyword;
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstruct.php:103:        return $this->keyword;
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstruct.php:124:        foreach (self::$languageConstructs[$this->keyword] as $parameter => $opts) {
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstruct.php:125:            array_push($params, new ReflectionLanguageConstructParameter($this->keyword, $parameter, $opts));
vendor/psy/psysh/src/Reflection/ReflectionLanguageConstruct.php:150:        return $this->getName();
vendor/psy/psysh/src/VarDumper/Presenter.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/VarDumper/Presenter.php:55:        $this->dumper = new Dumper($formatter, $forceArrayIndexes);
vendor/psy/psysh/src/VarDumper/Presenter.php:56:        $this->dumper->setStyles($this->styles);
vendor/psy/psysh/src/VarDumper/Presenter.php:61:        $this->cloner = new Cloner();
vendor/psy/psysh/src/VarDumper/Presenter.php:62:        $this->cloner->addCasters(['*' => function ($obj, array $a, Stub $stub, $isNested, $filter = 0) {
vendor/psy/psysh/src/VarDumper/Presenter.php:65:                    $a = Caster::filter($a, Caster::EXCLUDE_NOT_IMPORTANT | Caster::EXCLUDE_EMPTY, $this->exceptionsImportants);
vendor/psy/psysh/src/VarDumper/Presenter.php:84:        $this->cloner->addCasters($casters);
vendor/psy/psysh/src/VarDumper/Presenter.php:96:        return $this->present($value, 0);
vendor/psy/psysh/src/VarDumper/Presenter.php:112:        $data = $this->cloner->cloneVar($value, !($options & self::VERBOSE) ? Caster::EXCLUDE_VERBOSE : 0);
vendor/psy/psysh/src/VarDumper/Presenter.php:115:            $data = $data->withMaxDepth($depth);
vendor/psy/psysh/src/VarDumper/Presenter.php:123:        $this->dumper->dump($data, function ($line, $depth) use (&$output) {
vendor/psy/psysh/src/VarDumper/PresenterAware.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/VarDumper/Cloner.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/VarDumper/Cloner.php:19: * A PsySH-specialized VarCloner.
vendor/psy/psysh/src/VarDumper/Cloner.php:30:        $this->filter = $filter;
vendor/psy/psysh/src/VarDumper/Cloner.php:40:        return Caster::EXCLUDE_VERBOSE & $this->filter ? [] : parent::castResource($stub, $isNested);
vendor/psy/psysh/src/VarDumper/Dumper.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/VarDumper/Dumper.php:19: * A PsySH-specialized CliDumper.
vendor/psy/psysh/src/VarDumper/Dumper.php:26:    protected static $onlyControlCharsRx = '/^[\x00-\x1F\x7F]+$/';
vendor/psy/psysh/src/VarDumper/Dumper.php:27:    protected static $controlCharsRx     = '/([\x00-\x1F\x7F]+)/';
vendor/psy/psysh/src/VarDumper/Dumper.php:40:        $this->formatter = $formatter;
vendor/psy/psysh/src/VarDumper/Dumper.php:41:        $this->forceArrayIndexes = $forceArrayIndexes;
vendor/psy/psysh/src/VarDumper/Dumper.php:43:        $this->setColors(false);
vendor/psy/psysh/src/VarDumper/Dumper.php:62:        if ($this->forceArrayIndexes || Cursor::HASH_INDEXED !== $cursor->hashType) {
vendor/psy/psysh/src/VarDumper/Dumper.php:75:        $cchr = $this->styles['cchr'];
vendor/psy/psysh/src/VarDumper/Dumper.php:86:                $chars = $this->formatter->escape($chars);
vendor/psy/psysh/src/VarDumper/Dumper.php:89:                $styled .= $this->formatter->escape($chunk);
vendor/psy/psysh/src/VarDumper/Dumper.php:93:        $style = $this->styles[$style];
vendor/psy/psysh/src/VarDumper/Dumper.php:104:            $this->line .= ',';
vendor/psy/psysh/src/VarDumper/Dumper.php:106:        $this->line = $this->formatter->format($this->line);
vendor/psy/psysh/src/Output/PassthruPager.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Output/PassthruPager.php:17: * A passthrough pager is a no-op. It simply wraps a StreamOutput's stream and
vendor/psy/psysh/src/Output/PassthruPager.php:29:        parent::__construct($output->getStream());
vendor/psy/psysh/src/Output/ProcOutputPager.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Output/ProcOutputPager.php:35:     * @param string       $cmd    Pager process command (default: 'less -R -S -F -X')
vendor/psy/psysh/src/Output/ProcOutputPager.php:37:    public function __construct(StreamOutput $output, $cmd = 'less -R -S -F -X')
vendor/psy/psysh/src/Output/ProcOutputPager.php:39:        $this->stream = $output->getStream();
vendor/psy/psysh/src/Output/ProcOutputPager.php:40:        $this->cmd    = $cmd;
vendor/psy/psysh/src/Output/ProcOutputPager.php:53:        $pipe = $this->getPipe();
vendor/psy/psysh/src/Output/ProcOutputPager.php:69:        if (isset($this->pipe)) {
vendor/psy/psysh/src/Output/ProcOutputPager.php:70:            fclose($this->pipe);
vendor/psy/psysh/src/Output/ProcOutputPager.php:73:        if (isset($this->proc)) {
vendor/psy/psysh/src/Output/ProcOutputPager.php:74:            $exit = proc_close($this->proc);
vendor/psy/psysh/src/Output/ProcOutputPager.php:80:        unset($this->pipe, $this->proc);
vendor/psy/psysh/src/Output/ProcOutputPager.php:90:        if (!isset($this->pipe) || !isset($this->proc)) {
vendor/psy/psysh/src/Output/ProcOutputPager.php:91:            $desc = [['pipe', 'r'], $this->stream, fopen('php://stderr', 'w')];
vendor/psy/psysh/src/Output/ProcOutputPager.php:92:            $this->proc = proc_open($this->cmd, $desc, $pipes);
vendor/psy/psysh/src/Output/ProcOutputPager.php:94:            if (!is_resource($this->proc)) {
vendor/psy/psysh/src/Output/ProcOutputPager.php:98:            $this->pipe = $pipes[0];
vendor/psy/psysh/src/Output/ProcOutputPager.php:101:        return $this->pipe;
vendor/psy/psysh/src/Output/ShellOutput.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Output/ShellOutput.php:40:        $this->initFormatters();
vendor/psy/psysh/src/Output/ShellOutput.php:43:            $this->pager = new PassthruPager($this);
vendor/psy/psysh/src/Output/ShellOutput.php:45:            $this->pager = new ProcOutputPager($this, $pager);
vendor/psy/psysh/src/Output/ShellOutput.php:47:            $this->pager = $pager;
vendor/psy/psysh/src/Output/ShellOutput.php:76:        $this->startPaging();
vendor/psy/psysh/src/Output/ShellOutput.php:81:            $this->write($messages, true, $type);
vendor/psy/psysh/src/Output/ShellOutput.php:84:        $this->stopPaging();
vendor/psy/psysh/src/Output/ShellOutput.php:92:        $this->paging++;
vendor/psy/psysh/src/Output/ShellOutput.php:100:        $this->paging--;
vendor/psy/psysh/src/Output/ShellOutput.php:101:        $this->closePager();
vendor/psy/psysh/src/Output/ShellOutput.php:118:        if ($this->getVerbosity() === self::VERBOSITY_QUIET) {
vendor/psy/psysh/src/Output/ShellOutput.php:126:            $template = $this->isDecorated() ? "<aside>%{$pad}s</aside>: %s" : "%{$pad}s: %s";
vendor/psy/psysh/src/Output/ShellOutput.php:153:        if ($this->paging > 0) {
vendor/psy/psysh/src/Output/ShellOutput.php:154:            $this->pager->doWrite($message, $newline);
vendor/psy/psysh/src/Output/ShellOutput.php:165:        if ($this->paging <= 0) {
vendor/psy/psysh/src/Output/ShellOutput.php:166:            $this->pager->close();
vendor/psy/psysh/src/Output/ShellOutput.php:175:        $formatter = $this->getFormatter();
vendor/psy/psysh/src/Output/ShellOutput.php:177:        $formatter->setStyle('warning', new OutputFormatterStyle('black', 'yellow'));
vendor/psy/psysh/src/Output/ShellOutput.php:178:        $formatter->setStyle('error',   new OutputFormatterStyle('black', 'red', ['bold']));
vendor/psy/psysh/src/Output/ShellOutput.php:179:        $formatter->setStyle('aside',   new OutputFormatterStyle('blue'));
vendor/psy/psysh/src/Output/ShellOutput.php:180:        $formatter->setStyle('strong',  new OutputFormatterStyle(null, null, ['bold']));
vendor/psy/psysh/src/Output/ShellOutput.php:181:        $formatter->setStyle('return',  new OutputFormatterStyle('cyan'));
vendor/psy/psysh/src/Output/ShellOutput.php:182:        $formatter->setStyle('urgent',  new OutputFormatterStyle('red'));
vendor/psy/psysh/src/Output/ShellOutput.php:183:        $formatter->setStyle('hidden',  new OutputFormatterStyle('black'));
vendor/psy/psysh/src/Output/ShellOutput.php:186:        $formatter->setStyle('public',    new OutputFormatterStyle(null, null, ['bold']));
vendor/psy/psysh/src/Output/ShellOutput.php:187:        $formatter->setStyle('protected', new OutputFormatterStyle('yellow'));
vendor/psy/psysh/src/Output/ShellOutput.php:188:        $formatter->setStyle('private',   new OutputFormatterStyle('red'));
vendor/psy/psysh/src/Output/ShellOutput.php:189:        $formatter->setStyle('global',    new OutputFormatterStyle('cyan', null, ['bold']));
vendor/psy/psysh/src/Output/ShellOutput.php:190:        $formatter->setStyle('const',     new OutputFormatterStyle('cyan'));
vendor/psy/psysh/src/Output/ShellOutput.php:191:        $formatter->setStyle('class',     new OutputFormatterStyle('blue', null, ['underscore']));
vendor/psy/psysh/src/Output/ShellOutput.php:192:        $formatter->setStyle('function',  new OutputFormatterStyle(null));
vendor/psy/psysh/src/Output/ShellOutput.php:193:        $formatter->setStyle('default',   new OutputFormatterStyle(null));
vendor/psy/psysh/src/Output/ShellOutput.php:196:        $formatter->setStyle('number',   new OutputFormatterStyle('magenta'));
vendor/psy/psysh/src/Output/ShellOutput.php:197:        $formatter->setStyle('string',   new OutputFormatterStyle('green'));
vendor/psy/psysh/src/Output/ShellOutput.php:198:        $formatter->setStyle('bool',     new OutputFormatterStyle('cyan'));
vendor/psy/psysh/src/Output/ShellOutput.php:199:        $formatter->setStyle('keyword',  new OutputFormatterStyle('yellow'));
vendor/psy/psysh/src/Output/ShellOutput.php:200:        $formatter->setStyle('comment',  new OutputFormatterStyle('blue'));
vendor/psy/psysh/src/Output/ShellOutput.php:201:        $formatter->setStyle('object',   new OutputFormatterStyle('blue'));
vendor/psy/psysh/src/Output/ShellOutput.php:202:        $formatter->setStyle('resource', new OutputFormatterStyle('yellow'));
vendor/psy/psysh/src/Output/OutputPager.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/AssignThisVariablePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/AssignThisVariablePass.php:35:        if ($node instanceof Assign && $node->var instanceof Variable && $node->var->name === 'this') {
vendor/psy/psysh/src/CodeCleaner/AssignThisVariablePass.php:36:            throw new FatalErrorException('Cannot re-assign $this', 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/InstanceOfPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/InstanceOfPass.php:22: * Validate that the instanceof statement does not receive a scalar value or a non-class constant.
vendor/psy/psysh/src/CodeCleaner/InstanceOfPass.php:31:     * Validate that the instanceof statement does not receive a scalar value or a non-class constant.
vendor/psy/psysh/src/CodeCleaner/InstanceOfPass.php:33:     * @throws FatalErrorException if a scalar or a non-class constant is given
vendor/psy/psysh/src/CodeCleaner/InstanceOfPass.php:43:        if (($node->expr instanceof Scalar && !$node->expr instanceof Encapsed) || $node->expr instanceof ConstFetch) {
vendor/psy/psysh/src/CodeCleaner/InstanceOfPass.php:44:            throw new FatalErrorException(self::EXCEPTION_MSG, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:25: * Validate that only variables (and variable-like things) are passed by reference.
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:32:     * @throws FatalErrorException if non-variables are passed by reference
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:41:            if ($node->name instanceof Expr || $node->name instanceof Variable) {
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:45:            $name = (string) $node->name;
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:48:                return $this->validateArrayMultisort($node);
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:58:            foreach ($refl->getParameters() as $key => $param) {
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:59:                if (array_key_exists($key, $node->args)) {
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:60:                    $arg = $node->args[$key];
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:61:                    if ($param->isPassedByReference() && !$this->isPassableByReference($arg)) {
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:62:                        throw new FatalErrorException(self::EXCEPTION_MESSAGE, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:73:        return $arg->value instanceof ClassConstFetch ||
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:74:            $arg->value instanceof PropertyFetch ||
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:75:            $arg->value instanceof Variable ||
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:76:            $arg->value instanceof FuncCall ||
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:77:            $arg->value instanceof MethodCall ||
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:78:            $arg->value instanceof StaticCall;
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:99:        foreach ($node->args as $arg) {
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:100:            if ($this->isPassableByReference($arg)) {
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:103:                // There can be *at most* two non-passable-by-reference args in a row. This is about
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:104:                // as close as we can get to validating the arguments for this function :-/
vendor/psy/psysh/src/CodeCleaner/PassableByReferencePass.php:105:                throw new FatalErrorException(self::EXCEPTION_MESSAGE, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/NoReturnValue.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/NoReturnValue.php:19: * non-expression statements, with no return value.
vendor/psy/psysh/src/CodeCleaner/RequirePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/RequirePass.php:36:        if (!$this->isRequireNode($origNode)) {
vendor/psy/psysh/src/CodeCleaner/RequirePass.php:51:        $node->expr = new StaticCall(
vendor/psy/psysh/src/CodeCleaner/RequirePass.php:54:            [new Arg($origNode->expr), new Arg(new LNumber($origNode->getLine()))],
vendor/psy/psysh/src/CodeCleaner/RequirePass.php:55:            $origNode->getAttributes()
vendor/psy/psysh/src/CodeCleaner/RequirePass.php:100:        return $node instanceof Include_ && in_array($node->type, self::$requireTypes);
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:35:        $this->inClass = false;
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:46:            $this->inClass = true;
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:47:        } elseif ($node instanceof FuncCall && !$this->inClass) {
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:51:            // @todo switch this to actually validate args when we get context-aware code cleaner passes.
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:52:            if (!empty($node->args) && !$this->isNull($node->args[0])) {
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:57:            if (!($node->name instanceof Name)) {
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:61:            $name = strtolower($node->name);
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:64:                throw new ErrorException($msg, 0, E_USER_WARNING, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:75:            $this->inClass = false;
vendor/psy/psysh/src/CodeCleaner/CalledClassPass.php:81:        return $node->value instanceof ConstFetch && strtolower($node->value->name) === 'null';
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:25: * Checks both explicit __construct methods as well as old-style constructor
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:26: * methods with the same name as the class (for non-namespaced classes).
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:30: * doesn't affect non-namespaced classes.
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:40:        $this->namespace = [];
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:54:            $this->namespace = isset($node->name) ? $node->name->parts : [];
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:57:            foreach ($node->stmts as $stmt) {
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:59:                    // If we find a new-style constructor, no need to look for the old-style
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:60:                    if ('__construct' === strtolower($stmt->name)) {
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:61:                        $this->validateConstructor($stmt, $node);
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:66:                    // We found a possible old-style constructor (unless there is also a __construct method)
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:67:                    if (empty($this->namespace) && strtolower($node->name) === strtolower($stmt->name)) {
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:74:                $this->validateConstructor($constructor, $node);
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:88:        if ($constructor->isStatic()) {
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:90:            $className = $classNode->name instanceof Identifier ? $classNode->name->toString() : $classNode->name;
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:94:                implode('\\', array_merge($this->namespace, (array) $className)),
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:95:                $constructor->name
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:97:            throw new FatalErrorException($msg, 0, E_ERROR, null, $classNode->getLine());
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:100:        if (method_exists($constructor, 'getReturnType') && $constructor->getReturnType()) {
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:102:            $className = $classNode->name instanceof Identifier ? $classNode->name->toString() : $classNode->name;
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:106:                implode('\\', array_merge($this->namespace, (array) $className)),
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:107:                $constructor->name
vendor/psy/psysh/src/CodeCleaner/ValidConstructorPass.php:109:            throw new FatalErrorException($msg, 0, E_ERROR, null, $classNode->getLine());
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:46:        $this->atLeastPhp55 = version_compare(PHP_VERSION, '5.5', '>=');
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:63:            $this->conditionalScopes++;
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:67:            if ($this->conditionalScopes === 0) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:69:                    $this->validateClassStatement($node);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:71:                    $this->validateInterfaceStatement($node);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:73:                    $this->validateTraitStatement($node);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:93:            $this->conditionalScopes--;
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:95:            $this->validateNewExpression($node);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:97:            $this->validateClassConstFetchExpression($node);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:99:            $this->validateStaticCallExpression($node);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:118:        $this->ensureCanDefine($stmt, self::CLASS_TYPE);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:119:        if (isset($stmt->extends)) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:120:            $this->ensureClassExists($this->getFullyQualifiedName($stmt->extends), $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:122:        $this->ensureInterfacesExist($stmt->implements, $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:132:        $this->ensureCanDefine($stmt, self::INTERFACE_TYPE);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:133:        $this->ensureInterfacesExist($stmt->extends, $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:143:        $this->ensureCanDefine($stmt, self::TRAIT_TYPE);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:154:        if (!$stmt->class instanceof Expr && !$stmt->class instanceof Class_) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:155:            $this->ensureClassExists($this->getFullyQualifiedName($stmt->class), $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:167:        if (strtolower($stmt->name) === 'class' && $this->atLeastPhp55) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:172:        if (!$stmt->class instanceof Expr) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:173:            $this->ensureClassOrInterfaceExists($this->getFullyQualifiedName($stmt->class), $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:185:        if (!$stmt->class instanceof Expr) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:186:            $this->ensureMethodExists($this->getFullyQualifiedName($stmt->class), $stmt->name, $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:200:        $name = $this->getFullyQualifiedName($stmt->name);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:204:        if ($this->classExists($name)) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:206:        } elseif ($this->interfaceExists($name)) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:208:        } elseif ($this->traitExists($name)) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:213:            throw $this->createError(sprintf('%s named %s already exists', ucfirst($errorType), $name), $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:218:        $this->currentScope[strtolower($name)] = $scopeType;
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:231:        if (!$this->classExists($name)) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:232:            throw $this->createError(sprintf('Class \'%s\' not found', $name), $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:246:        if (!$this->classExists($name) && !$this->interfaceExists($name)) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:247:            throw $this->createError(sprintf('Class \'%s\' not found', $name), $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:262:        $this->ensureClassExists($class, $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:270:        if ($this->findInScope($class) === self::CLASS_TYPE) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:280:            throw $this->createError(sprintf('Call to undefined method %s::%s()', $class, $name), $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:296:            $name = $this->getFullyQualifiedName($interface);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:297:            if (!$this->interfaceExists($name)) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:298:                throw $this->createError(sprintf('Interface \'%s\' not found', $name), $stmt);
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:342:        return class_exists($name) || $this->findInScope($name) === self::CLASS_TYPE;
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:354:        return interface_exists($name) || $this->findInScope($name) === self::INTERFACE_TYPE;
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:366:        return trait_exists($name) || $this->findInScope($name) === self::TRAIT_TYPE;
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:379:        if (isset($this->currentScope[$name])) {
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:380:            return $this->currentScope[$name];
vendor/psy/psysh/src/CodeCleaner/ValidClassNamePass.php:394:        return new FatalErrorException($msg, 0, E_ERROR, null, $stmt->getLine());
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:39:     * Re-load the last set of use statements on re-entering a namespace.
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:52:            if (strtolower($node->name) === strtolower($this->lastNamespace)) {
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:53:                $this->aliases = $this->lastAliases;
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:71:            foreach ($node->uses as $use) {
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:72:                $alias = $use->alias ?: end($use->name->parts);
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:73:                $this->aliases[strtolower($alias)] = $use->name;
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:80:            foreach ($node->uses as $use) {
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:81:                $alias = $use->alias ?: end($use->name->parts);
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:82:                $this->aliases[strtolower($alias)] = Name::concat($node->prefix, $use->name, [
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:83:                    'startLine' => $node->prefix->getAttribute('startLine'),
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:84:                    'endLine'   => $use->name->getAttribute('endLine'),
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:91:            $this->lastNamespace = $node->name;
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:92:            $this->lastAliases   = $this->aliases;
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:93:            $this->aliases       = [];
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:98:                    if ($replacement = $this->findAlias($subNode)) {
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:99:                        $node->$name = $replacement;
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:118:        foreach ($this->aliases as $alias => $prefix) {
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:120:                return new FullyQualifiedName($prefix->toString());
vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:122:                return new FullyQualifiedName($prefix->toString() . substr($name, strlen($alias)));
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:30:        $this->finalClasses = [];
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:41:            if ($node->extends) {
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:42:                $extends = (string) $node->extends;
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:43:                if ($this->isFinalClass($extends)) {
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:44:                    $msg = sprintf('Class %s may not inherit from final class (%s)', $node->name, $extends);
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:45:                    throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:49:            if ($node->isFinal()) {
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:50:                $this->finalClasses[strtolower($node->name)] = true;
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:63:            return isset($this->finalClasses[strtolower($name)]);
vendor/psy/psysh/src/CodeCleaner/FinalClassPass.php:68:        return $refl->isFinal();
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:46:        if ($node instanceof ConstFetch && count($node->name->parts) > 1) {
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:47:            $name = $this->getFullyQualifiedName($node->name);
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:50:                throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:53:            $this->validateClassConstFetchExpression($node);
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:67:        $constName = $stmt->name instanceof Identifier ? $stmt->name->toString() : $stmt->name;
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:69:        // give the `class` pseudo-constant a pass
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:75:        if (!$stmt->class instanceof Expr) {
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:76:            $className = $this->getFullyQualifiedName($stmt->class);
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:82:                if (!$refl->hasConstant($constName)) {
vendor/psy/psysh/src/CodeCleaner/ValidConstantPass.php:85:                    throw new FatalErrorException($msg, 0, E_ERROR, null, $stmt->getLine());
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:37:        return $this->addImplicitReturn($nodes);
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:59:            $last->stmts = $this->addImplicitReturn($last->stmts);
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:61:            foreach ($last->elseifs as $elseif) {
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:62:                $elseif->stmts = $this->addImplicitReturn($elseif->stmts);
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:65:            if ($last->else) {
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:66:                $last->else->stmts = $this->addImplicitReturn($last->else->stmts);
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:69:            foreach ($last->cases as $case) {
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:71:                $caseLast = end($case->stmts);
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:73:                    $case->stmts = $this->addImplicitReturn(array_slice($case->stmts, 0, -1));
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:74:                    $case->stmts[] = $caseLast;
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:79:            $nodes[count($nodes) - 1] = new Return_($last, [
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:80:                'startLine' => $last->getLine(),
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:81:                'endLine'   => $last->getLine(),
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:84:        } elseif ($last instanceof Expression && !($last->expr instanceof Exit_)) {
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:86:            $nodes[count($nodes) - 1] = new Return_($last->expr, [
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:87:                'startLine' => $last->getLine(),
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:88:                'endLine'   => $last->getLine(),
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:91:            $last->stmts = $this->addImplicitReturn($last->stmts);
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:94:        // Return a "no return value" for all non-expression statements, so that
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:98:        // _might_ implicitly return a value before this catch-all return is
vendor/psy/psysh/src/CodeCleaner/ImplicitReturnPass.php:112:     * Check whether a given node is a non-expression statement.
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:45:            $this->conditionalScopes++;
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:47:            $name = $this->getFullyQualifiedName($node->name);
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:51:            if ($this->conditionalScopes === 0) {
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:53:                    isset($this->currentScope[strtolower($name)])) {
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:55:                    throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:59:            $this->currentScope[strtolower($name)] = true;
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:74:            $this->conditionalScopes--;
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:77:            $name = $node->name;
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:79:                $shortName = implode('\\', $name->parts);
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:80:                $fullName  = $this->getFullyQualifiedName($name);
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:81:                $inScope   = isset($this->currentScope[strtolower($fullName)]);
vendor/psy/psysh/src/CodeCleaner/ValidFunctionNamePass.php:84:                    throw new FatalErrorException($message, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/ExitPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/MagicConstantsPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/MagicConstantsPass.php:37:            return new FuncCall(new Name('getcwd'), [], $node->getAttributes());
vendor/psy/psysh/src/CodeCleaner/MagicConstantsPass.php:39:            return new String_('', $node->getAttributes());
vendor/psy/psysh/src/CodeCleaner/CodeCleanerPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:20: * Abstract namespace-aware code cleaner pass.
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:35:        $this->namespace    = [];
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:36:        $this->currentScope = [];
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:48:            $this->namespace = isset($node->name) ? $node->name->parts : [];
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:53:     * Get a fully-qualified name (class, function, interface, etc).
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:62:            return implode('\\', $name->parts);
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:64:            $name = $name->parts;
vendor/psy/psysh/src/CodeCleaner/NamespaceAwarePass.php:69:        return implode('\\', array_merge($this->namespace, $name));
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:39:        $this->cleaner = $cleaner;
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:59:            $kind = $last->getAttribute('kind');
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:61:            // Treat all namespace statements pre-PHP-Parser v3.1.2 as "open",
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:65:                $this->setNamespace($last->name);
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:68:                $this->setNamespace(null);
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:74:        return $this->namespace ? [new Namespace_($this->namespace, $nodes)] : $nodes;
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:85:        $this->namespace = $namespace;
vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:86:        $this->cleaner->setNamespace($namespace === null ? null : $namespace->parts);
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:38:        $this->loopDepth = 0;
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:42:     * @throws FatalErrorException if the node is a break or continue in a non-loop or switch context
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:44:     * @throws FatalErrorException if the node is a break or continue and has a non-numeric argument
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:57:                $this->loopDepth++;
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:64:                if ($this->loopDepth === 0) {
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:66:                    throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:69:                if ($node->num instanceof LNumber || $node->num instanceof DNumber) {
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:70:                    $num = $node->num->value;
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:71:                    if ($node->num instanceof DNumber || $num < 1) {
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:73:                        throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:76:                    if ($num > $this->loopDepth) {
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:78:                        throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:80:                } elseif ($node->num) {
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:81:                    $msg = sprintf("'%s' operator with non-constant operand is no longer supported", $operator);
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:82:                    throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/LoopContextPass.php:99:                $this->loopDepth--;
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:21: * Validate that the user did not use the call-time pass-by-reference that causes a fatal error.
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:23: * As of PHP 5.4.0, call-time pass-by-reference was removed, so using it will raise a fatal error.
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:29:    const EXCEPTION_MESSAGE = 'Call-time pass-by-reference has been removed';
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:32:     * Validate of use call-time pass-by-reference.
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:34:     * @throws RuntimeException if the user used call-time pass-by-reference
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:44:        foreach ($node->args as $arg) {
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:45:            if ($arg->byRef) {
vendor/psy/psysh/src/CodeCleaner/CallTimePassByReferencePass.php:46:                throw new FatalErrorException(self::EXCEPTION_MESSAGE, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:39:        $this->atLeastPhp55 = version_compare(PHP_VERSION, '5.5', '>=');
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:54:        if ($node instanceof Array_ || $this->isCallNode($node)) {
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:55:            $items = $node instanceof Array_ ? $node->items : $node->args;
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:57:                if ($item && $item->byRef && $this->isCallNode($item->value)) {
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:58:                    throw new FatalErrorException(self::EXCEPTION_MESSAGE, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:62:            foreach ($node->vars as $var) {
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:63:                if (!$this->isCallNode($var)) {
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:67:                $msg = ($node instanceof Isset_ && $this->atLeastPhp55) ? self::PHP55_MESSAGE : self::EXCEPTION_MESSAGE;
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:68:                throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:70:        } elseif ($node instanceof Empty_ && !$this->atLeastPhp55 && $this->isCallNode($node->expr)) {
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:71:            throw new FatalErrorException(self::EXCEPTION_MESSAGE, 0, E_ERROR, null, $node->getLine()); // @codeCoverageIgnore
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:72:        } elseif ($node instanceof Assign && $this->isCallNode($node->var)) {
vendor/psy/psysh/src/CodeCleaner/FunctionReturnInWriteContextPass.php:73:            throw new FatalErrorException(self::EXCEPTION_MESSAGE, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:31:        $this->atLeastPhp55 = version_compare(PHP_VERSION, '5.5', '>=');
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:43:        if ($this->atLeastPhp55) {
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:51:        if (!$node->expr instanceof Variable) {
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:52:            $msg = sprintf('syntax error, unexpected %s', $this->getUnexpectedThing($node->expr));
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:54:            throw new ParseErrorException($msg, $node->expr->getLine());
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:60:        switch ($node->getType()) {
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:64:                return json_encode($node->value);
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:67:                return (string) $node->name;
vendor/psy/psysh/src/CodeCleaner/LegacyEmptyPass.php:70:                return $node->getType();
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:39:        $this->atLeastPhp7 = version_compare(PHP_VERSION, '7.0', '>=');
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:54:        if (!$this->atLeastPhp7) {
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:58:        $prependStrictTypes = $this->strictTypes;
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:62:                foreach ($node->declares as $declare) {
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:64:                    $declareKey = $declare->key instanceof Identifier ? $declare->key->toString() : $declare->key;
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:66:                        $value = $declare->value;
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:67:                        if (!$value instanceof LNumber || ($value->value !== 0 && $value->value !== 1)) {
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:68:                            throw new FatalErrorException(self::EXCEPTION_MESSAGE, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:71:                        $this->strictTypes = $value->value === 1;
vendor/psy/psysh/src/CodeCleaner/ListPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/ListPass.php:31:        $this->atLeastPhp71 = version_compare(PHP_VERSION, '7.1', '>=');
vendor/psy/psysh/src/CodeCleaner/ListPass.php:47:        if (!$node->var instanceof Array_ && !$node->var instanceof List_) {
vendor/psy/psysh/src/CodeCleaner/ListPass.php:51:        if (!$this->atLeastPhp71 && $node->var instanceof Array_) {
vendor/psy/psysh/src/CodeCleaner/ListPass.php:53:            throw new ParseErrorException($msg, $node->expr->getLine());
vendor/psy/psysh/src/CodeCleaner/ListPass.php:56:        // Polyfill for PHP-Parser 2.x
vendor/psy/psysh/src/CodeCleaner/ListPass.php:57:        $items = isset($node->var->items) ? $node->var->items : $node->var->vars;
vendor/psy/psysh/src/CodeCleaner/ListPass.php:60:            throw new ParseErrorException('Cannot use empty list', $node->var->getLine());
vendor/psy/psysh/src/CodeCleaner/ListPass.php:71:            // List_->$vars in PHP-Parser 2.x is Variable instead of ArrayItem.
vendor/psy/psysh/src/CodeCleaner/ListPass.php:72:            if (!$this->atLeastPhp71 && $item instanceof ArrayItem && $item->key !== null) {
vendor/psy/psysh/src/CodeCleaner/ListPass.php:74:                throw new ParseErrorException($msg, $item->key->getLine());
vendor/psy/psysh/src/CodeCleaner/ListPass.php:77:            $value = ($item instanceof ArrayItem) ? $item->value : $item;
vendor/psy/psysh/src/CodeCleaner/ListPass.php:81:                throw new ParseErrorException($msg, $item->getLine());
vendor/psy/psysh/src/CodeCleaner/LeavePsyshAlonePass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/LeavePsyshAlonePass.php:32:        if ($node instanceof Variable && $node->name === '__psysh__') {
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:35:            $this->class = $node;
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:36:            $this->abstractMethods = [];
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:38:            if ($node->isAbstract()) {
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:39:                $name = sprintf('%s::%s', $this->class->name, $node->name);
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:40:                $this->abstractMethods[] = $name;
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:42:                if ($node->stmts !== null) {
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:44:                    throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:51:     * @throws RuntimeException if the node is a non-abstract class with abstract methods
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:58:            $count = count($this->abstractMethods);
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:59:            if ($count > 0 && !$node->isAbstract()) {
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:62:                    $node->name,
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:65:                    implode(', ', $this->abstractMethods)
vendor/psy/psysh/src/CodeCleaner/AbstractClassPass.php:67:                throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/FunctionContextPass.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner/FunctionContextPass.php:29:        $this->functionDepth = 0;
vendor/psy/psysh/src/CodeCleaner/FunctionContextPass.php:35:            $this->functionDepth++;
vendor/psy/psysh/src/CodeCleaner/FunctionContextPass.php:41:        if ($this->functionDepth !== 0) {
vendor/psy/psysh/src/CodeCleaner/FunctionContextPass.php:48:            throw new FatalErrorException($msg, 0, E_ERROR, null, $node->getLine());
vendor/psy/psysh/src/CodeCleaner/FunctionContextPass.php:58:            $this->functionDepth--;
vendor/psy/psysh/src/Sudo.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Sudo.php:26:     * @return mixed Value of $object->property
vendor/psy/psysh/src/Sudo.php:31:        $prop = $refl->getProperty($property);
vendor/psy/psysh/src/Sudo.php:32:        $prop->setAccessible(true);
vendor/psy/psysh/src/Sudo.php:34:        return $prop->getValue($object);
vendor/psy/psysh/src/Sudo.php:44:     * @return mixed Value of $object->property
vendor/psy/psysh/src/Sudo.php:49:        $prop = $refl->getProperty($property);
vendor/psy/psysh/src/Sudo.php:50:        $prop->setAccessible(true);
vendor/psy/psysh/src/Sudo.php:51:        $prop->setValue($object, $value);
vendor/psy/psysh/src/Sudo.php:72:        $reflMethod = $refl->getMethod($method);
vendor/psy/psysh/src/Sudo.php:73:        $reflMethod->setAccessible(true);
vendor/psy/psysh/src/Sudo.php:75:        return $reflMethod->invokeArgs($object, $args);
vendor/psy/psysh/src/Sudo.php:89:        $prop = $refl->getProperty($property);
vendor/psy/psysh/src/Sudo.php:90:        $prop->setAccessible(true);
vendor/psy/psysh/src/Sudo.php:92:        return $prop->getValue();
vendor/psy/psysh/src/Sudo.php:107:        $prop = $refl->getProperty($property);
vendor/psy/psysh/src/Sudo.php:108:        $prop->setAccessible(true);
vendor/psy/psysh/src/Sudo.php:109:        $prop->setValue($value);
vendor/psy/psysh/src/Sudo.php:130:        $reflMethod = $refl->getMethod($method);
vendor/psy/psysh/src/Sudo.php:131:        $reflMethod->setAccessible(true);
vendor/psy/psysh/src/Sudo.php:133:        return $reflMethod->invokeArgs(null, $args);
vendor/psy/psysh/src/Sudo.php:148:        return $refl->getConstant($const);
vendor/psy/psysh/src/Shell.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Shell.php:44: *     $shell->run();
vendor/psy/psysh/src/Shell.php:54:    const REPLAY      = '--> ';
vendor/psy/psysh/src/Shell.php:84:        $this->config        = $config ?: new Configuration();
vendor/psy/psysh/src/Shell.php:85:        $this->cleaner       = $this->config->getCodeCleaner();
vendor/psy/psysh/src/Shell.php:86:        $this->loop          = new ExecutionLoop();
vendor/psy/psysh/src/Shell.php:87:        $this->context       = new Context();
vendor/psy/psysh/src/Shell.php:88:        $this->includes      = [];
vendor/psy/psysh/src/Shell.php:89:        $this->readline      = $this->config->getReadline();
vendor/psy/psysh/src/Shell.php:90:        $this->inputBuffer   = [];
vendor/psy/psysh/src/Shell.php:91:        $this->codeStack     = [];
vendor/psy/psysh/src/Shell.php:92:        $this->stdoutBuffer  = '';
vendor/psy/psysh/src/Shell.php:93:        $this->loopListeners = $this->getDefaultLoopListeners();
vendor/psy/psysh/src/Shell.php:97:        $this->config->setShell($this);
vendor/psy/psysh/src/Shell.php:100:        \Psy\info($this->config);
vendor/psy/psysh/src/Shell.php:144:                $ret->setContext($this->context);
vendor/psy/psysh/src/Shell.php:148:                $ret->setPresenter($this->config->getPresenter());
vendor/psy/psysh/src/Shell.php:151:            if (isset($this->commandsMatcher)) {
vendor/psy/psysh/src/Shell.php:152:                $this->commandsMatcher->setCommands($this->all());
vendor/psy/psysh/src/Shell.php:168:            new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display this help message.'),
vendor/psy/psysh/src/Shell.php:180:        $sudo->setReadline($this->readline);
vendor/psy/psysh/src/Shell.php:183:        $hist->setReadline($this->readline);
vendor/psy/psysh/src/Shell.php:190:            new Command\ShowCommand($this->config->colorMode()),
vendor/psy/psysh/src/Shell.php:191:            new Command\WtfCommand($this->config->colorMode()),
vendor/psy/psysh/src/Shell.php:192:            new Command\WhereamiCommand($this->config->colorMode()),
vendor/psy/psysh/src/Shell.php:198:            new Command\EditCommand($this->config->getRuntimeDir()),
vendor/psy/psysh/src/Shell.php:213:        $this->commandsMatcher = new Matcher\CommandsMatcher($this->all());
vendor/psy/psysh/src/Shell.php:216:            $this->commandsMatcher,
vendor/psy/psysh/src/Shell.php:249:        if (ProcessForker::isSupported() && $this->config->usePcntl()) {
vendor/psy/psysh/src/Shell.php:267:        $this->matchers = array_merge($this->matchers, $matchers);
vendor/psy/psysh/src/Shell.php:269:        if (isset($this->autoCompleter)) {
vendor/psy/psysh/src/Shell.php:270:            $this->addMatchersToAutoCompleter($matchers);
vendor/psy/psysh/src/Shell.php:281:        $this->addMatchers($matchers);
vendor/psy/psysh/src/Shell.php:291:        $this->output = $output;
vendor/psy/psysh/src/Shell.php:304:        $this->initializeTabCompletion();
vendor/psy/psysh/src/Shell.php:311:            $output = $this->config->getOutput();
vendor/psy/psysh/src/Shell.php:317:            $this->writeException($e);
vendor/psy/psysh/src/Shell.php:326:     * @throws Exception if thrown via the `throw-up` command
vendor/psy/psysh/src/Shell.php:335:        $this->setOutput($output);
vendor/psy/psysh/src/Shell.php:337:        $this->resetCodeBuffer();
vendor/psy/psysh/src/Shell.php:339:        $this->setAutoExit(false);
vendor/psy/psysh/src/Shell.php:340:        $this->setCatchExceptions(false);
vendor/psy/psysh/src/Shell.php:342:        $this->readline->readHistory();
vendor/psy/psysh/src/Shell.php:344:        $this->output->writeln($this->getHeader());
vendor/psy/psysh/src/Shell.php:345:        $this->writeVersionInfo();
vendor/psy/psysh/src/Shell.php:346:        $this->writeStartupMessage();
vendor/psy/psysh/src/Shell.php:349:            $this->beforeRun();
vendor/psy/psysh/src/Shell.php:350:            $this->loop->run($this);
vendor/psy/psysh/src/Shell.php:351:            $this->afterRun();
vendor/psy/psysh/src/Shell.php:353:            throw $e->getPrevious();
vendor/psy/psysh/src/Shell.php:370:        $this->codeBufferOpen = false;
vendor/psy/psysh/src/Shell.php:374:            $this->output->setVerbosity(ShellOutput::VERBOSITY_VERBOSE);
vendor/psy/psysh/src/Shell.php:376:            $input = $this->readline();
vendor/psy/psysh/src/Shell.php:382:             *   2) At top-level session, behave like the exit command
vendor/psy/psysh/src/Shell.php:385:                $this->output->writeln('');
vendor/psy/psysh/src/Shell.php:387:                if ($this->hasCode()) {
vendor/psy/psysh/src/Shell.php:388:                    $this->resetCodeBuffer();
vendor/psy/psysh/src/Shell.php:395:            if (trim($input) === '' && !$this->codeBufferOpen) {
vendor/psy/psysh/src/Shell.php:399:            $input = $this->onInput($input);
vendor/psy/psysh/src/Shell.php:402:            if ($this->hasCommand($input) && !$this->inputInOpenStringOrComment($input)) {
vendor/psy/psysh/src/Shell.php:403:                $this->addHistory($input);
vendor/psy/psysh/src/Shell.php:404:                $this->runCommand($input);
vendor/psy/psysh/src/Shell.php:409:            $this->addCode($input);
vendor/psy/psysh/src/Shell.php:410:        } while (!$this->hasValidCode());
vendor/psy/psysh/src/Shell.php:422:        if (!$this->hasCode()) {
vendor/psy/psysh/src/Shell.php:426:        $code = $this->codeBuffer;
vendor/psy/psysh/src/Shell.php:440:        foreach ($this->loopListeners as $listener) {
vendor/psy/psysh/src/Shell.php:441:            $listener->beforeRun($this);
vendor/psy/psysh/src/Shell.php:450:        foreach ($this->loopListeners as $listener) {
vendor/psy/psysh/src/Shell.php:451:            $listener->beforeLoop($this);
vendor/psy/psysh/src/Shell.php:464:        foreach ($this->loopListeners as $listeners) {
vendor/psy/psysh/src/Shell.php:465:            if (($return = $listeners->onInput($this, $input)) !== null) {
vendor/psy/psysh/src/Shell.php:482:        foreach ($this->loopListeners as $listener) {
vendor/psy/psysh/src/Shell.php:483:            if (($return = $listener->onExecute($this, $code)) !== null) {
vendor/psy/psysh/src/Shell.php:496:        foreach ($this->loopListeners as $listener) {
vendor/psy/psysh/src/Shell.php:497:            $listener->afterLoop($this);
vendor/psy/psysh/src/Shell.php:506:        foreach ($this->loopListeners as $listener) {
vendor/psy/psysh/src/Shell.php:507:            $listener->afterRun($this);
vendor/psy/psysh/src/Shell.php:518:        $this->context->setAll($vars);
vendor/psy/psysh/src/Shell.php:532:        $vars = $this->context->getAll();
vendor/psy/psysh/src/Shell.php:552:        $vars = $this->context->getSpecialVariables();
vendor/psy/psysh/src/Shell.php:562:     * Get the set of unused command-scope variable names.
vendor/psy/psysh/src/Shell.php:568:        return $this->context->getUnusedCommandScopeVariableNames();
vendor/psy/psysh/src/Shell.php:578:        return array_keys($this->context->getAll());
vendor/psy/psysh/src/Shell.php:590:        return $this->context->get($name);
vendor/psy/psysh/src/Shell.php:600:        $this->context->setBoundObject($boundObject);
vendor/psy/psysh/src/Shell.php:610:        return $this->context->getBoundObject();
vendor/psy/psysh/src/Shell.php:620:        $this->context->setBoundClass($boundClass);
vendor/psy/psysh/src/Shell.php:630:        return $this->context->getBoundClass();
vendor/psy/psysh/src/Shell.php:640:        $this->includes = $includes;
vendor/psy/psysh/src/Shell.php:650:        return array_merge($this->config->getDefaultIncludes(), $this->includes);
vendor/psy/psysh/src/Shell.php:660:        return !empty($this->codeBuffer);
vendor/psy/psysh/src/Shell.php:672:        return !$this->codeBufferOpen && $this->code !== false;
vendor/psy/psysh/src/Shell.php:685:            if (substr(rtrim($code), -1) === '\\') {
vendor/psy/psysh/src/Shell.php:686:                $this->codeBufferOpen = true;
vendor/psy/psysh/src/Shell.php:687:                $code = substr(rtrim($code), 0, -1);
vendor/psy/psysh/src/Shell.php:689:                $this->codeBufferOpen = false;
vendor/psy/psysh/src/Shell.php:692:            $this->codeBuffer[] = $silent ? new SilentInput($code) : $code;
vendor/psy/psysh/src/Shell.php:693:            $this->code         = $this->cleaner->clean($this->codeBuffer, $this->config->requireSemicolons());
vendor/psy/psysh/src/Shell.php:696:            $this->addCodeBufferToHistory();
vendor/psy/psysh/src/Shell.php:716:        if ($this->hasCode()) {
vendor/psy/psysh/src/Shell.php:717:            $this->codeStack[] = [$this->codeBuffer, $this->codeBufferOpen, $this->code];
vendor/psy/psysh/src/Shell.php:720:        $this->resetCodeBuffer();
vendor/psy/psysh/src/Shell.php:722:            $this->addCode($code, $silent);
vendor/psy/psysh/src/Shell.php:724:            $this->popCodeStack();
vendor/psy/psysh/src/Shell.php:728:            $this->popCodeStack();
vendor/psy/psysh/src/Shell.php:733:        if (!$this->hasValidCode()) {
vendor/psy/psysh/src/Shell.php:734:            $this->popCodeStack();
vendor/psy/psysh/src/Shell.php:749:        return $this->codeBuffer;
vendor/psy/psysh/src/Shell.php:763:        $command = $this->getCommand($input);
vendor/psy/psysh/src/Shell.php:771:        if ($input->hasParameterOption(['--help', '-h'])) {
vendor/psy/psysh/src/Shell.php:772:            $helpCommand = $this->get('help');
vendor/psy/psysh/src/Shell.php:773:            $helpCommand->setCommand($command);
vendor/psy/psysh/src/Shell.php:775:            return $helpCommand->run($input, $this->output);
vendor/psy/psysh/src/Shell.php:778:        return $command->run($input, $this->output);
vendor/psy/psysh/src/Shell.php:789:        $this->codeBuffer = [];
vendor/psy/psysh/src/Shell.php:790:        $this->code       = false;
vendor/psy/psysh/src/Shell.php:804:            $this->inputBuffer[] = $silent ? new SilentInput($line) : $line;
vendor/psy/psysh/src/Shell.php:818:        if ($this->hasValidCode()) {
vendor/psy/psysh/src/Shell.php:819:            $this->addCodeBufferToHistory();
vendor/psy/psysh/src/Shell.php:820:            $code = $this->code;
vendor/psy/psysh/src/Shell.php:821:            $this->popCodeStack();
vendor/psy/psysh/src/Shell.php:832:        $this->resetCodeBuffer();
vendor/psy/psysh/src/Shell.php:834:        if (empty($this->codeStack)) {
vendor/psy/psysh/src/Shell.php:838:        list($codeBuffer, $codeBufferOpen, $code) = array_pop($this->codeStack);
vendor/psy/psysh/src/Shell.php:840:        $this->codeBuffer     = $codeBuffer;
vendor/psy/psysh/src/Shell.php:841:        $this->codeBufferOpen = $codeBufferOpen;
vendor/psy/psysh/src/Shell.php:842:        $this->code           = $code;
vendor/psy/psysh/src/Shell.php:849:     * from history. Note that an entire block multi-line code input will be
vendor/psy/psysh/src/Shell.php:865:            $this->readline->addHistory($line);
vendor/psy/psysh/src/Shell.php:874:        $codeBuffer = array_filter($this->codeBuffer, function ($line) {
vendor/psy/psysh/src/Shell.php:878:        $this->addHistory(implode("\n", $codeBuffer));
vendor/psy/psysh/src/Shell.php:890:        if ($namespace = $this->cleaner->getNamespace()) {
vendor/psy/psysh/src/Shell.php:909:            $this->output->write($out, false, ShellOutput::OUTPUT_RAW);
vendor/psy/psysh/src/Shell.php:910:            $this->outputWantsNewline = (substr($out, -1) !== "\n");
vendor/psy/psysh/src/Shell.php:911:            $this->stdoutBuffer .= $out;
vendor/psy/psysh/src/Shell.php:917:            if ($this->outputWantsNewline) {
vendor/psy/psysh/src/Shell.php:918:                $this->output->writeln(sprintf('<aside>%s</aside>', $this->config->useUnicode() ? '⏎' : '\\n'));
vendor/psy/psysh/src/Shell.php:919:                $this->outputWantsNewline = false;
vendor/psy/psysh/src/Shell.php:923:            if ($this->stdoutBuffer !== '') {
vendor/psy/psysh/src/Shell.php:924:                $this->context->setLastStdout($this->stdoutBuffer);
vendor/psy/psysh/src/Shell.php:925:                $this->stdoutBuffer = '';
vendor/psy/psysh/src/Shell.php:933:     * The return value is formatted or pretty-printed, and rendered in a
vendor/psy/psysh/src/Shell.php:946:        $this->context->setReturnValue($ret);
vendor/psy/psysh/src/Shell.php:947:        $ret    = $this->presentValue($ret);
vendor/psy/psysh/src/Shell.php:950:        $this->output->writeln(static::RETVAL . str_replace(PHP_EOL, PHP_EOL . $indent, $ret));
vendor/psy/psysh/src/Shell.php:965:        $this->context->setLastException($e);
vendor/psy/psysh/src/Shell.php:966:        $this->output->writeln($this->formatException($e));
vendor/psy/psysh/src/Shell.php:967:        $this->resetCodeBuffer();
vendor/psy/psysh/src/Shell.php:981:        $message = $e->getMessage();
vendor/psy/psysh/src/Shell.php:998:        $severity = ($e instanceof \ErrorException) ? $this->getSeverity($e) : 'error';
vendor/psy/psysh/src/Shell.php:1012:        $severity = $e->getSeverity();
vendor/psy/psysh/src/Shell.php:1043:        $this->setCode($code, true);
vendor/psy/psysh/src/Shell.php:1047:            return $closure->execute();
vendor/psy/psysh/src/Shell.php:1051:            return $closure->execute();
vendor/psy/psysh/src/Shell.php:1053:            $this->writeException(TypeErrorException::fromTypeError($_e));
vendor/psy/psysh/src/Shell.php:1055:            $this->writeException(ErrorException::fromError($_e));
vendor/psy/psysh/src/Shell.php:1057:            $this->writeException($_e);
vendor/psy/psysh/src/Shell.php:1091:        } elseif ($errno & $this->config->errorLoggingLevel()) {
vendor/psy/psysh/src/Shell.php:1093:            $this->writeException(new ErrorException($errstr, 0, $errno, $errfile, $errline));
vendor/psy/psysh/src/Shell.php:1108:        return $this->config->getPresenter()->present($val);
vendor/psy/psysh/src/Shell.php:1121:        if ($name = $input->getFirstArgument()) {
vendor/psy/psysh/src/Shell.php:1122:            return $this->get($name);
vendor/psy/psysh/src/Shell.php:1136:            return $this->has($match[1]);
vendor/psy/psysh/src/Shell.php:1149:        if ($this->hasCode()) {
vendor/psy/psysh/src/Shell.php:1153:        return $this->config->getPrompt() ?: static::PROMPT;
vendor/psy/psysh/src/Shell.php:1169:        if (!empty($this->inputBuffer)) {
vendor/psy/psysh/src/Shell.php:1170:            $line = array_shift($this->inputBuffer);
vendor/psy/psysh/src/Shell.php:1172:                $this->output->writeln(sprintf('<aside>%s %s</aside>', static::REPLAY, OutputFormatter::escape($line)));
vendor/psy/psysh/src/Shell.php:1178:        if ($bracketedPaste = $this->config->useBracketedPaste()) {
vendor/psy/psysh/src/Shell.php:1182:        $line = $this->readline->readline($this->getPrompt());
vendor/psy/psysh/src/Shell.php:1198:        return sprintf('<aside>%s by Justin Hileman</aside>', $this->getVersion());
vendor/psy/psysh/src/Shell.php:1208:        $separator = $this->config->useUnicode() ? '—' : '-';
vendor/psy/psysh/src/Shell.php:1220:        return $this->config->getManualDb();
vendor/psy/psysh/src/Shell.php:1239:        if (!$this->config->useTabCompletion()) {
vendor/psy/psysh/src/Shell.php:1243:        $this->autoCompleter = $this->config->getAutoCompleter();
vendor/psy/psysh/src/Shell.php:1247:        $this->addMatchersToAutoCompleter($this->getDefaultMatchers());
vendor/psy/psysh/src/Shell.php:1248:        $this->addMatchersToAutoCompleter($this->matchers);
vendor/psy/psysh/src/Shell.php:1250:        $this->autoCompleter->activate();
vendor/psy/psysh/src/Shell.php:1262:                $matcher->setContext($this->context);
vendor/psy/psysh/src/Shell.php:1264:            $this->autoCompleter->addMatcher($matcher);
vendor/psy/psysh/src/Shell.php:1269:     * @todo Implement self-update
vendor/psy/psysh/src/Shell.php:1281:            $client = $this->config->getChecker();
vendor/psy/psysh/src/Shell.php:1282:            if (!$client->isLatest()) {
vendor/psy/psysh/src/Shell.php:1283:                $this->output->writeln(sprintf('New version is available (current: %s, latest: %s)', self::VERSION, $client->getLatest()));
vendor/psy/psysh/src/Shell.php:1286:            $this->output->writeln($e->getMessage());
vendor/psy/psysh/src/Shell.php:1295:        $message = $this->config->getStartupMessage();
vendor/psy/psysh/src/Shell.php:1297:            $this->output->writeln($message);
vendor/psy/psysh/src/ExecutionLoopClosure.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ExecutionLoopClosure.php:32:        $this->setClosure($__psysh__, function () use ($__psysh__) {
vendor/psy/psysh/src/ExecutionLoopClosure.php:34:            extract($__psysh__->getScopeVariables(false));
vendor/psy/psysh/src/ExecutionLoopClosure.php:37:                $__psysh__->beforeLoop();
vendor/psy/psysh/src/ExecutionLoopClosure.php:40:                    $__psysh__->getInput();
vendor/psy/psysh/src/ExecutionLoopClosure.php:50:                        $_ = eval($__psysh__->onExecute($__psysh__->flushCode() ?: ExecutionClosure::NOOP_INPUT));
vendor/psy/psysh/src/ExecutionLoopClosure.php:76:                    $__psysh__->setScopeVariables(get_defined_vars());
vendor/psy/psysh/src/ExecutionLoopClosure.php:78:                    $__psysh__->writeReturnValue($_);
vendor/psy/psysh/src/ExecutionLoopClosure.php:80:                    $__psysh__->writeException($_e);
vendor/psy/psysh/src/ExecutionLoopClosure.php:84:                    $__psysh__->writeException($_e);
vendor/psy/psysh/src/ExecutionLoopClosure.php:88:                    $__psysh__->writeException(TypeErrorException::fromTypeError($_e));
vendor/psy/psysh/src/ExecutionLoopClosure.php:90:                    $__psysh__->writeException(ErrorException::fromError($_e));
vendor/psy/psysh/src/ExecutionLoopClosure.php:92:                    $__psysh__->writeException($_e);
vendor/psy/psysh/src/ExecutionLoopClosure.php:95:                $__psysh__->afterLoop();
vendor/psy/psysh/src/ConsoleColorFactory.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ConsoleColorFactory.php:29:        $this->colorMode = $colorMode;
vendor/psy/psysh/src/ConsoleColorFactory.php:40:        if ($this->colorMode === Configuration::COLOR_MODE_AUTO) {
vendor/psy/psysh/src/ConsoleColorFactory.php:41:            return $this->getDefaultConsoleColor();
vendor/psy/psysh/src/ConsoleColorFactory.php:42:        } elseif ($this->colorMode === Configuration::COLOR_MODE_FORCED) {
vendor/psy/psysh/src/ConsoleColorFactory.php:43:            return $this->getForcedConsoleColor();
vendor/psy/psysh/src/ConsoleColorFactory.php:44:        } elseif ($this->colorMode === Configuration::COLOR_MODE_DISABLED) {
vendor/psy/psysh/src/ConsoleColorFactory.php:45:            return $this->getDisabledConsoleColor();
vendor/psy/psysh/src/ConsoleColorFactory.php:52:        $color->addTheme(Highlighter::LINE_NUMBER, ['blue']);
vendor/psy/psysh/src/ConsoleColorFactory.php:53:        $color->addTheme(Highlighter::TOKEN_KEYWORD, ['yellow']);
vendor/psy/psysh/src/ConsoleColorFactory.php:54:        $color->addTheme(Highlighter::TOKEN_STRING, ['green']);
vendor/psy/psysh/src/ConsoleColorFactory.php:55:        $color->addTheme(Highlighter::TOKEN_COMMENT, ['dark_gray']);
vendor/psy/psysh/src/ConsoleColorFactory.php:62:        $color = $this->getDefaultConsoleColor();
vendor/psy/psysh/src/ConsoleColorFactory.php:63:        $color->setForceStyle(true);
vendor/psy/psysh/src/ConsoleColorFactory.php:72:        $color->addTheme(Highlighter::TOKEN_STRING, ['none']);
vendor/psy/psysh/src/ConsoleColorFactory.php:73:        $color->addTheme(Highlighter::TOKEN_COMMENT, ['none']);
vendor/psy/psysh/src/ConsoleColorFactory.php:74:        $color->addTheme(Highlighter::TOKEN_KEYWORD, ['none']);
vendor/psy/psysh/src/ConsoleColorFactory.php:75:        $color->addTheme(Highlighter::TOKEN_DEFAULT, ['none']);
vendor/psy/psysh/src/ConsoleColorFactory.php:76:        $color->addTheme(Highlighter::TOKEN_HTML, ['none']);
vendor/psy/psysh/src/ConsoleColorFactory.php:77:        $color->addTheme(Highlighter::ACTUAL_LINE_MARK, ['none']);
vendor/psy/psysh/src/ConsoleColorFactory.php:78:        $color->addTheme(Highlighter::LINE_NUMBER, ['none']);
vendor/psy/psysh/src/CodeCleaner.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/CodeCleaner.php:65:            $parser        = $parserFactory->createParser();
vendor/psy/psysh/src/CodeCleaner.php:68:        $this->parser    = $parser;
vendor/psy/psysh/src/CodeCleaner.php:69:        $this->printer   = $printer ?: new Printer();
vendor/psy/psysh/src/CodeCleaner.php:70:        $this->traverser = $traverser ?: new NodeTraverser();
vendor/psy/psysh/src/CodeCleaner.php:72:        foreach ($this->getDefaultPasses() as $pass) {
vendor/psy/psysh/src/CodeCleaner.php:73:            $this->traverser->addVisitor($pass);
vendor/psy/psysh/src/CodeCleaner.php:89:        $this->addImplicitDebugContext([$useStatementPass, $namespacePass]);
vendor/psy/psysh/src/CodeCleaner.php:117:            // Namespace-aware validation (which depends on aforementioned shenanigans)
vendor/psy/psysh/src/CodeCleaner.php:135:        $file = $this->getDebugFile();
vendor/psy/psysh/src/CodeCleaner.php:146:            $stmts = $this->parse($code, true);
vendor/psy/psysh/src/CodeCleaner.php:154:                $traverser->addVisitor($pass);
vendor/psy/psysh/src/CodeCleaner.php:157:            $traverser->traverse($stmts);
vendor/psy/psysh/src/CodeCleaner.php:217:        $stmts = $this->parse('<?php ' . implode(PHP_EOL, $codeLines) . PHP_EOL, $requireSemicolons);
vendor/psy/psysh/src/CodeCleaner.php:223:        $stmts = $this->traverser->traverse($stmts);
vendor/psy/psysh/src/CodeCleaner.php:225:        // Work around https://github.com/nikic/PHP-Parser/issues/399
vendor/psy/psysh/src/CodeCleaner.php:229:        $code = $this->printer->prettyPrint($stmts);
vendor/psy/psysh/src/CodeCleaner.php:246:        $this->namespace = $namespace;
vendor/psy/psysh/src/CodeCleaner.php:256:        return $this->namespace;
vendor/psy/psysh/src/CodeCleaner.php:275:            return $this->parser->parse($code);
vendor/psy/psysh/src/CodeCleaner.php:277:            if ($this->parseErrorIsUnclosedString($e, $code)) {
vendor/psy/psysh/src/CodeCleaner.php:281:            if ($this->parseErrorIsUnterminatedComment($e, $code)) {
vendor/psy/psysh/src/CodeCleaner.php:285:            if ($this->parseErrorIsTrailingComma($e, $code)) {
vendor/psy/psysh/src/CodeCleaner.php:289:            if (!$this->parseErrorIsEOF($e)) {
vendor/psy/psysh/src/CodeCleaner.php:299:                return $this->parser->parse($code . ';');
vendor/psy/psysh/src/CodeCleaner.php:308:        $msg = $e->getRawMessage();
vendor/psy/psysh/src/CodeCleaner.php:314:     * A special test for unclosed single-quoted strings.
vendor/psy/psysh/src/CodeCleaner.php:327:        if ($e->getRawMessage() !== 'Syntax error, unexpected T_ENCAPSED_AND_WHITESPACE') {
vendor/psy/psysh/src/CodeCleaner.php:332:            $this->parser->parse($code . "';");
vendor/psy/psysh/src/CodeCleaner.php:342:        return $e->getRawMessage() === 'Unterminated comment';
vendor/psy/psysh/src/CodeCleaner.php:347:        return ($e->getRawMessage() === 'A trailing comma is not allowed here') && (substr(rtrim($code), -1) === ',');
vendor/psy/psysh/src/Readline/HoaConsole.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Readline/HoaConsole.php:35:        $this->hoaReadline = new HoaReadline();
vendor/psy/psysh/src/Readline/HoaConsole.php:43:        $this->hoaReadline->addHistory($line);
vendor/psy/psysh/src/Readline/HoaConsole.php:53:        $this->hoaReadline->clearHistory();
vendor/psy/psysh/src/Readline/HoaConsole.php:65:        while (($item = $this->hoaReadline->getHistory($i++)) !== null) {
vendor/psy/psysh/src/Readline/HoaConsole.php:89:        return $this->hoaReadline->readLine($prompt);
vendor/psy/psysh/src/Readline/GNUReadline.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Readline/GNUReadline.php:51:        $this->historyFile = ($historyFile !== null) ? $historyFile : false;
vendor/psy/psysh/src/Readline/GNUReadline.php:52:        $this->historySize = $historySize;
vendor/psy/psysh/src/Readline/GNUReadline.php:53:        $this->eraseDups   = $eraseDups;
vendor/psy/psysh/src/Readline/GNUReadline.php:62:            $this->writeHistory();
vendor/psy/psysh/src/Readline/GNUReadline.php:74:            $this->writeHistory();
vendor/psy/psysh/src/Readline/GNUReadline.php:97:        //     https://github.com/php/php-src/blob/423a057023ef3c00d2ffc16a6b43ba01d0f71796/NEWS#L19-L21
vendor/psy/psysh/src/Readline/GNUReadline.php:104:        return readline_read_history($this->historyFile);
vendor/psy/psysh/src/Readline/GNUReadline.php:130:        if ($this->historyFile !== false) {
vendor/psy/psysh/src/Readline/GNUReadline.php:131:            $res = readline_write_history($this->historyFile);
vendor/psy/psysh/src/Readline/GNUReadline.php:136:        if (!$res || !$this->eraseDups && !$this->historySize > 0) {
vendor/psy/psysh/src/Readline/GNUReadline.php:140:        $hist = $this->listHistory();
vendor/psy/psysh/src/Readline/GNUReadline.php:145:        if ($this->eraseDups) {
vendor/psy/psysh/src/Readline/GNUReadline.php:146:            // flip-flip technique: removes duplicates, latest entries win.
vendor/psy/psysh/src/Readline/GNUReadline.php:152:        if ($this->historySize > 0) {
vendor/psy/psysh/src/Readline/GNUReadline.php:154:            if ($histsize > $this->historySize) {
vendor/psy/psysh/src/Readline/GNUReadline.php:155:                $hist = array_slice($hist, $histsize - $this->historySize);
vendor/psy/psysh/src/Readline/GNUReadline.php:164:        if ($this->historyFile !== false) {
vendor/psy/psysh/src/Readline/GNUReadline.php:165:            return readline_write_history($this->historyFile);
vendor/psy/psysh/src/Readline/Readline.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Readline/Transient.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Readline/Transient.php:17: * An array-based Readline emulation implementation.
vendor/psy/psysh/src/Readline/Transient.php:42:        $this->history     = [];
vendor/psy/psysh/src/Readline/Transient.php:43:        $this->historySize = $historySize;
vendor/psy/psysh/src/Readline/Transient.php:44:        $this->eraseDups   = $eraseDups;
vendor/psy/psysh/src/Readline/Transient.php:52:        if ($this->eraseDups) {
vendor/psy/psysh/src/Readline/Transient.php:53:            if (($key = array_search($line, $this->history)) !== false) {
vendor/psy/psysh/src/Readline/Transient.php:54:                unset($this->history[$key]);
vendor/psy/psysh/src/Readline/Transient.php:58:        $this->history[] = $line;
vendor/psy/psysh/src/Readline/Transient.php:60:        if ($this->historySize > 0) {
vendor/psy/psysh/src/Readline/Transient.php:61:            $histsize = count($this->history);
vendor/psy/psysh/src/Readline/Transient.php:62:            if ($histsize > $this->historySize) {
vendor/psy/psysh/src/Readline/Transient.php:63:                $this->history = array_slice($this->history, $histsize - $this->historySize);
vendor/psy/psysh/src/Readline/Transient.php:67:        $this->history = array_values($this->history);
vendor/psy/psysh/src/Readline/Transient.php:77:        $this->history = [];
vendor/psy/psysh/src/Readline/Transient.php:87:        return $this->history;
vendor/psy/psysh/src/Readline/Transient.php:109:        return rtrim(fgets($this->getStdin(), 1024));
vendor/psy/psysh/src/Readline/Transient.php:137:        if (!isset($this->stdin)) {
vendor/psy/psysh/src/Readline/Transient.php:138:            $this->stdin = fopen('php://stdin', 'r');
vendor/psy/psysh/src/Readline/Transient.php:141:        if (feof($this->stdin)) {
vendor/psy/psysh/src/Readline/Transient.php:145:        return $this->stdin;
vendor/psy/psysh/src/Readline/Libedit.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Readline/Libedit.php:17: * A Libedit-based Readline implementation.
vendor/psy/psysh/src/Readline/Libedit.php:40:        $history = file_get_contents($this->historyFile);
vendor/psy/psysh/src/Readline/Libedit.php:45:        // libedit doesn't seem to support non-unix line separators.
vendor/psy/psysh/src/ConfigPaths.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ConfigPaths.php:27:     *     http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
vendor/psy/psysh/src/ConfigPaths.php:35:        return self::getDirNames($xdg->getConfigDirs());
vendor/psy/psysh/src/ConfigPaths.php:44:     *     http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
vendor/psy/psysh/src/ConfigPaths.php:52:        return self::getDirNames([$xdg->getHomeConfigDir()]);
vendor/psy/psysh/src/ConfigPaths.php:102:     *     http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
vendor/psy/psysh/src/ConfigPaths.php:110:        return self::getDirNames($xdg->getDataDirs());
vendor/psy/psysh/src/ConfigPaths.php:143:            // permissions, sometimes tries to remove non-empty directories.
vendor/psy/psysh/src/ConfigPaths.php:145:            $runtimeDir = $xdg->getRuntimeDir(false);
vendor/psy/psysh/src/Sudo/SudoVisitor.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Sudo/SudoVisitor.php:52:            $name = $node->name instanceof Identifier ? $node->name->toString() : $node->name;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:54:                $node->var,
vendor/psy/psysh/src/Sudo/SudoVisitor.php:58:            return $this->prepareCall(self::PROPERTY_FETCH, $args);
vendor/psy/psysh/src/Sudo/SudoVisitor.php:59:        } elseif ($node instanceof Assign && $node->var instanceof PropertyFetch) {
vendor/psy/psysh/src/Sudo/SudoVisitor.php:60:            $target = $node->var;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:61:            $name   = $target->name instanceof Identifier ? $target->name->toString() : $target->name;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:63:                $target->var,
vendor/psy/psysh/src/Sudo/SudoVisitor.php:65:                $node->expr,
vendor/psy/psysh/src/Sudo/SudoVisitor.php:68:            return $this->prepareCall(self::PROPERTY_ASSIGN, $args);
vendor/psy/psysh/src/Sudo/SudoVisitor.php:70:            $name = $node->name instanceof Identifier ? $node->name->toString() : $node->name;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:71:            $args = $node->args;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:73:            array_unshift($args, new Arg($node->var));
vendor/psy/psysh/src/Sudo/SudoVisitor.php:75:            // not using prepareCall because the $node->args we started with are already Arg instances
vendor/psy/psysh/src/Sudo/SudoVisitor.php:78:            $class = $node->class instanceof Name ? $node->class->toString() : $node->class;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:79:            $name = $node->name instanceof Identifier ? $node->name->toString() : $node->name;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:85:            return $this->prepareCall(self::STATIC_PROPERTY_FETCH, $args);
vendor/psy/psysh/src/Sudo/SudoVisitor.php:86:        } elseif ($node instanceof Assign && $node->var instanceof StaticPropertyFetch) {
vendor/psy/psysh/src/Sudo/SudoVisitor.php:87:            $target = $node->var;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:88:            $class  = $target->class instanceof Name ? $target->class->toString() : $target->class;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:89:            $name   = $target->name instanceof Identifier ? $target->name->toString() : $target->name;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:93:                $node->expr,
vendor/psy/psysh/src/Sudo/SudoVisitor.php:96:            return $this->prepareCall(self::STATIC_PROPERTY_ASSIGN, $args);
vendor/psy/psysh/src/Sudo/SudoVisitor.php:98:            $args  = $node->args;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:99:            $class = $node->class instanceof Name ? $node->class->toString() : $node->class;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:100:            $name  = $node->name instanceof Identifier ? $node->name->toString() : $node->name;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:104:            // not using prepareCall because the $node->args we started with are already Arg instances
vendor/psy/psysh/src/Sudo/SudoVisitor.php:107:            $class = $node->class instanceof Name ? $node->class->toString() : $node->class;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:108:            $name  = $node->name instanceof Identifier ? $node->name->toString() : $node->name;
vendor/psy/psysh/src/Sudo/SudoVisitor.php:114:            return $this->prepareCall(self::CLASS_CONST_FETCH, $args);
vendor/psy/psysh/src/Context.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Context.php:24:    // Whitelist a very limited number of command-scope magic variable names.
vendor/psy/psysh/src/Context.php:51:                return $this->returnValue;
vendor/psy/psysh/src/Context.php:54:                if (isset($this->lastException)) {
vendor/psy/psysh/src/Context.php:55:                    return $this->lastException;
vendor/psy/psysh/src/Context.php:60:                if (isset($this->lastStdout)) {
vendor/psy/psysh/src/Context.php:61:                    return $this->lastStdout;
vendor/psy/psysh/src/Context.php:66:                if (isset($this->boundObject)) {
vendor/psy/psysh/src/Context.php:67:                    return $this->boundObject;
vendor/psy/psysh/src/Context.php:78:                if (array_key_exists($name, $this->commandScopeVariables)) {
vendor/psy/psysh/src/Context.php:79:                    return $this->commandScopeVariables[$name];
vendor/psy/psysh/src/Context.php:84:                if (array_key_exists($name, $this->scopeVariables)) {
vendor/psy/psysh/src/Context.php:85:                    return $this->scopeVariables[$name];
vendor/psy/psysh/src/Context.php:100:        return array_merge($this->scopeVariables, $this->getSpecialVariables());
vendor/psy/psysh/src/Context.php:111:            '_' => $this->returnValue,
vendor/psy/psysh/src/Context.php:114:        if (isset($this->lastException)) {
vendor/psy/psysh/src/Context.php:115:            $vars['_e'] = $this->lastException;
vendor/psy/psysh/src/Context.php:118:        if (isset($this->lastStdout)) {
vendor/psy/psysh/src/Context.php:119:            $vars['__out'] = $this->lastStdout;
vendor/psy/psysh/src/Context.php:122:        if (isset($this->boundObject)) {
vendor/psy/psysh/src/Context.php:123:            $vars['this'] = $this->boundObject;
vendor/psy/psysh/src/Context.php:126:        return array_merge($vars, $this->commandScopeVariables);
vendor/psy/psysh/src/Context.php:147:        $this->scopeVariables = $vars;
vendor/psy/psysh/src/Context.php:157:        $this->returnValue = $value;
vendor/psy/psysh/src/Context.php:167:        return $this->returnValue;
vendor/psy/psysh/src/Context.php:177:        $this->lastException = $e;
vendor/psy/psysh/src/Context.php:189:        if (!isset($this->lastException)) {
vendor/psy/psysh/src/Context.php:190:            throw new \InvalidArgumentException('No most-recent exception');
vendor/psy/psysh/src/Context.php:193:        return $this->lastException;
vendor/psy/psysh/src/Context.php:203:        $this->lastStdout = $lastStdout;
vendor/psy/psysh/src/Context.php:215:        if (!isset($this->lastStdout)) {
vendor/psy/psysh/src/Context.php:216:            throw new \InvalidArgumentException('No most-recent output');
vendor/psy/psysh/src/Context.php:219:        return $this->lastStdout;
vendor/psy/psysh/src/Context.php:231:        $this->boundObject = is_object($boundObject) ? $boundObject : null;
vendor/psy/psysh/src/Context.php:232:        $this->boundClass = null;
vendor/psy/psysh/src/Context.php:242:        return $this->boundObject;
vendor/psy/psysh/src/Context.php:254:        $this->boundClass = (is_string($boundClass) && $boundClass !== '') ? $boundClass : null;
vendor/psy/psysh/src/Context.php:255:        $this->boundObject = null;
vendor/psy/psysh/src/Context.php:265:        return $this->boundClass;
vendor/psy/psysh/src/Context.php:269:     * Set command-scope magic variables: $__class, $__file, etc.
vendor/psy/psysh/src/Context.php:283:        $this->commandScopeVariables = $vars;
vendor/psy/psysh/src/Context.php:287:     * Get command-scope magic variables: $__class, $__file, etc.
vendor/psy/psysh/src/Context.php:293:        return $this->commandScopeVariables;
vendor/psy/psysh/src/Context.php:297:     * Get unused command-scope magic variables names: __class, __file, etc.
vendor/psy/psysh/src/Context.php:299:     * This is used by the shell to unset old command-scope variables after a
vendor/psy/psysh/src/Context.php:306:        return array_diff(self::$commandScopeNames, array_keys($this->commandScopeVariables));
vendor/psy/psysh/src/functions.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/functions.php:23:     * Command to return the eval-able code to startup PsySH.
vendor/psy/psysh/src/functions.php:83:        $sh->setScopeVariables($vars);
vendor/psy/psysh/src/functions.php:87:        // @todo come up with a better way of doing this which doesn't involve injecting input :-P
vendor/psy/psysh/src/functions.php:88:        if ($sh->has('whereami')) {
vendor/psy/psysh/src/functions.php:89:            $sh->addInput('whereami -n2', true);
vendor/psy/psysh/src/functions.php:93:            $sh->setBoundClass($bindTo);
vendor/psy/psysh/src/functions.php:95:            $sh->setBoundObject($bindTo);
vendor/psy/psysh/src/functions.php:98:        $sh->run();
vendor/psy/psysh/src/functions.php:100:        return $sh->getScopeVariables(false);
vendor/psy/psysh/src/functions.php:126:        $home = rtrim(str_replace('\\', '/', $xdg->getHomeDir()), '/');
vendor/psy/psysh/src/functions.php:143:            'default includes'    => $config->getDefaultIncludes(),
vendor/psy/psysh/src/functions.php:144:            'require semicolons'  => $config->requireSemicolons(),
vendor/psy/psysh/src/functions.php:145:            'error logging level' => $config->errorLoggingLevel(),
vendor/psy/psysh/src/functions.php:147:                'default config file' => $prettyPath($config->getConfigFile()),
vendor/psy/psysh/src/functions.php:148:                'local config file'   => $prettyPath($config->getLocalConfigFile()),
vendor/psy/psysh/src/functions.php:151:            // 'config dir'  => $config->getConfigDir(),
vendor/psy/psysh/src/functions.php:152:            // 'data dir'    => $config->getDataDir(),
vendor/psy/psysh/src/functions.php:153:            // 'runtime dir' => $config->getRuntimeDir(),
vendor/psy/psysh/src/functions.php:161:            $updateAvailable = !$checker->isLatest();
vendor/psy/psysh/src/functions.php:162:            $latest = $checker->getLatest();
vendor/psy/psysh/src/functions.php:169:            'update check interval'  => $config->getUpdateCheck(),
vendor/psy/psysh/src/functions.php:170:            'update cache file'      => $prettyPath($config->getUpdateCheckCacheFile()),
vendor/psy/psysh/src/functions.php:173:        if ($config->hasReadline()) {
vendor/psy/psysh/src/functions.php:178:                'readline enabled'   => $config->useReadline(),
vendor/psy/psysh/src/functions.php:179:                'readline service'   => get_class($config->getReadline()),
vendor/psy/psysh/src/functions.php:206:            'history file'     => $prettyPath($config->getHistoryFile()),
vendor/psy/psysh/src/functions.php:207:            'history size'     => $config->getHistorySize(),
vendor/psy/psysh/src/functions.php:208:            'erase duplicates' => $config->getEraseDuplicates(),
vendor/psy/psysh/src/functions.php:212:            'manual db file'   => $prettyPath($config->getManualDbFile()),
vendor/psy/psysh/src/functions.php:217:            if ($db = $config->getManualDb()) {
vendor/psy/psysh/src/functions.php:218:                if ($q = $db->query('SELECT * FROM meta;')) {
vendor/psy/psysh/src/functions.php:219:                    $q->setFetchMode(\PDO::FETCH_KEY_PAIR);
vendor/psy/psysh/src/functions.php:220:                    $meta = $q->fetchAll();
vendor/psy/psysh/src/functions.php:226:                                $val = $d->format(\DateTime::RFC2822);
vendor/psy/psysh/src/functions.php:237:            if ($e->getMessage() === 'SQLite PDO driver not found') {
vendor/psy/psysh/src/functions.php:245:            'tab completion enabled' => $config->useTabCompletion(),
vendor/psy/psysh/src/functions.php:246:            'custom matchers'        => array_map('get_class', $config->getTabCompletionMatchers()),
vendor/psy/psysh/src/functions.php:247:            'bracketed paste'        => $config->useBracketedPaste(),
vendor/psy/psysh/src/functions.php:253:            $core['commands']       = array_map('get_class', $shell->all());
vendor/psy/psysh/src/functions.php:277:                $input->bind(new InputDefinition([
vendor/psy/psysh/src/functions.php:283:                    new InputOption('no-color', null, InputOption::VALUE_NONE),
vendor/psy/psysh/src/functions.php:293:            // Handle --config
vendor/psy/psysh/src/functions.php:294:            if ($configFile = $input->getOption('config')) {
vendor/psy/psysh/src/functions.php:298:            // Handle --color and --no-color
vendor/psy/psysh/src/functions.php:299:            if ($input->getOption('color') && $input->getOption('no-color')) {
vendor/psy/psysh/src/functions.php:300:                $usageException = new \RuntimeException('Using both "--color" and "--no-color" options is invalid');
vendor/psy/psysh/src/functions.php:301:            } elseif ($input->getOption('color')) {
vendor/psy/psysh/src/functions.php:303:            } elseif ($input->getOption('no-color')) {
vendor/psy/psysh/src/functions.php:309:            // Handle --help
vendor/psy/psysh/src/functions.php:310:            if ($usageException !== null || $input->getOption('help')) {
vendor/psy/psysh/src/functions.php:312:                    echo $usageException->getMessage() . PHP_EOL . PHP_EOL;
vendor/psy/psysh/src/functions.php:315:                $version = $shell->getVersion();
vendor/psy/psysh/src/functions.php:321:  $name [--version] [--help] [files...]
vendor/psy/psysh/src/functions.php:324:  --help     -h Display this help message.
vendor/psy/psysh/src/functions.php:325:  --config   -c Use an alternate PsySH config file location.
vendor/psy/psysh/src/functions.php:326:  --cwd         Use an alternate working directory.
vendor/psy/psysh/src/functions.php:327:  --version  -v Display the PsySH version.
vendor/psy/psysh/src/functions.php:328:  --color       Force colors in output.
vendor/psy/psysh/src/functions.php:329:  --no-color    Disable colors in output.
vendor/psy/psysh/src/functions.php:335:            // Handle --version
vendor/psy/psysh/src/functions.php:336:            if ($input->getOption('version')) {
vendor/psy/psysh/src/functions.php:337:                echo $shell->getVersion() . PHP_EOL;
vendor/psy/psysh/src/functions.php:342:            $shell->setIncludes($input->getArgument('include'));
vendor/psy/psysh/src/functions.php:346:                $shell->run();
vendor/psy/psysh/src/functions.php:348:                echo $e->getMessage() . PHP_EOL;
vendor/psy/psysh/src/TabCompletion/AutoCompleter.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/AutoCompleter.php:33:        $this->matchers[] = $matcher;
vendor/psy/psysh/src/TabCompletion/AutoCompleter.php:73:        foreach ($this->matchers as $matcher) {
vendor/psy/psysh/src/TabCompletion/AutoCompleter.php:74:            if ($matcher->hasMatched($tokens)) {
vendor/psy/psysh/src/TabCompletion/AutoCompleter.php:75:                $matches = array_merge($matcher->getMatches($tokens), $matches);
vendor/psy/psysh/src/TabCompletion/AutoCompleter.php:96:        return $this->processCallback($input, $index, readline_info());
vendor/psy/psysh/src/TabCompletion/Matcher/ClassAttributesMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/ClassAttributesMatcher.php:29:        $input = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassAttributesMatcher.php:37:        $class = $this->getNamespaceAndClass($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassAttributesMatcher.php:50:                array_keys($reflection->getStaticProperties())
vendor/psy/psysh/src/TabCompletion/Matcher/ClassAttributesMatcher.php:52:            array_keys($reflection->getConstants())
vendor/psy/psysh/src/TabCompletion/Matcher/MongoDatabaseMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/MongoDatabaseMatcher.php:28:        $input = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/MongoDatabaseMatcher.php:37:        $object      = $this->getVariable($objectName);
vendor/psy/psysh/src/TabCompletion/Matcher/MongoDatabaseMatcher.php:44:            $object->getCollectionNames(),
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectMethodDefaultParametersMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectMethodDefaultParametersMatcher.php:30:            $object = $this->getVariable($objectName);
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectMethodDefaultParametersMatcher.php:38:        $methods = $reflection->getMethods();
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectMethodDefaultParametersMatcher.php:41:            if ($method->getName() === $functionName[1]) {
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectMethodDefaultParametersMatcher.php:42:                return $this->getDefaultParameterCompletion($method->getParameters());
vendor/psy/psysh/src/TabCompletion/Matcher/VariablesMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/VariablesMatcher.php:28:        $var = str_replace('$', '', $this->getInput($tokens));
vendor/psy/psysh/src/TabCompletion/Matcher/VariablesMatcher.php:30:        return array_filter(array_keys($this->getVariables()), function ($variable) use ($var) {
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:36:        $this->setCommands($commands);
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:48:            $names = array_merge([$command->getName()], $names);
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:49:            $names = array_merge($command->getAliases(), $names);
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:51:        $this->commands = $names;
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:63:        return in_array($name, $this->commands);
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:75:        foreach ($this->commands as $cmd) {
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:76:            if ($this->startsWith($name, $cmd)) {
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:89:        $input = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:91:        return array_filter($this->commands, function ($command) use ($input) {
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:106:                !$this->isCommand($command[1]) &&
vendor/psy/psysh/src/TabCompletion/Matcher/CommandsMatcher.php:107:                $this->matchCommand($command[1]) &&
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectAttributesMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectAttributesMatcher.php:31:        $input = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectAttributesMatcher.php:45:            $object = $this->getVariable($objectName);
vendor/psy/psysh/src/TabCompletion/Matcher/FunctionsMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/FunctionsMatcher.php:17: * This matcher provides completion for all internal and user-defined functions.
vendor/psy/psysh/src/TabCompletion/Matcher/FunctionsMatcher.php:28:        $func = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractMatcher.php:22:    const CONSTANT_SYNTAX = '^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$';
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractMatcher.php:23:    const VAR_SYNTAX = '^\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$';
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractMatcher.php:24:    const MISC_OPERATORS = '+-*/^|&';
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectMethodsMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectMethodsMatcher.php:31:        $input = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/ObjectMethodsMatcher.php:45:            $object = $this->getVariable($objectName);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodsMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodsMatcher.php:29:        $input = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodsMatcher.php:37:        $class = $this->getNamespaceAndClass($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodsMatcher.php:46:            $methods = $reflection->getMethods();
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodsMatcher.php:48:            $methods = $reflection->getMethods(\ReflectionMethod::IS_STATIC);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodsMatcher.php:52:            return $method->getName();
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractDefaultParametersMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractDefaultParametersMatcher.php:26:            if (!$parameter->isDefaultValueAvailable()) {
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractDefaultParametersMatcher.php:30:            $defaultValue = $this->valueToShortString($parameter->getDefaultValue());
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractDefaultParametersMatcher.php:32:            $parametersProcessed[] = "\${$parameter->getName()} = $defaultValue";
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractDefaultParametersMatcher.php:65:            $keyString  = $this->valueToShortString($key);
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractDefaultParametersMatcher.php:66:            $itemString = $this->valueToShortString($item);
vendor/psy/psysh/src/TabCompletion/Matcher/KeywordsMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/KeywordsMatcher.php:17: * This matcher provides completion for all function-like PHP keywords.
vendor/psy/psysh/src/TabCompletion/Matcher/KeywordsMatcher.php:39:        return $this->keywords;
vendor/psy/psysh/src/TabCompletion/Matcher/KeywordsMatcher.php:51:        return in_array($keyword, $this->keywords);
vendor/psy/psysh/src/TabCompletion/Matcher/KeywordsMatcher.php:59:        $input = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/KeywordsMatcher.php:61:        return array_filter($this->keywords, function ($keyword) use ($input) {
vendor/psy/psysh/src/TabCompletion/Matcher/ClassNamesMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/ClassNamesMatcher.php:28:        $class = $this->getNamespaceAndClass($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractContextAwareMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractContextAwareMatcher.php:41:        $this->context = $context;
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractContextAwareMatcher.php:53:        return $this->context->get($var);
vendor/psy/psysh/src/TabCompletion/Matcher/AbstractContextAwareMatcher.php:63:        return $this->context->getAll();
vendor/psy/psysh/src/TabCompletion/Matcher/FunctionDefaultParametersMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/FunctionDefaultParametersMatcher.php:28:        $parameters = $reflection->getParameters();
vendor/psy/psysh/src/TabCompletion/Matcher/FunctionDefaultParametersMatcher.php:30:        return $this->getDefaultParameterCompletion($parameters);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodDefaultParametersMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodDefaultParametersMatcher.php:22:        $class = $this->getNamespaceAndClass($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodDefaultParametersMatcher.php:31:        $methods = $reflection->getMethods(\ReflectionMethod::IS_STATIC);
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodDefaultParametersMatcher.php:34:            if ($method->getName() === $functionName[1]) {
vendor/psy/psysh/src/TabCompletion/Matcher/ClassMethodDefaultParametersMatcher.php:35:                return $this->getDefaultParameterCompletion($method->getParameters());
vendor/psy/psysh/src/TabCompletion/Matcher/MongoClientMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/MongoClientMatcher.php:28:        $input = $this->getInput($tokens);
vendor/psy/psysh/src/TabCompletion/Matcher/MongoClientMatcher.php:37:        $object      = $this->getVariable($objectName);
vendor/psy/psysh/src/TabCompletion/Matcher/MongoClientMatcher.php:43:        $list = $object->listDBs();
vendor/psy/psysh/src/TabCompletion/Matcher/ConstantsMatcher.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/TabCompletion/Matcher/ConstantsMatcher.php:28:        $const = $this->getInput($tokens);
vendor/psy/psysh/src/ContextAware.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ExecutionClosure.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ExecutionClosure.php:28:        $this->setClosure($__psysh__, function () use ($__psysh__) {
vendor/psy/psysh/src/ExecutionClosure.php:31:                extract($__psysh__->getScopeVariables(false));
vendor/psy/psysh/src/ExecutionClosure.php:40:                $_ = eval($__psysh__->onExecute($__psysh__->flushCode() ?: ExecutionClosure::NOOP_INPUT));
vendor/psy/psysh/src/ExecutionClosure.php:66:            $__psysh__->setScopeVariables(get_defined_vars());
vendor/psy/psysh/src/ExecutionClosure.php:81:            $that = $shell->getBoundObject();
vendor/psy/psysh/src/ExecutionClosure.php:83:                $closure = $closure->bindTo($that, get_class($that));
vendor/psy/psysh/src/ExecutionClosure.php:85:                $closure = $closure->bindTo(null, $shell->getBoundClass());
vendor/psy/psysh/src/ExecutionClosure.php:89:        $this->closure = $closure;
vendor/psy/psysh/src/ExecutionClosure.php:99:        $closure = $this->closure;
vendor/psy/psysh/src/Command/TimeitCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/TimeitCommand.php:45:        $this->parser = $parserFactory->createParser();
vendor/psy/psysh/src/Command/TimeitCommand.php:47:        $this->traverser = new NodeTraverser();
vendor/psy/psysh/src/Command/TimeitCommand.php:48:        $this->traverser->addVisitor(new TimeitVisitor());
vendor/psy/psysh/src/Command/TimeitCommand.php:50:        $this->printer = new Printer();
vendor/psy/psysh/src/Command/TimeitCommand.php:61:            ->setName('timeit')
vendor/psy/psysh/src/Command/TimeitCommand.php:62:            ->setDefinition([
vendor/psy/psysh/src/Command/TimeitCommand.php:66:            ->setDescription('Profiles with a timer.')
vendor/psy/psysh/src/Command/TimeitCommand.php:67:            ->setHelp(
vendor/psy/psysh/src/Command/TimeitCommand.php:73:<return>>>> timeit -n1000 $closure()</return>
vendor/psy/psysh/src/Command/TimeitCommand.php:83:        $code = $input->getArgument('code');
vendor/psy/psysh/src/Command/TimeitCommand.php:84:        $num = $input->getOption('num') ?: 1;
vendor/psy/psysh/src/Command/TimeitCommand.php:85:        $shell = $this->getApplication();
vendor/psy/psysh/src/Command/TimeitCommand.php:87:        $instrumentedCode = $this->instrumentCode($code);
vendor/psy/psysh/src/Command/TimeitCommand.php:92:            $_ = $shell->execute($instrumentedCode);
vendor/psy/psysh/src/Command/TimeitCommand.php:93:            $this->ensureEndMarked();
vendor/psy/psysh/src/Command/TimeitCommand.php:96:        $shell->writeReturnValue($_);
vendor/psy/psysh/src/Command/TimeitCommand.php:102:            $output->writeln(sprintf(self::RESULT_MSG, $times[0]));
vendor/psy/psysh/src/Command/TimeitCommand.php:108:            $output->writeln(sprintf(self::AVG_RESULT_MSG, $total / $num, $median, $total));
vendor/psy/psysh/src/Command/TimeitCommand.php:140:        self::$times[] = microtime(true) - self::$start;
vendor/psy/psysh/src/Command/TimeitCommand.php:171:        return $this->printer->prettyPrint($this->traverser->traverse($this->parse($code)));
vendor/psy/psysh/src/Command/TimeitCommand.php:186:            return $this->parser->parse($code);
vendor/psy/psysh/src/Command/TimeitCommand.php:188:            if (strpos($e->getMessage(), 'unexpected EOF') === false) {
vendor/psy/psysh/src/Command/TimeitCommand.php:193:            return $this->parser->parse($code . ';');
vendor/psy/psysh/src/Command/PsyVersionCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/PsyVersionCommand.php:28:            ->setName('version')
vendor/psy/psysh/src/Command/PsyVersionCommand.php:29:            ->setDefinition([])
vendor/psy/psysh/src/Command/PsyVersionCommand.php:30:            ->setDescription('Show Psy Shell version.')
vendor/psy/psysh/src/Command/PsyVersionCommand.php:31:            ->setHelp('Show Psy Shell version.');
vendor/psy/psysh/src/Command/PsyVersionCommand.php:39:        $output->writeln($this->getApplication()->getVersion());
vendor/psy/psysh/src/Command/Command.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/Command.php:50:            ' ' . $this->getSynopsis(),
vendor/psy/psysh/src/Command/Command.php:54:        if ($this->getAliases()) {
vendor/psy/psysh/src/Command/Command.php:55:            $messages[] = $this->aliasesAsText();
vendor/psy/psysh/src/Command/Command.php:58:        if ($this->getArguments()) {
vendor/psy/psysh/src/Command/Command.php:59:            $messages[] = $this->argumentsAsText();
vendor/psy/psysh/src/Command/Command.php:62:        if ($this->getOptions()) {
vendor/psy/psysh/src/Command/Command.php:63:            $messages[] = $this->optionsAsText();
vendor/psy/psysh/src/Command/Command.php:66:        if ($help = $this->getProcessedHelp()) {
vendor/psy/psysh/src/Command/Command.php:79:        $hidden = $this->getHiddenArguments();
vendor/psy/psysh/src/Command/Command.php:81:        return array_filter($this->getNativeDefinition()->getArguments(), function ($argument) use ($hidden) {
vendor/psy/psysh/src/Command/Command.php:82:            return !in_array($argument->getName(), $hidden);
vendor/psy/psysh/src/Command/Command.php:101:        $hidden = $this->getHiddenOptions();
vendor/psy/psysh/src/Command/Command.php:103:        return array_filter($this->getNativeDefinition()->getOptions(), function ($option) use ($hidden) {
vendor/psy/psysh/src/Command/Command.php:104:            return !in_array($option->getName(), $hidden);
vendor/psy/psysh/src/Command/Command.php:125:        return '<comment>Aliases:</comment> <info>' . implode(', ', $this->getAliases()) . '</info>' . PHP_EOL;
vendor/psy/psysh/src/Command/Command.php:135:        $max = $this->getMaxWidth();
vendor/psy/psysh/src/Command/Command.php:138:        $arguments = $this->getArguments();
vendor/psy/psysh/src/Command/Command.php:142:                if (null !== $argument->getDefault() && (!is_array($argument->getDefault()) || count($argument->getDefault()))) {
vendor/psy/psysh/src/Command/Command.php:143:                    $default = sprintf('<comment> (default: %s)</comment>', $this->formatDefaultValue($argument->getDefault()));
vendor/psy/psysh/src/Command/Command.php:148:                $description = str_replace("\n", "\n" . str_pad('', $max + 2, ' '), $argument->getDescription());
vendor/psy/psysh/src/Command/Command.php:150:                $messages[] = sprintf(" <info>%-${max}s</info> %s%s", $argument->getName(), $description, $default);
vendor/psy/psysh/src/Command/Command.php:166:        $max = $this->getMaxWidth();
vendor/psy/psysh/src/Command/Command.php:169:        $options = $this->getOptions();
vendor/psy/psysh/src/Command/Command.php:174:                if ($option->acceptValue() && null !== $option->getDefault() && (!is_array($option->getDefault()) || count($option->getDefault()))) {
vendor/psy/psysh/src/Command/Command.php:175:                    $default = sprintf('<comment> (default: %s)</comment>', $this->formatDefaultValue($option->getDefault()));
vendor/psy/psysh/src/Command/Command.php:180:                $multiple = $option->isArray() ? '<comment> (multiple values allowed)</comment>' : '';
vendor/psy/psysh/src/Command/Command.php:181:                $description = str_replace("\n", "\n" . str_pad('', $max + 2, ' '), $option->getDescription());
vendor/psy/psysh/src/Command/Command.php:183:                $optionMax = $max - strlen($option->getName()) - 2;
vendor/psy/psysh/src/Command/Command.php:185:                    " <info>%s</info> %-${optionMax}s%s%s%s",
vendor/psy/psysh/src/Command/Command.php:186:                    '--' . $option->getName(),
vendor/psy/psysh/src/Command/Command.php:187:                    $option->getShortcut() ? sprintf('(-%s) ', $option->getShortcut()) : '',
vendor/psy/psysh/src/Command/Command.php:209:        foreach ($this->getOptions() as $option) {
vendor/psy/psysh/src/Command/Command.php:210:            $nameLength = strlen($option->getName()) + 2;
vendor/psy/psysh/src/Command/Command.php:211:            if ($option->getShortcut()) {
vendor/psy/psysh/src/Command/Command.php:212:                $nameLength += strlen($option->getShortcut()) + 3;
vendor/psy/psysh/src/Command/Command.php:218:        foreach ($this->getArguments() as $argument) {
vendor/psy/psysh/src/Command/Command.php:219:            $max = max($max, strlen($argument->getName()));
vendor/psy/psysh/src/Command/Command.php:251:            return $this->getTableHelper();
vendor/psy/psysh/src/Command/Command.php:256:            ->setVerticalBorderChar(' ')
vendor/psy/psysh/src/Command/Command.php:257:            ->setHorizontalBorderChar('')
vendor/psy/psysh/src/Command/Command.php:258:            ->setCrossingChar('');
vendor/psy/psysh/src/Command/Command.php:263:            ->setRows([])
vendor/psy/psysh/src/Command/Command.php:264:            ->setStyle($style);
vendor/psy/psysh/src/Command/Command.php:274:        $table = $this->getApplication()->getHelperSet()->get('table');
vendor/psy/psysh/src/Command/Command.php:277:            ->setRows([])
vendor/psy/psysh/src/Command/Command.php:278:            ->setLayout(TableHelper::LAYOUT_BORDERLESS)
vendor/psy/psysh/src/Command/Command.php:279:            ->setHorizontalBorderChar('')
vendor/psy/psysh/src/Command/Command.php:280:            ->setCrossingChar('');
vendor/psy/psysh/src/Command/EditCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/EditCommand.php:45:        $this->runtimeDir = $runtimeDir;
vendor/psy/psysh/src/Command/EditCommand.php:51:            ->setName('edit')
vendor/psy/psysh/src/Command/EditCommand.php:52:            ->setDefinition([
vendor/psy/psysh/src/Command/EditCommand.php:62:                    'no-exec',
vendor/psy/psysh/src/Command/EditCommand.php:69:            ->setDescription('Open an external editor. Afterwards, get produced code in input buffer.')
vendor/psy/psysh/src/Command/EditCommand.php:70:            ->setHelp('Set the EDITOR environment variable to something you\'d like to use.');
vendor/psy/psysh/src/Command/EditCommand.php:77:     * @throws \InvalidArgumentException when both exec and no-exec flags are given or if a given variable is not found in the current context
vendor/psy/psysh/src/Command/EditCommand.php:82:        if ($input->getOption('exec') &&
vendor/psy/psysh/src/Command/EditCommand.php:83:            $input->getOption('no-exec')) {
vendor/psy/psysh/src/Command/EditCommand.php:84:            throw new \InvalidArgumentException('The --exec and --no-exec flags are mutually exclusive');
vendor/psy/psysh/src/Command/EditCommand.php:87:        $filePath = $this->extractFilePath($input->getArgument('file'));
vendor/psy/psysh/src/Command/EditCommand.php:89:        $execute = $this->shouldExecuteFile(
vendor/psy/psysh/src/Command/EditCommand.php:90:            $input->getOption('exec'),
vendor/psy/psysh/src/Command/EditCommand.php:91:            $input->getOption('no-exec'),
vendor/psy/psysh/src/Command/EditCommand.php:98:            $filePath = tempnam($this->runtimeDir, 'psysh-edit-command');
vendor/psy/psysh/src/Command/EditCommand.php:102:        $editedContent = $this->editFile($filePath, $shouldRemoveFile);
vendor/psy/psysh/src/Command/EditCommand.php:105:            $this->getApplication()->addInput($editedContent);
vendor/psy/psysh/src/Command/EditCommand.php:143:            $fileArgument = $this->context->get(preg_replace('/^\$/', '', $fileArgument));
vendor/psy/psysh/src/Command/EditCommand.php:185:        $this->context = $context;
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:29: * `TimeitCommand::markEnd()` at the end, and on top-level return statements.
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:40:        $this->functionDepth = 0;
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:48:        // keep track of nested function-like nodes, because they can have
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:51:            $this->functionDepth++;
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:56:        // replace any top-level `return` statements with a `markEnd` call
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:57:        if ($this->functionDepth === 0 && $node instanceof Return_) {
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:58:            return new Return_($this->getEndCall($node->expr), $node->getAttributes());
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:68:            $this->functionDepth--;
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:78:        array_unshift($nodes, $this->maybeExpression($this->getStartCall()));
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:81:        $last = $nodes[count($nodes) - 1];
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:84:            $nodes[] = $this->getEndCall($last);
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:87:            $nodes[] = new Expression($this->getEndCall($last->expr), $last->getAttributes());
vendor/psy/psysh/src/Command/TimeitCommand/TimeitVisitor.php:91:            $nodes[] = $this->maybeExpression($this->getEndCall());
vendor/psy/psysh/src/Command/WhereamiCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/WhereamiCommand.php:35:        $this->colorMode = $colorMode ?: Configuration::COLOR_MODE_AUTO;
vendor/psy/psysh/src/Command/WhereamiCommand.php:36:        $this->backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
vendor/psy/psysh/src/Command/WhereamiCommand.php:47:            ->setName('whereami')
vendor/psy/psysh/src/Command/WhereamiCommand.php:48:            ->setDefinition([
vendor/psy/psysh/src/Command/WhereamiCommand.php:51:            ->setDescription('Show where you are in the code.')
vendor/psy/psysh/src/Command/WhereamiCommand.php:52:            ->setHelp(
vendor/psy/psysh/src/Command/WhereamiCommand.php:60:<return>> whereami -n10</return>
vendor/psy/psysh/src/Command/WhereamiCommand.php:72:        foreach (array_reverse($this->backtrace) as $stackFrame) {
vendor/psy/psysh/src/Command/WhereamiCommand.php:73:            if ($this->isDebugCall($stackFrame)) {
vendor/psy/psysh/src/Command/WhereamiCommand.php:78:        return end($this->backtrace);
vendor/psy/psysh/src/Command/WhereamiCommand.php:97:        $stackFrame = $this->trace();
vendor/psy/psysh/src/Command/WhereamiCommand.php:115:        $info        = $this->fileInfo();
vendor/psy/psysh/src/Command/WhereamiCommand.php:116:        $num         = $input->getOption('num');
vendor/psy/psysh/src/Command/WhereamiCommand.php:117:        $factory     = new ConsoleColorFactory($this->colorMode);
vendor/psy/psysh/src/Command/WhereamiCommand.php:118:        $colors      = $factory->getConsoleColor();
vendor/psy/psysh/src/Command/WhereamiCommand.php:122:        $output->startPaging();
vendor/psy/psysh/src/Command/WhereamiCommand.php:123:        $output->writeln('');
vendor/psy/psysh/src/Command/WhereamiCommand.php:124:        $output->writeln(sprintf('From <info>%s:%s</info>:', $this->replaceCwd($info['file']), $info['line']));
vendor/psy/psysh/src/Command/WhereamiCommand.php:125:        $output->writeln('');
vendor/psy/psysh/src/Command/WhereamiCommand.php:126:        $output->write($highlighter->getCodeSnippet($contents, $info['line'], $num, $num), ShellOutput::OUTPUT_RAW);
vendor/psy/psysh/src/Command/WhereamiCommand.php:127:        $output->stopPaging();
vendor/psy/psysh/src/Command/ThrowUpCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ThrowUpCommand.php:53:        $this->parser  = $parserFactory->createParser();
vendor/psy/psysh/src/Command/ThrowUpCommand.php:54:        $this->printer = new Printer();
vendor/psy/psysh/src/Command/ThrowUpCommand.php:66:        $this->context = $context;
vendor/psy/psysh/src/Command/ThrowUpCommand.php:75:            ->setName('throw-up')
vendor/psy/psysh/src/Command/ThrowUpCommand.php:76:            ->setDefinition([
vendor/psy/psysh/src/Command/ThrowUpCommand.php:79:            ->setDescription('Throw an exception or error out of the Psy Shell.')
vendor/psy/psysh/src/Command/ThrowUpCommand.php:80:            ->setHelp(
vendor/psy/psysh/src/Command/ThrowUpCommand.php:87:<return>>>> throw-up</return>
vendor/psy/psysh/src/Command/ThrowUpCommand.php:88:<return>>>> throw-up $e</return>
vendor/psy/psysh/src/Command/ThrowUpCommand.php:89:<return>>>> throw-up new Exception('WHEEEEEE!')</return>
vendor/psy/psysh/src/Command/ThrowUpCommand.php:90:<return>>>> throw-up "bye!"</return>
vendor/psy/psysh/src/Command/ThrowUpCommand.php:102:        $args = $this->prepareArgs($input->getArgument('exception'));
vendor/psy/psysh/src/Command/ThrowUpCommand.php:104:        $throwCode = $this->printer->prettyPrint([$throwStmt]);
vendor/psy/psysh/src/Command/ThrowUpCommand.php:106:        $shell = $this->getApplication();
vendor/psy/psysh/src/Command/ThrowUpCommand.php:107:        $shell->addCode($throwCode, !$shell->hasCode());
vendor/psy/psysh/src/Command/ThrowUpCommand.php:132:        $nodes = $this->parse($code);
vendor/psy/psysh/src/Command/ThrowUpCommand.php:140:        $expr = isset($node->expr) ? $node->expr : $node;
vendor/psy/psysh/src/Command/ThrowUpCommand.php:142:        $args = [new Arg($expr, false, false, $node->getAttributes())];
vendor/psy/psysh/src/Command/ThrowUpCommand.php:144:        // Allow throwing via a string, e.g. `throw-up "SUP"`
vendor/psy/psysh/src/Command/ThrowUpCommand.php:162:            return $this->parser->parse($code);
vendor/psy/psysh/src/Command/ThrowUpCommand.php:164:            if (strpos($e->getMessage(), 'unexpected EOF') === false) {
vendor/psy/psysh/src/Command/ThrowUpCommand.php:169:            return $this->parser->parse($code . ';');
vendor/psy/psysh/src/Command/ReflectingCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ReflectingCommand.php:29:    const INSTANCE_MEMBER = '/^(\$\w+)(::|->)(\w+)$/';
vendor/psy/psysh/src/Command/ReflectingCommand.php:45:        $this->context = $context;
vendor/psy/psysh/src/Command/ReflectingCommand.php:63:                return [$this->resolveName($matches[0], true), null, 0];
vendor/psy/psysh/src/Command/ReflectingCommand.php:66:                return [$this->resolveName($matches[1]), $matches[2], Mirror::CONSTANT | Mirror::METHOD];
vendor/psy/psysh/src/Command/ReflectingCommand.php:69:                return [$this->resolveName($matches[1]), $matches[2], Mirror::STATIC_PROPERTY | Mirror::PROPERTY];
vendor/psy/psysh/src/Command/ReflectingCommand.php:72:                if ($matches[2] === '->') {
vendor/psy/psysh/src/Command/ReflectingCommand.php:78:                return [$this->resolveObject($matches[1]), $matches[3], $kind];
vendor/psy/psysh/src/Command/ReflectingCommand.php:81:                return [$this->resolveObject($valueName), null, 0];
vendor/psy/psysh/src/Command/ReflectingCommand.php:88:     * @throws ErrorException when `self` or `static` is used in a non-class scope
vendor/psy/psysh/src/Command/ReflectingCommand.php:97:        $shell = $this->getApplication();
vendor/psy/psysh/src/Command/ReflectingCommand.php:101:            if ($boundClass = $shell->getBoundClass()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:105:            if ($boundObject = $shell->getBoundObject()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:117:        if ($namespace = $shell->getNamespace()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:137:        list($value, $member, $kind) = $this->getTarget($valueName);
vendor/psy/psysh/src/Command/ReflectingCommand.php:154:            $value = $this->getApplication()->execute($code, true);
vendor/psy/psysh/src/Command/ReflectingCommand.php:169:     * @throws RuntimeException when the code resolves to a non-object value
vendor/psy/psysh/src/Command/ReflectingCommand.php:177:        $value = $this->resolveCode($code);
vendor/psy/psysh/src/Command/ReflectingCommand.php:180:            throw new RuntimeException('Unable to inspect a non-object');
vendor/psy/psysh/src/Command/ReflectingCommand.php:197:        return $this->resolveCode($name);
vendor/psy/psysh/src/Command/ReflectingCommand.php:209:        return $this->context->get($name);
vendor/psy/psysh/src/Command/ReflectingCommand.php:219:        return $this->context->getAll();
vendor/psy/psysh/src/Command/ReflectingCommand.php:223:     * Given a Reflector instance, set command-scope variables in the shell
vendor/psy/psysh/src/Command/ReflectingCommand.php:236:                $vars['__class'] = $reflector->name;
vendor/psy/psysh/src/Command/ReflectingCommand.php:237:                if ($reflector->inNamespace()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:238:                    $vars['__namespace'] = $reflector->getNamespaceName();
vendor/psy/psysh/src/Command/ReflectingCommand.php:243:                $vars['__method'] = sprintf('%s::%s', $reflector->class, $reflector->name);
vendor/psy/psysh/src/Command/ReflectingCommand.php:244:                $vars['__class'] = $reflector->class;
vendor/psy/psysh/src/Command/ReflectingCommand.php:245:                $classReflector = $reflector->getDeclaringClass();
vendor/psy/psysh/src/Command/ReflectingCommand.php:246:                if ($classReflector->inNamespace()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:247:                    $vars['__namespace'] = $classReflector->getNamespaceName();
vendor/psy/psysh/src/Command/ReflectingCommand.php:252:                $vars['__function'] = $reflector->name;
vendor/psy/psysh/src/Command/ReflectingCommand.php:253:                if ($reflector->inNamespace()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:254:                    $vars['__namespace'] = $reflector->getNamespaceName();
vendor/psy/psysh/src/Command/ReflectingCommand.php:259:                $funcReflector = $reflector->getFunction();
vendor/psy/psysh/src/Command/ReflectingCommand.php:260:                $vars['__function'] = $funcReflector->name;
vendor/psy/psysh/src/Command/ReflectingCommand.php:261:                if ($funcReflector->inNamespace()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:262:                    $vars['__namespace'] = $funcReflector->getNamespaceName();
vendor/psy/psysh/src/Command/ReflectingCommand.php:264:                if ($fileName = $reflector->getExecutingFile()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:266:                    $vars['__line'] = $reflector->getExecutingLine();
vendor/psy/psysh/src/Command/ReflectingCommand.php:274:                $classReflector = $reflector->getDeclaringClass();
vendor/psy/psysh/src/Command/ReflectingCommand.php:275:                $vars['__class'] = $classReflector->name;
vendor/psy/psysh/src/Command/ReflectingCommand.php:276:                if ($classReflector->inNamespace()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:277:                    $vars['__namespace'] = $classReflector->getNamespaceName();
vendor/psy/psysh/src/Command/ReflectingCommand.php:280:                if ($fileName = $reflector->getDeclaringClass()->getFileName()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:287:                if ($reflector->inNamespace()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:288:                    $vars['__namespace'] = $reflector->getNamespaceName();
vendor/psy/psysh/src/Command/ReflectingCommand.php:294:            if ($fileName = $reflector->getFileName()) {
vendor/psy/psysh/src/Command/ReflectingCommand.php:296:                $vars['__line'] = $reflector->getStartLine();
vendor/psy/psysh/src/Command/ReflectingCommand.php:301:        $this->context->setCommandScopeVariables($vars);
vendor/psy/psysh/src/Command/TraceCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/TraceCommand.php:33:        $this->filter = new FilterOptions();
vendor/psy/psysh/src/Command/TraceCommand.php:46:            ->setName('trace')
vendor/psy/psysh/src/Command/TraceCommand.php:47:            ->setDefinition([
vendor/psy/psysh/src/Command/TraceCommand.php:48:                new InputOption('include-psy', 'p', InputOption::VALUE_NONE,     'Include Psy in the call stack.'),
vendor/psy/psysh/src/Command/TraceCommand.php:55:            ->setDescription('Show the current call stack.')
vendor/psy/psysh/src/Command/TraceCommand.php:56:            ->setHelp(
vendor/psy/psysh/src/Command/TraceCommand.php:60:Optionally, include PsySH in the call stack by passing the <info>--include-psy</info> option.
vendor/psy/psysh/src/Command/TraceCommand.php:63:<return>> trace -n10</return>
vendor/psy/psysh/src/Command/TraceCommand.php:64:<return>> trace --include-psy</return>
vendor/psy/psysh/src/Command/TraceCommand.php:74:        $this->filter->bind($input);
vendor/psy/psysh/src/Command/TraceCommand.php:75:        $trace = $this->getBacktrace(new \Exception(), $input->getOption('num'), $input->getOption('include-psy'));
vendor/psy/psysh/src/Command/TraceCommand.php:76:        $output->page($trace, ShellOutput::NUMBER_LINES);
vendor/psy/psysh/src/Command/TraceCommand.php:103:        $trace = $e->getTrace();
vendor/psy/psysh/src/Command/TraceCommand.php:106:            'file'     => $e->getFile() !== null ? $e->getFile() : 'n/a',
vendor/psy/psysh/src/Command/TraceCommand.php:107:            'line'     => $e->getLine() !== null ? $e->getLine() : 'n/a',
vendor/psy/psysh/src/Command/TraceCommand.php:112:            for ($i = count($trace) - 1; $i >= 0; $i--) {
vendor/psy/psysh/src/Command/TraceCommand.php:125:            $file     = isset($trace[$i]['file']) ? $this->replaceCwd($cwd, $trace[$i]['file']) : 'n/a';
vendor/psy/psysh/src/Command/TraceCommand.php:134:            if (!$this->filter->match(sprintf('%s%s%s() at %s:%s', $class, $type, $function, $file, $line))) {
vendor/psy/psysh/src/Command/WtfCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/WtfCommand.php:42:        $this->context = $context;
vendor/psy/psysh/src/Command/WtfCommand.php:53:            ->setName('wtf')
vendor/psy/psysh/src/Command/WtfCommand.php:54:            ->setAliases(['last-exception', 'wtf?'])
vendor/psy/psysh/src/Command/WtfCommand.php:55:            ->setDefinition([
vendor/psy/psysh/src/Command/WtfCommand.php:63:            ->setDescription('Show the backtrace of the most recent exception.')
vendor/psy/psysh/src/Command/WtfCommand.php:64:            ->setHelp(
vendor/psy/psysh/src/Command/WtfCommand.php:74:To see the entire backtrace, pass the -a/--all flag:
vendor/psy/psysh/src/Command/WtfCommand.php:77:<return>>>> wtf -a</return>
vendor/psy/psysh/src/Command/WtfCommand.php:87:        $this->filter->bind($input);
vendor/psy/psysh/src/Command/WtfCommand.php:89:        $incredulity = implode('', $input->getArgument('incredulity'));
vendor/psy/psysh/src/Command/WtfCommand.php:94:        $exception = $this->context->getLastException();
vendor/psy/psysh/src/Command/WtfCommand.php:95:        $count     = $input->getOption('all') ? PHP_INT_MAX : max(3, pow(2, strlen($incredulity) + 1));
vendor/psy/psysh/src/Command/WtfCommand.php:97:        $shell = $this->getApplication();
vendor/psy/psysh/src/Command/WtfCommand.php:98:        $output->startPaging();
vendor/psy/psysh/src/Command/WtfCommand.php:100:            $traceCount = count($exception->getTrace());
vendor/psy/psysh/src/Command/WtfCommand.php:107:            $trace     = $this->getBacktrace($exception, $showLines);
vendor/psy/psysh/src/Command/WtfCommand.php:108:            $moreLines = $traceCount - count($trace);
vendor/psy/psysh/src/Command/WtfCommand.php:110:            $output->writeln($shell->formatException($exception));
vendor/psy/psysh/src/Command/WtfCommand.php:111:            $output->writeln('--');
vendor/psy/psysh/src/Command/WtfCommand.php:112:            $output->write($trace, true, ShellOutput::NUMBER_LINES);
vendor/psy/psysh/src/Command/WtfCommand.php:113:            $output->writeln('');
vendor/psy/psysh/src/Command/WtfCommand.php:116:                $output->writeln(sprintf(
vendor/psy/psysh/src/Command/WtfCommand.php:117:                    '<aside>Use <return>wtf -a</return> to see %d more lines</aside>',
vendor/psy/psysh/src/Command/WtfCommand.php:120:                $output->writeln('');
vendor/psy/psysh/src/Command/WtfCommand.php:122:        } while ($exception = $exception->getPrevious());
vendor/psy/psysh/src/Command/WtfCommand.php:123:        $output->stopPaging();
vendor/psy/psysh/src/Command/ShowCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ShowCommand.php:42:        $this->colorMode = $colorMode ?: Configuration::COLOR_MODE_AUTO;
vendor/psy/psysh/src/Command/ShowCommand.php:53:            ->setName('show')
vendor/psy/psysh/src/Command/ShowCommand.php:54:            ->setDefinition([
vendor/psy/psysh/src/Command/ShowCommand.php:58:            ->setDescription('Show the code for an object, class, constant, method or property.')
vendor/psy/psysh/src/Command/ShowCommand.php:59:            ->setHelp(
vendor/psy/psysh/src/Command/ShowCommand.php:64:<return>cat --ex</return> defaults to showing the lines surrounding the location of the last
vendor/psy/psysh/src/Command/ShowCommand.php:71:<return>>>> show --ex</return>
vendor/psy/psysh/src/Command/ShowCommand.php:72:<return>>>> show --ex 3</return>
vendor/psy/psysh/src/Command/ShowCommand.php:84:        // call `$input->getOption('ex')`, it will return the default, both when
vendor/psy/psysh/src/Command/ShowCommand.php:85:        // `--ex` is specified with no value, and when `--ex` isn't specified at
vendor/psy/psysh/src/Command/ShowCommand.php:89:        // return the default value when `--ex` is not present, and `null` if
vendor/psy/psysh/src/Command/ShowCommand.php:90:        // `--ex` is passed with no value. /shrug
vendor/psy/psysh/src/Command/ShowCommand.php:91:        $opts = $input->getOptions();
vendor/psy/psysh/src/Command/ShowCommand.php:93:        // Strict comparison to `1` (the default value) here, because `--ex 1`
vendor/psy/psysh/src/Command/ShowCommand.php:95:        // "no --ex present", because it's the integer 1, "--ex with no value",
vendor/psy/psysh/src/Command/ShowCommand.php:96:        // because it's `null`, and "--ex 1", because it's the string "1".
vendor/psy/psysh/src/Command/ShowCommand.php:98:            if ($input->getArgument('target')) {
vendor/psy/psysh/src/Command/ShowCommand.php:99:                throw new \InvalidArgumentException('Too many arguments (supply either "target" or "--ex")');
vendor/psy/psysh/src/Command/ShowCommand.php:102:            return $this->writeExceptionContext($input, $output);
vendor/psy/psysh/src/Command/ShowCommand.php:105:        if ($input->getArgument('target')) {
vendor/psy/psysh/src/Command/ShowCommand.php:106:            return $this->writeCodeContext($input, $output);
vendor/psy/psysh/src/Command/ShowCommand.php:114:        list($target, $reflector) = $this->getTargetAndReflector($input->getArgument('target'));
vendor/psy/psysh/src/Command/ShowCommand.php:117:        $this->setCommandScopeVariables($reflector);
vendor/psy/psysh/src/Command/ShowCommand.php:120:            $output->page(CodeFormatter::format($reflector, $this->colorMode), ShellOutput::OUTPUT_RAW);
vendor/psy/psysh/src/Command/ShowCommand.php:122:            $output->writeln(SignatureFormatter::format($reflector));
vendor/psy/psysh/src/Command/ShowCommand.php:129:        $exception = $this->context->getLastException();
vendor/psy/psysh/src/Command/ShowCommand.php:130:        if ($exception !== $this->lastException) {
vendor/psy/psysh/src/Command/ShowCommand.php:131:            $this->lastException = null;
vendor/psy/psysh/src/Command/ShowCommand.php:132:            $this->lastExceptionIndex = null;
vendor/psy/psysh/src/Command/ShowCommand.php:135:        $opts = $input->getOptions();
vendor/psy/psysh/src/Command/ShowCommand.php:137:            if ($this->lastException && $this->lastExceptionIndex !== null) {
vendor/psy/psysh/src/Command/ShowCommand.php:138:                $index = $this->lastExceptionIndex + 1;
vendor/psy/psysh/src/Command/ShowCommand.php:143:            $index = max(0, intval($input->getOption('ex')) - 1);
vendor/psy/psysh/src/Command/ShowCommand.php:146:        $trace = $exception->getTrace();
vendor/psy/psysh/src/Command/ShowCommand.php:148:            'file' => $exception->getFile(),
vendor/psy/psysh/src/Command/ShowCommand.php:149:            'line' => $exception->getLine(),
vendor/psy/psysh/src/Command/ShowCommand.php:156:        $this->lastException = $exception;
vendor/psy/psysh/src/Command/ShowCommand.php:157:        $this->lastExceptionIndex = $index;
vendor/psy/psysh/src/Command/ShowCommand.php:159:        $output->writeln($this->getApplication()->formatException($exception));
vendor/psy/psysh/src/Command/ShowCommand.php:160:        $output->writeln('--');
vendor/psy/psysh/src/Command/ShowCommand.php:161:        $this->writeTraceLine($output, $trace, $index);
vendor/psy/psysh/src/Command/ShowCommand.php:162:        $this->writeTraceCodeSnippet($output, $trace, $index);
vendor/psy/psysh/src/Command/ShowCommand.php:164:        $this->setCommandScopeVariablesFromContext($trace[$index]);
vendor/psy/psysh/src/Command/ShowCommand.php:169:        $file = isset($trace[$index]['file']) ? $this->replaceCwd($trace[$index]['file']) : 'n/a';
vendor/psy/psysh/src/Command/ShowCommand.php:172:        $output->writeln(sprintf(
vendor/psy/psysh/src/Command/ShowCommand.php:201:        if ($fileAndLine = $this->extractEvalFileAndLine($file)) {
vendor/psy/psysh/src/Command/ShowCommand.php:219:        $output->write($this->getHighlighter()->getCodeSnippet($code, $line, 5, 5), ShellOutput::OUTPUT_RAW);
vendor/psy/psysh/src/Command/ShowCommand.php:224:        if (!$this->highlighter) {
vendor/psy/psysh/src/Command/ShowCommand.php:225:            $factory = new ConsoleColorFactory($this->colorMode);
vendor/psy/psysh/src/Command/ShowCommand.php:226:            $this->highlighter = new Highlighter($factory->getConsoleColor());
vendor/psy/psysh/src/Command/ShowCommand.php:229:        return $this->highlighter;
vendor/psy/psysh/src/Command/ShowCommand.php:244:                if ($namespace = $refl->getNamespaceName()) {
vendor/psy/psysh/src/Command/ShowCommand.php:255:                if ($namespace = $refl->getNamespaceName()) {
vendor/psy/psysh/src/Command/ShowCommand.php:265:            if ($fileAndLine = $this->extractEvalFileAndLine($file)) {
vendor/psy/psysh/src/Command/ShowCommand.php:280:        $this->context->setCommandScopeVariables($vars);
vendor/psy/psysh/src/Command/ParseCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ParseCommand.php:48:        $this->parserFactory = new ParserFactory();
vendor/psy/psysh/src/Command/ParseCommand.php:49:        $this->parsers       = [];
vendor/psy/psysh/src/Command/ParseCommand.php:61:        $this->context = $context;
vendor/psy/psysh/src/Command/ParseCommand.php:71:        $this->presenter = clone $presenter;
vendor/psy/psysh/src/Command/ParseCommand.php:72:        $this->presenter->addCasters([
vendor/psy/psysh/src/Command/ParseCommand.php:75:                    Caster::PREFIX_VIRTUAL . 'type'       => $node->getType(),
vendor/psy/psysh/src/Command/ParseCommand.php:76:                    Caster::PREFIX_VIRTUAL . 'attributes' => $node->getAttributes(),
vendor/psy/psysh/src/Command/ParseCommand.php:79:                foreach ($node->getSubNodeNames() as $name) {
vendor/psy/psysh/src/Command/ParseCommand.php:80:                    $a[Caster::PREFIX_VIRTUAL . $name] = $node->$name;
vendor/psy/psysh/src/Command/ParseCommand.php:98:        if ($this->parserFactory->hasKindsSupport()) {
vendor/psy/psysh/src/Command/ParseCommand.php:102:            $defaultKind = $this->parserFactory->getDefaultKind();
vendor/psy/psysh/src/Command/ParseCommand.php:108:            ->setName('parse')
vendor/psy/psysh/src/Command/ParseCommand.php:109:            ->setDefinition($definition)
vendor/psy/psysh/src/Command/ParseCommand.php:110:            ->setDescription('Parse PHP code and show the abstract syntax tree.')
vendor/psy/psysh/src/Command/ParseCommand.php:111:            ->setHelp(
vendor/psy/psysh/src/Command/ParseCommand.php:116:it pretty-prints the PHP Parser parse tree.
vendor/psy/psysh/src/Command/ParseCommand.php:118:See https://github.com/nikic/PHP-Parser
vendor/psy/psysh/src/Command/ParseCommand.php:130:        $code = $input->getArgument('code');
vendor/psy/psysh/src/Command/ParseCommand.php:135:        $parserKind = $this->parserFactory->hasKindsSupport() ? $input->getOption('kind') : null;
vendor/psy/psysh/src/Command/ParseCommand.php:136:        $depth      = $input->getOption('depth');
vendor/psy/psysh/src/Command/ParseCommand.php:137:        $nodes      = $this->parse($this->getParser($parserKind), $code);
vendor/psy/psysh/src/Command/ParseCommand.php:138:        $output->page($this->presenter->present($nodes, $depth));
vendor/psy/psysh/src/Command/ParseCommand.php:140:        $this->context->setReturnValue($nodes);
vendor/psy/psysh/src/Command/ParseCommand.php:154:            return $parser->parse($code);
vendor/psy/psysh/src/Command/ParseCommand.php:156:            if (strpos($e->getMessage(), 'unexpected EOF') === false) {
vendor/psy/psysh/src/Command/ParseCommand.php:161:            return $parser->parse($code . ';');
vendor/psy/psysh/src/Command/ParseCommand.php:174:        if (!array_key_exists($kind, $this->parsers)) {
vendor/psy/psysh/src/Command/ParseCommand.php:175:            $this->parsers[$kind] = $this->parserFactory->createParser($kind);
vendor/psy/psysh/src/Command/ParseCommand.php:178:        return $this->parsers[$kind];
vendor/psy/psysh/src/Command/ClearCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ClearCommand.php:30:            ->setName('clear')
vendor/psy/psysh/src/Command/ClearCommand.php:31:            ->setDefinition([])
vendor/psy/psysh/src/Command/ClearCommand.php:32:            ->setDescription('Clear the Psy Shell screen.')
vendor/psy/psysh/src/Command/ClearCommand.php:33:            ->setHelp(
vendor/psy/psysh/src/Command/ClearCommand.php:47:        $output->write(sprintf('%c[2J%c[0;0f', 27, 27));
vendor/psy/psysh/src/Command/DocCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/DocCommand.php:33:            ->setName('doc')
vendor/psy/psysh/src/Command/DocCommand.php:34:            ->setAliases(['rtfm', 'man'])
vendor/psy/psysh/src/Command/DocCommand.php:35:            ->setDefinition([
vendor/psy/psysh/src/Command/DocCommand.php:38:            ->setDescription('Read the documentation for an object, class, constant, method or property.')
vendor/psy/psysh/src/Command/DocCommand.php:39:            ->setHelp(
vendor/psy/psysh/src/Command/DocCommand.php:43:It's awesome for well-documented code, not quite as awesome for poorly documented code.
vendor/psy/psysh/src/Command/DocCommand.php:50:<return>>>> doc \$s->run</return>
vendor/psy/psysh/src/Command/DocCommand.php:60:        $value = $input->getArgument('target');
vendor/psy/psysh/src/Command/DocCommand.php:63:            $doc = $this->getManualDocById($value);
vendor/psy/psysh/src/Command/DocCommand.php:65:            list($target, $reflector) = $this->getTargetAndReflector($value);
vendor/psy/psysh/src/Command/DocCommand.php:66:            $doc = $this->getManualDoc($reflector) ?: DocblockFormatter::format($reflector);
vendor/psy/psysh/src/Command/DocCommand.php:69:        $db = $this->getApplication()->getManualDb();
vendor/psy/psysh/src/Command/DocCommand.php:71:        $output->page(function ($output) use ($reflector, $doc, $db) {
vendor/psy/psysh/src/Command/DocCommand.php:72:            $output->writeln(SignatureFormatter::format($reflector));
vendor/psy/psysh/src/Command/DocCommand.php:73:            $output->writeln('');
vendor/psy/psysh/src/Command/DocCommand.php:76:                $output->writeln('<warning>PHP manual not found</warning>');
vendor/psy/psysh/src/Command/DocCommand.php:77:                $output->writeln('    To document core PHP functionality, download the PHP reference manual:');
vendor/psy/psysh/src/Command/DocCommand.php:78:                $output->writeln('    https://github.com/bobthecow/psysh/wiki/PHP-manual');
vendor/psy/psysh/src/Command/DocCommand.php:80:                $output->writeln($doc);
vendor/psy/psysh/src/Command/DocCommand.php:85:        $this->setCommandScopeVariables($reflector);
vendor/psy/psysh/src/Command/DocCommand.php:94:                $id = $reflector->name;
vendor/psy/psysh/src/Command/DocCommand.php:98:                $id = $reflector->class . '::' . $reflector->name;
vendor/psy/psysh/src/Command/DocCommand.php:102:                $id = $reflector->class . '::$' . $reflector->name;
vendor/psy/psysh/src/Command/DocCommand.php:110:                $id = $reflector->class . '::' . $reflector->name;
vendor/psy/psysh/src/Command/DocCommand.php:114:                $id = $reflector->name;
vendor/psy/psysh/src/Command/DocCommand.php:121:        return $this->getManualDocById($id);
vendor/psy/psysh/src/Command/DocCommand.php:126:        if ($db = $this->getApplication()->getManualDb()) {
vendor/psy/psysh/src/Command/DocCommand.php:128:                ->query(sprintf('SELECT doc FROM php_manual WHERE id = %s', $db->quote($id)))
vendor/psy/psysh/src/Command/DocCommand.php:129:                ->fetchColumn(0);
vendor/psy/psysh/src/Command/DumpCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/DumpCommand.php:37:        $this->presenter = $presenter;
vendor/psy/psysh/src/Command/DumpCommand.php:46:            ->setName('dump')
vendor/psy/psysh/src/Command/DumpCommand.php:47:            ->setDefinition([
vendor/psy/psysh/src/Command/DumpCommand.php:52:            ->setDescription('Dump an object or primitive.')
vendor/psy/psysh/src/Command/DumpCommand.php:53:            ->setHelp(
vendor/psy/psysh/src/Command/DumpCommand.php:62:<return>>>> dump $stuff->getAll()</return>
vendor/psy/psysh/src/Command/DumpCommand.php:72:        $depth  = $input->getOption('depth');
vendor/psy/psysh/src/Command/DumpCommand.php:73:        $target = $this->resolveCode($input->getArgument('target'));
vendor/psy/psysh/src/Command/DumpCommand.php:74:        $output->page($this->presenter->present($target, $depth, $input->getOption('all') ? Presenter::VERBOSE : 0));
vendor/psy/psysh/src/Command/DumpCommand.php:77:            $this->setCommandScopeVariables(new \ReflectionObject($target));
vendor/psy/psysh/src/Command/DumpCommand.php:92:        return $this->resolveCode($name);
vendor/psy/psysh/src/Command/BufferCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/BufferCommand.php:22: * Shows and clears the buffer for the current multi-line expression.
vendor/psy/psysh/src/Command/BufferCommand.php:32:            ->setName('buffer')
vendor/psy/psysh/src/Command/BufferCommand.php:33:            ->setAliases(['buf'])
vendor/psy/psysh/src/Command/BufferCommand.php:34:            ->setDefinition([
vendor/psy/psysh/src/Command/BufferCommand.php:37:            ->setDescription('Show (or clear) the contents of the code input buffer.')
vendor/psy/psysh/src/Command/BufferCommand.php:38:            ->setHelp(
vendor/psy/psysh/src/Command/BufferCommand.php:40:Show the contents of the code buffer for the current multi-line expression.
vendor/psy/psysh/src/Command/BufferCommand.php:42:Optionally, clear the buffer by passing the <info>--clear</info> option.
vendor/psy/psysh/src/Command/BufferCommand.php:52:        $buf = $this->getApplication()->getCodeBuffer();
vendor/psy/psysh/src/Command/BufferCommand.php:53:        if ($input->getOption('clear')) {
vendor/psy/psysh/src/Command/BufferCommand.php:54:            $this->getApplication()->resetCodeBuffer();
vendor/psy/psysh/src/Command/BufferCommand.php:55:            $output->writeln($this->formatLines($buf, 'urgent'), ShellOutput::NUMBER_LINES);
vendor/psy/psysh/src/Command/BufferCommand.php:57:            $output->writeln($this->formatLines($buf), ShellOutput::NUMBER_LINES);
vendor/psy/psysh/src/Command/ListCommand/TraitEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/TraitEnumerator.php:39:        //     ls --traits Foo
vendor/psy/psysh/src/Command/ListCommand/TraitEnumerator.php:48:        if (!$input->getOption('traits')) {
vendor/psy/psysh/src/Command/ListCommand/TraitEnumerator.php:52:        $traits = $this->prepareTraits(get_declared_traits());
vendor/psy/psysh/src/Command/ListCommand/TraitEnumerator.php:78:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/TraitEnumerator.php:82:                    'value' => $this->presentSignature($name),
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:41:        $this->context = $context;
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:56:        if (!$input->getOption('vars')) {
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:60:        $showAll   = $input->getOption('all');
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:61:        $variables = $this->prepareVariables($this->getVariables($showAll));
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:81:        $scopeVars = $this->context->getAll();
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:88:                    return $aIndex - $bIndex;
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:95:                return -1;
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:125:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/VariableEnumerator.php:130:                    'value' => $this->presentRef($val),
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:40:        if (!$input->getOption('constants')) {
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:44:        $noInherit = $input->getOption('no-inherit');
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:45:        $constants = $this->prepareConstants($this->getConstants($reflector, $noInherit));
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:52:        $ret[$this->getKindLabel($reflector)] = $constants;
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:67:        $className = $reflector->getName();
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:70:        foreach ($reflector->getConstants() as $name => $constant) {
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:73:            if ($noInherit && $constReflector->getDeclaringClass()->getName() !== $className) {
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:98:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:102:                    'value' => $this->presentRef($constant->getValue()),
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:119:        if ($reflector->isInterface()) {
vendor/psy/psysh/src/Command/ListCommand/ClassConstantEnumerator.php:121:        } elseif (method_exists($reflector, 'isTrait') && $reflector->isTrait()) {
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:30:        //     ls --classes Foo
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:38:        $user     = $input->getOption('user');
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:39:        $internal = $input->getOption('internal');
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:45:        if ($input->getOption('classes')) {
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:46:            $ret = array_merge($ret, $this->filterClasses('Classes', get_declared_classes(), $internal, $user));
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:49:        if ($input->getOption('interfaces')) {
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:50:            $ret = array_merge($ret, $this->filterClasses('Interfaces', get_declared_interfaces(), $internal, $user));
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:53:        if ($input->getOption('traits')) {
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:54:            $ret = array_merge($ret, $this->filterClasses('Traits', get_declared_traits(), $internal, $user));
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:64:     * user-defined classes as appropriate.
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:81:                return $refl->isInternal();
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:89:                return !$refl->isInternal();
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:115:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/ClassEnumerator.php:119:                    'value' => $this->presentSignature($name),
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:38:        if (!$input->getOption('methods')) {
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:42:        $showAll   = $input->getOption('all');
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:43:        $noInherit = $input->getOption('no-inherit');
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:44:        $methods   = $this->prepareMethods($this->getMethods($showAll, $reflector, $noInherit));
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:51:        $ret[$this->getKindLabel($reflector)] = $methods;
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:67:        $className = $reflector->getName();
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:70:        foreach ($reflector->getMethods() as $name => $method) {
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:71:            if ($noInherit && $method->getDeclaringClass()->getName() !== $className) {
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:75:            if ($showAll || $method->isPublic()) {
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:76:                $methods[$method->getName()] = $method;
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:98:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:101:                    'style' => $this->getVisibilityStyle($method),
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:102:                    'value' => $this->presentSignature($method),
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:119:        if ($reflector->isInterface()) {
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:121:        } elseif (method_exists($reflector, 'isTrait') && $reflector->isTrait()) {
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:137:        if ($method->isPublic()) {
vendor/psy/psysh/src/Command/ListCommand/MethodEnumerator.php:139:        } elseif ($method->isProtected()) {
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:30:        //     ls --functions Foo
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:39:        if (!$input->getOption('functions')) {
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:43:        if ($input->getOption('user')) {
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:45:            $functions = $this->getFunctions('user');
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:46:        } elseif ($input->getOption('internal')) {
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:48:            $functions = $this->getFunctions('internal');
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:51:            $functions = $this->getFunctions();
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:54:        $functions = $this->prepareFunctions($functions);
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:101:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/FunctionEnumerator.php:105:                    'value' => $this->presentSignature($name),
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:38:        if (!$input->getOption('properties')) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:42:        $showAll    = $input->getOption('all');
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:43:        $noInherit  = $input->getOption('no-inherit');
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:44:        $properties = $this->prepareProperties($this->getProperties($showAll, $reflector, $noInherit), $target);
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:51:        $ret[$this->getKindLabel($reflector)] = $properties;
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:67:        $className = $reflector->getName();
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:70:        foreach ($reflector->getProperties() as $property) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:71:            if ($noInherit && $property->getDeclaringClass()->getName() !== $className) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:75:            if ($showAll || $property->isPublic()) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:76:                $properties[$property->getName()] = $property;
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:98:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:102:                    'style' => $this->getVisibilityStyle($property),
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:103:                    'value' => $this->presentValue($property, $target),
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:120:        if ($reflector->isInterface()) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:122:        } elseif (method_exists($reflector, 'isTrait') && $reflector->isTrait()) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:138:        if ($property->isPublic()) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:140:        } elseif ($property->isProtected()) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:162:                $props = $refl->getDefaultProperties();
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:163:                if (array_key_exists($property->name, $props)) {
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:164:                    $suffix = $property->isStatic() ? '' : ' <aside>(default)</aside>';
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:166:                    return $this->presentRef($props[$property->name]) . $suffix;
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:175:        $property->setAccessible(true);
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:176:        $value = $property->getValue($target);
vendor/psy/psysh/src/Command/ListCommand/PropertyEnumerator.php:178:        return $this->presentRef($value);
vendor/psy/psysh/src/Command/ListCommand/Enumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/Enumerator.php:44:        $this->filter = new FilterOptions();
vendor/psy/psysh/src/Command/ListCommand/Enumerator.php:45:        $this->presenter = $presenter;
vendor/psy/psysh/src/Command/ListCommand/Enumerator.php:59:        $this->filter->bind($input);
vendor/psy/psysh/src/Command/ListCommand/Enumerator.php:61:        return $this->listItems($input, $reflector, $target);
vendor/psy/psysh/src/Command/ListCommand/Enumerator.php:89:        return $this->filter->match($name);
vendor/psy/psysh/src/Command/ListCommand/Enumerator.php:94:        return $this->presenter->presentRef($value);
vendor/psy/psysh/src/Command/ListCommand/GlobalVariableEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/GlobalVariableEnumerator.php:32:        if (!$input->getOption('globals')) {
vendor/psy/psysh/src/Command/ListCommand/GlobalVariableEnumerator.php:36:        $globals = $this->prepareGlobals($this->getGlobals());
vendor/psy/psysh/src/Command/ListCommand/GlobalVariableEnumerator.php:80:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/GlobalVariableEnumerator.php:85:                    'value' => $this->presentRef($value),
vendor/psy/psysh/src/Command/ListCommand/InterfaceEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/InterfaceEnumerator.php:39:        //     ls --interfaces Foo
vendor/psy/psysh/src/Command/ListCommand/InterfaceEnumerator.php:48:        if (!$input->getOption('interfaces')) {
vendor/psy/psysh/src/Command/ListCommand/InterfaceEnumerator.php:52:        $interfaces = $this->prepareInterfaces(get_declared_interfaces());
vendor/psy/psysh/src/Command/ListCommand/InterfaceEnumerator.php:78:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/InterfaceEnumerator.php:82:                    'value' => $this->presentSignature($name),
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:30:        //     ls --constants Foo
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:38:        if (!$input->getOption('constants')) {
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:42:        $user     = $input->getOption('user');
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:43:        $internal = $input->getOption('internal');
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:44:        $category = $input->getOption('category');
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:49:            $ret['User Constants'] = $this->getConstants('user');
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:53:            $ret['Interal Constants'] = $this->getConstants('internal');
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:58:            $ret[$label] = $this->getConstants($category);
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:62:            $ret['Constants'] = $this->getConstants();
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:72:     * category is "internal", include all non-user-defined constants.
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:111:            if ($this->showItem($name)) {
vendor/psy/psysh/src/Command/ListCommand/ConstantEnumerator.php:115:                    'value' => $this->presentRef($constants[$name]),
vendor/psy/psysh/src/Command/SudoCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/SudoCommand.php:39:        $this->parser = $parserFactory->createParser();
vendor/psy/psysh/src/Command/SudoCommand.php:41:        $this->traverser = new NodeTraverser();
vendor/psy/psysh/src/Command/SudoCommand.php:42:        $this->traverser->addVisitor(new SudoVisitor());
vendor/psy/psysh/src/Command/SudoCommand.php:44:        $this->printer = new Printer();
vendor/psy/psysh/src/Command/SudoCommand.php:56:        $this->readline = $readline;
vendor/psy/psysh/src/Command/SudoCommand.php:65:            ->setName('sudo')
vendor/psy/psysh/src/Command/SudoCommand.php:66:            ->setDefinition([
vendor/psy/psysh/src/Command/SudoCommand.php:69:            ->setDescription('Evaluate PHP code, bypassing visibility restrictions.')
vendor/psy/psysh/src/Command/SudoCommand.php:70:            ->setHelp(
vendor/psy/psysh/src/Command/SudoCommand.php:75:<return>>>> $sekret->whisper("hi")</return>
vendor/psy/psysh/src/Command/SudoCommand.php:78:<return>>>> sudo $sekret->whisper("hi")</return>
vendor/psy/psysh/src/Command/SudoCommand.php:81:<return>>>> $sekret->word</return>
vendor/psy/psysh/src/Command/SudoCommand.php:84:<return>>>> sudo $sekret->word</return>
vendor/psy/psysh/src/Command/SudoCommand.php:87:<return>>>> $sekret->word = "please"</return>
vendor/psy/psysh/src/Command/SudoCommand.php:90:<return>>>> sudo $sekret->word = "please"</return>
vendor/psy/psysh/src/Command/SudoCommand.php:101:        $code = $input->getArgument('code');
vendor/psy/psysh/src/Command/SudoCommand.php:105:            $history = $this->readline->listHistory();
vendor/psy/psysh/src/Command/SudoCommand.php:109:            $code = $history[count($history) - 2];
vendor/psy/psysh/src/Command/SudoCommand.php:116:        $nodes = $this->traverser->traverse($this->parse($code));
vendor/psy/psysh/src/Command/SudoCommand.php:118:        $sudoCode = $this->printer->prettyPrint($nodes);
vendor/psy/psysh/src/Command/SudoCommand.php:119:        $shell = $this->getApplication();
vendor/psy/psysh/src/Command/SudoCommand.php:120:        $shell->addCode($sudoCode, !$shell->hasCode());
vendor/psy/psysh/src/Command/SudoCommand.php:133:            return $this->parser->parse($code);
vendor/psy/psysh/src/Command/SudoCommand.php:135:            if (strpos($e->getMessage(), 'unexpected EOF') === false) {
vendor/psy/psysh/src/Command/SudoCommand.php:140:            return $this->parser->parse($code . ';');
vendor/psy/psysh/src/Command/HelpCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/HelpCommand.php:22: * Lists available commands, and gives command-specific help when asked nicely.
vendor/psy/psysh/src/Command/HelpCommand.php:34:            ->setName('help')
vendor/psy/psysh/src/Command/HelpCommand.php:35:            ->setAliases(['?'])
vendor/psy/psysh/src/Command/HelpCommand.php:36:            ->setDefinition([
vendor/psy/psysh/src/Command/HelpCommand.php:39:            ->setDescription('Show a list of commands. Type `help [foo]` for information about [foo].')
vendor/psy/psysh/src/Command/HelpCommand.php:40:            ->setHelp('My. How meta.');
vendor/psy/psysh/src/Command/HelpCommand.php:50:        $this->command = $command;
vendor/psy/psysh/src/Command/HelpCommand.php:58:        if ($this->command !== null) {
vendor/psy/psysh/src/Command/HelpCommand.php:60:            $output->page($this->command->asText());
vendor/psy/psysh/src/Command/HelpCommand.php:61:            $this->command = null;
vendor/psy/psysh/src/Command/HelpCommand.php:62:        } elseif ($name = $input->getArgument('command_name')) {
vendor/psy/psysh/src/Command/HelpCommand.php:64:            $output->page($this->getApplication()->get($name)->asText());
vendor/psy/psysh/src/Command/HelpCommand.php:67:            $commands = $this->getApplication()->all();
vendor/psy/psysh/src/Command/HelpCommand.php:69:            $table = $this->getTable($output);
vendor/psy/psysh/src/Command/HelpCommand.php:72:                if ($name !== $command->getName()) {
vendor/psy/psysh/src/Command/HelpCommand.php:76:                if ($command->getAliases()) {
vendor/psy/psysh/src/Command/HelpCommand.php:77:                    $aliases = sprintf('<comment>Aliases:</comment> %s', implode(', ', $command->getAliases()));
vendor/psy/psysh/src/Command/HelpCommand.php:82:                $table->addRow([
vendor/psy/psysh/src/Command/HelpCommand.php:84:                    $command->getDescription(),
vendor/psy/psysh/src/Command/HelpCommand.php:89:            $output->startPaging();
vendor/psy/psysh/src/Command/HelpCommand.php:91:                $table->render($output);
vendor/psy/psysh/src/Command/HelpCommand.php:93:                $table->render();
vendor/psy/psysh/src/Command/HelpCommand.php:95:            $output->stopPaging();
vendor/psy/psysh/src/Command/HistoryCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/HistoryCommand.php:37:        $this->filter = new FilterOptions();
vendor/psy/psysh/src/Command/HistoryCommand.php:49:        $this->readline = $readline;
vendor/psy/psysh/src/Command/HistoryCommand.php:60:            ->setName('history')
vendor/psy/psysh/src/Command/HistoryCommand.php:61:            ->setAliases(['hist'])
vendor/psy/psysh/src/Command/HistoryCommand.php:62:            ->setDefinition([
vendor/psy/psysh/src/Command/HistoryCommand.php:71:                new InputOption('no-numbers',  'N', InputOption::VALUE_NONE,     'Omit line numbers.'),
vendor/psy/psysh/src/Command/HistoryCommand.php:77:            ->setDescription('Show the Psy Shell history.')
vendor/psy/psysh/src/Command/HistoryCommand.php:78:            ->setHelp(
vendor/psy/psysh/src/Command/HistoryCommand.php:83:<return>>>> history --grep /[bB]acon/</return>
vendor/psy/psysh/src/Command/HistoryCommand.php:84:<return>>>> history --show 0..10 --replay</return>
vendor/psy/psysh/src/Command/HistoryCommand.php:85:<return>>>> history --clear</return>
vendor/psy/psysh/src/Command/HistoryCommand.php:86:<return>>>> history --tail 1000 --save somefile.txt</return>
vendor/psy/psysh/src/Command/HistoryCommand.php:96:        $this->validateOnlyOne($input, ['show', 'head', 'tail']);
vendor/psy/psysh/src/Command/HistoryCommand.php:97:        $this->validateOnlyOne($input, ['save', 'replay', 'clear']);
vendor/psy/psysh/src/Command/HistoryCommand.php:99:        $history = $this->getHistorySlice(
vendor/psy/psysh/src/Command/HistoryCommand.php:100:            $input->getOption('show'),
vendor/psy/psysh/src/Command/HistoryCommand.php:101:            $input->getOption('head'),
vendor/psy/psysh/src/Command/HistoryCommand.php:102:            $input->getOption('tail')
vendor/psy/psysh/src/Command/HistoryCommand.php:106:        $this->filter->bind($input);
vendor/psy/psysh/src/Command/HistoryCommand.php:107:        if ($this->filter->hasFilter()) {
vendor/psy/psysh/src/Command/HistoryCommand.php:111:                if ($this->filter->match($line, $matches)) {
vendor/psy/psysh/src/Command/HistoryCommand.php:125:        if ($save = $input->getOption('save')) {
vendor/psy/psysh/src/Command/HistoryCommand.php:126:            $output->writeln(sprintf('Saving history in %s...', $save));
vendor/psy/psysh/src/Command/HistoryCommand.php:128:            $output->writeln('<info>History saved.</info>');
vendor/psy/psysh/src/Command/HistoryCommand.php:129:        } elseif ($input->getOption('replay')) {
vendor/psy/psysh/src/Command/HistoryCommand.php:130:            if (!($input->getOption('show') || $input->getOption('head') || $input->getOption('tail'))) {
vendor/psy/psysh/src/Command/HistoryCommand.php:131:                throw new \InvalidArgumentException('You must limit history via --head, --tail or --show before replaying');
vendor/psy/psysh/src/Command/HistoryCommand.php:135:            $output->writeln(sprintf('Replaying %d line%s of history', $count, ($count !== 1) ? 's' : ''));
vendor/psy/psysh/src/Command/HistoryCommand.php:136:            $this->getApplication()->addInput($history);
vendor/psy/psysh/src/Command/HistoryCommand.php:137:        } elseif ($input->getOption('clear')) {
vendor/psy/psysh/src/Command/HistoryCommand.php:138:            $this->clearHistory();
vendor/psy/psysh/src/Command/HistoryCommand.php:139:            $output->writeln('<info>History cleared.</info>');
vendor/psy/psysh/src/Command/HistoryCommand.php:141:            $type = $input->getOption('no-numbers') ? 0 : ShellOutput::NUMBER_LINES;
vendor/psy/psysh/src/Command/HistoryCommand.php:146:            $output->page($highlighted ?: $history, $type);
vendor/psy/psysh/src/Command/HistoryCommand.php:185:        $history = $this->readline->listHistory();
vendor/psy/psysh/src/Command/HistoryCommand.php:191:            list($start, $end) = $this->extractRange($show);
vendor/psy/psysh/src/Command/HistoryCommand.php:192:            $length = $end - $start;
vendor/psy/psysh/src/Command/HistoryCommand.php:195:                throw new \InvalidArgumentException('Please specify an integer argument for --head');
vendor/psy/psysh/src/Command/HistoryCommand.php:202:                throw new \InvalidArgumentException('Please specify an integer argument for --tail');
vendor/psy/psysh/src/Command/HistoryCommand.php:205:            $start  = count($history) - $tail;
vendor/psy/psysh/src/Command/HistoryCommand.php:224:            if ($input->getOption($opt)) {
vendor/psy/psysh/src/Command/HistoryCommand.php:230:            throw new \InvalidArgumentException('Please specify only one of --' . implode(', --', $options));
vendor/psy/psysh/src/Command/HistoryCommand.php:239:        $this->readline->clearHistory();
vendor/psy/psysh/src/Command/ListCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ListCommand.php:48:        $this->presenter = $presenter;
vendor/psy/psysh/src/Command/ListCommand.php:59:            ->setName('ls')
vendor/psy/psysh/src/Command/ListCommand.php:60:            ->setAliases(['list', 'dir'])
vendor/psy/psysh/src/Command/ListCommand.php:61:            ->setDefinition([
vendor/psy/psysh/src/Command/ListCommand.php:71:                new InputOption('no-inherit',  '',  InputOption::VALUE_NONE,     'Exclude inherited methods, properties and constants.'),
vendor/psy/psysh/src/Command/ListCommand.php:82:                new InputOption('user',        'u', InputOption::VALUE_NONE,     'Limit to user-defined constants, functions and classes.'),
vendor/psy/psysh/src/Command/ListCommand.php:88:            ->setDescription('List local, instance or class variables, methods and constants.')
vendor/psy/psysh/src/Command/ListCommand.php:89:            ->setHelp(
vendor/psy/psysh/src/Command/ListCommand.php:103:<return>>>> ls -k --grep mongo -i</return>
vendor/psy/psysh/src/Command/ListCommand.php:104:<return>>>> ls -al ReflectionClass</return>
vendor/psy/psysh/src/Command/ListCommand.php:105:<return>>>> ls --constants --category date</return>
vendor/psy/psysh/src/Command/ListCommand.php:106:<return>>>> ls -l --functions --grep /^array_.*/</return>
vendor/psy/psysh/src/Command/ListCommand.php:107:<return>>>> ls -l --properties new DateTime()</return>
vendor/psy/psysh/src/Command/ListCommand.php:117:        $this->validateInput($input);
vendor/psy/psysh/src/Command/ListCommand.php:118:        $this->initEnumerators();
vendor/psy/psysh/src/Command/ListCommand.php:120:        $method = $input->getOption('long') ? 'writeLong' : 'write';
vendor/psy/psysh/src/Command/ListCommand.php:122:        if ($target = $input->getArgument('target')) {
vendor/psy/psysh/src/Command/ListCommand.php:123:            list($target, $reflector) = $this->getTargetAndReflector($target);
vendor/psy/psysh/src/Command/ListCommand.php:128:        // @todo something cleaner than this :-/
vendor/psy/psysh/src/Command/ListCommand.php:129:        if ($input->getOption('long')) {
vendor/psy/psysh/src/Command/ListCommand.php:130:            $output->startPaging();
vendor/psy/psysh/src/Command/ListCommand.php:133:        foreach ($this->enumerators as $enumerator) {
vendor/psy/psysh/src/Command/ListCommand.php:134:            $this->$method($output, $enumerator->enumerate($input, $reflector, $target));
vendor/psy/psysh/src/Command/ListCommand.php:137:        if ($input->getOption('long')) {
vendor/psy/psysh/src/Command/ListCommand.php:138:            $output->stopPaging();
vendor/psy/psysh/src/Command/ListCommand.php:143:            $this->setCommandScopeVariables($reflector);
vendor/psy/psysh/src/Command/ListCommand.php:152:        if (!isset($this->enumerators)) {
vendor/psy/psysh/src/Command/ListCommand.php:153:            $mgr = $this->presenter;
vendor/psy/psysh/src/Command/ListCommand.php:155:            $this->enumerators = [
vendor/psy/psysh/src/Command/ListCommand.php:163:                new VariableEnumerator($mgr, $this->context),
vendor/psy/psysh/src/Command/ListCommand.php:182:            $output->writeln(sprintf('<strong>%s</strong>: %s', $label, implode(', ', $names)));
vendor/psy/psysh/src/Command/ListCommand.php:200:        $table = $this->getTable($output);
vendor/psy/psysh/src/Command/ListCommand.php:203:            $output->writeln('');
vendor/psy/psysh/src/Command/ListCommand.php:204:            $output->writeln(sprintf('<strong>%s:</strong>', $label));
vendor/psy/psysh/src/Command/ListCommand.php:206:            $table->setRows([]);
vendor/psy/psysh/src/Command/ListCommand.php:208:                $table->addRow([$this->formatItemName($item), $item['value']]);
vendor/psy/psysh/src/Command/ListCommand.php:212:                $table->render($output);
vendor/psy/psysh/src/Command/ListCommand.php:214:                $table->render();
vendor/psy/psysh/src/Command/ListCommand.php:240:        if (!$input->getArgument('target')) {
vendor/psy/psysh/src/Command/ListCommand.php:242:            foreach (['properties', 'methods', 'no-inherit'] as $option) {
vendor/psy/psysh/src/Command/ListCommand.php:243:                if ($input->getOption($option)) {
vendor/psy/psysh/src/Command/ListCommand.php:244:                    throw new RuntimeException('--' . $option . ' does not make sense without a specified target');
vendor/psy/psysh/src/Command/ListCommand.php:249:                if ($input->getOption($option)) {
vendor/psy/psysh/src/Command/ListCommand.php:254:            // default to --vars if no other options are passed
vendor/psy/psysh/src/Command/ListCommand.php:255:            $input->setOption('vars', true);
vendor/psy/psysh/src/Command/ListCommand.php:259:                if ($input->getOption($option)) {
vendor/psy/psysh/src/Command/ListCommand.php:260:                    throw new RuntimeException('--' . $option . ' does not make sense with a specified target');
vendor/psy/psysh/src/Command/ListCommand.php:265:                if ($input->getOption($option)) {
vendor/psy/psysh/src/Command/ListCommand.php:270:            // default to --constants --properties --methods if no other options are passed
vendor/psy/psysh/src/Command/ListCommand.php:271:            $input->setOption('constants',  true);
vendor/psy/psysh/src/Command/ListCommand.php:272:            $input->setOption('properties', true);
vendor/psy/psysh/src/Command/ListCommand.php:273:            $input->setOption('methods',    true);
vendor/psy/psysh/src/Command/ExitCommand.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Command/ExitCommand.php:31:            ->setName('exit')
vendor/psy/psysh/src/Command/ExitCommand.php:32:            ->setAliases(['quit', 'q'])
vendor/psy/psysh/src/Command/ExitCommand.php:33:            ->setDefinition([])
vendor/psy/psysh/src/Command/ExitCommand.php:34:            ->setDescription('End the current session and return to caller.')
vendor/psy/psysh/src/Command/ExitCommand.php:35:            ->setHelp(
vendor/psy/psysh/src/ParserFactory.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/ParserFactory.php:57:        if ($this->hasKindsSupport()) {
vendor/psy/psysh/src/ParserFactory.php:71:        if ($this->hasKindsSupport()) {
vendor/psy/psysh/src/ParserFactory.php:74:            $kind = $kind ?: $this->getDefaultKind();
vendor/psy/psysh/src/ParserFactory.php:80:            $parser = $originalFactory->create(constant('PhpParser\ParserFactory::' . $kind));
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:27:        return version_compare(Shell::VERSION, $this->getLatest(), '>=');
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:35:        if (!isset($this->latest)) {
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:36:            $this->setLatest($this->getVersionFromTag());
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:39:        return $this->latest;
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:47:        $this->latest = $version;
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:55:        $contents = $this->fetchLatestRelease();
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:56:        if (!$contents || !isset($contents->tag_name)) {
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:59:        $this->setLatest($contents->tag_name);
vendor/psy/psysh/src/VersionUpdater/GitHubChecker.php:61:        return $this->getLatest();
vendor/psy/psysh/src/VersionUpdater/Checker.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:23:        $this->cacheFile = $cacheFile;
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:24:        $this->interval  = $interval;
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:30:        $cached = json_decode(@file_get_contents($this->cacheFile, false));
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:31:        if ($cached && isset($cached->last_check) && isset($cached->release)) {
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:33:            $lastCheck = new \DateTime($cached->last_check);
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:34:            if ($lastCheck >= $now->sub($this->getDateInterval())) {
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:35:                return $cached->release;
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:41:        if ($release && isset($release->tag_name)) {
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:42:            $this->updateCache($release);
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:50:        switch ($this->interval) {
vendor/psy/psysh/src/VersionUpdater/IntervalChecker.php:67:        file_put_contents($this->cacheFile, json_encode($data));
vendor/psy/psysh/src/VersionUpdater/NoopChecker.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Input/FilterOptions.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Input/FilterOptions.php:20: * Parse, validate and match --grep, --insensitive and --invert command options.
vendor/psy/psysh/src/Input/FilterOptions.php:38:            new InputOption('insensitive', 'i', InputOption::VALUE_NONE,     'Case-insensitive search (requires --grep).'),
vendor/psy/psysh/src/Input/FilterOptions.php:39:            new InputOption('invert',      'v', InputOption::VALUE_NONE,     'Inverted search (requires --grep).'),
vendor/psy/psysh/src/Input/FilterOptions.php:50:        $this->validateInput($input);
vendor/psy/psysh/src/Input/FilterOptions.php:52:        if (!$pattern = $input->getOption('grep')) {
vendor/psy/psysh/src/Input/FilterOptions.php:53:            $this->filter = false;
vendor/psy/psysh/src/Input/FilterOptions.php:58:        if (!$this->stringIsRegex($pattern)) {
vendor/psy/psysh/src/Input/FilterOptions.php:62:        if ($insensitive = $input->getOption('insensitive')) {
vendor/psy/psysh/src/Input/FilterOptions.php:66:        $this->validateRegex($pattern);
vendor/psy/psysh/src/Input/FilterOptions.php:68:        $this->filter      = true;
vendor/psy/psysh/src/Input/FilterOptions.php:69:        $this->pattern     = $pattern;
vendor/psy/psysh/src/Input/FilterOptions.php:70:        $this->insensitive = $insensitive;
vendor/psy/psysh/src/Input/FilterOptions.php:71:        $this->invert      = $input->getOption('invert');
vendor/psy/psysh/src/Input/FilterOptions.php:81:        return $this->filter;
vendor/psy/psysh/src/Input/FilterOptions.php:94:        return $this->filter === false || (preg_match($this->pattern, $string, $matches) xor $this->invert);
vendor/psy/psysh/src/Input/FilterOptions.php:106:        if (!$input->getOption('grep')) {
vendor/psy/psysh/src/Input/FilterOptions.php:108:                if ($input->getOption($option)) {
vendor/psy/psysh/src/Input/FilterOptions.php:109:                    throw new RuntimeException('--' . $option . ' does not make sense without --grep');
vendor/psy/psysh/src/Input/FilterOptions.php:124:        return substr($string, 0, 1) === '/' && substr($string, -1) === '/' && strlen($string) >= 3;
vendor/psy/psysh/src/Input/FilterOptions.php:141:            throw new RuntimeException(str_replace('preg_match(): ', 'Invalid regular expression: ', $e->getRawMessage()));
vendor/psy/psysh/src/Input/CodeArgument.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Input/SilentInput.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Input/SilentInput.php:17: * Silent input is generally used for non-user-generated code, such as the
vendor/psy/psysh/src/Input/SilentInput.php:32:        $this->inputString = $inputString;
vendor/psy/psysh/src/Input/SilentInput.php:42:        return $this->inputString;
vendor/psy/psysh/src/Input/ShellInput.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Input/ShellInput.php:40:        $this->tokenPairs = $this->tokenize($input);
vendor/psy/psysh/src/Input/ShellInput.php:52:        if ($definition->getArgumentCount() > 0) {
vendor/psy/psysh/src/Input/ShellInput.php:53:            $args    = $definition->getArguments();
vendor/psy/psysh/src/Input/ShellInput.php:57:                    $msg = sprintf('Unexpected CodeArgument before the final position: %s', $arg->getName());
vendor/psy/psysh/src/Input/ShellInput.php:67:        $this->hasCodeArgument = $hasCodeArgument;
vendor/psy/psysh/src/Input/ShellInput.php:93:                    $match[1] . $match[2] . stripcslashes(str_replace(['"\'', '\'"', '\'\'', '""'], '', substr($match[3], 1, strlen($match[3]) - 2))),
vendor/psy/psysh/src/Input/ShellInput.php:98:                    stripcslashes(substr($match[0], 1, strlen($match[0]) - 2)),
vendor/psy/psysh/src/Input/ShellInput.php:125:        $this->parsed = $this->tokenPairs;
vendor/psy/psysh/src/Input/ShellInput.php:126:        while (null !== $tokenPair = array_shift($this->parsed)) {
vendor/psy/psysh/src/Input/ShellInput.php:132:                $this->parseShellArgument($token, $rest);
vendor/psy/psysh/src/Input/ShellInput.php:133:            } elseif ($parseOptions && '--' === $token) {
vendor/psy/psysh/src/Input/ShellInput.php:135:            } elseif ($parseOptions && 0 === strpos($token, '--')) {
vendor/psy/psysh/src/Input/ShellInput.php:136:                $this->parseLongOption($token);
vendor/psy/psysh/src/Input/ShellInput.php:137:            } elseif ($parseOptions && '-' === $token[0] && '-' !== $token) {
vendor/psy/psysh/src/Input/ShellInput.php:138:                $this->parseShortOption($token);
vendor/psy/psysh/src/Input/ShellInput.php:140:                $this->parseShellArgument($token, $rest);
vendor/psy/psysh/src/Input/ShellInput.php:155:        $c = count($this->arguments);
vendor/psy/psysh/src/Input/ShellInput.php:158:        if ($this->definition->hasArgument($c)) {
vendor/psy/psysh/src/Input/ShellInput.php:159:            $arg = $this->definition->getArgument($c);
vendor/psy/psysh/src/Input/ShellInput.php:164:                $this->parsed = [];
vendor/psy/psysh/src/Input/ShellInput.php:165:                $this->arguments[$arg->getName()] = $rest;
vendor/psy/psysh/src/Input/ShellInput.php:167:                $this->arguments[$arg->getName()] = $arg->isArray() ? [$token] : $token;
vendor/psy/psysh/src/Input/ShellInput.php:178:        if ($this->definition->hasArgument($c - 1) && $this->definition->getArgument($c - 1)->isArray()) {
vendor/psy/psysh/src/Input/ShellInput.php:179:            $arg = $this->definition->getArgument($c - 1);
vendor/psy/psysh/src/Input/ShellInput.php:180:            $this->arguments[$arg->getName()][] = $token;
vendor/psy/psysh/src/Input/ShellInput.php:186:        $all = $this->definition->getArguments();
vendor/psy/psysh/src/Input/ShellInput.php:208:            if ($this->definition->hasShortcut($name[0]) && $this->definition->getOptionForShortcut($name[0])->acceptValue()) {
vendor/psy/psysh/src/Input/ShellInput.php:210:                $this->addShortOption($name[0], substr($name, 1));
vendor/psy/psysh/src/Input/ShellInput.php:212:                $this->parseShortOptionSet($name);
vendor/psy/psysh/src/Input/ShellInput.php:215:            $this->addShortOption($name, null);
vendor/psy/psysh/src/Input/ShellInput.php:230:            if (!$this->definition->hasShortcut($name[$i])) {
vendor/psy/psysh/src/Input/ShellInput.php:231:                throw new \RuntimeException(sprintf('The "-%s" option does not exist.', $name[$i]));
vendor/psy/psysh/src/Input/ShellInput.php:234:            $option = $this->definition->getOptionForShortcut($name[$i]);
vendor/psy/psysh/src/Input/ShellInput.php:235:            if ($option->acceptValue()) {
vendor/psy/psysh/src/Input/ShellInput.php:236:                $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));
vendor/psy/psysh/src/Input/ShellInput.php:240:                $this->addLongOption($option->getName(), null);
vendor/psy/psysh/src/Input/ShellInput.php:261:                array_unshift($this->parsed, [$value, null]);
vendor/psy/psysh/src/Input/ShellInput.php:263:            $this->addLongOption(substr($name, 0, $pos), $value);
vendor/psy/psysh/src/Input/ShellInput.php:265:            $this->addLongOption($name, null);
vendor/psy/psysh/src/Input/ShellInput.php:279:        if (!$this->definition->hasShortcut($shortcut)) {
vendor/psy/psysh/src/Input/ShellInput.php:280:            throw new \RuntimeException(sprintf('The "-%s" option does not exist.', $shortcut));
vendor/psy/psysh/src/Input/ShellInput.php:283:        $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);
vendor/psy/psysh/src/Input/ShellInput.php:296:        if (!$this->definition->hasOption($name)) {
vendor/psy/psysh/src/Input/ShellInput.php:297:            throw new \RuntimeException(sprintf('The "--%s" option does not exist.', $name));
vendor/psy/psysh/src/Input/ShellInput.php:300:        $option = $this->definition->getOption($name);
vendor/psy/psysh/src/Input/ShellInput.php:302:        if (null !== $value && !$option->acceptValue()) {
vendor/psy/psysh/src/Input/ShellInput.php:303:            throw new \RuntimeException(sprintf('The "--%s" option does not accept a value.', $name));
vendor/psy/psysh/src/Input/ShellInput.php:306:        if (in_array($value, ['', null], true) && $option->acceptValue() && count($this->parsed)) {
vendor/psy/psysh/src/Input/ShellInput.php:309:            $next = array_shift($this->parsed);
vendor/psy/psysh/src/Input/ShellInput.php:311:            if ((isset($nextToken[0]) && '-' !== $nextToken[0]) || in_array($nextToken, ['', null], true)) {
vendor/psy/psysh/src/Input/ShellInput.php:314:                array_unshift($this->parsed, $next);
vendor/psy/psysh/src/Input/ShellInput.php:319:            if ($option->isValueRequired()) {
vendor/psy/psysh/src/Input/ShellInput.php:320:                throw new \RuntimeException(sprintf('The "--%s" option requires a value.', $name));
vendor/psy/psysh/src/Input/ShellInput.php:323:            if (!$option->isArray() && !$option->isValueOptional()) {
vendor/psy/psysh/src/Input/ShellInput.php:328:        if ($option->isArray()) {
vendor/psy/psysh/src/Input/ShellInput.php:329:            $this->options[$name][] = $value;
vendor/psy/psysh/src/Input/ShellInput.php:331:            $this->options[$name] = $value;
vendor/psy/psysh/src/Util/Mirror.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Util/Mirror.php:59:        } elseif ($filter & self::CONSTANT && $class->hasConstant($member)) {
vendor/psy/psysh/src/Util/Mirror.php:61:        } elseif ($filter & self::METHOD && $class->hasMethod($member)) {
vendor/psy/psysh/src/Util/Mirror.php:62:            return $class->getMethod($member);
vendor/psy/psysh/src/Util/Mirror.php:63:        } elseif ($filter & self::PROPERTY && $class->hasProperty($member)) {
vendor/psy/psysh/src/Util/Mirror.php:64:            return $class->getProperty($member);
vendor/psy/psysh/src/Util/Mirror.php:65:        } elseif ($filter & self::STATIC_PROPERTY && $class->hasProperty($member) && $class->getProperty($member)->isStatic()) {
vendor/psy/psysh/src/Util/Mirror.php:66:            return $class->getProperty($member);
vendor/psy/psysh/src/Util/Json.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Util/Str.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Util/Str.php:26:        | (?: M-(.) )
vendor/psy/psysh/src/Util/Str.php:44:     *      \240    Represents Meta-space (&nbsp in HTML).
vendor/psy/psysh/src/Util/Str.php:46:     *      \M-C    Represents character ‘C’ with the 8th bit set.
vendor/psy/psysh/src/Util/Str.php:86:        // \M-(.)
vendor/psy/psysh/src/Util/Docblock.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Util/Docblock.php:17: * Based on PHP-DocBlock-Parser by Paul Scott:
vendor/psy/psysh/src/Util/Docblock.php:19: * {@link http://www.github.com/icio/PHP-DocBlock-Parser}
vendor/psy/psysh/src/Util/Docblock.php:27:     * Tags in the docblock that have a whitespace-delimited number of parameters
vendor/psy/psysh/src/Util/Docblock.php:55:     * value within the tag-value array is an array in itself with keys as
vendor/psy/psysh/src/Util/Docblock.php:76:        $this->reflector = $reflector;
vendor/psy/psysh/src/Util/Docblock.php:77:        $this->setComment($reflector->getDocComment());
vendor/psy/psysh/src/Util/Docblock.php:87:        $this->desc    = '';
vendor/psy/psysh/src/Util/Docblock.php:88:        $this->tags    = [];
vendor/psy/psysh/src/Util/Docblock.php:89:        $this->comment = $comment;
vendor/psy/psysh/src/Util/Docblock.php:91:        $this->parseComment($comment);
vendor/psy/psysh/src/Util/Docblock.php:133:        $comment = substr($comment, 3, -2);
vendor/psy/psysh/src/Util/Docblock.php:146:        $b = -1;
vendor/psy/psysh/src/Util/Docblock.php:151:            } elseif ($b === -1) {
vendor/psy/psysh/src/Util/Docblock.php:164:                $this->desc = $body;
vendor/psy/psysh/src/Util/Docblock.php:183:                    $this->tags[$tag][] = array_combine(self::$vectors[$tag], $parts);
vendor/psy/psysh/src/Util/Docblock.php:186:                    $this->tags[$tag][] = $body;
vendor/psy/psysh/src/Util/Docblock.php:201:        return is_array($this->tags) && array_key_exists($tag, $this->tags);
vendor/psy/psysh/src/Util/Docblock.php:213:        return $this->hasTag($tag) ? $this->tags[$tag] : null;
vendor/psy/psysh/src/Util/Docblock.php:237:        if (preg_match('/^@[a-z0-9_]+/', $str, $matches)) {
vendor/psy/psysh/src/Configuration.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Configuration.php:112:        $this->setColorMode(self::COLOR_MODE_AUTO);
vendor/psy/psysh/src/Configuration.php:116:            $this->configFile = $config['configFile'];
vendor/psy/psysh/src/Configuration.php:118:            $this->configFile = $configFile;
vendor/psy/psysh/src/Configuration.php:131:        $this->loadConfig($config);
vendor/psy/psysh/src/Configuration.php:132:        $this->init();
vendor/psy/psysh/src/Configuration.php:148:        $this->hasReadline = function_exists('readline');
vendor/psy/psysh/src/Configuration.php:149:        $this->hasPcntl    = function_exists('pcntl_signal') && function_exists('posix_getpid');
vendor/psy/psysh/src/Configuration.php:151:        if ($configFile = $this->getConfigFile()) {
vendor/psy/psysh/src/Configuration.php:152:            $this->loadConfigFile($configFile);
vendor/psy/psysh/src/Configuration.php:155:        if (!$this->configFile && $localConfig = $this->getLocalConfigFile()) {
vendor/psy/psysh/src/Configuration.php:156:            $this->loadConfigFile($localConfig);
vendor/psy/psysh/src/Configuration.php:176:        if (isset($this->configFile)) {
vendor/psy/psysh/src/Configuration.php:177:            return $this->configFile;
vendor/psy/psysh/src/Configuration.php:180:        $files = ConfigPaths::getConfigFiles(['config.php', 'rc.php'], $this->configDir);
vendor/psy/psysh/src/Configuration.php:183:            if ($this->warnOnMultipleConfigs && count($files) > 1) {
vendor/psy/psysh/src/Configuration.php:219:                $this->$method($options[$option]);
vendor/psy/psysh/src/Configuration.php:228:            $this->setUseTabCompletion($options['tabCompletion']);
vendor/psy/psysh/src/Configuration.php:234:                $this->$method($options[$option]);
vendor/psy/psysh/src/Configuration.php:243:            $this->addMatchers($options['tabCompletionMatchers']);
vendor/psy/psysh/src/Configuration.php:254:     * @throws \InvalidArgumentException if the config file returns a non-array result
vendor/psy/psysh/src/Configuration.php:271:                $this->loadConfig($result);
vendor/psy/psysh/src/Configuration.php:285:        $this->defaultIncludes = $includes;
vendor/psy/psysh/src/Configuration.php:295:        return $this->defaultIncludes ?: [];
vendor/psy/psysh/src/Configuration.php:305:        $this->configDir = (string) $dir;
vendor/psy/psysh/src/Configuration.php:315:        return $this->configDir;
vendor/psy/psysh/src/Configuration.php:325:        $this->dataDir = (string) $dir;
vendor/psy/psysh/src/Configuration.php:335:        return $this->dataDir;
vendor/psy/psysh/src/Configuration.php:345:        $this->runtimeDir = (string) $dir;
vendor/psy/psysh/src/Configuration.php:358:        if (!isset($this->runtimeDir)) {
vendor/psy/psysh/src/Configuration.php:359:            $this->runtimeDir = ConfigPaths::getRuntimeDir();
vendor/psy/psysh/src/Configuration.php:362:        if (!is_dir($this->runtimeDir)) {
vendor/psy/psysh/src/Configuration.php:363:            mkdir($this->runtimeDir, 0700, true);
vendor/psy/psysh/src/Configuration.php:366:        return $this->runtimeDir;
vendor/psy/psysh/src/Configuration.php:376:        $this->historyFile = ConfigPaths::touchFileWithMkdir($file);
vendor/psy/psysh/src/Configuration.php:389:        if (isset($this->historyFile)) {
vendor/psy/psysh/src/Configuration.php:390:            return $this->historyFile;
vendor/psy/psysh/src/Configuration.php:393:        $files = ConfigPaths::getConfigFiles(['psysh_history', 'history'], $this->configDir);
vendor/psy/psysh/src/Configuration.php:396:            if ($this->warnOnMultipleConfigs && count($files) > 1) {
vendor/psy/psysh/src/Configuration.php:401:            $this->setHistoryFile($files[0]);
vendor/psy/psysh/src/Configuration.php:404:            $dir = $this->configDir ?: ConfigPaths::getCurrentConfigDir();
vendor/psy/psysh/src/Configuration.php:405:            $this->setHistoryFile($dir . '/psysh_history');
vendor/psy/psysh/src/Configuration.php:408:        return $this->historyFile;
vendor/psy/psysh/src/Configuration.php:418:        $this->historySize = (int) $value;
vendor/psy/psysh/src/Configuration.php:428:        return $this->historySize;
vendor/psy/psysh/src/Configuration.php:438:        $this->eraseDuplicates = (bool) $value;
vendor/psy/psysh/src/Configuration.php:448:        return $this->eraseDuplicates;
vendor/psy/psysh/src/Configuration.php:465:        return tempnam($this->getRuntimeDir(), $type . '_' . $pid . '_');
vendor/psy/psysh/src/Configuration.php:480:        return sprintf('%s/%s_%s', $this->getRuntimeDir(), $type, $pid);
vendor/psy/psysh/src/Configuration.php:490:        return $this->hasReadline;
vendor/psy/psysh/src/Configuration.php:500:        $this->useReadline = (bool) $useReadline;
vendor/psy/psysh/src/Configuration.php:513:        return isset($this->useReadline) ? ($this->hasReadline && $this->useReadline) : $this->hasReadline;
vendor/psy/psysh/src/Configuration.php:523:        $this->readline = $readline;
vendor/psy/psysh/src/Configuration.php:533:     *  * A transient array-based readline emulation.
vendor/psy/psysh/src/Configuration.php:539:        if (!isset($this->readline)) {
vendor/psy/psysh/src/Configuration.php:540:            $className = $this->getReadlineClass();
vendor/psy/psysh/src/Configuration.php:541:            $this->readline = new $className(
vendor/psy/psysh/src/Configuration.php:542:                $this->getHistoryFile(),
vendor/psy/psysh/src/Configuration.php:543:                $this->getHistorySize(),
vendor/psy/psysh/src/Configuration.php:544:                $this->getEraseDuplicates()
vendor/psy/psysh/src/Configuration.php:548:        return $this->readline;
vendor/psy/psysh/src/Configuration.php:560:        if ($this->useReadline()) {
vendor/psy/psysh/src/Configuration.php:582:        $this->useBracketedPaste = (bool) $useBracketedPaste;
vendor/psy/psysh/src/Configuration.php:603:        $supported = ($this->getReadlineClass() === 'Psy\Readline\GNUReadline');
vendor/psy/psysh/src/Configuration.php:605:        return $supported && $this->useBracketedPaste;
vendor/psy/psysh/src/Configuration.php:608:        // return isset($this->useBracketedPaste) ? ($supported && $this->useBracketedPaste) : $supported;
vendor/psy/psysh/src/Configuration.php:618:        return $this->hasPcntl;
vendor/psy/psysh/src/Configuration.php:628:        $this->usePcntl = (bool) $usePcntl;
vendor/psy/psysh/src/Configuration.php:641:        return isset($this->usePcntl) ? ($this->hasPcntl && $this->usePcntl) : $this->hasPcntl;
vendor/psy/psysh/src/Configuration.php:653:        $this->requireSemicolons = (bool) $requireSemicolons;
vendor/psy/psysh/src/Configuration.php:667:        return $this->requireSemicolons;
vendor/psy/psysh/src/Configuration.php:680:        $this->useUnicode = (bool) $useUnicode;
vendor/psy/psysh/src/Configuration.php:693:        if (isset($this->useUnicode)) {
vendor/psy/psysh/src/Configuration.php:694:            return $this->useUnicode;
vendor/psy/psysh/src/Configuration.php:710:        $this->errorLoggingLevel = (E_ALL | E_STRICT) & $errorLoggingLevel;
vendor/psy/psysh/src/Configuration.php:720:     * Set `errorLoggingLevel` to 0 to prevent logging non-thrown errors. Set it
vendor/psy/psysh/src/Configuration.php:724:     *     http://php.net/manual/en/function.error-reporting.php
vendor/psy/psysh/src/Configuration.php:730:        return $this->errorLoggingLevel;
vendor/psy/psysh/src/Configuration.php:740:        $this->cleaner = $cleaner;
vendor/psy/psysh/src/Configuration.php:752:        if (!isset($this->cleaner)) {
vendor/psy/psysh/src/Configuration.php:753:            $this->cleaner = new CodeCleaner();
vendor/psy/psysh/src/Configuration.php:756:        return $this->cleaner;
vendor/psy/psysh/src/Configuration.php:766:        $this->useTabCompletion = (bool) $useTabCompletion;
vendor/psy/psysh/src/Configuration.php:776:        $this->setUseTabCompletion($useTabCompletion);
vendor/psy/psysh/src/Configuration.php:789:        return isset($this->useTabCompletion) ? ($this->hasReadline && $this->useTabCompletion) : $this->hasReadline;
vendor/psy/psysh/src/Configuration.php:799:        return $this->useTabCompletion();
vendor/psy/psysh/src/Configuration.php:809:        $this->output = $output;
vendor/psy/psysh/src/Configuration.php:824:        if (!isset($this->output)) {
vendor/psy/psysh/src/Configuration.php:825:            $this->output = new ShellOutput(
vendor/psy/psysh/src/Configuration.php:827:                $this->getOutputDecorated(),
vendor/psy/psysh/src/Configuration.php:829:                $this->getPager()
vendor/psy/psysh/src/Configuration.php:833:        return $this->output;
vendor/psy/psysh/src/Configuration.php:839:     * @return null|bool 3-state boolean corresponding to the current color mode
vendor/psy/psysh/src/Configuration.php:843:        if ($this->colorMode() === self::COLOR_MODE_AUTO) {
vendor/psy/psysh/src/Configuration.php:845:        } elseif ($this->colorMode() === self::COLOR_MODE_FORCED) {
vendor/psy/psysh/src/Configuration.php:847:        } elseif ($this->colorMode() === self::COLOR_MODE_DISABLED) {
vendor/psy/psysh/src/Configuration.php:868:        $this->pager = $pager;
vendor/psy/psysh/src/Configuration.php:881:        if (!isset($this->pager) && $this->usePcntl()) {
vendor/psy/psysh/src/Configuration.php:884:                $this->pager = $pager;
vendor/psy/psysh/src/Configuration.php:887:                $this->pager = $less . ' -R -S -F -X';
vendor/psy/psysh/src/Configuration.php:891:        return $this->pager;
vendor/psy/psysh/src/Configuration.php:901:        $this->autoCompleter = $autoCompleter;
vendor/psy/psysh/src/Configuration.php:911:        if (!isset($this->autoCompleter)) {
vendor/psy/psysh/src/Configuration.php:912:            $this->autoCompleter = new AutoCompleter();
vendor/psy/psysh/src/Configuration.php:915:        return $this->autoCompleter;
vendor/psy/psysh/src/Configuration.php:940:        $this->newMatchers = array_merge($this->newMatchers, $matchers);
vendor/psy/psysh/src/Configuration.php:941:        if (isset($this->shell)) {
vendor/psy/psysh/src/Configuration.php:942:            $this->doAddMatchers();
vendor/psy/psysh/src/Configuration.php:952:        if (!empty($this->newMatchers)) {
vendor/psy/psysh/src/Configuration.php:953:            $this->shell->addMatchers($this->newMatchers);
vendor/psy/psysh/src/Configuration.php:954:            $this->newMatchers = [];
vendor/psy/psysh/src/Configuration.php:965:        $this->addMatchers($matchers);
vendor/psy/psysh/src/Configuration.php:980:        $this->newCommands = array_merge($this->newCommands, $commands);
vendor/psy/psysh/src/Configuration.php:981:        if (isset($this->shell)) {
vendor/psy/psysh/src/Configuration.php:982:            $this->doAddCommands();
vendor/psy/psysh/src/Configuration.php:992:        if (!empty($this->newCommands)) {
vendor/psy/psysh/src/Configuration.php:993:            $this->shell->addCommands($this->newCommands);
vendor/psy/psysh/src/Configuration.php:994:            $this->newCommands = [];
vendor/psy/psysh/src/Configuration.php:1005:        $this->shell = $shell;
vendor/psy/psysh/src/Configuration.php:1006:        $this->doAddCommands();
vendor/psy/psysh/src/Configuration.php:1007:        $this->doAddMatchers();
vendor/psy/psysh/src/Configuration.php:1020:        $this->manualDbFile = (string) $filename;
vendor/psy/psysh/src/Configuration.php:1030:        if (isset($this->manualDbFile)) {
vendor/psy/psysh/src/Configuration.php:1031:            return $this->manualDbFile;
vendor/psy/psysh/src/Configuration.php:1034:        $files = ConfigPaths::getDataFiles(['php_manual.sqlite'], $this->dataDir);
vendor/psy/psysh/src/Configuration.php:1036:            if ($this->warnOnMultipleConfigs && count($files) > 1) {
vendor/psy/psysh/src/Configuration.php:1041:            return $this->manualDbFile = $files[0];
vendor/psy/psysh/src/Configuration.php:1052:        if (!isset($this->manualDb)) {
vendor/psy/psysh/src/Configuration.php:1053:            $dbFile = $this->getManualDbFile();
vendor/psy/psysh/src/Configuration.php:1056:                    $this->manualDb = new \PDO('sqlite:' . $dbFile);
vendor/psy/psysh/src/Configuration.php:1058:                    if ($e->getMessage() === 'could not find driver') {
vendor/psy/psysh/src/Configuration.php:1067:        return $this->manualDb;
vendor/psy/psysh/src/Configuration.php:1077:        $this->getPresenter()->addCasters($casters);
vendor/psy/psysh/src/Configuration.php:1087:        if (!isset($this->presenter)) {
vendor/psy/psysh/src/Configuration.php:1088:            $this->presenter = new Presenter($this->getOutput()->getFormatter(), $this->forceArrayIndexes());
vendor/psy/psysh/src/Configuration.php:1091:        return $this->presenter;
vendor/psy/psysh/src/Configuration.php:1103:        $this->warnOnMultipleConfigs = (bool) $warnOnMultipleConfigs;
vendor/psy/psysh/src/Configuration.php:1120:        return $this->warnOnMultipleConfigs;
vendor/psy/psysh/src/Configuration.php:1137:            $this->colorMode = $colorMode;
vendor/psy/psysh/src/Configuration.php:1150:        return $this->colorMode;
vendor/psy/psysh/src/Configuration.php:1160:        $this->checker = $checker;
vendor/psy/psysh/src/Configuration.php:1172:        if (!isset($this->checker)) {
vendor/psy/psysh/src/Configuration.php:1173:            $interval = $this->getUpdateCheck();
vendor/psy/psysh/src/Configuration.php:1176:                    $this->checker = new GitHubChecker();
vendor/psy/psysh/src/Configuration.php:1182:                    $checkFile = $this->getUpdateCheckCacheFile();
vendor/psy/psysh/src/Configuration.php:1184:                        $this->checker = new NoopChecker();
vendor/psy/psysh/src/Configuration.php:1186:                        $this->checker = new IntervalChecker($checkFile, $interval);
vendor/psy/psysh/src/Configuration.php:1191:                    $this->checker = new NoopChecker();
vendor/psy/psysh/src/Configuration.php:1196:        return $this->checker;
vendor/psy/psysh/src/Configuration.php:1209:        return isset($this->updateCheck) ? $this->updateCheck : Checker::WEEKLY;
vendor/psy/psysh/src/Configuration.php:1233:        $this->updateCheck = $interval;
vendor/psy/psysh/src/Configuration.php:1243:        $dir = $this->configDir ?: ConfigPaths::getCurrentConfigDir();
vendor/psy/psysh/src/Configuration.php:1255:        $this->startupMessage = $message;
vendor/psy/psysh/src/Configuration.php:1265:        return $this->startupMessage;
vendor/psy/psysh/src/Configuration.php:1275:        $this->prompt = $prompt;
vendor/psy/psysh/src/Configuration.php:1285:        return $this->prompt;
vendor/psy/psysh/src/Configuration.php:1295:        return $this->forceArrayIndexes;
vendor/psy/psysh/src/Configuration.php:1305:        $this->forceArrayIndexes = $forceArrayIndexes;
vendor/psy/psysh/src/Formatter/CodeFormatter.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Formatter/CodeFormatter.php:20: * A pretty-printer for code.
vendor/psy/psysh/src/Formatter/CodeFormatter.php:40:        if ($fileName = $reflector->getFileName()) {
vendor/psy/psysh/src/Formatter/CodeFormatter.php:46:            $start = $reflector->getStartLine();
vendor/psy/psysh/src/Formatter/CodeFormatter.php:47:            $end   = $reflector->getEndLine() - $start;
vendor/psy/psysh/src/Formatter/CodeFormatter.php:50:            $colors      = $factory->getConsoleColor();
vendor/psy/psysh/src/Formatter/CodeFormatter.php:53:            return $highlighter->getCodeSnippet($file, $start, 0, $end);
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:72:        return $reflector->getName();
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:84:        if ($reflector instanceof \ReflectionClass && $reflector->isTrait()) {
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:94:        }, \Reflection::getModifierNames($reflector->getModifiers())));
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:112:        if ($reflector->isTrait()) {
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:115:            $chunks[] = $reflector->isInterface() ? 'interface' : 'class';
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:120:        if ($parent = $reflector->getParentClass()) {
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:122:            $chunks[] = sprintf('<class>%s</class>', $parent->getName());
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:125:        $interfaces = $reflector->getInterfaceNames();
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:147:        $value = $reflector->getValue();
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:168:        $value = $reflector->getValue();
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:173:            OutputFormatter::escape(Json::encode($reflector->getName())),
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:212:            $reflector->getName()
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:227:            $reflector->returnsReference() ? '&' : '',
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:259:        foreach ($reflector->getParameters() as $param) {
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:262:                if ($param->isArray()) {
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:264:                } elseif ($class = $param->getClass()) {
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:265:                    $hint = sprintf('<class>%s</class> ', $class->getName());
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:275:                $chunks = explode('$' . $param->getName(), (string) $param);
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:283:            if ($param->isOptional()) {
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:284:                if (!$param->isDefaultValueAvailable()) {
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:288:                    $value     = $param->getDefaultValue();
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:299:                $param->isPassedByReference() ? '&' : '',
vendor/psy/psysh/src/Formatter/SignatureFormatter.php:301:                $param->getName(),
vendor/psy/psysh/src/Formatter/Formatter.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:6: * (c) 2012-2018 Justin Hileman
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:18: * A pretty-printer for docblocks.
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:39:        if (!empty($docblock->desc)) {
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:41:            $chunks[] = self::indent(OutputFormatter::escape($docblock->desc), '  ');
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:45:        if (!empty($docblock->tags)) {
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:47:                if (isset($docblock->tags[$name])) {
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:49:                    $chunks[] = self::formatVector($vector, $docblock->tags[$name]);
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:54:            $tags = self::formatTags(array_keys($docblock::$vectors), $docblock->tags);
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:136:            return sprintf('%%-%ds', $max);
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:139:        return sprintf('<%s>%%-%ds</%s>', self::$vectorParamTemplates[$type], $max, self::$vectorParamTemplates[$type]);
vendor/psy/psysh/src/Formatter/DocblockFormatter.php:164:        $words = trim(preg_replace('/[\s_-]+/', ' ', preg_replace('/([a-z])([A-Z])/', '$1 $2', $text)));
vendor/psy/psysh/.editorconfig:7:charset = utf-8
vendor/psy/psysh/.gitignore:9:/vendor-bin/*/vendor/
vendor/psy/psysh/.github/CONTRIBUTING.md:5:PsySH follows [PSR-1](http://php-fig.org/psr/psr-1/) and [PSR-2](http://php-fig.org/psr/psr-2/). The easiest way to do make sure you're following the coding standard is to [install `php-cs-fixer`](https://github.com/friendsofphp/php-cs-fixer) and run `php-cs-fixer fix` before committing.
vendor/psy/psysh/.styleci.yml:4:  - align_double_arrow
vendor/psy/psysh/.styleci.yml:5:  - concat_with_spaces
vendor/psy/psysh/.styleci.yml:6:  - short_array_syntax
vendor/psy/psysh/.styleci.yml:7:  - ordered_use
vendor/psy/psysh/.styleci.yml:8:  - strict
vendor/psy/psysh/.styleci.yml:11:  - blank_line_before_break
vendor/psy/psysh/.styleci.yml:12:  - blank_line_before_continue
vendor/psy/psysh/.styleci.yml:13:  - blank_line_before_throw
vendor/psy/psysh/.styleci.yml:14:  - blank_line_before_try
vendor/psy/psysh/.styleci.yml:15:  - concat_without_spaces
vendor/psy/psysh/.styleci.yml:16:  - method_argument_space
vendor/psy/psysh/.styleci.yml:17:  - pre_increment
vendor/psy/psysh/.styleci.yml:18:  - unalign_double_arrow
vendor/psy/psysh/.styleci.yml:19:  - unalign_equals
vendor/psy/psysh/.styleci.yml:20:  - yoda_style
vendor/psy/psysh/.styleci.yml:21:  - property_separation
vendor/psy/psysh/.styleci.yml:22:  - const_separation
vendor/psy/psysh/.styleci.yml:26:    - "*.php"
vendor/psy/psysh/.styleci.yml:27:    - ".php_cs"
vendor/psy/psysh/.styleci.yml:28:    - "build-manual"
vendor/psy/psysh/.styleci.yml:29:    - "build-phar"
vendor/nette/di/composer.json:3:	"description": "💎 Nette Dependency Injection Container: Flexible, compiled and full-featured DIC with perfectly usable autowiring and support for all new PHP 7.1 features.",
vendor/nette/di/composer.json:6:	"license": ["BSD-3-Clause", "GPL-2.0", "GPL-3.0"],
vendor/nette/di/composer.json:19:		"ext-tokenizer": "*",
vendor/nette/di/composer.json:21:		"nette/php-generator": "^2.6.1 || ~3.0.0",
vendor/nette/di/composer.json:24:	"require-dev": {
vendor/nette/di/composer.json:35:	"minimum-stability": "dev",
vendor/nette/di/composer.json:37:		"branch-alias": {
vendor/nette/di/composer.json:38:			"dev-master": "2.4-dev"
vendor/nette/di/contributing.md:12:------
vendor/nette/di/contributing.md:25:------------
vendor/nette/di/readme.md:5:[![Build Status](https://travis-ci.org/nette/di.svg?branch=master)](https://travis-ci.org/nette/di)
vendor/nette/di/readme.md:8:[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/di/blob/master/license.md)
vendor/nette/di/readme.md:14:Let's have an application for sending newsletters. The code is maximally simplified and is available on the [GitHub](https://github.com/dg/di-example).
vendor/nette/di/readme.md:54:		$this->mailer = $mailer;
vendor/nette/di/readme.md:55:		$this->logger = $logger;
vendor/nette/di/readme.md:63:			$this->mailer->send($mail, $recipient);
vendor/nette/di/readme.md:65:		$this->logger->log(...);
vendor/nette/di/readme.md:79:		mail($to, $mail->subject, $mail->message);
vendor/nette/di/readme.md:89:		$this->file = $file;
vendor/nette/di/readme.md:94:		file_put_contents($this->file, $message . "\n", FILE_APPEND);
vendor/nette/di/readme.md:111:		if (!$this->logger) {
vendor/nette/di/readme.md:112:			$this->logger = new FileLogger('log.txt');
vendor/nette/di/readme.md:114:		return $this->logger;
vendor/nette/di/readme.md:119:		if (!$this->mailer) {
vendor/nette/di/readme.md:120:			$this->mailer = new SendMailMailer;
vendor/nette/di/readme.md:122:		return $this->mailer;
vendor/nette/di/readme.md:127:		return new NewsletterManager($this->getMailer(), $this->getLogger());
vendor/nette/di/readme.md:133:- the individual services are created only on demand (lazy loading)
vendor/nette/di/readme.md:134:- doubly called `createNewsletterManager` will use the same logger and mailer instances
vendor/nette/di/readme.md:136:Let's instantiate `Container`, let it create manager and we can start spamming users with newsletters :-)
vendor/nette/di/readme.md:140:$manager = $container->createNewsletterManager();
vendor/nette/di/readme.md:141:$manager->distribute(...);
vendor/nette/di/readme.md:147:----------
vendor/nette/di/readme.md:153:	- FileLogger( log.txt )
vendor/nette/di/readme.md:154:	- SendMailMailer
vendor/nette/di/readme.md:155:	- NewsletterManager
vendor/nette/di/readme.md:172:$class = $loader->load(function($compiler) {
vendor/nette/di/readme.md:173:    $compiler->loadConfig(__DIR__ . '/config.neon');
vendor/nette/di/readme.md:178:and then use container to create object `NewsletterManager` and we can send e-mails:
vendor/nette/di/readme.md:181:$manager = $container->getByType(NewsletterManager::class);
vendor/nette/di/readme.md:182:$manager->distribute(['john@example.com', ...]);
vendor/nette/di/readme.md:185:The container will be generated only once and the code is stored in cache (in directory `__DIR__ . '/temp'`).  Therefore the loading of configuration file is placed in the closure in `$loader->load()`, so it is called only once.
vendor/nette/di/readme.md:187:During development it is useful to activate auto-refresh mode which automatically regenerate the container when any class or configuration file is changed. Just in the constructor `ContainerLoader` append `true` as the second argument:
vendor/nette/di/readme.md:195:--------
vendor/nette/di/readme.md:213:			- setAnotherService
vendor/nette/di/readme.md:225:		$this->anotherService = $service;
vendor/nette/di/readme.md:251:		$this->service1 = $service1;
vendor/nette/di/readme.md:266:---------
vendor/nette/di/readme.md:291:		$this->logger = $logger;
vendor/nette/di/readme.md:300:	- IBarFactory
vendor/nette/di/readme.md:322:		$this->barFactory = $barFactory;
vendor/nette/di/readme.md:327:		$bar = $this->barFactory->create();
vendor/nette/di/license.md:17:project or top-level domain, and choose a name that stands on its own merits.
vendor/nette/di/license.md:22:---------------
vendor/nette/di/license.md:54:--------------------------
vendor/nette/di/license.md:59:- [GPL version 2](http://www.gnu.org/licenses/gpl-2.0.html)
vendor/nette/di/license.md:60:- [GPL version 3](http://www.gnu.org/licenses/gpl-3.0.html)
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:34:		$this->container = $container;
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:35:		$this->elapsedTime = self::$compilationTime ? microtime(true) - self::$compilationTime : null;
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:46:		$elapsedTime = $this->elapsedTime;
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:58:		$container = $this->container;
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:59:		$registry = $this->getContainerProperty('registry');
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:60:		$file = (new \ReflectionClass($container))->getFileName();
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:62:		$meta = $this->getContainerProperty('meta');
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:81:		$prop = (new \ReflectionClass(Nette\DI\Container::class))->getProperty($name);
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:82:		$prop->setAccessible(true);
vendor/nette/di/src/Bridges/DITracy/ContainerPanel.php:83:		return $prop->getValue($this->container);
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.tab.phtml:8:<svg viewBox="0 0 2048 2048"><path fill="#ae7c21" d="m1675 690.55v-125c0-36-4-60-13-71-9-12-26-18-52-18s-43 6-52 17c-8 11-12 36-12 72v910.62c0 37 4 61 12 72 9 11 26 17 52 17s44-6 52-17c9-12 13-36 13-72v-207h243v165c0 86-4 148-12 187-8 38-21 70-39 96-20 28-45 48-77 59-31 11-87 16-170 16-96 0-161-5-196-16-34-11-63-31-86-59-21-26-36-59-45-97-9-39-14-101-14-186v-826.62c0-85 4-147 13-185s25-71 46-97c23-29 54-49 92-60s102-17 189-17c75 0 130 6 164 17s61 30 81 59c19 26 33 59 41 99 8 39 12 101 12 185v84zm-524 1086.6h-254v-1514.6h254zm-1025 0v-1514.6h316c127 0 212 27 257 81 44 53 66 159 66 316v721.62c0 157-22 263-66 317-44 53-130 80-257 80zm388-314v-884.62c0-35-4-58-13-70-9-11-26-17-53-17h-66v1058.6h66c26 0 44-6 53-17 9-12 14-35 14-70z"/>
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.tab.phtml:9:</svg><span class="tracy-label"><?= $elapsedTime ? sprintf('%0.1f ms', $elapsedTime * 1000) : '' ?></span>
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:10:<style class="tracy-debug">
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:11:	#tracy-debug .nette-ContainerPanel table {
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:13:		white-space: nowrap;
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:16:	#tracy-debug .nette-ContainerPanel .created {
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:17:		font-weight: bold;
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:20:	#tracy-debug .nette-ContainerPanel .yes {
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:22:		font-weight: bold;
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:28:<div class="tracy-inner nette-ContainerPanel">
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:29:<div class="tracy-inner-container">
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:64:	<div class="nette-ContainerPanel-parameters">
vendor/nette/di/src/Bridges/DITracy/templates/ContainerPanel.panel.phtml:65:		<?= Dumper::toHtml($container->parameters); ?>
vendor/nette/di/src/DI/Compiler.php:45:		$this->builder = $builder ?: new ContainerBuilder;
vendor/nette/di/src/DI/Compiler.php:46:		$this->dependencies = new DependencyChecker;
vendor/nette/di/src/DI/Compiler.php:58:			$name = '_' . count($this->extensions);
vendor/nette/di/src/DI/Compiler.php:59:		} elseif (isset($this->extensions[$name]) || isset(self::$reserved[$name])) {
vendor/nette/di/src/DI/Compiler.php:62:		$this->extensions[$name] = $extension->setCompiler($this, $name);
vendor/nette/di/src/DI/Compiler.php:73:			? array_filter($this->extensions, function ($item) use ($type) { return $item instanceof $type; })
vendor/nette/di/src/DI/Compiler.php:74:			: $this->extensions;
vendor/nette/di/src/DI/Compiler.php:83:		return $this->builder;
vendor/nette/di/src/DI/Compiler.php:92:		$this->className = $className;
vendor/nette/di/src/DI/Compiler.php:103:		$this->config = Config\Helpers::merge($config, $this->config);
vendor/nette/di/src/DI/Compiler.php:115:		$this->addConfig($loader->load($file));
vendor/nette/di/src/DI/Compiler.php:116:		$this->dependencies->add($loader->getDependencies());
vendor/nette/di/src/DI/Compiler.php:127:		return $this->config;
vendor/nette/di/src/DI/Compiler.php:137:		$this->dynamicParams = $names;
vendor/nette/di/src/DI/Compiler.php:149:		$this->dependencies->add(array_filter($deps));
vendor/nette/di/src/DI/Compiler.php:160:		return $this->dependencies->export();
vendor/nette/di/src/DI/Compiler.php:171:			$this->config = func_get_arg(0) ?: $this->config;
vendor/nette/di/src/DI/Compiler.php:172:			$this->className = @func_get_arg(1) ?: $this->className;
vendor/nette/di/src/DI/Compiler.php:174:		$this->processParameters();
vendor/nette/di/src/DI/Compiler.php:175:		$this->processExtensions();
vendor/nette/di/src/DI/Compiler.php:176:		$this->processServices();
vendor/nette/di/src/DI/Compiler.php:177:		$classes = $this->generateCode();
vendor/nette/di/src/DI/Compiler.php:185:		$params = isset($this->config['parameters']) ? $this->config['parameters'] : [];
vendor/nette/di/src/DI/Compiler.php:186:		foreach ($this->dynamicParams as $key) {
vendor/nette/di/src/DI/Compiler.php:188:				? ContainerBuilder::literal('isset($this->parameters[?]) \? $this->parameters[?] : ?', [$key, $key, $params[$key]])
vendor/nette/di/src/DI/Compiler.php:189:				: ContainerBuilder::literal('$this->parameters[?]', [$key]);
vendor/nette/di/src/DI/Compiler.php:191:		$this->builder->parameters = Helpers::expand($params, $params, true);
vendor/nette/di/src/DI/Compiler.php:198:		$this->config = Helpers::expand(array_diff_key($this->config, self::$reserved), $this->builder->parameters)
vendor/nette/di/src/DI/Compiler.php:199:			+ array_intersect_key($this->config, self::$reserved);
vendor/nette/di/src/DI/Compiler.php:201:		foreach ($first = $this->getExtensions(Extensions\ExtensionsExtension::class) as $name => $extension) {
vendor/nette/di/src/DI/Compiler.php:202:			$extension->setConfig(isset($this->config[$name]) ? $this->config[$name] : []);
vendor/nette/di/src/DI/Compiler.php:203:			$extension->loadConfiguration();
vendor/nette/di/src/DI/Compiler.php:206:		$last = $this->getExtensions(Extensions\InjectExtension::class);
vendor/nette/di/src/DI/Compiler.php:207:		$this->extensions = array_merge(array_diff_key($this->extensions, $last), $last);
vendor/nette/di/src/DI/Compiler.php:209:		$extensions = array_diff_key($this->extensions, $first);
vendor/nette/di/src/DI/Compiler.php:210:		foreach (array_intersect_key($extensions, $this->config) as $name => $extension) {
vendor/nette/di/src/DI/Compiler.php:211:			$extension->setConfig($this->config[$name] ?: []);
vendor/nette/di/src/DI/Compiler.php:215:			$extension->loadConfiguration();
vendor/nette/di/src/DI/Compiler.php:218:		if ($extra = array_diff_key($this->extensions, $extensions, $first)) {
vendor/nette/di/src/DI/Compiler.php:222:		} elseif ($extra = key(array_diff_key($this->config, self::$reserved, $this->extensions))) {
vendor/nette/di/src/DI/Compiler.php:223:			$hint = Nette\Utils\ObjectMixin::getSuggestion(array_keys(self::$reserved + $this->extensions), $extra);
vendor/nette/di/src/DI/Compiler.php:235:		if (isset($this->config['services'])) {
vendor/nette/di/src/DI/Compiler.php:236:			self::loadDefinitions($this->builder, $this->config['services']);
vendor/nette/di/src/DI/Compiler.php:246:			$this->className = func_get_arg(0) ?: $this->className;
vendor/nette/di/src/DI/Compiler.php:249:		$this->builder->prepareClassList();
vendor/nette/di/src/DI/Compiler.php:251:		foreach ($this->extensions as $extension) {
vendor/nette/di/src/DI/Compiler.php:252:			$extension->beforeCompile();
vendor/nette/di/src/DI/Compiler.php:253:			$this->dependencies->add([(new \ReflectionClass($extension))->getFileName()]);
vendor/nette/di/src/DI/Compiler.php:256:		$generator = new PhpGenerator($this->builder);
vendor/nette/di/src/DI/Compiler.php:257:		$classes = $generator->generate($this->className);
vendor/nette/di/src/DI/Compiler.php:258:		$classes[0]->addMethod('initialize');
vendor/nette/di/src/DI/Compiler.php:259:		$this->dependencies->add($this->builder->getDependencies());
vendor/nette/di/src/DI/Compiler.php:261:		foreach ($this->extensions as $extension) {
vendor/nette/di/src/DI/Compiler.php:262:			$extension->afterCompile($classes[0]);
vendor/nette/di/src/DI/Compiler.php:293:				$postfix = $def instanceof Statement && is_string($def->getEntity()) ? '.' . $def->getEntity() : (is_scalar($def) ? ".$def" : '');
vendor/nette/di/src/DI/Compiler.php:294:				$name = (count($builder->getDefinitions()) + 1) . preg_replace('#\W+#', '_', $postfix);
vendor/nette/di/src/DI/Compiler.php:296:				$name = $builder->getByType(substr($name, 1), true);
vendor/nette/di/src/DI/Compiler.php:302:				$builder->removeDefinition($name);
vendor/nette/di/src/DI/Compiler.php:309:			$params = $builder->parameters;
vendor/nette/di/src/DI/Compiler.php:318:			if (is_array($def) && !empty($def['alteration']) && !$builder->hasDefinition($name)) {
vendor/nette/di/src/DI/Compiler.php:326:				$builder->removeDefinition($name);
vendor/nette/di/src/DI/Compiler.php:327:				$definition = $builder->addDefinition(
vendor/nette/di/src/DI/Compiler.php:329:					$parent === Config\Helpers::OVERWRITE ? null : clone $builder->getDefinition($parent)
vendor/nette/di/src/DI/Compiler.php:331:			} elseif ($builder->hasDefinition($name)) {
vendor/nette/di/src/DI/Compiler.php:332:				$definition = $builder->getDefinition($name);
vendor/nette/di/src/DI/Compiler.php:334:				$definition = $builder->addDefinition($name);
vendor/nette/di/src/DI/Compiler.php:340:				throw new ServiceCreationException("Service '$name': " . $e->getMessage(), 0, $e);
vendor/nette/di/src/DI/Compiler.php:358:		} elseif ($config instanceof Statement && is_string($config->getEntity()) && interface_exists($config->getEntity())) {
vendor/nette/di/src/DI/Compiler.php:359:			$config = ['class' => null, 'implement' => $config->getEntity(), 'factory' => array_shift($config->arguments)];
vendor/nette/di/src/DI/Compiler.php:383:			$definition->setType(null);
vendor/nette/di/src/DI/Compiler.php:384:			$definition->setFactory(null);
vendor/nette/di/src/DI/Compiler.php:389:			$definition->setType($config['type']);
vendor/nette/di/src/DI/Compiler.php:398:				$definition->setType($config['class']);
vendor/nette/di/src/DI/Compiler.php:400:			$definition->setFactory($config['class']);
vendor/nette/di/src/DI/Compiler.php:405:			$definition->setFactory($config['factory']);
vendor/nette/di/src/DI/Compiler.php:411:			if (!Config\Helpers::takeParent($arguments) && !Nette\Utils\Arrays::isList($arguments) && $definition->getFactory()) {
vendor/nette/di/src/DI/Compiler.php:412:				$arguments += $definition->getFactory()->arguments;
vendor/nette/di/src/DI/Compiler.php:414:			$definition->setArguments($arguments);
vendor/nette/di/src/DI/Compiler.php:419:				$definition->setSetup([]);
vendor/nette/di/src/DI/Compiler.php:427:				$definition->addSetup($setup);
vendor/nette/di/src/DI/Compiler.php:433:			$definition->setParameters($config['parameters']);
vendor/nette/di/src/DI/Compiler.php:438:			$definition->setImplement($config['implement']);
vendor/nette/di/src/DI/Compiler.php:439:			$definition->setAutowired(true);
vendor/nette/di/src/DI/Compiler.php:444:			$definition->setAutowired($config['autowired']);
vendor/nette/di/src/DI/Compiler.php:449:			$definition->setDynamic($config['dynamic']);
vendor/nette/di/src/DI/Compiler.php:454:			$definition->addTag(Extensions\InjectExtension::TAG_INJECT, $config['inject']);
vendor/nette/di/src/DI/Compiler.php:465:				$definition->setTags([]);
vendor/nette/di/src/DI/Compiler.php:469:					$definition->addTag($attrs);
vendor/nette/di/src/DI/Compiler.php:471:					$definition->addTag($tag, $attrs);
vendor/nette/di/src/DI/ContainerBuilder.php:37:	/** @var array for auto-wiring */
vendor/nette/di/src/DI/ContainerBuilder.php:43:	/** @var string[] of classes excluded from auto-wiring */
vendor/nette/di/src/DI/ContainerBuilder.php:60:		$this->classListNeedsRefresh = true;
vendor/nette/di/src/DI/ContainerBuilder.php:62:			throw new Nette\InvalidArgumentException(sprintf('Service name must be a non-empty string, %s given.', gettype($name)));
vendor/nette/di/src/DI/ContainerBuilder.php:64:		$name = isset($this->aliases[$name]) ? $this->aliases[$name] : $name;
vendor/nette/di/src/DI/ContainerBuilder.php:65:		if (isset($this->definitions[$name])) {
vendor/nette/di/src/DI/ContainerBuilder.php:71:		$definition->setNotifier(function () {
vendor/nette/di/src/DI/ContainerBuilder.php:72:			$this->classListNeedsRefresh = true;
vendor/nette/di/src/DI/ContainerBuilder.php:74:		return $this->definitions[$name] = $definition;
vendor/nette/di/src/DI/ContainerBuilder.php:85:		$this->classListNeedsRefresh = true;
vendor/nette/di/src/DI/ContainerBuilder.php:86:		$name = isset($this->aliases[$name]) ? $this->aliases[$name] : $name;
vendor/nette/di/src/DI/ContainerBuilder.php:87:		unset($this->definitions[$name]);
vendor/nette/di/src/DI/ContainerBuilder.php:98:		$service = isset($this->aliases[$name]) ? $this->aliases[$name] : $name;
vendor/nette/di/src/DI/ContainerBuilder.php:99:		if (!isset($this->definitions[$service])) {
vendor/nette/di/src/DI/ContainerBuilder.php:102:		return $this->definitions[$service];
vendor/nette/di/src/DI/ContainerBuilder.php:112:		return $this->definitions;
vendor/nette/di/src/DI/ContainerBuilder.php:123:		$name = isset($this->aliases[$name]) ? $this->aliases[$name] : $name;
vendor/nette/di/src/DI/ContainerBuilder.php:124:		return isset($this->definitions[$name]);
vendor/nette/di/src/DI/ContainerBuilder.php:135:			throw new Nette\InvalidArgumentException(sprintf('Alias name must be a non-empty string, %s given.', gettype($alias)));
vendor/nette/di/src/DI/ContainerBuilder.php:138:			throw new Nette\InvalidArgumentException(sprintf('Service name must be a non-empty string, %s given.', gettype($service)));
vendor/nette/di/src/DI/ContainerBuilder.php:140:		} elseif (isset($this->aliases[$alias])) {
vendor/nette/di/src/DI/ContainerBuilder.php:143:		} elseif (isset($this->definitions[$alias])) {
vendor/nette/di/src/DI/ContainerBuilder.php:146:		$this->aliases[$alias] = $service;
vendor/nette/di/src/DI/ContainerBuilder.php:156:		unset($this->aliases[$alias]);
vendor/nette/di/src/DI/ContainerBuilder.php:166:		return $this->aliases;
vendor/nette/di/src/DI/ContainerBuilder.php:179:				$this->excludedClasses += class_parents($type) + class_implements($type) + [$type => $type];
vendor/nette/di/src/DI/ContainerBuilder.php:220:			$this->currentService !== null
vendor/nette/di/src/DI/ContainerBuilder.php:221:			&& is_a($this->definitions[$this->currentService]->getType(), $type, true)
vendor/nette/di/src/DI/ContainerBuilder.php:223:			return $this->currentService;
vendor/nette/di/src/DI/ContainerBuilder.php:226:		$types = $this->getClassList();
vendor/nette/di/src/DI/ContainerBuilder.php:253:		return $this->getDefinition($this->getByType($type, true));
vendor/nette/di/src/DI/ContainerBuilder.php:266:		$types = $this->getClassList();
vendor/nette/di/src/DI/ContainerBuilder.php:269:				$found[$name] = $this->definitions[$name];
vendor/nette/di/src/DI/ContainerBuilder.php:284:		foreach ($this->definitions as $name => $def) {
vendor/nette/di/src/DI/ContainerBuilder.php:285:			if (($tmp = $def->getTag($tag)) !== null) {
vendor/nette/di/src/DI/ContainerBuilder.php:298:		if ($this->classList !== false && $this->classListNeedsRefresh) {
vendor/nette/di/src/DI/ContainerBuilder.php:299:			$this->prepareClassList();
vendor/nette/di/src/DI/ContainerBuilder.php:300:			$this->classListNeedsRefresh = false;
vendor/nette/di/src/DI/ContainerBuilder.php:302:		return $this->classList ?: [];
vendor/nette/di/src/DI/ContainerBuilder.php:313:		unset($this->definitions[self::THIS_CONTAINER]);
vendor/nette/di/src/DI/ContainerBuilder.php:314:		$this->addDefinition(self::THIS_CONTAINER)->setType(Container::class);
vendor/nette/di/src/DI/ContainerBuilder.php:316:		$this->classList = false;
vendor/nette/di/src/DI/ContainerBuilder.php:318:		foreach ($this->definitions as $name => $def) {
vendor/nette/di/src/DI/ContainerBuilder.php:320:			if ($def->getImplement()) {
vendor/nette/di/src/DI/ContainerBuilder.php:321:				$this->resolveImplement($def, $name);
vendor/nette/di/src/DI/ContainerBuilder.php:324:			if ($def->isDynamic()) {
vendor/nette/di/src/DI/ContainerBuilder.php:325:				if (!$def->getType()) {
vendor/nette/di/src/DI/ContainerBuilder.php:328:				$def->setFactory(null);
vendor/nette/di/src/DI/ContainerBuilder.php:332:			// complete class-factory pairs
vendor/nette/di/src/DI/ContainerBuilder.php:333:			if (!$def->getEntity()) {
vendor/nette/di/src/DI/ContainerBuilder.php:334:				if (!$def->getType()) {
vendor/nette/di/src/DI/ContainerBuilder.php:337:				$def->setFactory($def->getType(), ($factory = $def->getFactory()) ? $factory->arguments : []);
vendor/nette/di/src/DI/ContainerBuilder.php:340:			// auto-disable autowiring for aliases
vendor/nette/di/src/DI/ContainerBuilder.php:342:				$def->getAutowired() === true
vendor/nette/di/src/DI/ContainerBuilder.php:343:				&& ($alias = $this->getServiceName($def->getFactory()->getEntity()))
vendor/nette/di/src/DI/ContainerBuilder.php:344:				&& (!$def->getImplement() || (!Strings::contains($alias, '\\') && $this->definitions[$alias]->getImplement()))
vendor/nette/di/src/DI/ContainerBuilder.php:346:				$def->setAutowired(false);
vendor/nette/di/src/DI/ContainerBuilder.php:351:		foreach ($this->definitions as $name => $def) {
vendor/nette/di/src/DI/ContainerBuilder.php:352:			$this->resolveServiceType($name);
vendor/nette/di/src/DI/ContainerBuilder.php:355:		//  build auto-wiring list
vendor/nette/di/src/DI/ContainerBuilder.php:356:		$this->classList = $preferred = [];
vendor/nette/di/src/DI/ContainerBuilder.php:357:		foreach ($this->definitions as $name => $def) {
vendor/nette/di/src/DI/ContainerBuilder.php:358:			if ($type = $def->getImplement() ?: $def->getType()) {
vendor/nette/di/src/DI/ContainerBuilder.php:359:				$defAutowired = $def->getAutowired();
vendor/nette/di/src/DI/ContainerBuilder.php:371:					$autowired = $defAutowired && empty($this->excludedClasses[$parent]);
vendor/nette/di/src/DI/ContainerBuilder.php:376:								if (empty($preferred[$parent]) && isset($this->classList[$parent][true])) {
vendor/nette/di/src/DI/ContainerBuilder.php:377:									$this->classList[$parent][false] = array_merge(...$this->classList[$parent]);
vendor/nette/di/src/DI/ContainerBuilder.php:378:									$this->classList[$parent][true] = [];
vendor/nette/di/src/DI/ContainerBuilder.php:387:					$this->classList[$parent][$autowired][] = (string) $name;
vendor/nette/di/src/DI/ContainerBuilder.php:396:		$interface = $def->getImplement();
vendor/nette/di/src/DI/ContainerBuilder.php:401:		$def->setImplement($interface);
vendor/nette/di/src/DI/ContainerBuilder.php:404:		$this->addDependency($rc);
vendor/nette/di/src/DI/ContainerBuilder.php:405:		$method = $rc->hasMethod('create')
vendor/nette/di/src/DI/ContainerBuilder.php:406:			? $rc->getMethod('create')
vendor/nette/di/src/DI/ContainerBuilder.php:407:			: ($rc->hasMethod('get') ? $rc->getMethod('get') : null);
vendor/nette/di/src/DI/ContainerBuilder.php:409:		if (count($rc->getMethods()) !== 1 || !$method || $method->isStatic()) {
vendor/nette/di/src/DI/ContainerBuilder.php:410:			throw new ServiceCreationException("Interface $interface used in service '$name' must have just one non-static method create() or get().");
vendor/nette/di/src/DI/ContainerBuilder.php:412:		$def->setImplementMode($rc->hasMethod('create') ? $def::IMPLEMENT_MODE_CREATE : $def::IMPLEMENT_MODE_GET);
vendor/nette/di/src/DI/ContainerBuilder.php:415:		if (!$def->getType() && !$def->getEntity()) {
vendor/nette/di/src/DI/ContainerBuilder.php:422:			$def->setType($returnType);
vendor/nette/di/src/DI/ContainerBuilder.php:425:		if ($rc->hasMethod('get')) {
vendor/nette/di/src/DI/ContainerBuilder.php:426:			if ($method->getParameters()) {
vendor/nette/di/src/DI/ContainerBuilder.php:428:			} elseif ($def->getSetup()) {
vendor/nette/di/src/DI/ContainerBuilder.php:431:			if (!$def->getEntity()) {
vendor/nette/di/src/DI/ContainerBuilder.php:432:				$def->setFactory('@\\' . ltrim($def->getType(), '\\'));
vendor/nette/di/src/DI/ContainerBuilder.php:433:			} elseif (!$this->getServiceName($def->getFactory()->getEntity())) {
vendor/nette/di/src/DI/ContainerBuilder.php:438:		if (!$def->parameters) {
vendor/nette/di/src/DI/ContainerBuilder.php:440:			if (!$def->getEntity()) {
vendor/nette/di/src/DI/ContainerBuilder.php:441:				$def->setFactory($def->getType(), $def->getFactory() ? $def->getFactory()->arguments : []);
vendor/nette/di/src/DI/ContainerBuilder.php:444:				($class = $this->resolveEntityType($def->getFactory(), [$name => 1]))
vendor/nette/di/src/DI/ContainerBuilder.php:445:				&& ($ctor = (new ReflectionClass($class))->getConstructor())
vendor/nette/di/src/DI/ContainerBuilder.php:447:				foreach ($ctor->getParameters() as $param) {
vendor/nette/di/src/DI/ContainerBuilder.php:448:					$ctorParams[$param->getName()] = $param;
vendor/nette/di/src/DI/ContainerBuilder.php:452:			foreach ($method->getParameters() as $param) {
vendor/nette/di/src/DI/ContainerBuilder.php:454:				if (isset($ctorParams[$param->getName()])) {
vendor/nette/di/src/DI/ContainerBuilder.php:455:					$arg = $ctorParams[$param->getName()];
vendor/nette/di/src/DI/ContainerBuilder.php:457:						throw new ServiceCreationException("Type hint for \${$param->getName()} in $methodName doesn't match type hint in $class constructor.");
vendor/nette/di/src/DI/ContainerBuilder.php:459:					$def->getFactory()->arguments[$arg->getPosition()] = self::literal('$' . $arg->getName());
vendor/nette/di/src/DI/ContainerBuilder.php:460:				} elseif (!$def->getSetup()) {
vendor/nette/di/src/DI/ContainerBuilder.php:461:					$hint = Nette\Utils\ObjectMixin::getSuggestion(array_keys($ctorParams), $param->getName());
vendor/nette/di/src/DI/ContainerBuilder.php:462:					throw new ServiceCreationException("Unused parameter \${$param->getName()} when implementing method $methodName" . ($hint ? ", did you mean \${$hint}?" : '.'));
vendor/nette/di/src/DI/ContainerBuilder.php:464:				$nullable = $hint && $param->allowsNull() && (!$param->isDefaultValueAvailable() || $param->getDefaultValue() !== null);
vendor/nette/di/src/DI/ContainerBuilder.php:465:				$paramDef = ($nullable ? '?' : '') . $hint . ' ' . $param->getName();
vendor/nette/di/src/DI/ContainerBuilder.php:466:				if ($param->isDefaultValueAvailable()) {
vendor/nette/di/src/DI/ContainerBuilder.php:467:					$def->parameters[$paramDef] = Reflection::getParameterDefaultValue($param);
vendor/nette/di/src/DI/ContainerBuilder.php:469:					$def->parameters[] = $paramDef;
vendor/nette/di/src/DI/ContainerBuilder.php:484:		$def = $this->definitions[$name];
vendor/nette/di/src/DI/ContainerBuilder.php:485:		$factoryClass = $def->getFactory() ? $this->resolveEntityType($def->getFactory()->getEntity(), $recursive) : null; // call always to check entities
vendor/nette/di/src/DI/ContainerBuilder.php:486:		if ($type = $def->getType() ?: $factoryClass) {
vendor/nette/di/src/DI/ContainerBuilder.php:491:			$def->setType($type);
vendor/nette/di/src/DI/ContainerBuilder.php:493:				$this->addDependency(new ReflectionClass($factoryClass ?: $type));
vendor/nette/di/src/DI/ContainerBuilder.php:496:		} elseif ($def->getAutowired()) {
vendor/nette/di/src/DI/ContainerBuilder.php:506:		$entity = $this->normalizeEntity($entity instanceof Statement ? $entity->getEntity() : $entity);
vendor/nette/di/src/DI/ContainerBuilder.php:507:		$serviceName = current(array_slice(array_keys($recursive), -1));
vendor/nette/di/src/DI/ContainerBuilder.php:510:			if (($service = $this->getServiceName($entity[0])) || $entity[0] instanceof Statement) {
vendor/nette/di/src/DI/ContainerBuilder.php:511:				$entity[0] = $this->resolveEntityType($entity[0], $recursive);
vendor/nette/di/src/DI/ContainerBuilder.php:514:				} elseif (isset($this->definitions[$service]) && $this->definitions[$service]->getImplement()) { // @Implement::create
vendor/nette/di/src/DI/ContainerBuilder.php:515:					return $entity[1] === 'create' ? $this->resolveServiceType($service, $recursive) : null;
vendor/nette/di/src/DI/ContainerBuilder.php:521:				$refClass = $reflection instanceof \ReflectionMethod ? $reflection->getDeclaringClass() : null;
vendor/nette/di/src/DI/ContainerBuilder.php:525:			if (isset($e) || ($refClass && (!$reflection->isPublic()
vendor/nette/di/src/DI/ContainerBuilder.php:526:				|| ($refClass->isTrait() && !$reflection->isStatic())
vendor/nette/di/src/DI/ContainerBuilder.php:530:			$this->addDependency($reflection);
vendor/nette/di/src/DI/ContainerBuilder.php:538:		} elseif ($service = $this->getServiceName($entity)) { // alias or factory
vendor/nette/di/src/DI/ContainerBuilder.php:542:			return $this->definitions[$service]->getImplement()
vendor/nette/di/src/DI/ContainerBuilder.php:543:				?: $this->definitions[$service]->getType()
vendor/nette/di/src/DI/ContainerBuilder.php:544:				?: $this->resolveServiceType($service, $recursive);
vendor/nette/di/src/DI/ContainerBuilder.php:560:		$this->prepareClassList();
vendor/nette/di/src/DI/ContainerBuilder.php:562:		foreach ($this->definitions as $name => $def) {
vendor/nette/di/src/DI/ContainerBuilder.php:563:			if ($def->isDynamic()) {
vendor/nette/di/src/DI/ContainerBuilder.php:567:			$this->currentService = null;
vendor/nette/di/src/DI/ContainerBuilder.php:568:			$entity = $def->getFactory()->getEntity();
vendor/nette/di/src/DI/ContainerBuilder.php:569:			$serviceRef = $this->getServiceName($entity);
vendor/nette/di/src/DI/ContainerBuilder.php:570:			$factory = $serviceRef && !$def->getFactory()->arguments && !$def->getSetup() && $def->getImplementMode() !== $def::IMPLEMENT_MODE_CREATE
vendor/nette/di/src/DI/ContainerBuilder.php:572:				: $def->getFactory();
vendor/nette/di/src/DI/ContainerBuilder.php:575:				$def->setFactory($this->completeStatement($factory));
vendor/nette/di/src/DI/ContainerBuilder.php:576:				$this->classListNeedsRefresh = false;
vendor/nette/di/src/DI/ContainerBuilder.php:578:				$this->currentService = $name;
vendor/nette/di/src/DI/ContainerBuilder.php:579:				$setups = $def->getSetup();
vendor/nette/di/src/DI/ContainerBuilder.php:581:					if (is_string($setup->getEntity()) && strpbrk($setup->getEntity(), ':@?\\') === false) { // auto-prepend @self
vendor/nette/di/src/DI/ContainerBuilder.php:582:						$setup = new Statement(['@' . $name, $setup->getEntity()], $setup->arguments);
vendor/nette/di/src/DI/ContainerBuilder.php:584:					$setup = $this->completeStatement($setup);
vendor/nette/di/src/DI/ContainerBuilder.php:586:				$def->setSetup($setups);
vendor/nette/di/src/DI/ContainerBuilder.php:589:				throw new ServiceCreationException("Service '$name' (type of $entity): " . $e->getMessage(), 0, $e);
vendor/nette/di/src/DI/ContainerBuilder.php:592:				$this->currentService = null;
vendor/nette/di/src/DI/ContainerBuilder.php:603:		$entity = $this->normalizeEntity($statement->getEntity());
vendor/nette/di/src/DI/ContainerBuilder.php:604:		$arguments = $statement->arguments;
vendor/nette/di/src/DI/ContainerBuilder.php:608:		} elseif ($service = $this->getServiceName($entity)) { // factory calling
vendor/nette/di/src/DI/ContainerBuilder.php:610:			foreach ($this->definitions[$service]->parameters as $k => $v) {
vendor/nette/di/src/DI/ContainerBuilder.php:622:			} elseif ((new ReflectionClass($entity))->isAbstract()) {
vendor/nette/di/src/DI/ContainerBuilder.php:624:			} elseif (($rm = (new ReflectionClass($entity))->getConstructor()) !== null && !$rm->isPublic()) {
vendor/nette/di/src/DI/ContainerBuilder.php:625:				$visibility = $rm->isProtected() ? 'protected' : 'private';
vendor/nette/di/src/DI/ContainerBuilder.php:627:			} elseif ($constructor = (new ReflectionClass($entity))->getConstructor()) {
vendor/nette/di/src/DI/ContainerBuilder.php:628:				$this->addDependency($constructor);
vendor/nette/di/src/DI/ContainerBuilder.php:648:			$this->addDependency($rf);
vendor/nette/di/src/DI/ContainerBuilder.php:653:				$entity[0] = $this->completeStatement($entity[0]);
vendor/nette/di/src/DI/ContainerBuilder.php:654:			} elseif ($service = $this->getServiceName($entity[0])) { // service method
vendor/nette/di/src/DI/ContainerBuilder.php:660:				if (!$arguments && substr($entity[1], -2) === '[]') {
vendor/nette/di/src/DI/ContainerBuilder.php:665:					? $this->resolveEntityType($entity[0])
vendor/nette/di/src/DI/ContainerBuilder.php:666:					: $this->definitions[$service]->getType()
vendor/nette/di/src/DI/ContainerBuilder.php:668:				$arguments = $this->autowireArguments($type, $entity[1], $arguments);
vendor/nette/di/src/DI/ContainerBuilder.php:674:				$val = $this->completeStatement($val);
vendor/nette/di/src/DI/ContainerBuilder.php:681:				$val = '@' . current(array_keys($this->getDefinitions(), $val, true));
vendor/nette/di/src/DI/ContainerBuilder.php:685:				$name = $this->getServiceName($pair[0]);
vendor/nette/di/src/DI/ContainerBuilder.php:688:				} elseif (preg_match('#^[A-Z][A-Z0-9_]*\z#', $pair[1], $m)) { // @service::CONSTANT
vendor/nette/di/src/DI/ContainerBuilder.php:689:					$val = self::literal($this->getDefinition($name)->getType() . '::' . $pair[1]);
vendor/nette/di/src/DI/ContainerBuilder.php:708:		$this->dependencies[] = $dep;
vendor/nette/di/src/DI/ContainerBuilder.php:719:		return $this->dependencies;
vendor/nette/di/src/DI/ContainerBuilder.php:730:		return Helpers::expand($value, $this->parameters);
vendor/nette/di/src/DI/ContainerBuilder.php:746:		if (is_string($entity) && Strings::contains($entity, '::') && !Strings::contains($entity, '?')) { // Class::method -> [Class, method]
vendor/nette/di/src/DI/ContainerBuilder.php:750:		if (is_array($entity) && $entity[0] instanceof ServiceDefinition) { // [ServiceDefinition, ...] -> [@serviceName, ...]
vendor/nette/di/src/DI/ContainerBuilder.php:751:			$entity[0] = '@' . current(array_keys($this->definitions, $entity[0], true));
vendor/nette/di/src/DI/ContainerBuilder.php:753:		} elseif ($entity instanceof ServiceDefinition) { // ServiceDefinition -> @serviceName
vendor/nette/di/src/DI/ContainerBuilder.php:754:			$entity = '@' . current(array_keys($this->definitions, $entity, true));
vendor/nette/di/src/DI/ContainerBuilder.php:756:		} elseif (is_array($entity) && $entity[0] === $this) { // [$this, ...] -> [@container, ...]
vendor/nette/di/src/DI/ContainerBuilder.php:765:	 * Converts @service or @\Class -> service name and checks its existence.
vendor/nette/di/src/DI/ContainerBuilder.php:776:			$service = $this->currentService;
vendor/nette/di/src/DI/ContainerBuilder.php:779:			if ($this->classList === false) { // may be disabled by prepareClassList
vendor/nette/di/src/DI/ContainerBuilder.php:782:			$res = $this->getByType($service);
vendor/nette/di/src/DI/ContainerBuilder.php:788:		$service = isset($this->aliases[$service]) ? $this->aliases[$service] : $service;
vendor/nette/di/src/DI/ContainerBuilder.php:789:		if (!isset($this->definitions[$service])) {
vendor/nette/di/src/DI/ContainerBuilder.php:804:		if (!$rc->hasMethod($method)) {
vendor/nette/di/src/DI/ContainerBuilder.php:811:		$rm = $rc->getMethod($method);
vendor/nette/di/src/DI/ContainerBuilder.php:812:		if (!$rm->isPublic()) {
vendor/nette/di/src/DI/ContainerBuilder.php:815:		$this->addDependency($rm);
vendor/nette/di/src/DI/ContainerBuilder.php:824:		return (new PhpGenerator($this))->generate($className);
vendor/nette/di/src/DI/ContainerBuilder.php:832:		return (new PhpGenerator($this))->formatStatement($statement);
vendor/nette/di/src/DI/ContainerBuilder.php:841:				$val = $this->completeStatement($val);
vendor/nette/di/src/DI/ContainerBuilder.php:848:				$val = '@' . current(array_keys($this->getDefinitions(), $val, true));
vendor/nette/di/src/DI/ContainerBuilder.php:851:		return (new PhpGenerator($this))->formatPhp($statement, $args);
vendor/nette/di/src/DI/ContainerLoader.php:29:		$this->tempDirectory = $tempDirectory;
vendor/nette/di/src/DI/ContainerLoader.php:30:		$this->autoRebuild = $autoRebuild;
vendor/nette/di/src/DI/ContainerLoader.php:45:		$class = $this->getClassName($key);
vendor/nette/di/src/DI/ContainerLoader.php:47:			$this->loadFile($class, $generator);
vendor/nette/di/src/DI/ContainerLoader.php:67:		$file = "$this->tempDirectory/$class.php";
vendor/nette/di/src/DI/ContainerLoader.php:68:		if (!$this->isExpired($file) && (@include $file) !== false) { // @ file may not exist
vendor/nette/di/src/DI/ContainerLoader.php:72:		Nette\Utils\FileSystem::createDir($this->tempDirectory);
vendor/nette/di/src/DI/ContainerLoader.php:81:		if (!is_file($file) || $this->isExpired($file, $updatedMeta)) {
vendor/nette/di/src/DI/ContainerLoader.php:85:				list($toWrite[$file], $toWrite["$file.meta"]) = $this->generate($class, $generator);
vendor/nette/di/src/DI/ContainerLoader.php:90:					@unlink("$name.tmp"); // @ - file may not exist
vendor/nette/di/src/DI/ContainerLoader.php:98:		if ((@include $file) === false) { // @ - error escalated to exception
vendor/nette/di/src/DI/ContainerLoader.php:107:		if ($this->autoRebuild) {
vendor/nette/di/src/DI/ContainerLoader.php:108:			$meta = @unserialize((string) file_get_contents("$file.meta")); // @ - file may not exist
vendor/nette/di/src/DI/ContainerLoader.php:124:		$compiler->setClassName($class);
vendor/nette/di/src/DI/ContainerLoader.php:125:		$code = call_user_func_array($generator, [&$compiler]) ?: $compiler->compile();
vendor/nette/di/src/DI/ContainerLoader.php:128:			serialize($compiler->exportDependencies()),
vendor/nette/di/src/DI/ServiceDefinition.php:66:		call_user_func($this->notifier);
vendor/nette/di/src/DI/ServiceDefinition.php:67:		$this->type = $type;
vendor/nette/di/src/DI/ServiceDefinition.php:69:			$this->setFactory($type, $args);
vendor/nette/di/src/DI/ServiceDefinition.php:81:		return $this->type;
vendor/nette/di/src/DI/ServiceDefinition.php:91:		call_user_func($this->notifier);
vendor/nette/di/src/DI/ServiceDefinition.php:92:		$this->type = $type;
vendor/nette/di/src/DI/ServiceDefinition.php:102:		return $this->type;
vendor/nette/di/src/DI/ServiceDefinition.php:111:		call_user_func($this->notifier);
vendor/nette/di/src/DI/ServiceDefinition.php:112:		$this->factory = $factory instanceof Statement ? $factory : new Statement($factory, $args);
vendor/nette/di/src/DI/ServiceDefinition.php:122:		return $this->factory;
vendor/nette/di/src/DI/ServiceDefinition.php:131:		return $this->factory ? $this->factory->getEntity() : null;
vendor/nette/di/src/DI/ServiceDefinition.php:140:		if (!$this->factory) {
vendor/nette/di/src/DI/ServiceDefinition.php:141:			$this->factory = new Statement($this->type);
vendor/nette/di/src/DI/ServiceDefinition.php:143:		$this->factory->arguments = $args;
vendor/nette/di/src/DI/ServiceDefinition.php:159:		$this->setup = $setup;
vendor/nette/di/src/DI/ServiceDefinition.php:169:		return $this->setup;
vendor/nette/di/src/DI/ServiceDefinition.php:178:		$this->setup[] = $entity instanceof Statement ? $entity : new Statement($entity, $args);
vendor/nette/di/src/DI/ServiceDefinition.php:188:		$this->parameters = $params;
vendor/nette/di/src/DI/ServiceDefinition.php:198:		return $this->parameters;
vendor/nette/di/src/DI/ServiceDefinition.php:207:		$this->tags = $tags;
vendor/nette/di/src/DI/ServiceDefinition.php:217:		return $this->tags;
vendor/nette/di/src/DI/ServiceDefinition.php:226:		$this->tags[$tag] = $attr;
vendor/nette/di/src/DI/ServiceDefinition.php:236:		return isset($this->tags[$tag]) ? $this->tags[$tag] : null;
vendor/nette/di/src/DI/ServiceDefinition.php:246:		call_user_func($this->notifier);
vendor/nette/di/src/DI/ServiceDefinition.php:247:		$this->autowired = is_string($state) || is_array($state) ? (array) $state : (bool) $state;
vendor/nette/di/src/DI/ServiceDefinition.php:257:		return $this->autowired;
vendor/nette/di/src/DI/ServiceDefinition.php:266:		return $this->autowired;
vendor/nette/di/src/DI/ServiceDefinition.php:276:		$this->dynamic = (bool) $state;
vendor/nette/di/src/DI/ServiceDefinition.php:286:		return $this->dynamic;
vendor/nette/di/src/DI/ServiceDefinition.php:296:		call_user_func($this->notifier);
vendor/nette/di/src/DI/ServiceDefinition.php:297:		$this->implement = $interface;
vendor/nette/di/src/DI/ServiceDefinition.php:307:		return $this->implement;
vendor/nette/di/src/DI/ServiceDefinition.php:320:		$this->implementMode = $mode;
vendor/nette/di/src/DI/ServiceDefinition.php:330:		return $this->implementMode;
vendor/nette/di/src/DI/ServiceDefinition.php:338:		return $this->setImplementMode($type);
vendor/nette/di/src/DI/ServiceDefinition.php:346:		return $this->implementMode;
vendor/nette/di/src/DI/ServiceDefinition.php:354:		return $this->addTag(Extensions\InjectExtension::TAG_INJECT, $state);
vendor/nette/di/src/DI/ServiceDefinition.php:362:		return $this->getTag(Extensions\InjectExtension::TAG_INJECT);
vendor/nette/di/src/DI/ServiceDefinition.php:371:		$this->notifier = $notifier;
vendor/nette/di/src/DI/ServiceDefinition.php:377:		$this->factory = unserialize(serialize($this->factory));
vendor/nette/di/src/DI/ServiceDefinition.php:378:		$this->setup = unserialize(serialize($this->setup));
vendor/nette/di/src/DI/ServiceDefinition.php:379:		$this->notifier = 'pi';
vendor/nette/di/src/DI/PhpReflection.php:30:			if (!(new \ReflectionMethod(__METHOD__))->getDocComment()) {
vendor/nette/di/src/DI/PhpReflection.php:36:		if ($ref->getDocComment() && preg_match("#[\\s*]@$name(?:\\s++([^@]\\S*)?|$)#", trim($ref->getDocComment(), '/*'), $m)) {
vendor/nette/di/src/DI/PhpReflection.php:48:		foreach ($prop->getDeclaringClass()->getTraits() as $trait) {
vendor/nette/di/src/DI/PhpReflection.php:49:			if ($trait->hasProperty($prop->getName())) {
vendor/nette/di/src/DI/PhpReflection.php:50:				return self::getDeclaringClass($trait->getProperty($prop->getName()));
vendor/nette/di/src/DI/PhpReflection.php:53:		return $prop->getDeclaringClass();
vendor/nette/di/src/DI/PhpReflection.php:63:			$type = $param->hasType() ? (string) $param->getType() : null;
vendor/nette/di/src/DI/PhpReflection.php:64:			return strtolower($type) === 'self' ? $param->getDeclaringClass()->getName() : $type;
vendor/nette/di/src/DI/PhpReflection.php:65:		} elseif ($param->isArray() || $param->isCallable()) {
vendor/nette/di/src/DI/PhpReflection.php:66:			return $param->isArray() ? 'array' : 'callable';
vendor/nette/di/src/DI/PhpReflection.php:69:				return ($ref = $param->getClass()) ? $ref->getName() : null;
vendor/nette/di/src/DI/PhpReflection.php:71:				if (preg_match('#Class (.+) does not exist#', $e->getMessage(), $m)) {
vendor/nette/di/src/DI/PhpReflection.php:85:		if (PHP_VERSION_ID >= 70000 && $func->hasReturnType()) {
vendor/nette/di/src/DI/PhpReflection.php:86:			$type = (string) $func->getReturnType();
vendor/nette/di/src/DI/PhpReflection.php:87:			return strtolower($type) === 'self' ? $func->getDeclaringClass()->getName() : $type;
vendor/nette/di/src/DI/PhpReflection.php:92:				? self::expandClassName($type, $func->getDeclaringClass())
vendor/nette/di/src/DI/PhpReflection.php:120:		$class = $class->getName();
vendor/nette/di/src/DI/PhpReflection.php:141:			return $rc->getName();
vendor/nette/di/src/DI/PhpReflection.php:153:		} elseif ($rc->inNamespace()) {
vendor/nette/di/src/DI/PhpReflection.php:154:			return $rc->getNamespaceName() . '\\' . $name;
vendor/nette/di/src/DI/PhpReflection.php:168:		if (!isset($cache[$name = $class->getName()])) {
vendor/nette/di/src/DI/PhpReflection.php:169:			if ($class->isInternal()) {
vendor/nette/di/src/DI/PhpReflection.php:172:				$code = file_get_contents($class->getFileName());
vendor/nette/di/src/DI/PhpReflection.php:251:					$level--;
vendor/nette/di/src/DI/Helpers.php:41:			return new Statement(self::expand($var->getEntity(), $params, $recursive), self::expand($var->arguments, $params, $recursive));
vendor/nette/di/src/DI/Helpers.php:47:		$parts = preg_split('#%([\w.-]*)%#i', $var, -1, PREG_SPLIT_DELIM_CAPTURE);
vendor/nette/di/src/DI/Helpers.php:75:					throw new Nette\InvalidArgumentException("Unable to concatenate non-scalar parameter '$part' into '$var'.");
vendor/nette/di/src/DI/Helpers.php:96:		$num = -1;
vendor/nette/di/src/DI/Helpers.php:100:		foreach ($method->getParameters() as $num => $parameter) {
vendor/nette/di/src/DI/Helpers.php:101:			if (!$parameter->isVariadic() && array_key_exists($parameter->getName(), $arguments)) {
vendor/nette/di/src/DI/Helpers.php:102:				$res[$num] = $arguments[$parameter->getName()];
vendor/nette/di/src/DI/Helpers.php:103:				unset($arguments[$parameter->getName()], $arguments[$num]);
vendor/nette/di/src/DI/Helpers.php:112:				$res[$num] = $container->getByType($type, false);
vendor/nette/di/src/DI/Helpers.php:114:					if ($parameter->allowsNull()) {
vendor/nette/di/src/DI/Helpers.php:128:			} elseif (($type && $parameter->allowsNull()) || $parameter->isOptional() || $parameter->isDefaultValueAvailable()) {
vendor/nette/di/src/DI/Helpers.php:131:				$res[$num] = $parameter->isDefaultValueAvailable() ? Reflection::getParameterDefaultValue($parameter) : null;
vendor/nette/di/src/DI/Helpers.php:135:				throw new ServiceCreationException("Parameter \${$parameter->getName()} in $methodName has no class type hint or default value, so its value must be specified.");
vendor/nette/di/src/DI/Helpers.php:149:		return $optCount ? array_slice($res, 0, -$optCount) : $res;
vendor/nette/di/src/DI/Helpers.php:162:			} elseif (is_string($v) && preg_match('#^[\w\\\\]*::[A-Z][A-Z0-9_]*\z#', $v, $m)) {
vendor/nette/di/src/DI/Helpers.php:167:				$tmp = self::filterArguments([$v->getEntity()]);
vendor/nette/di/src/DI/Helpers.php:168:				$args[$k] = new Statement($tmp[0], self::filterArguments($v->arguments));
vendor/nette/di/src/DI/Helpers.php:189:				self::prefixServiceName($config->getEntity(), $namespace),
vendor/nette/di/src/DI/Helpers.php:190:				self::prefixServiceName($config->arguments, $namespace)
vendor/nette/di/src/DI/Helpers.php:211:		if ($ref->getDocComment() && preg_match("#[\\s*]@$name(?:\\s++([^@]\\S*)?|$)#", trim($ref->getDocComment(), '/*'), $m)) {
vendor/nette/di/src/DI/Helpers.php:229:					? $func->getDeclaringClass()->getName()
vendor/nette/di/src/DI/Helpers.php:230:					: Reflection::expandClassName($type, $func->getDeclaringClass());
vendor/nette/di/src/DI/Helpers.php:241:			? (new \ReflectionClass($type))->getName()
vendor/nette/di/src/DI/CompilerExtension.php:35:		$this->compiler = $compiler;
vendor/nette/di/src/DI/CompilerExtension.php:36:		$this->name = $name;
vendor/nette/di/src/DI/CompilerExtension.php:46:		$this->config = $config;
vendor/nette/di/src/DI/CompilerExtension.php:58:			return Config\Helpers::merge($this->config, $this->getContainerBuilder()->expand(func_get_arg(0)));
vendor/nette/di/src/DI/CompilerExtension.php:60:		return $this->config;
vendor/nette/di/src/DI/CompilerExtension.php:72:			return $this->config = $this->validateConfig($expected, $this->config);
vendor/nette/di/src/DI/CompilerExtension.php:75:			$name = $name ?: $this->name;
vendor/nette/di/src/DI/CompilerExtension.php:89:		return $this->compiler->getContainerBuilder();
vendor/nette/di/src/DI/CompilerExtension.php:101:		$res = $loader->load($file);
vendor/nette/di/src/DI/CompilerExtension.php:102:		$this->compiler->addDependencies($loader->getDependencies());
vendor/nette/di/src/DI/CompilerExtension.php:114:		return substr_replace($id, $this->name . '.', substr($id, 0, 1) === '@' ? 1 : 0, 0);
vendor/nette/di/src/DI/Extensions/ExtensionsExtension.php:20:		foreach ($this->getConfig() as $name => $class) {
vendor/nette/di/src/DI/Extensions/ExtensionsExtension.php:25:				$rc = new \ReflectionClass($class->getEntity());
vendor/nette/di/src/DI/Extensions/ExtensionsExtension.php:26:				$this->compiler->addExtension($name, $rc->newInstanceArgs($class->arguments));
vendor/nette/di/src/DI/Extensions/ExtensionsExtension.php:28:				$this->compiler->addExtension($name, new $class);
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:27:		foreach ($this->getConfig() as $type => $info) {
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:28:			$info = $this->validateConfig($this->defaults, $info, $this->prefix($type));
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:33:			$this->addSetups($type, (array) $info['setup']);
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:34:			$this->addTags($type, (array) $info['tags']);
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:41:		foreach ($this->findByType($type) as $def) {
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:46:				$def->addSetup($setup);
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:55:		foreach ($this->findByType($type) as $def) {
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:56:			$def->setTags($def->getTags() + $tags);
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:63:		return array_filter($this->getContainerBuilder()->getDefinitions(), function ($def) use ($type) {
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:64:			return is_a($def->getImplement(), $type, true)
vendor/nette/di/src/DI/Extensions/DecoratorExtension.php:65:				|| ($def->getImplementMode() !== $def::IMPLEMENT_MODE_GET && is_a($def->getType(), $type, true));
vendor/nette/di/src/DI/Extensions/PhpExtension.php:20:		$initialize = $class->getMethod('initialize');
vendor/nette/di/src/DI/Extensions/PhpExtension.php:21:		foreach ($this->getConfig() as $name => $value) {
vendor/nette/di/src/DI/Extensions/PhpExtension.php:29:				$initialize->addBody('set_include_path(?);', [str_replace(';', PATH_SEPARATOR, $value)]);
vendor/nette/di/src/DI/Extensions/PhpExtension.php:32:				$initialize->addBody('ignore_user_abort(?);', [$value]);
vendor/nette/di/src/DI/Extensions/PhpExtension.php:35:				$initialize->addBody('set_time_limit(?);', [$value]);
vendor/nette/di/src/DI/Extensions/PhpExtension.php:38:				$initialize->addBody('date_default_timezone_set(?);', [$value]);
vendor/nette/di/src/DI/Extensions/PhpExtension.php:41:				$initialize->addBody('ini_set(?, ?);', [$name, $value]);
vendor/nette/di/src/DI/Extensions/InjectExtension.php:25:		foreach ($this->getContainerBuilder()->getDefinitions() as $def) {
vendor/nette/di/src/DI/Extensions/InjectExtension.php:26:			if ($def->getTag(self::TAG_INJECT) && $def->getType()) {
vendor/nette/di/src/DI/Extensions/InjectExtension.php:27:				$this->updateDefinition($def);
vendor/nette/di/src/DI/Extensions/InjectExtension.php:35:		$class = $def->getType();
vendor/nette/di/src/DI/Extensions/InjectExtension.php:36:		$setups = $def->getSetup();
vendor/nette/di/src/DI/Extensions/InjectExtension.php:39:			$builder = $this->getContainerBuilder();
vendor/nette/di/src/DI/Extensions/InjectExtension.php:42:				if ($setup->getEntity() === $inject->getEntity()) {
vendor/nette/di/src/DI/Extensions/InjectExtension.php:52:		foreach (array_reverse(self::getInjectMethods($def->getType())) as $method) {
vendor/nette/di/src/DI/Extensions/InjectExtension.php:55:				if ($setup->getEntity() === $inject->getEntity()) {
vendor/nette/di/src/DI/Extensions/InjectExtension.php:63:		$def->setSetup($setups);
vendor/nette/di/src/DI/Extensions/InjectExtension.php:77:				$res[$name] = (new \ReflectionMethod($class, $name))->getDeclaringClass()->getName();
vendor/nette/di/src/DI/Extensions/InjectExtension.php:83:				: (is_a($res[$a], $res[$b], true) ? 1 : -1);
vendor/nette/di/src/DI/Extensions/InjectExtension.php:122:			$container->callMethod([$service, $method]);
vendor/nette/di/src/DI/Extensions/InjectExtension.php:127:			$service->$property = $container->getByType($type);
vendor/nette/di/src/DI/Extensions/InjectExtension.php:140:		} elseif ($container && !$container->getByType($type, false)) {
vendor/nette/di/src/DI/Extensions/DIExtension.php:34:		$this->debugMode = $debugMode;
vendor/nette/di/src/DI/Extensions/DIExtension.php:35:		$this->time = microtime(true);
vendor/nette/di/src/DI/Extensions/DIExtension.php:41:		$config = $this->validateConfig($this->defaults);
vendor/nette/di/src/DI/Extensions/DIExtension.php:42:		$builder = $this->getContainerBuilder();
vendor/nette/di/src/DI/Extensions/DIExtension.php:43:		$builder->addExcludedClasses($config['excluded']);
vendor/nette/di/src/DI/Extensions/DIExtension.php:49:		if ($this->config['parentClass']) {
vendor/nette/di/src/DI/Extensions/DIExtension.php:50:			$class->setExtends($this->config['parentClass']);
vendor/nette/di/src/DI/Extensions/DIExtension.php:53:		$initialize = $class->getMethod('initialize');
vendor/nette/di/src/DI/Extensions/DIExtension.php:54:		$builder = $this->getContainerBuilder();
vendor/nette/di/src/DI/Extensions/DIExtension.php:56:		if ($this->debugMode && $this->config['debugger']) {
vendor/nette/di/src/DI/Extensions/DIExtension.php:57:			Nette\Bridges\DITracy\ContainerPanel::$compilationTime = $this->time;
vendor/nette/di/src/DI/Extensions/DIExtension.php:58:			$initialize->addBody($builder->formatPhp('?;', [
vendor/nette/di/src/DI/Extensions/DIExtension.php:63:		foreach (array_filter($builder->findByTag('run')) as $name => $on) {
vendor/nette/di/src/DI/Extensions/DIExtension.php:64:			$initialize->addBody('$this->getService(?);', [$name]);
vendor/nette/di/src/DI/Extensions/ConstantsExtension.php:20:		foreach ($this->getConfig() as $name => $value) {
vendor/nette/di/src/DI/Extensions/ConstantsExtension.php:21:			$class->getMethod('initialize')->addBody('define(?, ?);', [$name, $value]);
vendor/nette/di/src/DI/Config/Loader.php:47:		if (isset($this->loadedFiles[$file])) {
vendor/nette/di/src/DI/Config/Loader.php:50:		$this->loadedFiles[$file] = true;
vendor/nette/di/src/DI/Config/Loader.php:52:		$this->dependencies[] = $file;
vendor/nette/di/src/DI/Config/Loader.php:53:		$data = $this->getAdapter($file)->load($file);
vendor/nette/di/src/DI/Config/Loader.php:59:			$data = $this->getSection($data, $section, $file);
vendor/nette/di/src/DI/Config/Loader.php:67:				if (!preg_match('#([a-z]+:)?[/\\\\]#Ai', $include)) {
vendor/nette/di/src/DI/Config/Loader.php:70:				$merged = Helpers::merge($this->load($include), $merged);
vendor/nette/di/src/DI/Config/Loader.php:73:		unset($data[self::INCLUDES_KEY], $this->loadedFiles[$file]);
vendor/nette/di/src/DI/Config/Loader.php:88:		if (file_put_contents($file, $this->getAdapter($file)->dump($data)) === false) {
vendor/nette/di/src/DI/Config/Loader.php:100:		return array_unique($this->dependencies);
vendor/nette/di/src/DI/Config/Loader.php:112:		$this->adapters[strtolower($extension)] = $adapter;
vendor/nette/di/src/DI/Config/Loader.php:121:		if (!isset($this->adapters[$extension])) {
vendor/nette/di/src/DI/Config/Loader.php:124:		return is_object($this->adapters[$extension]) ? $this->adapters[$extension] : new $this->adapters[$extension];
vendor/nette/di/src/DI/Config/Loader.php:133:			$item = Helpers::merge($item, $this->getSection($data, $parent, $file));
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:35:		return $this->process((array) Neon\Neon::decode(file_get_contents($file)));
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:47:			if (is_string($key) && substr($key, -1) === self::PREVENT_MERGING) {
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:51:				$key = substr($key, 0, -1);
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:65:				$val = $this->process($val);
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:68:				if ($val->value === Neon\Neon::CHAIN) {
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:70:					foreach ($this->process($val->attributes) as $st) {
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:72:							$tmp === null ? $st->getEntity() : [$tmp, ltrim($st->getEntity(), ':')],
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:73:							$st->arguments
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:78:					$tmp = $this->process([$val->value]);
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:79:					$val = new Statement($tmp[0], $this->process($val->attributes));
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:120:			$val->arguments,
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:127:		if (is_array($val->getEntity()) && $val->getEntity()[0] instanceof Statement) {
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:131:					self::statementToEntity($val->getEntity()[0]),
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:132:					new Neon\Entity('::' . $val->getEntity()[1], $val->arguments),
vendor/nette/di/src/DI/Config/Adapters/NeonAdapter.php:136:			return new Neon\Entity($val->getEntity(), $val->arguments);
vendor/nette/di/src/DI/Config/Adapters/IniAdapter.php:41:		return $this->process($ini);
vendor/nette/di/src/DI/Config/Adapters/IniAdapter.php:54:				if (substr($secName, -1) === self::RAW_SECTION) {
vendor/nette/di/src/DI/Config/Adapters/IniAdapter.php:55:					$secName = substr($secName, 0, -1);
vendor/nette/di/src/DI/Container.php:43:		$this->parameters = $params + $this->parameters;
vendor/nette/di/src/DI/Container.php:52:		return $this->parameters;
vendor/nette/di/src/DI/Container.php:65:			throw new Nette\InvalidArgumentException(sprintf('Service name must be a non-empty string, %s given.', gettype($name)));
vendor/nette/di/src/DI/Container.php:67:		$name = isset($this->meta[self::ALIASES][$name]) ? $this->meta[self::ALIASES][$name] : $name;
vendor/nette/di/src/DI/Container.php:68:		if (isset($this->registry[$name])) {
vendor/nette/di/src/DI/Container.php:74:		} elseif (isset($this->meta[self::SERVICES][$name]) && !$service instanceof $this->meta[self::SERVICES][$name]) {
vendor/nette/di/src/DI/Container.php:75:			throw new Nette\InvalidArgumentException(sprintf("Service '%s' must be instance of %s, %s given.", $name, $this->meta[self::SERVICES][$name], get_class($service)));
vendor/nette/di/src/DI/Container.php:78:		$this->registry[$name] = $service;
vendor/nette/di/src/DI/Container.php:90:		$name = isset($this->meta[self::ALIASES][$name]) ? $this->meta[self::ALIASES][$name] : $name;
vendor/nette/di/src/DI/Container.php:91:		unset($this->registry[$name]);
vendor/nette/di/src/DI/Container.php:103:		if (!isset($this->registry[$name])) {
vendor/nette/di/src/DI/Container.php:104:			if (isset($this->meta[self::ALIASES][$name])) {
vendor/nette/di/src/DI/Container.php:105:				return $this->getService($this->meta[self::ALIASES][$name]);
vendor/nette/di/src/DI/Container.php:107:			$this->registry[$name] = $this->createService($name);
vendor/nette/di/src/DI/Container.php:109:		return $this->registry[$name];
vendor/nette/di/src/DI/Container.php:121:		if (isset($this->meta[self::ALIASES][$name])) {
vendor/nette/di/src/DI/Container.php:122:			return $this->getServiceType($this->meta[self::ALIASES][$name]);
vendor/nette/di/src/DI/Container.php:124:		} elseif (isset($this->meta[self::SERVICES][$name])) {
vendor/nette/di/src/DI/Container.php:125:			return $this->meta[self::SERVICES][$name];
vendor/nette/di/src/DI/Container.php:140:		$name = isset($this->meta[self::ALIASES][$name]) ? $this->meta[self::ALIASES][$name] : $name;
vendor/nette/di/src/DI/Container.php:141:		return isset($this->registry[$name])
vendor/nette/di/src/DI/Container.php:143:				&& (new \ReflectionMethod($this, $method))->getName() === $method);
vendor/nette/di/src/DI/Container.php:154:		if (!$this->hasService($name)) {
vendor/nette/di/src/DI/Container.php:157:		$name = isset($this->meta[self::ALIASES][$name]) ? $this->meta[self::ALIASES][$name] : $name;
vendor/nette/di/src/DI/Container.php:158:		return isset($this->registry[$name]);
vendor/nette/di/src/DI/Container.php:170:		$name = isset($this->meta[self::ALIASES][$name]) ? $this->meta[self::ALIASES][$name] : $name;
vendor/nette/di/src/DI/Container.php:172:		if (isset($this->creating[$name])) {
vendor/nette/di/src/DI/Container.php:173:			throw new Nette\InvalidStateException(sprintf('Circular reference detected for services: %s.', implode(', ', array_keys($this->creating))));
vendor/nette/di/src/DI/Container.php:175:		} elseif (!method_exists($this, $method) || (new \ReflectionMethod($this, $method))->getName() !== $method) {
vendor/nette/di/src/DI/Container.php:180:			$this->creating[$name] = true;
vendor/nette/di/src/DI/Container.php:181:			$service = $this->$method(...$args);
vendor/nette/di/src/DI/Container.php:184:			unset($this->creating[$name]);
vendor/nette/di/src/DI/Container.php:205:		if (!empty($this->meta[self::TYPES][$type][true])) {
vendor/nette/di/src/DI/Container.php:206:			if (count($names = $this->meta[self::TYPES][$type][true]) === 1) {
vendor/nette/di/src/DI/Container.php:207:				return $this->getService($names[0]);
vendor/nette/di/src/DI/Container.php:225:		return empty($this->meta[self::TYPES][$type])
vendor/nette/di/src/DI/Container.php:227:			: array_merge(...array_values($this->meta[self::TYPES][$type]));
vendor/nette/di/src/DI/Container.php:238:		return isset($this->meta[self::TAGS][$tag]) ? $this->meta[self::TAGS][$tag] : [];
vendor/nette/di/src/DI/Container.php:255:		if (!$rc->isInstantiable()) {
vendor/nette/di/src/DI/Container.php:258:		} elseif ($constructor = $rc->getConstructor()) {
vendor/nette/di/src/DI/Container.php:259:			return $rc->newInstanceArgs(Helpers::autowireArguments($constructor, $args, $this));
vendor/nette/di/src/DI/Container.php:300:		return Helpers::expand($s, $this->parameters);
vendor/nette/di/src/DI/Container.php:308:		$tmp = $this->getService($name);
vendor/nette/di/src/DI/Container.php:317:		$this->addService($name, $service);
vendor/nette/di/src/DI/Container.php:325:		return $this->hasService($name);
vendor/nette/di/src/DI/Container.php:333:		$this->removeService($name);
vendor/nette/di/src/DI/DependencyChecker.php:35:		$this->dependencies = array_merge($this->dependencies, $deps);
vendor/nette/di/src/DI/DependencyChecker.php:47:		foreach ($this->dependencies as $dep) {
vendor/nette/di/src/DI/DependencyChecker.php:52:				if (empty($classes[$name = $dep->getName()])) {
vendor/nette/di/src/DI/DependencyChecker.php:56:						$phpFiles[] = (new ReflectionClass($item))->getFileName();
vendor/nette/di/src/DI/DependencyChecker.php:62:				$phpFiles[] = $dep->getFileName();
vendor/nette/di/src/DI/DependencyChecker.php:73:		$files = @array_map('filemtime', array_combine($files, $files)); // @ - file may not exist
vendor/nette/di/src/DI/DependencyChecker.php:74:		$phpFiles = @array_map('filemtime', array_combine($phpFiles, $phpFiles)); // @ - file may not exist
vendor/nette/di/src/DI/DependencyChecker.php:85:		$current = @array_map('filemtime', array_combine($tmp = array_keys($files), $tmp)); // @ - files may not exist
vendor/nette/di/src/DI/DependencyChecker.php:87:		$phpFiles = @array_map('filemtime', array_combine($tmp = array_keys($phpFiles), $tmp)); // @ - files may not exist
vendor/nette/di/src/DI/DependencyChecker.php:106:				$class->isAbstract(),
vendor/nette/di/src/DI/DependencyChecker.php:112:			foreach ($class->getProperties(\ReflectionProperty::IS_PUBLIC) as $prop) {
vendor/nette/di/src/DI/DependencyChecker.php:113:				if ($prop->getDeclaringClass() == $class) { // intentionally ==
vendor/nette/di/src/DI/DependencyChecker.php:114:					$hash[] = [$name, $prop->getName(), $prop->getDocComment()];
vendor/nette/di/src/DI/DependencyChecker.php:117:			foreach ($class->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
vendor/nette/di/src/DI/DependencyChecker.php:118:				if ($method->getDeclaringClass() == $class) { // intentionally ==
vendor/nette/di/src/DI/DependencyChecker.php:121:						$method->getName(),
vendor/nette/di/src/DI/DependencyChecker.php:122:						$method->getDocComment(),
vendor/nette/di/src/DI/DependencyChecker.php:124:						PHP_VERSION_ID >= 70000 && $method->hasReturnType()
vendor/nette/di/src/DI/DependencyChecker.php:125:							? [(string) $method->getReturnType(), $method->getReturnType()->allowsNull()]
vendor/nette/di/src/DI/DependencyChecker.php:139:			$class = $method instanceof ReflectionMethod ? $method->getDeclaringClass() : null;
vendor/nette/di/src/DI/DependencyChecker.php:140:			if ($class && isset($flip[$class->getName()])) {
vendor/nette/di/src/DI/DependencyChecker.php:145:				$class ? Reflection::getUseStatements($method->getDeclaringClass()) : null,
vendor/nette/di/src/DI/DependencyChecker.php:146:				$method->getDocComment(),
vendor/nette/di/src/DI/DependencyChecker.php:148:				PHP_VERSION_ID >= 70000 && $method->hasReturnType()
vendor/nette/di/src/DI/DependencyChecker.php:149:					? [(string) $method->getReturnType(), $method->getReturnType()->allowsNull()]
vendor/nette/di/src/DI/DependencyChecker.php:161:		if (PHP_VERSION_ID < 70000 && $method->getNumberOfParameters() && $method->getFileName()) {
vendor/nette/di/src/DI/DependencyChecker.php:162:			$res[] = file($method->getFileName())[$method->getStartLine() - 1];
vendor/nette/di/src/DI/DependencyChecker.php:164:		foreach ($method->getParameters() as $param) {
vendor/nette/di/src/DI/DependencyChecker.php:166:				$param->getName(),
vendor/nette/di/src/DI/DependencyChecker.php:167:				PHP_VERSION_ID >= 70000 ? [Reflection::getParameterType($param), $param->allowsNull()] : null,
vendor/nette/di/src/DI/DependencyChecker.php:168:				$param->isVariadic(),
vendor/nette/di/src/DI/DependencyChecker.php:169:				$param->isDefaultValueAvailable()
vendor/nette/di/src/DI/Statement.php:42:		$this->entity = $entity;
vendor/nette/di/src/DI/Statement.php:43:		$this->arguments = $arguments;
vendor/nette/di/src/DI/Statement.php:51:		$this->__construct($entity, $this->arguments);
vendor/nette/di/src/DI/Statement.php:58:		return $this->entity;
vendor/nette/di/src/DI/PhpGenerator.php:37:		$this->builder = $builder;
vendor/nette/di/src/DI/PhpGenerator.php:47:		$this->builder->complete();
vendor/nette/di/src/DI/PhpGenerator.php:49:		$this->generatedClasses = [];
vendor/nette/di/src/DI/PhpGenerator.php:50:		$this->className = $className;
vendor/nette/di/src/DI/PhpGenerator.php:51:		$containerClass = $this->generatedClasses[] = new Nette\PhpGenerator\ClassType($this->className);
vendor/nette/di/src/DI/PhpGenerator.php:52:		$containerClass->setExtends(Container::class);
vendor/nette/di/src/DI/PhpGenerator.php:53:		$containerClass->addMethod('__construct')
vendor/nette/di/src/DI/PhpGenerator.php:54:			->addBody('$this->parameters = $params;')
vendor/nette/di/src/DI/PhpGenerator.php:55:			->addBody('$this->parameters += ?;', [$this->builder->parameters])
vendor/nette/di/src/DI/PhpGenerator.php:56:			->addParameter('params', [])
vendor/nette/di/src/DI/PhpGenerator.php:57:				->setTypeHint('array');
vendor/nette/di/src/DI/PhpGenerator.php:59:		$definitions = $this->builder->getDefinitions();
vendor/nette/di/src/DI/PhpGenerator.php:62:		$meta = $containerClass->addProperty('meta')
vendor/nette/di/src/DI/PhpGenerator.php:63:			->setVisibility('protected')
vendor/nette/di/src/DI/PhpGenerator.php:64:			->setValue([Container::TYPES => $this->builder->getClassList()]);
vendor/nette/di/src/DI/PhpGenerator.php:67:			$meta->value[Container::SERVICES][$name] = $def->getType() ?: null;
vendor/nette/di/src/DI/PhpGenerator.php:68:			foreach ($def->getTags() as $tag => $value) {
vendor/nette/di/src/DI/PhpGenerator.php:69:				$meta->value[Container::TAGS][$tag][$name] = $value;
vendor/nette/di/src/DI/PhpGenerator.php:80:				$containerClass->addMethod($methodName)
vendor/nette/di/src/DI/PhpGenerator.php:81:					->addComment(PHP_VERSION_ID < 70000 ? '@return ' . ($def->getImplement() ?: $def->getType()) : '')
vendor/nette/di/src/DI/PhpGenerator.php:82:					->setReturnType(PHP_VERSION_ID >= 70000 ? ($def->getImplement() ?: $def->getType()) : null)
vendor/nette/di/src/DI/PhpGenerator.php:83:					->setBody($name === ContainerBuilder::THIS_CONTAINER ? 'return $this;' : $this->generateService($name))
vendor/nette/di/src/DI/PhpGenerator.php:84:					->setParameters($def->getImplement() ? [] : $this->convertParameters($def->parameters));
vendor/nette/di/src/DI/PhpGenerator.php:86:				throw new ServiceCreationException("Service '$name': " . $e->getMessage(), 0, $e);
vendor/nette/di/src/DI/PhpGenerator.php:90:		$aliases = $this->builder->getAliases();
vendor/nette/di/src/DI/PhpGenerator.php:92:		$meta->value[Container::ALIASES] = $aliases;
vendor/nette/di/src/DI/PhpGenerator.php:94:		return $this->generatedClasses;
vendor/nette/di/src/DI/PhpGenerator.php:104:		$def = $this->builder->getDefinition($name);
vendor/nette/di/src/DI/PhpGenerator.php:106:		if ($def->isDynamic()) {
vendor/nette/di/src/DI/PhpGenerator.php:112:		$entity = $def->getFactory()->getEntity();
vendor/nette/di/src/DI/PhpGenerator.php:113:		$serviceRef = $this->builder->getServiceName($entity);
vendor/nette/di/src/DI/PhpGenerator.php:114:		$factory = $serviceRef && !$def->getFactory()->arguments && !$def->getSetup() && $def->getImplementMode() !== $def::IMPLEMENT_MODE_CREATE
vendor/nette/di/src/DI/PhpGenerator.php:116:			: $def->getFactory();
vendor/nette/di/src/DI/PhpGenerator.php:118:		$this->currentService = null;
vendor/nette/di/src/DI/PhpGenerator.php:119:		$code = '$service = ' . $this->formatStatement($factory) . ";\n";
vendor/nette/di/src/DI/PhpGenerator.php:122:			(PHP_VERSION_ID < 70000 || $def->getSetup())
vendor/nette/di/src/DI/PhpGenerator.php:123:			&& ($type = $def->getType())
vendor/nette/di/src/DI/PhpGenerator.php:133:		$this->currentService = $name;
vendor/nette/di/src/DI/PhpGenerator.php:134:		foreach ($def->getSetup() as $setup) {
vendor/nette/di/src/DI/PhpGenerator.php:135:			$code .= $this->formatStatement($setup) . ";\n";
vendor/nette/di/src/DI/PhpGenerator.php:140:		if (!$def->getImplement()) {
vendor/nette/di/src/DI/PhpGenerator.php:145:			->addImplement($def->getImplement());
vendor/nette/di/src/DI/PhpGenerator.php:147:		$factoryClass->addProperty('container')
vendor/nette/di/src/DI/PhpGenerator.php:148:			->setVisibility('private');
vendor/nette/di/src/DI/PhpGenerator.php:150:		$factoryClass->addMethod('__construct')
vendor/nette/di/src/DI/PhpGenerator.php:151:			->addBody('$this->container = $container;')
vendor/nette/di/src/DI/PhpGenerator.php:152:			->addParameter('container')
vendor/nette/di/src/DI/PhpGenerator.php:153:				->setTypeHint($this->className);
vendor/nette/di/src/DI/PhpGenerator.php:155:		$rm = new \ReflectionMethod($def->getImplement(), $def->getImplementMode());
vendor/nette/di/src/DI/PhpGenerator.php:157:		$factoryClass->addMethod($def->getImplementMode())
vendor/nette/di/src/DI/PhpGenerator.php:158:			->setParameters($this->convertParameters($def->parameters))
vendor/nette/di/src/DI/PhpGenerator.php:159:			->setBody(str_replace('$this', '$this->container', $code))
vendor/nette/di/src/DI/PhpGenerator.php:160:			->setReturnType(PHP_VERSION_ID >= 70000 ? (Reflection::getReturnType($rm) ?: $def->getType()) : null);
vendor/nette/di/src/DI/PhpGenerator.php:163:			$this->generatedClasses[] = $factoryClass;
vendor/nette/di/src/DI/PhpGenerator.php:164:			$factoryClass->setName(str_replace(['\\', '.'], '_', "{$this->className}_{$def->getImplement()}Impl_{$name}"));
vendor/nette/di/src/DI/PhpGenerator.php:165:			return "return new {$factoryClass->getName()}(\$this);";
vendor/nette/di/src/DI/PhpGenerator.php:178:		$entity = $statement->getEntity();
vendor/nette/di/src/DI/PhpGenerator.php:179:		$arguments = $statement->arguments;
vendor/nette/di/src/DI/PhpGenerator.php:182:			return $this->formatPhp($entity, $arguments);
vendor/nette/di/src/DI/PhpGenerator.php:184:		} elseif ($service = $this->builder->getServiceName($entity)) { // factory calling
vendor/nette/di/src/DI/PhpGenerator.php:185:			return $this->formatPhp('$this->?(...?)', [Container::getMethodName($service), $arguments]);
vendor/nette/di/src/DI/PhpGenerator.php:188:			return $this->formatPhp('!?', [$arguments[0]]);
vendor/nette/di/src/DI/PhpGenerator.php:191:			return $this->formatPhp("new $entity" . ($arguments ? '(...?)' : ''), $arguments ? [$arguments] : []);
vendor/nette/di/src/DI/PhpGenerator.php:194:			return $this->formatPhp("$entity[1](...?)", [$arguments]);
vendor/nette/di/src/DI/PhpGenerator.php:197:			$inner = $this->formatPhp('?', [$entity[0]]);
vendor/nette/di/src/DI/PhpGenerator.php:201:			return $this->formatPhp("$inner->?(...?)", [$entity[1], $arguments]);
vendor/nette/di/src/DI/PhpGenerator.php:205:			if ($append = (substr($name, -2) === '[]')) {
vendor/nette/di/src/DI/PhpGenerator.php:206:				$name = substr($name, 0, -2);
vendor/nette/di/src/DI/PhpGenerator.php:208:			if ($this->builder->getServiceName($entity[0])) {
vendor/nette/di/src/DI/PhpGenerator.php:209:				$prop = $this->formatPhp('?->?', [$entity[0], $name]);
vendor/nette/di/src/DI/PhpGenerator.php:211:				$prop = $this->formatPhp($entity[0] . '::$?', [$name]);
vendor/nette/di/src/DI/PhpGenerator.php:214:				? $this->formatPhp($prop . ($append ? '[]' : '') . ' = ?', [$arguments[0]])
vendor/nette/di/src/DI/PhpGenerator.php:217:		} elseif ($service = $this->builder->getServiceName($entity[0])) { // service method
vendor/nette/di/src/DI/PhpGenerator.php:218:			return $this->formatPhp('?->?(...?)', [$entity[0], $entity[1], $arguments]);
vendor/nette/di/src/DI/PhpGenerator.php:221:			return $this->formatPhp("$entity[0]::$entity[1](...?)", [$arguments]);
vendor/nette/di/src/DI/PhpGenerator.php:235:				$val = new PhpLiteral($this->formatStatement($val));
vendor/nette/di/src/DI/PhpGenerator.php:244:				} elseif ($name === $this->currentService) {
vendor/nette/di/src/DI/PhpGenerator.php:247:					$val = new PhpLiteral($this->formatStatement(new Statement(['@' . ContainerBuilder::THIS_CONTAINER, 'getService'], [$name])));
vendor/nette/di/src/DI/PhpGenerator.php:266:				$param->setOptional(true)->setDefaultValue($v);
vendor/nette/di/src/DI/PhpGenerator.php:269:				$param->setTypeHint($tmp[0]);
vendor/nette/robot-loader/composer.json:2:	"name": "nette/robot-loader",
vendor/nette/robot-loader/composer.json:6:	"license": ["BSD-3-Clause", "GPL-2.0", "GPL-3.0"],
vendor/nette/robot-loader/composer.json:19:		"ext-tokenizer": "*",
vendor/nette/robot-loader/composer.json:23:	"require-dev": {
vendor/nette/robot-loader/composer.json:33:	"minimum-stability": "dev",
vendor/nette/robot-loader/composer.json:35:		"branch-alias": {
vendor/nette/robot-loader/composer.json:36:			"dev-master": "3.0-dev"
vendor/nette/robot-loader/contributing.md:12:------
vendor/nette/robot-loader/contributing.md:25:------------
vendor/nette/robot-loader/readme.md:4:[![Downloads this Month](https://img.shields.io/packagist/dm/nette/robot-loader.svg)](https://packagist.org/packages/nette/robot-loader)
vendor/nette/robot-loader/readme.md:5:[![Build Status](https://travis-ci.org/nette/robot-loader.svg?branch=master)](https://travis-ci.org/nette/robot-loader)
vendor/nette/robot-loader/readme.md:6:[![Coverage Status](https://coveralls.io/repos/github/nette/robot-loader/badge.svg?branch=master)](https://coveralls.io/github/nette/robot-loader?branch=master)
vendor/nette/robot-loader/readme.md:7:[![Latest Stable Version](https://poser.pugx.org/nette/robot-loader/v/stable)](https://github.com/nette/robot-loader/releases)
vendor/nette/robot-loader/readme.md:8:[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/robot-loader/blob/master/license.md)
vendor/nette/robot-loader/readme.md:12:------------
vendor/nette/robot-loader/readme.md:14:RobotLoader is a tool that gives you comfort of automated class loading for your entire application including third-party libraries.
vendor/nette/robot-loader/readme.md:16:- get rid of all `require`
vendor/nette/robot-loader/readme.md:17:- only necessary scripts are loaded
vendor/nette/robot-loader/readme.md:18:- requires no strict file naming conventions
vendor/nette/robot-loader/readme.md:19:- allows more classes in single file
vendor/nette/robot-loader/readme.md:39:------------
vendor/nette/robot-loader/readme.md:44:composer require nette/robot-loader
vendor/nette/robot-loader/readme.md:51:-----
vendor/nette/robot-loader/readme.md:59:$loader->addDirectory(__DIR__ . '/app');
vendor/nette/robot-loader/readme.md:60:$loader->addDirectory(__DIR__ . '/libs');
vendor/nette/robot-loader/readme.md:63:$loader->setTempDirectory(__DIR__ . '/temp');
vendor/nette/robot-loader/readme.md:64:$loader->register(); // Run the RobotLoader
vendor/nette/robot-loader/readme.md:71:The `$loader->setAutoRefresh(true or false)` determines whether RobotLoader should reindex files if asked for nonexistent class.
vendor/nette/robot-loader/readme.md:74:If you want RobotLoader to skip some directory, use `$loader->excludeDirectory('temp')`.
vendor/nette/robot-loader/license.md:17:project or top-level domain, and choose a name that stands on its own merits.
vendor/nette/robot-loader/license.md:22:---------------
vendor/nette/robot-loader/license.md:54:--------------------------
vendor/nette/robot-loader/license.md:59:- [GPL version 2](http://www.gnu.org/licenses/gpl-2.0.html)
vendor/nette/robot-loader/license.md:60:- [GPL version 3](http://www.gnu.org/licenses/gpl-3.0.html)
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:19: * $loader->addDirectory('app');
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:20: * $loader->excludeDirectory('app/exclude');
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:21: * $loader->setTempDirectory('temp');
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:22: * $loader->register();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:74:		$this->loadCache();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:88:		$info = isset($this->classes[$type]) ? $this->classes[$type] : null;
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:90:		if ($this->autoRebuild) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:92:				$missing = &$this->missing[$type];
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:94:				if (!$this->refreshed && $missing <= self::RETRY_LIMIT) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:95:					$this->refresh();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:96:					$this->saveCache();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:98:					unset($this->classes[$type]);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:99:					$this->saveCache();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:102:			} elseif (!$this->refreshed && filemtime($info['file']) !== $info['time']) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:103:				$this->updateFile($info['file']);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:104:				if (empty($this->classes[$type])) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:105:					$this->missing[$type] = 0;
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:107:				$this->saveCache();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:109:			$info = isset($this->classes[$type]) ? $this->classes[$type] : null;
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:125:		$this->scanPaths = array_merge($this->scanPaths, (array) $path);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:137:		$this->excludeDirs = array_merge($this->excludeDirs, (array) $path);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:148:		foreach ($this->classes as $class => $info) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:161:		$this->refresh();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:162:		if ($this->tempDirectory) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:163:			$this->saveCache();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:174:		$this->refreshed = true; // prevents calling refresh() or updateFile() in tryLoad()
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:176:		foreach ($this->classes as $class => $info) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:181:		$this->classes = [];
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:182:		foreach ($this->scanPaths as $path) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:183:			foreach (is_file($path) ? [new SplFileInfo($path)] : $this->createFileIterator($path) as $file) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:184:				$file = $file->getPathname();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:188:					$classes = $this->scanPhp(file_get_contents($file));
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:193:					$info = &$this->classes[$class];
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:198:					unset($this->missing[$class]);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:216:		$ignoreDirs = is_array($this->ignoreDirs) ? $this->ignoreDirs : preg_split('#[,\s]+#', $this->ignoreDirs);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:218:		foreach (array_merge($ignoreDirs, $this->excludeDirs) as $item) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:224:		$iterator = Nette\Utils\Finder::findFiles(is_array($this->acceptFiles) ? $this->acceptFiles : preg_split('#[,\s]+#', $this->acceptFiles))
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:225:			->filter(function (SplFileInfo $file) use (&$disallow) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:226:				return !isset($disallow[str_replace('\\', '/', $file->getPathname())]);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:228:			->from($dir)
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:229:			->exclude($ignoreDirs)
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:230:			->filter($filter = function (SplFileInfo $dir) use (&$disallow) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:231:				$path = str_replace('\\', '/', $dir->getPathname());
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:252:		foreach ($this->classes as $class => $info) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:254:				unset($this->classes[$class]);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:258:		$classes = is_file($file) ? $this->scanPhp(file_get_contents($file)) : [];
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:260:			$info = &$this->classes[$class];
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:262:				$this->updateFile($info['file']);
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:263:				$info = &$this->classes[$class];
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:341:				$level--;
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:352:	 * Sets auto-refresh mode.
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:357:		$this->autoRebuild = (bool) $on;
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:369:		$this->tempDirectory = $dir;
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:380:		$file = $this->getCacheFile();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:381:		list($this->classes, $this->missing) = @include $file; // @ file may not exist
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:382:		if (is_array($this->classes)) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:391:		list($this->classes, $this->missing) = @include $file; // @ file may not exist
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:392:		if (!is_array($this->classes)) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:393:			$this->classes = [];
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:394:			$this->refresh();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:395:			$this->saveCache();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:410:		$file = $this->getCacheFile();
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:412:		$code = "<?php\nreturn " . var_export([$this->classes, $this->missing], true) . ";\n";
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:414:			@unlink($tempFile); // @ - file may not exist
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:428:		if (!$this->tempDirectory) {
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:431:		return $this->tempDirectory . '/' . md5(serialize($this->getCacheKey())) . '.php';
vendor/nette/robot-loader/src/RobotLoader/RobotLoader.php:440:		return [$this->ignoreDirs, $this->acceptFiles, $this->scanPaths, $this->excludeDirs];
vendor/nette/neon/composer.json:4:	"homepage": "http://ne-on.org",
vendor/nette/neon/composer.json:5:	"license": ["BSD-3-Clause", "GPL-2.0", "GPL-3.0"],
vendor/nette/neon/composer.json:18:		"ext-iconv": "*",
vendor/nette/neon/composer.json:19:		"ext-json": "*"
vendor/nette/neon/composer.json:21:	"require-dev": {
vendor/nette/neon/composer.json:28:	"minimum-stability": "dev",
vendor/nette/neon/composer.json:30:		"branch-alias": {
vendor/nette/neon/composer.json:31:			"dev-master": "2.4-dev"
vendor/nette/neon/contributing.md:12:------
vendor/nette/neon/contributing.md:25:------------
vendor/nette/neon/readme.md:1:[NEON](http://ne-on.org): Nette Object Notation
vendor/nette/neon/readme.md:5:[![Build Status](https://travis-ci.org/nette/neon.svg?branch=master)](https://travis-ci.org/nette/neon)
vendor/nette/neon/readme.md:8:[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/neon/blob/master/license.md)
vendor/nette/neon/readme.md:29:	- Dave
vendor/nette/neon/readme.md:30:	- Kryten
vendor/nette/neon/readme.md:31:	- Rimmer
vendor/nette/neon/readme.md:35:- [Neon sandbox](http://ne-on.org)
vendor/nette/neon/readme.md:36:- [Neon for Javascript](https://github.com/matej21/neon-js)
vendor/nette/neon/syntax.txt:2:-------------
vendor/nette/neon/syntax.txt:3:- tabs are converted to single space
vendor/nette/neon/syntax.txt:4:- \r is removed
vendor/nette/neon/syntax.txt:8:-------
vendor/nette/neon/syntax.txt:13:------
vendor/nette/neon/syntax.txt:23:-----------
vendor/nette/neon/syntax.txt:31:----------
vendor/nette/neon/syntax.txt:32:BlockArray   ::= Indent ( '- ' Value | KeyValuePair ) EOL
vendor/nette/neon/license.md:17:project or top-level domain, and choose a name that stands on its own merits.
vendor/nette/neon/license.md:22:---------------
vendor/nette/neon/license.md:54:--------------------------
vendor/nette/neon/license.md:59:- [GPL version 2](http://www.gnu.org/licenses/gpl-2.0.html)
vendor/nette/neon/license.md:60:- [GPL version 3](http://www.gnu.org/licenses/gpl-3.0.html)
vendor/nette/neon/src/Neon/Entity.php:25:		$this->value = $value;
vendor/nette/neon/src/Neon/Entity.php:26:		$this->attributes = (array) $attrs;
vendor/nette/neon/src/Neon/Neon.php:29:		return $encoder->encode($var, $options);
vendor/nette/neon/src/Neon/Neon.php:41:		return $decoder->decode($input);
vendor/nette/neon/src/Neon/Encoder.php:28:			return $var->format('Y-m-d H:i:s O');
vendor/nette/neon/src/Neon/Encoder.php:31:			if ($var->value === Neon::CHAIN) {
vendor/nette/neon/src/Neon/Encoder.php:32:				return implode('', array_map([$this, 'encode'], $var->attributes));
vendor/nette/neon/src/Neon/Encoder.php:34:			return $this->encode($var->value) . '('
vendor/nette/neon/src/Neon/Encoder.php:35:				. (is_array($var->attributes) ? substr($this->encode($var->attributes), 1, -1) : '') . ')';
vendor/nette/neon/src/Neon/Encoder.php:47:			$isList = !$var || array_keys($var) === range(0, count($var) - 1);
vendor/nette/neon/src/Neon/Encoder.php:54:					$v = $this->encode($v, self::BLOCK);
vendor/nette/neon/src/Neon/Encoder.php:55:					$s .= ($isList ? '-' : $this->encode($k) . ':')
vendor/nette/neon/src/Neon/Encoder.php:58:							: "\n" . preg_replace('#^(?=.)#m', "\t", $v) . (substr($v, -2, 1) === "\n" ? '' : "\n"));
vendor/nette/neon/src/Neon/Encoder.php:64:					$s .= ($isList ? '' : $this->encode($k) . ': ') . $this->encode($v) . ', ';
vendor/nette/neon/src/Neon/Encoder.php:66:				return ($isList ? '[' : '{') . substr($s, 0, -2) . ($isList ? ']' : '}');
vendor/nette/neon/src/Neon/Encoder.php:70:			&& !preg_match('~[\x00-\x1F]|^\d{4}|^(true|false|yes|no|on|off|null)\z~i', $var)
vendor/nette/neon/src/Neon/Decoder.php:25:			(?: [^#"\',:=[\]{}()\x00-\x20!`-] | [:-][^"\',\]})\s] )
vendor/nette/neon/src/Neon/Decoder.php:27:				[^,:=\]})(\x00-\x20]++ |
vendor/nette/neon/src/Neon/Decoder.php:29:				[\ \t]++ [^#,:=\]})(\x00-\x20]
vendor/nette/neon/src/Neon/Decoder.php:33:			[,:=[\]{}()-]
vendor/nette/neon/src/Neon/Decoder.php:40:	const PATTERN_DATETIME = '#\d\d\d\d-\d\d?-\d\d?(?:(?:[Tt]| ++)\d\d?:\d\d:\d\d(?:\.\d*+)? *+(?:Z|[-+]\d\d?(?::?\d\d)?)?)?\z#A';
vendor/nette/neon/src/Neon/Decoder.php:42:	const PATTERN_HEX = '#0x[0-9a-fA-F]++\z#A';
vendor/nette/neon/src/Neon/Decoder.php:44:	const PATTERN_OCTAL = '#0o[0-7]++\z#A';
vendor/nette/neon/src/Neon/Decoder.php:46:	const PATTERN_BINARY = '#0b[0-1]++\z#A';
vendor/nette/neon/src/Neon/Decoder.php:90:		$this->input = "\n" . str_replace("\r", '', $input); // \n forces indent detection
vendor/nette/neon/src/Neon/Decoder.php:93:		$this->tokens = preg_split($pattern, $this->input, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_OFFSET_CAPTURE | PREG_SPLIT_DELIM_CAPTURE);
vendor/nette/neon/src/Neon/Decoder.php:95:		$last = end($this->tokens);
vendor/nette/neon/src/Neon/Decoder.php:96:		if ($this->tokens && !preg_match($pattern, $last[0])) {
vendor/nette/neon/src/Neon/Decoder.php:97:			$this->pos = count($this->tokens) - 1;
vendor/nette/neon/src/Neon/Decoder.php:98:			$this->error();
vendor/nette/neon/src/Neon/Decoder.php:101:		$this->pos = 0;
vendor/nette/neon/src/Neon/Decoder.php:102:		$res = $this->parse(null);
vendor/nette/neon/src/Neon/Decoder.php:104:		while (isset($this->tokens[$this->pos])) {
vendor/nette/neon/src/Neon/Decoder.php:105:			if ($this->tokens[$this->pos][0][0] === "\n") {
vendor/nette/neon/src/Neon/Decoder.php:106:				$this->pos++;
vendor/nette/neon/src/Neon/Decoder.php:108:				$this->error();
vendor/nette/neon/src/Neon/Decoder.php:116:	 * @param  string  indentation (for block-parser)
vendor/nette/neon/src/Neon/Decoder.php:125:		$tokens = $this->tokens;
vendor/nette/neon/src/Neon/Decoder.php:126:		$n = &$this->pos;
vendor/nette/neon/src/Neon/Decoder.php:135:					$this->error();
vendor/nette/neon/src/Neon/Decoder.php:137:				$this->addValue($result, $hasKey ? $key : null, $hasValue ? $value : null);
vendor/nette/neon/src/Neon/Decoder.php:142:					$this->error('Unacceptable key');
vendor/nette/neon/src/Neon/Decoder.php:146:					$result[] = $this->parse($indent . '  ', [], $value, true);
vendor/nette/neon/src/Neon/Decoder.php:150:						$this->error('Bad indentation');
vendor/nette/neon/src/Neon/Decoder.php:157:					$this->error();
vendor/nette/neon/src/Neon/Decoder.php:166:			} elseif ($t === '-') { // BlockArray bullet
vendor/nette/neon/src/Neon/Decoder.php:168:					$this->error();
vendor/nette/neon/src/Neon/Decoder.php:176:						$this->error();
vendor/nette/neon/src/Neon/Decoder.php:179:					if ($value instanceof Entity && $value->value === Neon::CHAIN) {
vendor/nette/neon/src/Neon/Decoder.php:180:						end($value->attributes)->attributes = $this->parse(false, []);
vendor/nette/neon/src/Neon/Decoder.php:182:						$value = new Entity($value, $this->parse(false, []));
vendor/nette/neon/src/Neon/Decoder.php:186:					$value = $this->parse(false, []);
vendor/nette/neon/src/Neon/Decoder.php:189:				if (!isset($tokens[$n]) || $tokens[$n][0] !== self::BRACKETS[$t]) { // unexpected type of bracket or block-parser
vendor/nette/neon/src/Neon/Decoder.php:190:					$this->error();
vendor/nette/neon/src/Neon/Decoder.php:195:					$this->error();
vendor/nette/neon/src/Neon/Decoder.php:202:						$this->addValue($result, $hasKey ? $key : null, $hasValue ? $value : null);
vendor/nette/neon/src/Neon/Decoder.php:221:						$this->error('Invalid combination of tabs and spaces');
vendor/nette/neon/src/Neon/Decoder.php:224:					if (strlen($newIndent) > strlen($indent)) { // open new block-array or hash
vendor/nette/neon/src/Neon/Decoder.php:227:							$this->error('Bad indentation');
vendor/nette/neon/src/Neon/Decoder.php:229:						$this->addValue($result, $key, $this->parse($newIndent));
vendor/nette/neon/src/Neon/Decoder.php:233:							$this->error('Bad indentation');
vendor/nette/neon/src/Neon/Decoder.php:242:							$this->addValue($result, $key, $hasValue ? $value : null);
vendor/nette/neon/src/Neon/Decoder.php:243:							if ($key !== null && !$hasValue && $newIndent === $indent && isset($tokens[$n + 1]) && $tokens[$n + 1][0] === '-') {
vendor/nette/neon/src/Neon/Decoder.php:258:						$converted = substr($t, 3, -3);
vendor/nette/neon/src/Neon/Decoder.php:262:						$converted = substr($t, 1, -1);
vendor/nette/neon/src/Neon/Decoder.php:265:						$converted = preg_replace_callback('#\\\\(?:ud[89ab][0-9a-f]{2}\\\\ud[c-f][0-9a-f]{2}|u[0-9a-f]{4}|x[0-9a-f]{2}|.)#i', [$this, 'cbString'], $converted);
vendor/nette/neon/src/Neon/Decoder.php:284:						if ($value->value !== Neon::CHAIN) {
vendor/nette/neon/src/Neon/Decoder.php:287:						$value->attributes[] = new Entity($converted);
vendor/nette/neon/src/Neon/Decoder.php:289:						$this->error();
vendor/nette/neon/src/Neon/Decoder.php:300:				$this->addValue($result, $hasKey ? $key : null, $hasValue ? $value : null);
vendor/nette/neon/src/Neon/Decoder.php:307:					$this->error();
vendor/nette/neon/src/Neon/Decoder.php:310:				$this->addValue($result, $key, $hasValue ? $value : null);
vendor/nette/neon/src/Neon/Decoder.php:322:			$this->error("Duplicated key '$key'");
vendor/nette/neon/src/Neon/Decoder.php:337:			$code = $tail ? (0x2400 + (($lead - 0xD800) << 10) + $tail) : $lead;
vendor/nette/neon/src/Neon/Decoder.php:339:				$this->error("Invalid UTF-8 (lone surrogate) $sq");
vendor/nette/neon/src/Neon/Decoder.php:341:			return iconv('UTF-32BE', 'UTF-8//IGNORE', pack('N', $code));
vendor/nette/neon/src/Neon/Decoder.php:345:			$this->error("Invalid escaping sequence $sq");
vendor/nette/neon/src/Neon/Decoder.php:352:		$last = isset($this->tokens[$this->pos]) ? $this->tokens[$this->pos] : null;
vendor/nette/neon/src/Neon/Decoder.php:353:		$offset = $last ? $last[1] : strlen($this->input);
vendor/nette/neon/src/Neon/Decoder.php:354:		$text = substr($this->input, 0, $offset);
vendor/nette/neon/src/Neon/Decoder.php:356:		$col = $offset - strrpos("\n" . $text, "\n") + 1;
vendor/nette/utils/composer.json:4:	"keywords": ["nette", "images", "json", "password", "validation", "utility", "string", "array", "core", "slugify", "utf-8", "unicode", "paginator", "datetime"],
vendor/nette/utils/composer.json:6:	"license": ["BSD-3-Clause", "GPL-2.0", "GPL-3.0"],
vendor/nette/utils/composer.json:20:	"require-dev": {
vendor/nette/utils/composer.json:25:		"ext-iconv": "to use Strings::webalize() and toAscii()",
vendor/nette/utils/composer.json:26:		"ext-json": "to use Nette\\Utils\\Json",
vendor/nette/utils/composer.json:27:		"ext-intl": "for script transliteration in Strings::webalize() and toAscii()",
vendor/nette/utils/composer.json:28:		"ext-mbstring": "to use Strings::lower() etc...",
vendor/nette/utils/composer.json:29:		"ext-xml": "to use Strings::length() etc. when mbstring is not available",
vendor/nette/utils/composer.json:30:		"ext-gd": "to use Image"
vendor/nette/utils/composer.json:39:	"minimum-stability": "dev",
vendor/nette/utils/composer.json:41:		"branch-alias": {
vendor/nette/utils/composer.json:42:			"dev-master": "2.5-dev"
vendor/nette/utils/contributing.md:12:------
vendor/nette/utils/contributing.md:25:------------
vendor/nette/utils/readme.md:5:[![Build Status](https://travis-ci.org/nette/utils.svg?branch=master)](https://travis-ci.org/nette/utils)
vendor/nette/utils/readme.md:8:[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/utils/blob/master/license.md)
vendor/nette/utils/readme.md:11:---------------------------------
vendor/nette/utils/readme.md:13:PHP gives a huge freedom to developers, which makes it a perfect language for making mistakes. But you can stop this bad behavior and start writing applications without hardly discoverable mistakes. Do you wonder how? It's really simple -- you just need to have stricter rules.
vendor/nette/utils/readme.md:24:		return $this->radius * $this->radius * M_PI;
vendor/nette/utils/readme.md:30:$circle->raduis = 10;
vendor/nette/utils/readme.md:31:echo $circle->getArea(); // 10² * π ≈ 314
vendor/nette/utils/readme.md:34:On the first look it seems that code will print out 314; but it returns 0. How is this even possible? Accidentaly, `$circle->radius` was mistyped to `raduis`. Just a small typo, which will give you a hard time correcting it, because PHP does not say a thing when something is wrong. Not even a Warning or Notice error message. Because PHP does not think it is an error.
vendor/nette/utils/readme.md:47:![](https://files.nette.org/git/doc-2.1/debugger-circle.png)
vendor/nette/utils/readme.md:55:echo $circle->undeclared; // throws Nette\MemberAccessException
vendor/nette/utils/readme.md:56:$circle->undeclared = 1; // throws Nette\MemberAccessException
vendor/nette/utils/readme.md:57:$circle->unknownMethod(); // throws Nette\MemberAccessException
vendor/nette/utils/readme.md:64:-----------------------------
vendor/nette/utils/readme.md:66:In modern object oriented languages *property* describes members of class, which look like variables but are represented by methods. When reading or assigning values to those "variables", methods are called instead (so-called getters and setters). It is really useful feature, which allows us to control the access to these variables. Using this we can validate inputs or postpone the computation of values of these variables to the time when it is actually accessed.
vendor/nette/utils/readme.md:70:- Add annotation `@property type $xyz`
vendor/nette/utils/readme.md:71:- Getter's name is `getXyz()` or `isXyz()`, setter's is `setXyz()`
vendor/nette/utils/readme.md:72:- It is possible to have `@property-read` only and `@property-write` only properties
vendor/nette/utils/readme.md:73:- Names of properties are case-sensitive (first letter being an exception)
vendor/nette/utils/readme.md:75:We will make use of properties in the class Circle to make sure variable `$radius` contains only non-negative numbers:
vendor/nette/utils/readme.md:80: * @property-read float $area
vendor/nette/utils/readme.md:81: * @property-read bool $visible
vendor/nette/utils/readme.md:91:		return $this->radius;
vendor/nette/utils/readme.md:97:		$this->radius = max(0.0, (float) $radius);
vendor/nette/utils/readme.md:102:		return $this->radius * $this->radius * M_PI;
vendor/nette/utils/readme.md:107:		return $this->radius > 0;
vendor/nette/utils/readme.md:113:$circle->radius = 10; // calls setRadius()
vendor/nette/utils/readme.md:114:echo $circle->area; // calls getArea()
vendor/nette/utils/readme.md:115:echo $circle->visible; // calls $circle->isVisible()
vendor/nette/utils/readme.md:121:------
vendor/nette/utils/readme.md:136:		$this->onChange($this, $this->radius, $radius);
vendor/nette/utils/readme.md:138:		$this->radius = max(0.0, (float) $radius);
vendor/nette/utils/readme.md:145:$circle->onChange[] = function ($circle, $oldValue, $newValue) {
vendor/nette/utils/readme.md:149:$circle->setRadius(10);
vendor/nette/utils/license.md:17:project or top-level domain, and choose a name that stands on its own merits.
vendor/nette/utils/license.md:22:---------------
vendor/nette/utils/license.md:54:--------------------------
vendor/nette/utils/license.md:59:- [GPL version 2](http://www.gnu.org/licenses/gpl-2.0.html)
vendor/nette/utils/license.md:60:- [GPL version 3](http://www.gnu.org/licenses/gpl-3.0.html)
vendor/nette/utils/src/Utils/FileSystem.php:27:		if (!is_dir($dir) && !@mkdir($dir, $mode, true) && !is_dir($dir)) { // @ - dir may already exist
vendor/nette/utils/src/Utils/FileSystem.php:49:				static::delete($item->getPathname());
vendor/nette/utils/src/Utils/FileSystem.php:52:				if ($item->isDir()) {
vendor/nette/utils/src/Utils/FileSystem.php:53:					static::createDir($dest . '/' . $iterator->getSubPathName());
vendor/nette/utils/src/Utils/FileSystem.php:55:					static::copy($item->getPathname(), $dest . '/' . $iterator->getSubPathName());
vendor/nette/utils/src/Utils/FileSystem.php:83:				static::delete($item->getPathname());
vendor/nette/utils/src/Utils/FileSystem.php:156:		return (bool) preg_match('#([a-z]:)?[/\\\\]|[a-z][a-z0-9+.-]*://#Ai', $path);
vendor/nette/utils/src/Utils/Strings.php:24:	 * Checks if the string is valid for UTF-8 encoding.
vendor/nette/utils/src/Utils/Strings.php:35:	 * Removes invalid code unit sequences from UTF-8 string.
vendor/nette/utils/src/Utils/Strings.php:41:		// removes xD800-xDFFF, x110000 and higher
vendor/nette/utils/src/Utils/Strings.php:42:		return htmlspecialchars_decode(htmlspecialchars($s, ENT_NOQUOTES | ENT_IGNORE, 'UTF-8'), ENT_NOQUOTES);
vendor/nette/utils/src/Utils/Strings.php:47:	 * Returns a specific character in UTF-8.
vendor/nette/utils/src/Utils/Strings.php:57:		return iconv('UTF-32BE', 'UTF-8//IGNORE', pack('N', $code));
vendor/nette/utils/src/Utils/Strings.php:81:		return strlen($needle) === 0 || substr($haystack, -strlen($needle)) === $needle;
vendor/nette/utils/src/Utils/Strings.php:98:	 * Returns a part of UTF-8 string.
vendor/nette/utils/src/Utils/Strings.php:107:			return mb_substr($s, $start, $length, 'UTF-8'); // MB is much faster
vendor/nette/utils/src/Utils/Strings.php:113:		return iconv_substr($s, $start, $length, 'UTF-8');
vendor/nette/utils/src/Utils/Strings.php:119:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:127:		$s = preg_replace('#[\x00-\x08\x0B-\x1F\x7F-\x9F]+#u', '', $s);
vendor/nette/utils/src/Utils/Strings.php:140:	 * Standardize line endings to unix-like.
vendor/nette/utils/src/Utils/Strings.php:141:	 * @param  string  UTF-8 encoding or 8-bit
vendor/nette/utils/src/Utils/Strings.php:152:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:159:			$transliterator = \Transliterator::create('Any-Latin; Latin-ASCII');
vendor/nette/utils/src/Utils/Strings.php:162:		$s = preg_replace('#[^\x09\x0A\x0D\x20-\x7E\xA0-\x{2FF}\x{370}-\x{10FFFF}]#u', '', $s);
vendor/nette/utils/src/Utils/Strings.php:169:			$s = $transliterator->transliterate($s);
vendor/nette/utils/src/Utils/Strings.php:176:			$s = iconv('UTF-8', 'WINDOWS-1250//TRANSLIT//IGNORE', $s);
vendor/nette/utils/src/Utils/Strings.php:182:				'ALLSSSSTZZZallssstzzzRAAAALCCCEEEEIIDDNNOOOOxRUUUUYTsraaaalccceeeeiiddnnooooruuuuyt- <->|-.');
vendor/nette/utils/src/Utils/Strings.php:183:			$s = preg_replace('#[^\x00-\x7F]++#', '', $s);
vendor/nette/utils/src/Utils/Strings.php:185:			$s = iconv('UTF-8', 'ASCII//TRANSLIT//IGNORE', $s);
vendor/nette/utils/src/Utils/Strings.php:193:	 * Converts to web safe characters [a-z0-9-] text.
vendor/nette/utils/src/Utils/Strings.php:194:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:205:		$s = preg_replace('#[^a-z0-9' . ($charlist !== null ? preg_quote($charlist, '#') : '') . ']+#i', '-', $s);
vendor/nette/utils/src/Utils/Strings.php:206:		$s = trim($s, '-');
vendor/nette/utils/src/Utils/Strings.php:213:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:215:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:221:			$maxLen = $maxLen - self::length($append);
vendor/nette/utils/src/Utils/Strings.php:225:			} elseif ($matches = self::match($s, '#^.{1,' . $maxLen . '}(?=[\s\x00-/:-@\[-`{-~])#us')) {
vendor/nette/utils/src/Utils/Strings.php:238:	 * @param  string  UTF-8 encoding or 8-bit
vendor/nette/utils/src/Utils/Strings.php:254:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:259:		return mb_strtolower($s, 'UTF-8');
vendor/nette/utils/src/Utils/Strings.php:265:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:276:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:281:		return mb_strtoupper($s, 'UTF-8');
vendor/nette/utils/src/Utils/Strings.php:287:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:298:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:303:		return mb_convert_case($s, MB_CASE_TITLE, 'UTF-8');
vendor/nette/utils/src/Utils/Strings.php:308:	 * Case-insensitive compares UTF-8 strings.
vendor/nette/utils/src/Utils/Strings.php:317:			$left = self::substring($left, $len, -$len);
vendor/nette/utils/src/Utils/Strings.php:318:			$right = self::substring($right, $len, -$len);
vendor/nette/utils/src/Utils/Strings.php:341:					while ($i && $first[$i - 1] >= "\x80" && $first[$i] >= "\x80" && $first[$i] < "\xC0") {
vendor/nette/utils/src/Utils/Strings.php:342:						$i--;
vendor/nette/utils/src/Utils/Strings.php:353:	 * Returns number of characters (not bytes) in UTF-8 string.
vendor/nette/utils/src/Utils/Strings.php:360:		return function_exists('mb_strlen') ? mb_strlen($s, 'UTF-8') : strlen(utf8_decode($s));
vendor/nette/utils/src/Utils/Strings.php:366:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:379:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:386:		$length = max(0, $length - self::length($s));
vendor/nette/utils/src/Utils/Strings.php:394:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:401:		$length = max(0, $length - self::length($s));
vendor/nette/utils/src/Utils/Strings.php:409:	 * @param  string  UTF-8 encoding
vendor/nette/utils/src/Utils/Strings.php:414:		return iconv('UTF-32LE', 'UTF-8', strrev(iconv('UTF-8', 'UTF-32BE', $s)));
vendor/nette/utils/src/Utils/Strings.php:479:			while (($pos = strpos($haystack, $needle, $pos)) !== false && --$nth) {
vendor/nette/utils/src/Utils/Strings.php:487:			$pos = $len - 1;
vendor/nette/utils/src/Utils/Strings.php:488:			while (($pos = strrpos($haystack, $needle, $pos - $len)) !== false && ++$nth) {
vendor/nette/utils/src/Utils/Strings.php:489:				$pos--;
vendor/nette/utils/src/Utils/Strings.php:505:		return self::pcre('preg_split', [$pattern, $subject, -1, $flags | PREG_SPLIT_DELIM_CAPTURE]);
vendor/nette/utils/src/Utils/Strings.php:558:	public static function replace($subject, $pattern, $replacement = null, $limit = -1)
vendor/nette/utils/src/Utils/Strings.php:582:			PREG_BAD_UTF8_ERROR => 'Malformed UTF-8 data',
vendor/nette/utils/src/Utils/Strings.php:583:			PREG_BAD_UTF8_OFFSET_ERROR => 'Offset didn\'t correspond to the begin of a valid UTF-8 code point',
vendor/nette/utils/src/Utils/Strings.php:587:			// compile-time error, not detectable by preg_last_error
vendor/nette/utils/src/Utils/Strings.php:591:		if (($code = preg_last_error()) // run-time error, but preg_last_error & return code are liars
vendor/nette/utils/src/Utils/Json.php:35:			| (defined('JSON_PRESERVE_ZERO_FRACTION') ? JSON_PRESERVE_ZERO_FRACTION : 0); // since PHP 5.6.6 & PECL JSON-C 1.3.7
vendor/nette/utils/src/Utils/Json.php:68:				throw new JsonException('Invalid UTF-8 sequence', 5);
vendor/nette/utils/src/Utils/Json.php:70:				$flags &= ~JSON_BIGINT_AS_STRING; // not implemented in PECL JSON-C 1.3.2 for 64bit systems
vendor/nette/utils/src/Utils/Paginator.php:17: * @property-read int $firstPage
vendor/nette/utils/src/Utils/Paginator.php:18: * @property-read int|null $lastPage
vendor/nette/utils/src/Utils/Paginator.php:20: * @property-read bool $first
vendor/nette/utils/src/Utils/Paginator.php:21: * @property-read bool $last
vendor/nette/utils/src/Utils/Paginator.php:22: * @property-read int|null $pageCount
vendor/nette/utils/src/Utils/Paginator.php:25: * @property-read int $offset
vendor/nette/utils/src/Utils/Paginator.php:26: * @property-read int|null $countdownOffset
vendor/nette/utils/src/Utils/Paginator.php:27: * @property-read int|null $length
vendor/nette/utils/src/Utils/Paginator.php:53:		$this->page = (int) $page;
vendor/nette/utils/src/Utils/Paginator.php:64:		return $this->base + $this->getPageIndex();
vendor/nette/utils/src/Utils/Paginator.php:74:		return $this->base;
vendor/nette/utils/src/Utils/Paginator.php:84:		return $this->itemCount === null ? null : $this->base + max(0, $this->getPageCount() - 1);
vendor/nette/utils/src/Utils/Paginator.php:95:		$this->base = (int) $base;
vendor/nette/utils/src/Utils/Paginator.php:106:		return $this->base;
vendor/nette/utils/src/Utils/Paginator.php:111:	 * Returns zero-based page number.
vendor/nette/utils/src/Utils/Paginator.php:116:		$index = max(0, $this->page - $this->base);
vendor/nette/utils/src/Utils/Paginator.php:117:		return $this->itemCount === null ? $index : min($index, max(0, $this->getPageCount() - 1));
vendor/nette/utils/src/Utils/Paginator.php:127:		return $this->getPageIndex() === 0;
vendor/nette/utils/src/Utils/Paginator.php:137:		return $this->itemCount === null ? false : $this->getPageIndex() >= $this->getPageCount() - 1;
vendor/nette/utils/src/Utils/Paginator.php:147:		return $this->itemCount === null ? null : (int) ceil($this->itemCount / $this->itemsPerPage);
vendor/nette/utils/src/Utils/Paginator.php:158:		$this->itemsPerPage = max(1, (int) $itemsPerPage);
vendor/nette/utils/src/Utils/Paginator.php:169:		return $this->itemsPerPage;
vendor/nette/utils/src/Utils/Paginator.php:180:		$this->itemCount = ($itemCount === false || $itemCount === null) ? null : max(0, (int) $itemCount);
vendor/nette/utils/src/Utils/Paginator.php:191:		return $this->itemCount;
vendor/nette/utils/src/Utils/Paginator.php:201:		return $this->getPageIndex() * $this->itemsPerPage;
vendor/nette/utils/src/Utils/Paginator.php:211:		return $this->itemCount === null
vendor/nette/utils/src/Utils/Paginator.php:213:			: max(0, $this->itemCount - ($this->getPageIndex() + 1) * $this->itemsPerPage);
vendor/nette/utils/src/Utils/Paginator.php:223:		return $this->itemCount === null
vendor/nette/utils/src/Utils/Paginator.php:224:			? $this->itemsPerPage
vendor/nette/utils/src/Utils/Paginator.php:225:			: min($this->itemsPerPage, $this->itemCount - $this->getPageIndex() * $this->itemsPerPage);
vendor/nette/utils/src/Utils/Callback.php:41:			return (new \ReflectionFunction($callable))->getClosure();
vendor/nette/utils/src/Utils/Callback.php:44:			return (new \ReflectionMethod($callable[0], $callable[1]))->getClosure($callable[0]);
vendor/nette/utils/src/Utils/Callback.php:179:		if (substr($r->getName(), -1) === '}') {
vendor/nette/utils/src/Utils/Callback.php:180:			$vars = $r->getStaticVariables();
vendor/nette/utils/src/Utils/Callback.php:183:		} elseif ($obj = $r->getClosureThis()) {
vendor/nette/utils/src/Utils/Callback.php:184:			return [$obj, $r->getName()];
vendor/nette/utils/src/Utils/Callback.php:186:		} elseif ($class = $r->getClosureScopeClass()) {
vendor/nette/utils/src/Utils/Callback.php:187:			return [$class->getName(), $r->getName()];
vendor/nette/utils/src/Utils/Callback.php:190:			return $r->getName();
vendor/nette/utils/src/Utils/Html.php:17: * $el = Html::el('a')->href($link)->setText('Nette');
vendor/nette/utils/src/Utils/Html.php:18: * $el->class = 'myclass';
vendor/nette/utils/src/Utils/Html.php:21: * echo $el->startTag(), $el->endTag();
vendor/nette/utils/src/Utils/Html.php:61:		$el->setName($parts[0]);
vendor/nette/utils/src/Utils/Html.php:64:			$el->attrs = $attrs;
vendor/nette/utils/src/Utils/Html.php:67:			$el->setText($attrs);
vendor/nette/utils/src/Utils/Html.php:71:			foreach (Strings::matchAll($parts[1] . ' ', '#([a-z0-9:-]+)(?:=(["\'])?(.*?)(?(2)\\2|\s))?#i') as $m) {
vendor/nette/utils/src/Utils/Html.php:72:				$el->attrs[$m[1]] = isset($m[3]) ? $m[3] : true;
vendor/nette/utils/src/Utils/Html.php:93:		$this->name = $name;
vendor/nette/utils/src/Utils/Html.php:94:		$this->isEmpty = $isEmpty === null ? isset(static::$emptyElements[$name]) : (bool) $isEmpty;
vendor/nette/utils/src/Utils/Html.php:105:		return $this->name;
vendor/nette/utils/src/Utils/Html.php:115:		return $this->isEmpty;
vendor/nette/utils/src/Utils/Html.php:126:		$this->attrs = array_merge($this->attrs, $attrs);
vendor/nette/utils/src/Utils/Html.php:141:			$prev = isset($this->attrs[$name]) ? (array) $this->attrs[$name] : [];
vendor/nette/utils/src/Utils/Html.php:142:			$this->attrs[$name] = $value + $prev;
vendor/nette/utils/src/Utils/Html.php:145:			$tmp = &$this->attrs[$name]; // appending empty value? -> ignore, but ensure it exists
vendor/nette/utils/src/Utils/Html.php:147:		} elseif (!isset($this->attrs[$name]) || is_array($this->attrs[$name])) { // needs array
vendor/nette/utils/src/Utils/Html.php:148:			$this->attrs[$name][$value] = $option;
vendor/nette/utils/src/Utils/Html.php:151:			$this->attrs[$name] = [$this->attrs[$name] => true, $value => $option];
vendor/nette/utils/src/Utils/Html.php:165:		$this->attrs[$name] = $value;
vendor/nette/utils/src/Utils/Html.php:177:		return isset($this->attrs[$name]) ? $this->attrs[$name] : null;
vendor/nette/utils/src/Utils/Html.php:188:		unset($this->attrs[$name]);
vendor/nette/utils/src/Utils/Html.php:200:			unset($this->attrs[$name]);
vendor/nette/utils/src/Utils/Html.php:214:		$this->attrs[$name] = $value;
vendor/nette/utils/src/Utils/Html.php:225:		return $this->attrs[$name];
vendor/nette/utils/src/Utils/Html.php:236:		return isset($this->attrs[$name]);
vendor/nette/utils/src/Utils/Html.php:247:		unset($this->attrs[$name]);
vendor/nette/utils/src/Utils/Html.php:264:				return isset($this->attrs[$m]) ? $this->attrs[$m] : null;
vendor/nette/utils/src/Utils/Html.php:274:			$this->attrs[$m] = $args[0];
vendor/nette/utils/src/Utils/Html.php:277:			$this->appendAttribute($m, $args[0], $args[1]);
vendor/nette/utils/src/Utils/Html.php:298:		$this->attrs['href'] = $path;
vendor/nette/utils/src/Utils/Html.php:304:	 * Setter for data-* attributes. Booleans are converted to 'true' resp. 'false'.
vendor/nette/utils/src/Utils/Html.php:310:			$this->attrs['data'] = $name;
vendor/nette/utils/src/Utils/Html.php:312:			$this->attrs["data-$name"] = is_bool($value) ? json_encode($value) : $value;
vendor/nette/utils/src/Utils/Html.php:329:		$this->removeChildren();
vendor/nette/utils/src/Utils/Html.php:330:		$this->children[] = (string) $html;
vendor/nette/utils/src/Utils/Html.php:341:		return implode('', $this->children);
vendor/nette/utils/src/Utils/Html.php:353:			$text = htmlspecialchars($text, ENT_NOQUOTES, 'UTF-8');
vendor/nette/utils/src/Utils/Html.php:355:		return $this->setHtml($text);
vendor/nette/utils/src/Utils/Html.php:365:		return html_entity_decode(strip_tags($this->getHtml()), ENT_QUOTES, 'UTF-8');
vendor/nette/utils/src/Utils/Html.php:376:		return $this->insert(null, $child);
vendor/nette/utils/src/Utils/Html.php:381:	 * Appends plain-text string to element content.
vendor/nette/utils/src/Utils/Html.php:388:			$text = htmlspecialchars((string) $text, ENT_NOQUOTES, 'UTF-8');
vendor/nette/utils/src/Utils/Html.php:390:		return $this->insert(null, $text);
vendor/nette/utils/src/Utils/Html.php:402:		$this->insert(null, $child = static::el($name, $attrs));
vendor/nette/utils/src/Utils/Html.php:420:				$this->children[] = $child;
vendor/nette/utils/src/Utils/Html.php:423:				array_splice($this->children, (int) $index, $replace ? 1 : 0, [$child]);
vendor/nette/utils/src/Utils/Html.php:442:		$this->insert($index, $child, true);
vendor/nette/utils/src/Utils/Html.php:453:		return $this->children[$index];
vendor/nette/utils/src/Utils/Html.php:464:		return isset($this->children[$index]);
vendor/nette/utils/src/Utils/Html.php:475:		if (isset($this->children[$index])) {
vendor/nette/utils/src/Utils/Html.php:476:			array_splice($this->children, (int) $index, 1);
vendor/nette/utils/src/Utils/Html.php:487:		return count($this->children);
vendor/nette/utils/src/Utils/Html.php:497:		$this->children = [];
vendor/nette/utils/src/Utils/Html.php:507:		return new \ArrayIterator($this->children);
vendor/nette/utils/src/Utils/Html.php:517:		return $this->children;
vendor/nette/utils/src/Utils/Html.php:528:		$s = $this->startTag();
vendor/nette/utils/src/Utils/Html.php:530:		if (!$this->isEmpty) {
vendor/nette/utils/src/Utils/Html.php:535:			foreach ($this->children as $child) {
vendor/nette/utils/src/Utils/Html.php:537:					$s .= $child->render($indent);
vendor/nette/utils/src/Utils/Html.php:544:			$s .= $this->endTag();
vendor/nette/utils/src/Utils/Html.php:548:			return "\n" . str_repeat("\t", $indent - 1) . $s . "\n" . str_repeat("\t", max(0, $indent - 2));
vendor/nette/utils/src/Utils/Html.php:557:			return $this->render();
vendor/nette/utils/src/Utils/Html.php:561:		trigger_error('Exception in ' . __METHOD__ . "(): {$e->getMessage()} in {$e->getFile()}:{$e->getLine()}", E_USER_ERROR);
vendor/nette/utils/src/Utils/Html.php:571:		if ($this->name) {
vendor/nette/utils/src/Utils/Html.php:572:			return '<' . $this->name . $this->attributes() . (static::$xhtml && $this->isEmpty ? ' />' : '>');
vendor/nette/utils/src/Utils/Html.php:586:		return $this->name && !$this->isEmpty ? '</' . $this->name . '>' : '';
vendor/nette/utils/src/Utils/Html.php:597:		if (!is_array($this->attrs)) {
vendor/nette/utils/src/Utils/Html.php:602:		$attrs = $this->attrs;
vendor/nette/utils/src/Utils/Html.php:616:				if (strncmp($key, 'data-', 5) === 0) {
vendor/nette/utils/src/Utils/Html.php:662:		foreach ($this->children as $key => $value) {
vendor/nette/utils/src/Utils/Html.php:664:				$this->children[$key] = clone $value;
vendor/nette/utils/src/Utils/Reflection.php:41:		return PHP_VERSION_ID >= 70000 && $func->hasReturnType()
vendor/nette/utils/src/Utils/Reflection.php:42:			? self::normalizeType((string) $func->getReturnType(), $func)
vendor/nette/utils/src/Utils/Reflection.php:53:			return $param->hasType()
vendor/nette/utils/src/Utils/Reflection.php:54:				? self::normalizeType((string) $param->getType(), $param)
vendor/nette/utils/src/Utils/Reflection.php:56:		} elseif ($param->isArray() || $param->isCallable()) {
vendor/nette/utils/src/Utils/Reflection.php:57:			return $param->isArray() ? 'array' : 'callable';
vendor/nette/utils/src/Utils/Reflection.php:60:				return ($ref = $param->getClass()) ? $ref->getName() : null;
vendor/nette/utils/src/Utils/Reflection.php:62:				if (preg_match('#Class (.+) does not exist#', $e->getMessage(), $m)) {
vendor/nette/utils/src/Utils/Reflection.php:75:			return $reflection->getDeclaringClass()->getName();
vendor/nette/utils/src/Utils/Reflection.php:76:		} elseif ($lower === 'parent' && $reflection->getDeclaringClass()->getParentClass()) {
vendor/nette/utils/src/Utils/Reflection.php:77:			return $reflection->getDeclaringClass()->getParentClass()->getName();
vendor/nette/utils/src/Utils/Reflection.php:90:		if ($param->isDefaultValueConstant()) {
vendor/nette/utils/src/Utils/Reflection.php:91:			$const = $orig = $param->getDefaultValueConstantName();
vendor/nette/utils/src/Utils/Reflection.php:94:				$pair[0] = $param->getDeclaringClass()->getName();
vendor/nette/utils/src/Utils/Reflection.php:103:				return $rcc->getValue();
vendor/nette/utils/src/Utils/Reflection.php:115:		return $param->getDefaultValue();
vendor/nette/utils/src/Utils/Reflection.php:125:		foreach ($prop->getDeclaringClass()->getTraits() as $trait) {
vendor/nette/utils/src/Utils/Reflection.php:126:			if ($trait->hasProperty($prop->getName())) {
vendor/nette/utils/src/Utils/Reflection.php:127:				return self::getPropertyDeclaringClass($trait->getProperty($prop->getName()));
vendor/nette/utils/src/Utils/Reflection.php:130:		return $prop->getDeclaringClass();
vendor/nette/utils/src/Utils/Reflection.php:142:			? $res = (bool) (new \ReflectionMethod(__METHOD__))->getDocComment()
vendor/nette/utils/src/Utils/Reflection.php:153:			return $ref->getName();
vendor/nette/utils/src/Utils/Reflection.php:155:			return $ref->getDeclaringClass()->getName() . '::' . $ref->getName();
vendor/nette/utils/src/Utils/Reflection.php:157:			return $ref->getName();
vendor/nette/utils/src/Utils/Reflection.php:159:			return self::getPropertyDeclaringClass($ref)->getName() . '::$' . $ref->getName();
vendor/nette/utils/src/Utils/Reflection.php:161:			return '$' . $ref->getName() . ' in ' . self::toString($ref->getDeclaringFunction()) . '()';
vendor/nette/utils/src/Utils/Reflection.php:184:			return $rc->getName();
vendor/nette/utils/src/Utils/Reflection.php:196:		} elseif ($rc->inNamespace()) {
vendor/nette/utils/src/Utils/Reflection.php:197:			return $rc->getNamespaceName() . '\\' . $name;
vendor/nette/utils/src/Utils/Reflection.php:211:		if (!isset($cache[$name = $class->getName()])) {
vendor/nette/utils/src/Utils/Reflection.php:212:			if ($class->isInternal()) {
vendor/nette/utils/src/Utils/Reflection.php:215:				$code = file_get_contents($class->getFileName());
vendor/nette/utils/src/Utils/Reflection.php:294:					$level--;
vendor/nette/utils/src/Utils/Image.php:18: * $image->resize(150, 100);
vendor/nette/utils/src/Utils/Image.php:19: * $image->sharpen();
vendor/nette/utils/src/Utils/Image.php:20: * $image->send();
vendor/nette/utils/src/Utils/Image.php:50: * @method Image cropAuto(int $mode = -1, float $threshold = .5, int $color = -1)
vendor/nette/utils/src/Utils/Image.php:74: * @method Image scale(int $newWidth, int $newHeight = -1, int $mode = IMG_BILINEAR_FIXED)
vendor/nette/utils/src/Utils/Image.php:84: * @property-read int $width
vendor/nette/utils/src/Utils/Image.php:85: * @property-read int $height
vendor/nette/utils/src/Utils/Image.php:86: * @property-read resource $imageResource
vendor/nette/utils/src/Utils/Image.php:155:		$format = @getimagesize($file)[2]; // @ - files smaller than 12 bytes causes read error
vendor/nette/utils/src/Utils/Image.php:156:		if (!$format && PHP_VERSION_ID < 70100 && @file_get_contents($file, false, null, 8, 4) === 'WEBP') { // @ - may not exists
vendor/nette/utils/src/Utils/Image.php:183:			$tmp = @getimagesizefromstring($s)[2]; // @ - strings smaller than 12 bytes causes read error
vendor/nette/utils/src/Utils/Image.php:217:			imagefilledrectangle($image, 0, 0, $width - 1, $height - 1, $color);
vendor/nette/utils/src/Utils/Image.php:230:		$this->setImageResource($image);
vendor/nette/utils/src/Utils/Image.php:241:		return imagesx($this->image);
vendor/nette/utils/src/Utils/Image.php:251:		return imagesy($this->image);
vendor/nette/utils/src/Utils/Image.php:265:		$this->image = $image;
vendor/nette/utils/src/Utils/Image.php:276:		return $this->image;
vendor/nette/utils/src/Utils/Image.php:290:			return $this->resize($width, $height, self::FILL)->crop('50%', '50%', $width, $height);
vendor/nette/utils/src/Utils/Image.php:293:		list($newWidth, $newHeight) = static::calculateSize($this->getWidth(), $this->getHeight(), $width, $height, $flags);
vendor/nette/utils/src/Utils/Image.php:295:		if ($newWidth !== $this->getWidth() || $newHeight !== $this->getHeight()) { // resize
vendor/nette/utils/src/Utils/Image.php:296:			$newImage = static::fromBlank($newWidth, $newHeight, self::rgb(0, 0, 0, 127))->getImageResource();
vendor/nette/utils/src/Utils/Image.php:298:				$newImage, $this->image,
vendor/nette/utils/src/Utils/Image.php:300:				$newWidth, $newHeight, $this->getWidth(), $this->getHeight()
vendor/nette/utils/src/Utils/Image.php:302:			$this->image = $newImage;
vendor/nette/utils/src/Utils/Image.php:306:			imageflip($this->image, $width < 0 ? ($height < 0 ? IMG_FLIP_BOTH : IMG_FLIP_HORIZONTAL) : IMG_FLIP_VERTICAL);
vendor/nette/utils/src/Utils/Image.php:323:		if (is_string($newWidth) && substr($newWidth, -1) === '%') {
vendor/nette/utils/src/Utils/Image.php:324:			$newWidth = (int) round($srcWidth / 100 * abs(substr($newWidth, 0, -1)));
vendor/nette/utils/src/Utils/Image.php:330:		if (is_string($newHeight) && substr($newHeight, -1) === '%') {
vendor/nette/utils/src/Utils/Image.php:331:			$newHeight = (int) round($srcHeight / 100 * abs(substr($newHeight, 0, -1)));
vendor/nette/utils/src/Utils/Image.php:337:		if ($flags & self::STRETCH) { // non-proportional
vendor/nette/utils/src/Utils/Image.php:380:	 * @param  mixed  x-offset in pixels or percent
vendor/nette/utils/src/Utils/Image.php:381:	 * @param  mixed  y-offset in pixels or percent
vendor/nette/utils/src/Utils/Image.php:389:			= static::calculateCutout($this->getWidth(), $this->getHeight(), $left, $top, $width, $height);
vendor/nette/utils/src/Utils/Image.php:391:			$this->image = imagecrop($this->image, $r);
vendor/nette/utils/src/Utils/Image.php:393:			$newImage = static::fromBlank($r['width'], $r['height'], self::RGB(0, 0, 0, 127))->getImageResource();
vendor/nette/utils/src/Utils/Image.php:394:			imagecopy($newImage, $this->image, 0, 0, $r['x'], $r['y'], $r['width'], $r['height']);
vendor/nette/utils/src/Utils/Image.php:395:			$this->image = $newImage;
vendor/nette/utils/src/Utils/Image.php:405:	 * @param  mixed  x-offset in pixels or percent
vendor/nette/utils/src/Utils/Image.php:406:	 * @param  mixed  y-offset in pixels or percent
vendor/nette/utils/src/Utils/Image.php:413:		if (is_string($newWidth) && substr($newWidth, -1) === '%') {
vendor/nette/utils/src/Utils/Image.php:414:			$newWidth = (int) round($srcWidth / 100 * substr($newWidth, 0, -1));
vendor/nette/utils/src/Utils/Image.php:416:		if (is_string($newHeight) && substr($newHeight, -1) === '%') {
vendor/nette/utils/src/Utils/Image.php:417:			$newHeight = (int) round($srcHeight / 100 * substr($newHeight, 0, -1));
vendor/nette/utils/src/Utils/Image.php:419:		if (is_string($left) && substr($left, -1) === '%') {
vendor/nette/utils/src/Utils/Image.php:420:			$left = (int) round(($srcWidth - $newWidth) / 100 * substr($left, 0, -1));
vendor/nette/utils/src/Utils/Image.php:422:		if (is_string($top) && substr($top, -1) === '%') {
vendor/nette/utils/src/Utils/Image.php:423:			$top = (int) round(($srcHeight - $newHeight) / 100 * substr($top, 0, -1));
vendor/nette/utils/src/Utils/Image.php:433:		$newWidth = min($newWidth, $srcWidth - $left);
vendor/nette/utils/src/Utils/Image.php:434:		$newHeight = min($newHeight, $srcHeight - $top);
vendor/nette/utils/src/Utils/Image.php:445:		imageconvolution($this->image, [ // my magic numbers ;)
vendor/nette/utils/src/Utils/Image.php:446:			[-1, -1, -1],
vendor/nette/utils/src/Utils/Image.php:447:			[-1, 24, -1],
vendor/nette/utils/src/Utils/Image.php:448:			[-1, -1, -1],
vendor/nette/utils/src/Utils/Image.php:457:	 * @param  mixed  x-coordinate in pixels or percent
vendor/nette/utils/src/Utils/Image.php:458:	 * @param  mixed  y-coordinate in pixels or percent
vendor/nette/utils/src/Utils/Image.php:469:		$width = $image->getWidth();
vendor/nette/utils/src/Utils/Image.php:470:		$height = $image->getHeight();
vendor/nette/utils/src/Utils/Image.php:472:		if (is_string($left) && substr($left, -1) === '%') {
vendor/nette/utils/src/Utils/Image.php:473:			$left = (int) round(($this->getWidth() - $width) / 100 * substr($left, 0, -1));
vendor/nette/utils/src/Utils/Image.php:476:		if (is_string($top) && substr($top, -1) === '%') {
vendor/nette/utils/src/Utils/Image.php:477:			$top = (int) round(($this->getHeight() - $height) / 100 * substr($top, 0, -1));
vendor/nette/utils/src/Utils/Image.php:480:		$output = $input = $image->image;
vendor/nette/utils/src/Utils/Image.php:484:				$tbl[$i] = round(127 - (127 - $i) * $opacity / 100);
vendor/nette/utils/src/Utils/Image.php:489:			if (!$image->isTrueColor()) {
vendor/nette/utils/src/Utils/Image.php:492:				imagecopy($output, $image->image, 0, 0, 0, 0, $width, $height);
vendor/nette/utils/src/Utils/Image.php:505:			$this->image, $output,
vendor/nette/utils/src/Utils/Image.php:536:				return imagejpeg($this->image, $file, $quality);
vendor/nette/utils/src/Utils/Image.php:540:				return imagepng($this->image, $file, $quality);
vendor/nette/utils/src/Utils/Image.php:543:				return imagegif($this->image, $file);
vendor/nette/utils/src/Utils/Image.php:547:				return imagewebp($this->image, $file, $quality);
vendor/nette/utils/src/Utils/Image.php:564:		$this->save(null, $quality, $type);
vendor/nette/utils/src/Utils/Image.php:576:			return $this->toString();
vendor/nette/utils/src/Utils/Image.php:584:			trigger_error('Exception in ' . __METHOD__ . "(): {$e->getMessage()} in {$e->getFile()}:{$e->getLine()}", E_USER_ERROR);
vendor/nette/utils/src/Utils/Image.php:600:		header('Content-Type: image/' . self::$formats[$type]);
vendor/nette/utils/src/Utils/Image.php:601:		return $this->save(null, $quality, $type);
vendor/nette/utils/src/Utils/Image.php:622:				$args[$key] = $value->getImageResource();
vendor/nette/utils/src/Utils/Image.php:626:					$this->image,
vendor/nette/utils/src/Utils/Image.php:629:					$this->image,
vendor/nette/utils/src/Utils/Image.php:634:		$res = $function($this->image, ...$args);
vendor/nette/utils/src/Utils/Image.php:635:		return is_resource($res) && get_resource_type($res) === 'gd' ? $this->setImageResource($res) : $res;
vendor/nette/utils/src/Utils/Image.php:642:		imagegd2($this->image);
vendor/nette/utils/src/Utils/Image.php:643:		$this->setImageResource(imagecreatefromstring(ob_get_clean()));
vendor/nette/utils/src/Utils/ObjectHelpers.php:28:			array_filter($rc->getProperties(\ReflectionProperty::IS_PUBLIC), function ($p) { return !$p->isStatic(); }),
vendor/nette/utils/src/Utils/ObjectHelpers.php:29:			self::parseFullDoc($rc, '~^[ \t*]*@property(?:-read)?[ \t]+(?:\S+[ \t]+)??\$(\w+)~m')
vendor/nette/utils/src/Utils/ObjectHelpers.php:42:			array_filter($rc->getProperties(\ReflectionProperty::IS_PUBLIC), function ($p) { return !$p->isStatic(); }),
vendor/nette/utils/src/Utils/ObjectHelpers.php:43:			self::parseFullDoc($rc, '~^[ \t*]*@property(?:-write)?[ \t]+(?:\S+[ \t]+)??\$(\w+)~m')
vendor/nette/utils/src/Utils/ObjectHelpers.php:73:			array_filter((new \ReflectionClass($class))->getMethods(\ReflectionMethod::IS_PUBLIC), function ($m) { return $m->isStatic(); }),
vendor/nette/utils/src/Utils/ObjectHelpers.php:95:			'~^  [ \t*]*  @property(|-read|-write)  [ \t]+  [^\s$]+  [ \t]+  \$  (\w+)  ()~mx',
vendor/nette/utils/src/Utils/ObjectHelpers.php:96:			(string) $rc->getDocComment(), $matches, PREG_SET_ORDER
vendor/nette/utils/src/Utils/ObjectHelpers.php:102:			$write = $type !== '-read'
vendor/nette/utils/src/Utils/ObjectHelpers.php:103:				&& $rc->hasMethod($nm = 'set' . $uname)
vendor/nette/utils/src/Utils/ObjectHelpers.php:104:				&& ($rm = $rc->getMethod($nm)) && $rm->getName() === $nm && !$rm->isPrivate() && !$rm->isStatic();
vendor/nette/utils/src/Utils/ObjectHelpers.php:105:			$read = $type !== '-write'
vendor/nette/utils/src/Utils/ObjectHelpers.php:106:				&& ($rc->hasMethod($nm = 'get' . $uname) || $rc->hasMethod($nm = 'is' . $uname))
vendor/nette/utils/src/Utils/ObjectHelpers.php:107:				&& ($rm = $rc->getMethod($nm)) && $rm->getName() === $nm && !$rm->isPrivate() && !$rm->isStatic();
vendor/nette/utils/src/Utils/ObjectHelpers.php:110:				$props[$name] = $read << 0 | ($nm[0] === 'g') << 1 | $rm->returnsReference() << 2 | $write << 3;
vendor/nette/utils/src/Utils/ObjectHelpers.php:114:		foreach ($rc->getTraits() as $trait) {
vendor/nette/utils/src/Utils/ObjectHelpers.php:115:			$props += self::getMagicProperties($trait->getName());
vendor/nette/utils/src/Utils/ObjectHelpers.php:126:	 * Finds the best suggestion (for 8-bit encoding).
vendor/nette/utils/src/Utils/ObjectHelpers.php:132:		$norm = preg_replace($re = '#^(get|set|has|is|add)(?=[A-Z])#', '', $value);
vendor/nette/utils/src/Utils/ObjectHelpers.php:136:			$item = $item instanceof \Reflector ? $item->getName() : $item;
vendor/nette/utils/src/Utils/ObjectHelpers.php:152:			$doc[] = $rc->getDocComment();
vendor/nette/utils/src/Utils/ObjectHelpers.php:153:			$traits = $rc->getTraits();
vendor/nette/utils/src/Utils/ObjectHelpers.php:155:				$doc[] = $trait->getDocComment();
vendor/nette/utils/src/Utils/ObjectHelpers.php:156:				$traits += $trait->getTraits();
vendor/nette/utils/src/Utils/ObjectHelpers.php:158:		} while ($rc = $rc->getParentClass());
vendor/nette/utils/src/Utils/ObjectHelpers.php:164:	 * Checks if the public non-static property exists.
vendor/nette/utils/src/Utils/ObjectHelpers.php:176:				if ($rp->isPublic() && !$rp->isStatic()) {
vendor/nette/utils/src/Utils/ObjectMixin.php:90:			if (is_array($_this->$name) || $_this->$name instanceof \Traversable) {
vendor/nette/utils/src/Utils/ObjectMixin.php:91:				foreach ($_this->$name as $handler) {
vendor/nette/utils/src/Utils/ObjectMixin.php:94:			} elseif ($_this->$name !== null) {
vendor/nette/utils/src/Utils/ObjectMixin.php:95:				throw new Nette\UnexpectedValueException("Property $class::$$name must be array or null, " . gettype($_this->$name) . ' given.');
vendor/nette/utils/src/Utils/ObjectMixin.php:98:		} elseif ($isProp && $_this->$name instanceof \Closure) { // closure in property
vendor/nette/utils/src/Utils/ObjectMixin.php:99:			return call_user_func_array($_this->$name, $args);
vendor/nette/utils/src/Utils/ObjectMixin.php:111:				return $rp->getValue($_this);
vendor/nette/utils/src/Utils/ObjectMixin.php:113:				$rp->setValue($_this, $args[0]);
vendor/nette/utils/src/Utils/ObjectMixin.php:115:				$val = $rp->getValue($_this);
vendor/nette/utils/src/Utils/ObjectMixin.php:117:				$rp->setValue($_this, $val);
vendor/nette/utils/src/Utils/ObjectMixin.php:163:				$methods[$m] = (new \ReflectionMethod($class, $m))->returnsReference();
vendor/nette/utils/src/Utils/ObjectMixin.php:166:				return $_this->$m();
vendor/nette/utils/src/Utils/ObjectMixin.php:168:				$val = $_this->$m();
vendor/nette/utils/src/Utils/ObjectMixin.php:173:			if (preg_match('#^(is|get|has)([A-Z]|$)#', $name) && !(new \ReflectionMethod($class, $name))->getNumberOfRequiredParameters()) {
vendor/nette/utils/src/Utils/ObjectMixin.php:180:			throw new MemberAccessException("Cannot read a write-only property $class::\$$name.");
vendor/nette/utils/src/Utils/ObjectMixin.php:194:	 * @throws MemberAccessException if the property is not defined or is read-only
vendor/nette/utils/src/Utils/ObjectMixin.php:207:			$_this->$name = $value;
vendor/nette/utils/src/Utils/ObjectMixin.php:210:			$_this->$m($value);
vendor/nette/utils/src/Utils/ObjectMixin.php:213:			throw new MemberAccessException("Cannot write to a read-only property $class::\$$name.");
vendor/nette/utils/src/Utils/ObjectMixin.php:288:			(set|get|is|add)  ([A-Z]\w*)
vendor/nette/utils/src/Utils/ObjectMixin.php:290:		()~mx', (string) $rc->getDocComment(), $matches, PREG_SET_ORDER);
vendor/nette/utils/src/Utils/ObjectMixin.php:299:			if ($rc->hasProperty($prop) && ($rp = $rc->getProperty($prop)) && !$rp->isStatic()) {
vendor/nette/utils/src/Utils/ObjectMixin.php:300:				$rp->setAccessible(true);
vendor/nette/utils/src/Utils/ObjectMixin.php:304:				} elseif (!$type && preg_match('#@var[ \t]+(\S+)' . ($op === 'add' ? '\[\]#' : '#'), (string) $rp->getDocComment(), $m)) {
vendor/nette/utils/src/Utils/ObjectMixin.php:307:				if ($rc->inNamespace() && preg_match('#^[A-Z]\w+(\[|\||\z)#', (string) $type)) {
vendor/nette/utils/src/Utils/ObjectMixin.php:308:					$type = $rc->getNamespaceName() . '\\' . $type;
vendor/nette/utils/src/Utils/ObjectMixin.php:318:	 * Finds whether a variable is of expected type and do non-data-loss conversion.
vendor/nette/utils/src/Utils/ObjectMixin.php:342:		} elseif (substr($type, -2) === '[]') {
vendor/nette/utils/src/Utils/ObjectMixin.php:346:			$type = substr($type, 0, -2);
vendor/nette/utils/src/Utils/ObjectMixin.php:467:	 * Returns array of public (static, non-static and magic) methods.
vendor/nette/utils/src/Utils/Arrays.php:155:	 * Finds whether a variable is a zero-based integer indexed array.
vendor/nette/utils/src/Utils/Arrays.php:160:		return is_array($value) && (!$value || array_keys($value) === range(0, count($value) - 1));
vendor/nette/utils/src/Utils/Arrays.php:165:	 * Reformats table to associative tree. Path looks like 'field|field[]field->field=field'.
vendor/nette/utils/src/Utils/Arrays.php:172:			: preg_split('#(\[\]|->|=|\|)#', $path, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
vendor/nette/utils/src/Utils/Arrays.php:174:		if (!$parts || $parts[0] === '=' || $parts[0] === '|' || $parts === ['->']) {
vendor/nette/utils/src/Utils/Arrays.php:178:		$res = $parts[0] === '->' ? new \stdClass : [];
vendor/nette/utils/src/Utils/Arrays.php:195:				} elseif ($part === '->') {
vendor/nette/utils/src/Utils/Arrays.php:197:						$x = &$x->{$row[$parts[$i]]};
vendor/nette/utils/src/Utils/ArrayHash.php:29:				$obj->$key = static::from($value, true);
vendor/nette/utils/src/Utils/ArrayHash.php:31:				$obj->$key = $value;
vendor/nette/utils/src/Utils/ArrayHash.php:67:		$this->$key = $value;
vendor/nette/utils/src/Utils/ArrayHash.php:77:		return $this->$key;
vendor/nette/utils/src/Utils/ArrayHash.php:87:		return isset($this->$key);
vendor/nette/utils/src/Utils/ArrayHash.php:97:		unset($this->$key);
vendor/nette/utils/src/Utils/DateTime.php:47:			return new static($time->format('Y-m-d H:i:s.u'), $time->getTimezone());
vendor/nette/utils/src/Utils/DateTime.php:53:			return (new static('@' . $time))->setTimezone(new \DateTimeZone(date_default_timezone_get()));
vendor/nette/utils/src/Utils/DateTime.php:67:		$s = sprintf('%04d-%02d-%02d %02d:%02d:%02.5f', $year, $month, $day, $hour, $minute, $second);
vendor/nette/utils/src/Utils/DateTime.php:105:		return $this->format('c');
vendor/nette/utils/src/Utils/DateTime.php:114:		return $this->format('Y-m-d H:i:s');
vendor/nette/utils/src/Utils/DateTime.php:125:		return $modify ? $dolly->modify($modify) : $dolly;
vendor/nette/utils/src/Utils/DateTime.php:135:		$zone = $this->getTimezone();
vendor/nette/utils/src/Utils/DateTime.php:136:		$this->__construct('@' . $timestamp);
vendor/nette/utils/src/Utils/DateTime.php:137:		return $this->setTimezone($zone);
vendor/nette/utils/src/Utils/DateTime.php:146:		$ts = $this->format('U');
vendor/nette/utils/src/Utils/Validators.php:124:			if (substr($item, -2) === '[]') {
vendor/nette/utils/src/Utils/Validators.php:125:				if (self::everyIs($value, substr($item, 0, -2))) {
vendor/nette/utils/src/Utils/Validators.php:200:		return is_int($value) || is_string($value) && preg_match('#^-?[0-9]+\z#', $value);
vendor/nette/utils/src/Utils/Validators.php:210:		return is_float($value) || is_int($value) || is_string($value) && preg_match('#^-?[0-9]*[.]?[0-9]+\z#', $value);
vendor/nette/utils/src/Utils/Validators.php:225:	 * Finds whether a value is an UTF-8 encoded string.
vendor/nette/utils/src/Utils/Validators.php:246:	 * Finds whether a variable is a zero-based integer indexed array.
vendor/nette/utils/src/Utils/Validators.php:290:		$atom = "[-a-z0-9!#$%&'*+/=?^_`{|}~]"; // RFC 5322 unquoted characters in local-part
vendor/nette/utils/src/Utils/Validators.php:291:		$alpha = "a-z\x80-\xFF"; // superset of IDN
vendor/nette/utils/src/Utils/Validators.php:293:			(\"([ !#-[\\]-~]*|\\\\[ -~])+\"|$atom+(\\.$atom+)*)  # quoted or unquoted
vendor/nette/utils/src/Utils/Validators.php:295:			([0-9$alpha]([-0-9$alpha]{0,61}[0-9$alpha])?\\.)+    # domain - RFC 1034
vendor/nette/utils/src/Utils/Validators.php:296:			[$alpha]([-0-9$alpha]{0,17}[$alpha])?                # top domain
vendor/nette/utils/src/Utils/Validators.php:308:		$alpha = "a-z\x80-\xFF";
vendor/nette/utils/src/Utils/Validators.php:311:				(([-_0-9$alpha]+\\.)*                       # subdomain
vendor/nette/utils/src/Utils/Validators.php:312:					[0-9$alpha]([-0-9$alpha]{0,61}[0-9$alpha])?\\.)?  # domain
vendor/nette/utils/src/Utils/Validators.php:313:					[$alpha]([-0-9$alpha]{0,17}[$alpha])?   # top domain
vendor/nette/utils/src/Utils/Validators.php:315:				|\[[0-9a-f:]{3,39}\]                        # IPv6
vendor/nette/utils/src/Utils/Validators.php:329:		return (bool) preg_match('#^[a-z\d+\.-]+:\S+\z#i', $value);
vendor/nette/utils/src/Utils/Validators.php:350:		return is_string($value) && preg_match('#^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*\z#', $value);
vendor/nette/utils/src/Utils/LegacyObject.php:17: *   - access to undeclared members throws exceptions
vendor/nette/utils/src/Utils/LegacyObject.php:18: *   - support for conventional properties with getters and setters
vendor/nette/utils/src/Utils/LegacyObject.php:19: *   - support for event raising functionality
vendor/nette/utils/src/Utils/LegacyObject.php:20: *   - ability to add new methods to class (extension methods)
vendor/nette/utils/src/Utils/LegacyObject.php:24: * or setter method (no setter method means read-only property).
vendor/nette/utils/src/Utils/LegacyObject.php:26: * $val = $obj->label;     // equivalent to $val = $obj->getLabel();
vendor/nette/utils/src/Utils/LegacyObject.php:27: * $obj->label = 'Nette';  // equivalent to $obj->setLabel('Nette');
vendor/nette/utils/src/Utils/LegacyObject.php:29: * Property names are case-sensitive, and they are written in the camelCaps
vendor/nette/utils/src/Utils/LegacyObject.php:36: * $this->onClick[] = 'callback';  // attaching event handler
vendor/nette/utils/src/Utils/LegacyObject.php:37: * if (!empty($this->onClick)) ... // are there any handlers?
vendor/nette/utils/src/Utils/LegacyObject.php:38: * $this->onClick($sender, $arg);  // raises the event with arguments
vendor/nette/utils/src/Utils/LegacyObject.php:46: * $obj->newMethod($x);
vendor/nette/utils/src/Utils/LegacyObject.php:49: * @property-read Nette\Reflection\ClassType|\ReflectionClass $reflection
vendor/nette/utils/src/Utils/LegacyObject.php:105:			$class = (new \ReflectionClass($class))->getName();
vendor/nette/utils/src/Utils/LegacyObject.php:132:	 * @throws MemberAccessException if the property is not defined or is read-only
vendor/nette/utils/src/Utils/Random.php:26:	public static function generate($length = 10, $charlist = '0-9a-z')
vendor/nette/utils/src/Utils/Random.php:28:		$charlist = count_chars(preg_replace_callback('#.-.#', function (array $m) {
vendor/nette/utils/src/Utils/Random.php:42:				$res .= $charlist[random_int(0, $chLen - 1)];
vendor/nette/utils/src/Utils/Random.php:58:			$bytes = (string) file_get_contents('/dev/urandom', false, null, -1, $length);
vendor/nette/utils/src/Utils/Random.php:70:				$rand1 -= (int) $rand1;
vendor/nette/utils/src/Utils/ArrayList.php:29:		return new \ArrayIterator($this->list);
vendor/nette/utils/src/Utils/ArrayList.php:39:		return count($this->list);
vendor/nette/utils/src/Utils/ArrayList.php:56:			$this->list[] = $value;
vendor/nette/utils/src/Utils/ArrayList.php:58:		} elseif ($index < 0 || $index >= count($this->list)) {
vendor/nette/utils/src/Utils/ArrayList.php:62:			$this->list[(int) $index] = $value;
vendor/nette/utils/src/Utils/ArrayList.php:78:		if ($index < 0 || $index >= count($this->list)) {
vendor/nette/utils/src/Utils/ArrayList.php:81:		return $this->list[(int) $index];
vendor/nette/utils/src/Utils/ArrayList.php:92:		return $index >= 0 && $index < count($this->list);
vendor/nette/utils/src/Utils/ArrayList.php:107:		if ($index < 0 || $index >= count($this->list)) {
vendor/nette/utils/src/Utils/ArrayList.php:110:		array_splice($this->list, (int) $index, 1);
vendor/nette/utils/src/Utils/ArrayList.php:121:		$first = array_slice($this->list, 0, 1);
vendor/nette/utils/src/Utils/ArrayList.php:122:		$this->offsetSet(0, $value);
vendor/nette/utils/src/Utils/ArrayList.php:123:		array_splice($this->list, 1, 0, $first);
vendor/nette/utils/src/Utils/SmartObject.php:17: * - 'did you mean' hints
vendor/nette/utils/src/Utils/SmartObject.php:18: * - access to undeclared members throws exceptions
vendor/nette/utils/src/Utils/SmartObject.php:19: * - support for @property annotations
vendor/nette/utils/src/Utils/SmartObject.php:20: * - support for calling event handlers stored in $onEvent via onEvent()
vendor/nette/utils/src/Utils/SmartObject.php:21: * - compatible with Nette\Object
vendor/nette/utils/src/Utils/SmartObject.php:39:			if (is_array($this->$name) || $this->$name instanceof \Traversable) {
vendor/nette/utils/src/Utils/SmartObject.php:40:				foreach ($this->$name as $handler) {
vendor/nette/utils/src/Utils/SmartObject.php:43:			} elseif ($this->$name !== null) {
vendor/nette/utils/src/Utils/SmartObject.php:44:				throw new UnexpectedValueException("Property $class::$$name must be array or null, " . gettype($this->$name) . ' given.');
vendor/nette/utils/src/Utils/SmartObject.php:47:		} elseif ($isProp && $this->$name instanceof \Closure) { // closure in property
vendor/nette/utils/src/Utils/SmartObject.php:48:			trigger_error("Invoking closure in property via \$obj->$name() is deprecated" . ObjectMixin::getSource(), E_USER_DEPRECATED);
vendor/nette/utils/src/Utils/SmartObject.php:49:			return call_user_func_array($this->$name, $args);
vendor/nette/utils/src/Utils/SmartObject.php:62:				return $rp->getValue($this);
vendor/nette/utils/src/Utils/SmartObject.php:64:				$rp->setValue($this, $args[0]);
vendor/nette/utils/src/Utils/SmartObject.php:66:				$val = $rp->getValue($this);
vendor/nette/utils/src/Utils/SmartObject.php:68:				$rp->setValue($this, $val);
vendor/nette/utils/src/Utils/SmartObject.php:103:				throw new MemberAccessException("Cannot read a write-only property $class::\$$name.");
vendor/nette/utils/src/Utils/SmartObject.php:107:				return $this->$m();
vendor/nette/utils/src/Utils/SmartObject.php:109:				$val = $this->$m();
vendor/nette/utils/src/Utils/SmartObject.php:119:				$methods[$m] = (new \ReflectionMethod($class, $m))->returnsReference();
vendor/nette/utils/src/Utils/SmartObject.php:122:				return $this->$m();
vendor/nette/utils/src/Utils/SmartObject.php:124:				$val = $this->$m();
vendor/nette/utils/src/Utils/SmartObject.php:129:			trigger_error("Accessing methods as properties via \$obj->$name is deprecated, use PHP callback [\$obj, '$name']" . ObjectMixin::getSource(), E_USER_DEPRECATED);
vendor/nette/utils/src/Utils/SmartObject.php:134:			throw new MemberAccessException("Cannot read a write-only property $class::\$$name.");
vendor/nette/utils/src/Utils/SmartObject.php:144:	 * @throws MemberAccessException if the property is not defined or is read-only
vendor/nette/utils/src/Utils/SmartObject.php:152:			$this->$name = $value;
vendor/nette/utils/src/Utils/SmartObject.php:156:				throw new MemberAccessException("Cannot write to a read-only property $class::\$$name.");
vendor/nette/utils/src/Utils/SmartObject.php:158:			$this->{'set' . $name}($value);
vendor/nette/utils/src/Utils/SmartObject.php:165:			$this->$m($value);
vendor/nette/utils/src/Utils/SmartObject.php:168:			throw new MemberAccessException("Cannot write to a read-only property $class::\$$name.");
vendor/nette/utils/src/Utils/SmartObject.php:222:			$class = (new \ReflectionClass($class))->getName();
vendor/nette/utils/src/Iterators/CachingIterator.php:16: * @property-read bool $first
vendor/nette/utils/src/Iterators/CachingIterator.php:17: * @property-read bool $last
vendor/nette/utils/src/Iterators/CachingIterator.php:18: * @property-read bool $empty
vendor/nette/utils/src/Iterators/CachingIterator.php:19: * @property-read bool $odd
vendor/nette/utils/src/Iterators/CachingIterator.php:20: * @property-read bool $even
vendor/nette/utils/src/Iterators/CachingIterator.php:21: * @property-read int $counter
vendor/nette/utils/src/Iterators/CachingIterator.php:22: * @property-read mixed $nextKey
vendor/nette/utils/src/Iterators/CachingIterator.php:23: * @property-read mixed $nextValue
vendor/nette/utils/src/Iterators/CachingIterator.php:40:				$iterator = $iterator->getIterator();
vendor/nette/utils/src/Iterators/CachingIterator.php:62:		return $this->counter === 1 || ($width && $this->counter !== 0 && (($this->counter - 1) % $width) === 0);
vendor/nette/utils/src/Iterators/CachingIterator.php:73:		return !$this->hasNext() || ($width && ($this->counter % $width) === 0);
vendor/nette/utils/src/Iterators/CachingIterator.php:83:		return $this->counter === 0;
vendor/nette/utils/src/Iterators/CachingIterator.php:93:		return $this->counter % 2 === 1;
vendor/nette/utils/src/Iterators/CachingIterator.php:103:		return $this->counter % 2 === 0;
vendor/nette/utils/src/Iterators/CachingIterator.php:113:		return $this->counter;
vendor/nette/utils/src/Iterators/CachingIterator.php:123:		$inner = $this->getInnerIterator();
vendor/nette/utils/src/Iterators/CachingIterator.php:125:			return $inner->count();
vendor/nette/utils/src/Iterators/CachingIterator.php:141:			$this->counter++;
vendor/nette/utils/src/Iterators/CachingIterator.php:153:		$this->counter = parent::valid() ? 1 : 0;
vendor/nette/utils/src/Iterators/CachingIterator.php:163:		return $this->getInnerIterator()->key();
vendor/nette/utils/src/Iterators/CachingIterator.php:173:		return $this->getInnerIterator()->current();
vendor/nette/utils/src/Iterators/Mapper.php:24:		$this->callback = $callback;
vendor/nette/utils/src/Iterators/Mapper.php:30:		return call_user_func($this->callback, parent::current(), parent::key());
vendor/nette/finder/composer.json:5:	"license": ["BSD-3-Clause", "GPL-2.0", "GPL-3.0"],
vendor/nette/finder/composer.json:20:	"require-dev": {
vendor/nette/finder/composer.json:30:	"minimum-stability": "dev",
vendor/nette/finder/composer.json:32:		"branch-alias": {
vendor/nette/finder/composer.json:33:			"dev-master": "2.4-dev"
vendor/nette/finder/contributing.md:12:------
vendor/nette/finder/contributing.md:25:------------
vendor/nette/finder/readme.md:5:[![Build Status](https://travis-ci.org/nette/finder.svg?branch=master)](https://travis-ci.org/nette/finder)
vendor/nette/finder/readme.md:8:[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/finder/blob/master/license.md)
vendor/nette/finder/readme.md:21:-------------------
vendor/nette/finder/readme.md:26:foreach (Finder::findFiles('*.txt')->in($dir) as $key => $file) {
vendor/nette/finder/readme.md:39:foreach (Finder::findFiles('*.txt')->from($dir) as $file) {
vendor/nette/finder/readme.md:48:	->in($dir1, $dir2) as $file) {
vendor/nette/finder/readme.md:56:foreach (Finder::findFiles($masks)->in($dirs) as $file) {
vendor/nette/finder/readme.md:64:foreach (Finder::findFiles('*[0-9]*.txt')->from($dir) as $file) {
vendor/nette/finder/readme.md:73:	->exclude('*X*')->from($dir) as $file) {
vendor/nette/finder/readme.md:85:	->from($dir)->exclude('temp', '.git') as $file) {
vendor/nette/finder/readme.md:97:	->exclude('temp*/*')->from($dir) as $file) {
vendor/nette/finder/readme.md:107:----------------
vendor/nette/finder/readme.md:113:----------
vendor/nette/finder/readme.md:119:foreach (Finder::findFiles('*.php')->size('>=', 100)->size('<=', 200)
vendor/nette/finder/readme.md:120:	->from($dir) as $file) {
vendor/nette/finder/readme.md:128:foreach (Finder::findFiles('*.php')->date('>', '- 2 weeks')
vendor/nette/finder/readme.md:129:	->from($dir) as $file) {
vendor/nette/finder/readme.md:137:$finder = Finder::findFiles('*.php')->filter(function($file) {
vendor/nette/finder/readme.md:138:	return count(file($file->getPathname())) > 1000;
vendor/nette/finder/readme.md:139:})->from($dir);
vendor/nette/finder/readme.md:147:	->dimensions('>50', '>50')->from($dir) as $file) {
vendor/nette/finder/readme.md:154:----------------------
vendor/nette/finder/readme.md:160:$s3->registerStreamWrapper('s3');
vendor/nette/finder/readme.md:163:	->size('<=', 1e6)->in('s3://bucket-name') as $file) {
vendor/nette/finder/license.md:17:project or top-level domain, and choose a name that stands on its own merits.
vendor/nette/finder/license.md:22:---------------
vendor/nette/finder/license.md:54:--------------------------
vendor/nette/finder/license.md:59:- [GPL version 2](http://www.gnu.org/licenses/gpl-2.0.html)
vendor/nette/finder/license.md:60:- [GPL version 3](http://www.gnu.org/licenses/gpl-3.0.html)
vendor/nette/finder/src/Utils/Finder.php:20: *     ->size('> 10kB')
vendor/nette/finder/src/Utils/Finder.php:21: *     ->from('.')
vendor/nette/finder/src/Utils/Finder.php:22: *     ->exclude('temp');
vendor/nette/finder/src/Utils/Finder.php:42:	private $maxDepth = -1;
vendor/nette/finder/src/Utils/Finder.php:56:		return (new static)->select($masks, 'isDir')->select($masks, 'isFile');
vendor/nette/finder/src/Utils/Finder.php:68:		return (new static)->select($masks, 'isFile');
vendor/nette/finder/src/Utils/Finder.php:80:		return (new static)->select($masks, 'isDir');
vendor/nette/finder/src/Utils/Finder.php:92:		$this->cursor = &$this->groups[];
vendor/nette/finder/src/Utils/Finder.php:95:			$this->filter(function (RecursiveDirectoryIterator $file) use ($type, $pattern) {
vendor/nette/finder/src/Utils/Finder.php:96:				return !$file->isDot()
vendor/nette/finder/src/Utils/Finder.php:97:					&& (!$type || $file->$type())
vendor/nette/finder/src/Utils/Finder.php:98:					&& (!$pattern || preg_match($pattern, '/' . strtr($file->getSubPathName(), '\\', '/')));
vendor/nette/finder/src/Utils/Finder.php:112:		$this->maxDepth = 0;
vendor/nette/finder/src/Utils/Finder.php:113:		return $this->from(...$paths);
vendor/nette/finder/src/Utils/Finder.php:124:		if ($this->paths) {
vendor/nette/finder/src/Utils/Finder.php:127:		$this->paths = is_array($paths[0]) ? $paths[0] : $paths;
vendor/nette/finder/src/Utils/Finder.php:128:		$this->cursor = &$this->exclude;
vendor/nette/finder/src/Utils/Finder.php:139:		$this->order = RecursiveIteratorIterator::CHILD_FIRST;
vendor/nette/finder/src/Utils/Finder.php:166:				['\*\*' => '.*', '\*' => '[^/]*', '\?' => '[^/]', '\[\!' => '[^', '\[' => '[', '\]' => ']', '\-' => '-']);
vendor/nette/finder/src/Utils/Finder.php:181:		return iterator_count($this->getIterator());
vendor/nette/finder/src/Utils/Finder.php:191:		if (!$this->paths) {
vendor/nette/finder/src/Utils/Finder.php:194:		} elseif (count($this->paths) === 1) {
vendor/nette/finder/src/Utils/Finder.php:195:			return $this->buildIterator($this->paths[0]);
vendor/nette/finder/src/Utils/Finder.php:199:			$iterator->append($workaround = new \ArrayIterator(['workaround PHP bugs #49104, #63077']));
vendor/nette/finder/src/Utils/Finder.php:200:			foreach ($this->paths as $path) {
vendor/nette/finder/src/Utils/Finder.php:201:				$iterator->append($this->buildIterator($path));
vendor/nette/finder/src/Utils/Finder.php:210:	 * Returns per-path iterator.
vendor/nette/finder/src/Utils/Finder.php:218:		if ($this->exclude) {
vendor/nette/finder/src/Utils/Finder.php:220:				if (!$file->isDot() && !$file->isFile()) {
vendor/nette/finder/src/Utils/Finder.php:221:					foreach ($this->exclude as $filter) {
vendor/nette/finder/src/Utils/Finder.php:231:		if ($this->maxDepth !== 0) {
vendor/nette/finder/src/Utils/Finder.php:232:			$iterator = new RecursiveIteratorIterator($iterator, $this->order);
vendor/nette/finder/src/Utils/Finder.php:233:			$iterator->setMaxDepth($this->maxDepth);
vendor/nette/finder/src/Utils/Finder.php:238:				$file = $file->getInnerIterator();
vendor/nette/finder/src/Utils/Finder.php:241:			foreach ($this->groups as $filters) {
vendor/nette/finder/src/Utils/Finder.php:270:			$this->filter(function (RecursiveDirectoryIterator $file) use ($pattern) {
vendor/nette/finder/src/Utils/Finder.php:271:				return !preg_match($pattern, '/' . strtr($file->getSubPathName(), '\\', '/'));
vendor/nette/finder/src/Utils/Finder.php:285:		$this->cursor[] = $callback;
vendor/nette/finder/src/Utils/Finder.php:297:		$this->maxDepth = $depth;
vendor/nette/finder/src/Utils/Finder.php:319:		return $this->filter(function (RecursiveDirectoryIterator $file) use ($operator, $size) {
vendor/nette/finder/src/Utils/Finder.php:320:			return self::compare($file->getSize(), $operator, $size);
vendor/nette/finder/src/Utils/Finder.php:327:	 * @param  string  "[operator] [date]" example: >1978-01-23
vendor/nette/finder/src/Utils/Finder.php:340:		$date = DateTime::from($date)->format('U');
vendor/nette/finder/src/Utils/Finder.php:341:		return $this->filter(function (RecursiveDirectoryIterator $file) use ($operator, $date) {
vendor/nette/finder/src/Utils/Finder.php:342:			return self::compare($file->getMTime(), $operator, $date);
vendor/nette/php-generator/composer.json:2:	"name": "nette/php-generator",
vendor/nette/php-generator/composer.json:6:	"license": ["BSD-3-Clause", "GPL-2.0", "GPL-3.0"],
vendor/nette/php-generator/composer.json:21:	"require-dev": {
vendor/nette/php-generator/composer.json:31:	"minimum-stability": "dev",
vendor/nette/php-generator/composer.json:33:		"branch-alias": {
vendor/nette/php-generator/composer.json:34:			"dev-master": "3.0-dev"
vendor/nette/php-generator/contributing.md:12:------
vendor/nette/php-generator/contributing.md:25:------------
vendor/nette/php-generator/readme.md:4:[![Downloads this Month](https://img.shields.io/packagist/dm/nette/php-generator.svg)](https://packagist.org/packages/nette/php-generator)
vendor/nette/php-generator/readme.md:5:[![Build Status](https://travis-ci.org/nette/php-generator.svg?branch=master)](https://travis-ci.org/nette/php-generator)
vendor/nette/php-generator/readme.md:6:[![Coverage Status](https://coveralls.io/repos/github/nette/php-generator/badge.svg?branch=master&v=1)](https://coveralls.io/github/nette/php-generator?branch=master)
vendor/nette/php-generator/readme.md:7:[![Latest Stable Version](https://poser.pugx.org/nette/php-generator/v/stable)](https://github.com/nette/php-generator/releases)
vendor/nette/php-generator/readme.md:8:[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/php-generator/blob/master/license.md)
vendor/nette/php-generator/readme.md:12:------------
vendor/nette/php-generator/readme.md:16:Documentation can be found on the [website](https://doc.nette.org/php-generator).
vendor/nette/php-generator/readme.md:20:------------
vendor/nette/php-generator/readme.md:25:composer require nette/php-generator
vendor/nette/php-generator/readme.md:28:- v2.6 requires PHP 5.6 or newer (is compatible up to 7.2)
vendor/nette/php-generator/readme.md:29:- v3.0 requires PHP 7.0 or newer (is compatible up to 7.2)
vendor/nette/php-generator/readme.md:30:- v3.1 requires PHP 7.1 or newer (is compatible up to 7.2)
vendor/nette/php-generator/readme.md:34:-----
vendor/nette/php-generator/readme.md:42:	->setAbstract()
vendor/nette/php-generator/readme.md:43:	->setFinal()
vendor/nette/php-generator/readme.md:44:	->setExtends('ParentClass')
vendor/nette/php-generator/readme.md:45:	->addImplement('Countable')
vendor/nette/php-generator/readme.md:46:	->addTrait('Nette\SmartObject')
vendor/nette/php-generator/readme.md:47:	->addComment("Description of class.\nSecond line\n")
vendor/nette/php-generator/readme.md:48:	->addComment('@property-read Nette\Forms\Form $form');
vendor/nette/php-generator/readme.md:50:$class->addConstant('ID', 123);
vendor/nette/php-generator/readme.md:52:$class->addProperty('items', [1, 2, 3])
vendor/nette/php-generator/readme.md:53:	->setVisibility('private')
vendor/nette/php-generator/readme.md:54:	->setStatic()
vendor/nette/php-generator/readme.md:55:	->addComment('@var int[]');
vendor/nette/php-generator/readme.md:57:$method = $class->addMethod('count')
vendor/nette/php-generator/readme.md:58:	->addComment('Count it.')
vendor/nette/php-generator/readme.md:59:	->addComment('@return int')
vendor/nette/php-generator/readme.md:60:	->setFinal()
vendor/nette/php-generator/readme.md:61:	->setVisibility('protected')
vendor/nette/php-generator/readme.md:62:	->setBody('return count($items ?: $this->items);');
vendor/nette/php-generator/readme.md:64:$method->addParameter('items', []) // $items = []
vendor/nette/php-generator/readme.md:65:		->setReference() // &$items = []
vendor/nette/php-generator/readme.md:66:		->setTypeHint('array'); // array &$items = []
vendor/nette/php-generator/readme.md:82: * @property-read Nette\Forms\Form $form
vendor/nette/php-generator/readme.md:99:		return count($items ?: $this->items);
vendor/nette/php-generator/readme.md:110:$class->addConstant('ID', 123)
vendor/nette/php-generator/readme.md:111:	->setVisibility('private'); // constant visiblity
vendor/nette/php-generator/readme.md:113:$method = $class->addMethod('getValue')
vendor/nette/php-generator/readme.md:114:	->setReturnType('int') // method return type
vendor/nette/php-generator/readme.md:115:	->setReturnNullable() // nullable return type
vendor/nette/php-generator/readme.md:116:	->setBody('return count($this->items);');
vendor/nette/php-generator/readme.md:118:$method->addParameter('id')
vendor/nette/php-generator/readme.md:119:		->setTypeHint('int') // scalar type hint
vendor/nette/php-generator/readme.md:120:		->setNullable(); // nullable type hint
vendor/nette/php-generator/readme.md:134:		return count($this->items);
vendor/nette/php-generator/readme.md:141:------------------
vendor/nette/php-generator/readme.md:157:--------
vendor/nette/php-generator/readme.md:166:$class->addProperty('foo', new PhpLiteral('Iterator::SELF_FIRST'));
vendor/nette/php-generator/readme.md:168:$class->addMethod('bar')
vendor/nette/php-generator/readme.md:169:	->addParameter('id', new PhpLiteral('1 + 2'));
vendor/nette/php-generator/readme.md:189:------------------
vendor/nette/php-generator/readme.md:193:$class->setType('interface');
vendor/nette/php-generator/readme.md:194:$class->setType('trait'); // or trait
vendor/nette/php-generator/readme.md:198:--------------------------------
vendor/nette/php-generator/readme.md:202:$class->addTrait('SmartObject', ['sayHello as protected']);
vendor/nette/php-generator/readme.md:218:---------------
vendor/nette/php-generator/readme.md:222:$class->addMethod('__construct')
vendor/nette/php-generator/readme.md:223:	->addParameter('foo');
vendor/nette/php-generator/readme.md:240:---------------
vendor/nette/php-generator/readme.md:244:$function->setBody('return $a + $b;');
vendor/nette/php-generator/readme.md:245:$function->addParameter('a');
vendor/nette/php-generator/readme.md:246:$function->addParameter('b');
vendor/nette/php-generator/readme.md:260:-------
vendor/nette/php-generator/readme.md:264:$closure->setBody('return $a + $b;');
vendor/nette/php-generator/readme.md:265:$closure->addParameter('a');
vendor/nette/php-generator/readme.md:266:$closure->addParameter('b');
vendor/nette/php-generator/readme.md:267:$closure->addUse('c')
vendor/nette/php-generator/readme.md:268:	->setReference();
vendor/nette/php-generator/readme.md:281:---------------------
vendor/nette/php-generator/readme.md:291:$function->addBody('$a = strlen(?, ?);', [$str, $num]);
vendor/nette/php-generator/readme.md:292:$function->addBody('return $a \? 10 : ?;', [$num]); // escaping
vendor/nette/php-generator/readme.md:311:$function->setBody('myfunc(...?);', [$items]);
vendor/nette/php-generator/readme.md:326:---------
vendor/nette/php-generator/readme.md:330:$namespace->addUse('Bar\AliasedClass');
vendor/nette/php-generator/readme.md:332:$class = $namespace->addClass('Demo');
vendor/nette/php-generator/readme.md:333:$class->addImplement('Foo\A') // resolves to A
vendor/nette/php-generator/readme.md:334:	->addTrait('Bar\AliasedClass'); // resolves to AliasedClass
vendor/nette/php-generator/readme.md:336:$method = $class->addMethod('method');
vendor/nette/php-generator/readme.md:337:$method->addParameter('arg')
vendor/nette/php-generator/readme.md:338:	->setTypeHint('Bar\OtherClass'); // resolves to \Bar\OtherClass
vendor/nette/php-generator/readme.md:362:---------
vendor/nette/php-generator/license.md:17:project or top-level domain, and choose a name that stands on its own merits.
vendor/nette/php-generator/license.md:22:---------------
vendor/nette/php-generator/license.md:54:--------------------------
vendor/nette/php-generator/license.md:59:- [GPL version 2](http://www.gnu.org/licenses/gpl-2.0.html)
vendor/nette/php-generator/license.md:60:- [GPL version 3](http://www.gnu.org/licenses/gpl-3.0.html)
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:76:		return (new Factory)->fromClassReflection(
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:84:		$this->setName($name);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:85:		$this->namespace = $namespace;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:92:		foreach ($this->traits as $trait => $resolutions) {
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:93:			$traits[] = 'use ' . ($this->namespace ? $this->namespace->unresolveName($trait) : $trait)
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:98:		foreach ($this->consts as $const) {
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:99:			$consts[] = Helpers::formatDocComment((string) $const->getComment())
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:100:				. ($const->getVisibility() ? $const->getVisibility() . ' ' : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:101:				. 'const ' . $const->getName() . ' = ' . Helpers::dump($const->getValue()) . ';';
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:105:		foreach ($this->properties as $property) {
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:106:			$properties[] = Helpers::formatDocComment((string) $property->getComment())
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:107:				. ($property->getVisibility() ?: 'public') . ($property->isStatic() ? ' static' : '') . ' $' . $property->getName()
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:108:				. ($property->getValue() === null ? '' : ' = ' . Helpers::dump($property->getValue()))
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:113:			return $this->namespace ? array_map([$this->namespace, 'unresolveName'], $arr) : $arr;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:117:			Helpers::formatDocComment($this->comment . "\n")
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:118:			. ($this->abstract ? 'abstract ' : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:119:			. ($this->final ? 'final ' : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:120:			. ($this->name ? "$this->type $this->name " : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:121:			. ($this->extends ? 'extends ' . implode(', ', $mapper((array) $this->extends)) . ' ' : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:122:			. ($this->implements ? 'implements ' . implode(', ', $mapper($this->implements)) . ' ' : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:123:			. ($this->name ? "\n" : '') . "{\n"
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:125:				($this->traits ? implode("\n", $traits) . "\n\n" : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:126:				. ($this->consts ? implode("\n", $consts) . "\n\n" : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:127:				. ($this->properties ? implode("\n\n", $properties) . "\n\n\n" : '')
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:128:				. ($this->methods ? implode("\n\n\n", $this->methods) . "\n" : ''), 1)
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:130:		) . ($this->name ? "\n" : '');
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:139:		return $this->namespace;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:152:		$this->name = $name;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:162:		return $this->name;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:174:		$this->type = $type;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:181:		return $this->type;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:190:		$this->final = $state;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:197:		return $this->final;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:206:		$this->abstract = $state;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:213:		return $this->abstract;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:226:		$this->validate((array) $names);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:227:		$this->extends = $names;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:237:		return $this->extends;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:246:		$this->validate([$name]);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:247:		$this->extends = (array) $this->extends;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:248:		$this->extends[] = $name;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:259:		$this->validate($names);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:260:		$this->implements = $names;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:270:		return $this->implements;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:279:		$this->validate([$name]);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:280:		$this->implements[] = $name;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:291:		$this->validate($names);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:292:		$this->traits = array_fill_keys($names, []);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:302:		return array_keys($this->traits);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:311:		$this->validate([$name]);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:312:		$this->traits[$name] = $resolutions;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:324:		return $this->setConstants($consts);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:334:		return array_map(function ($const) { return $const->getValue(); }, $this->consts);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:345:		$this->addConstant($name, $value);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:356:		$this->consts = [];
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:358:			$const = $v instanceof Constant ? $v : (new Constant($k))->setValue($v);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:359:			$this->consts[$const->getName()] = $const;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:370:		return $this->consts;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:376:		return $this->consts[$name] = (new Constant($name))->setValue($value);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:386:		$this->properties = [];
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:391:			$this->properties[$v->getName()] = $v;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:402:		return $this->properties;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:408:		if (!isset($this->properties[$name])) {
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:411:		return $this->properties[$name];
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:420:		return $this->properties[$name] = (new Property($name))->setValue($value);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:430:		$this->methods = [];
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:435:			$this->methods[$v->getName()] = $v->setNamespace($this->namespace);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:446:		return $this->methods;
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:452:		if (!isset($this->methods[$name])) {
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:455:		return $this->methods[$name];
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:461:		$method = (new Method($name))->setNamespace($this->namespace);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:462:		if ($this->type === 'interface') {
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:463:			$method->setBody(null);
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:465:			$method->setVisibility('public');
vendor/nette/php-generator/src/PhpGenerator/ClassType.php:467:		return $this->methods[$name] = $method;
vendor/nette/php-generator/src/PhpGenerator/Property.php:39:		$this->value = $val;
vendor/nette/php-generator/src/PhpGenerator/Property.php:46:		return $this->value;
vendor/nette/php-generator/src/PhpGenerator/Property.php:55:		$this->static = $state;
vendor/nette/php-generator/src/PhpGenerator/Property.php:62:		return $this->static;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:21: * - namespace statement
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:22: * - variable amount of use statements
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:23: * - one or more class declarations
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:52:		$this->name = $name;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:60:		$this->__construct($name);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:67:		return $this->name;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:77:		$this->bracketedSyntax = $state;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:84:		return $this->bracketedSyntax;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:95:		if ($alias === null && $this->name === Helpers::extractNamespace($name)) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:107:			} while (isset($this->uses[$alias . $counter]) && $this->uses[$alias . $counter] !== $name);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:110:		} elseif (isset($this->uses[$alias]) && $this->uses[$alias] !== $name) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:112:				"Alias '$alias' used already for '{$this->uses[$alias]}', cannot use for '{$name}'."
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:117:		$this->uses[$alias] = $name;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:127:		return $this->uses;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:139:		foreach ($this->uses as $alias => $for) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:148:		if (!$res && Strings::startsWith($lower, strtolower($this->name) . '\\')) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:149:			return substr($name, strlen($this->name) + 1);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:151:			return $res ?: ($this->name ? '\\' : '') . $name;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:158:		if (isset($this->classes[$name])) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:160:			return $this->classes[$name];
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:162:		$this->addUse($this->name . '\\' . $name);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:163:		return $this->classes[$name] = new ClassType($name, $this);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:169:		return $this->addClass($name)->setType(ClassType::TYPE_INTERFACE);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:175:		return $this->addClass($name)->setType(ClassType::TYPE_TRAIT);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:184:		return $this->classes;
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:191:		asort($this->uses);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:192:		foreach ($this->uses as $alias => $name) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:195:			if ($this->name !== $useNamespace) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:196:				if ($alias === $name || substr($name, -(strlen($alias) + 1)) === '\\' . $alias) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:205:			. implode("\n", $this->classes);
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:207:		if ($this->bracketedSyntax) {
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:208:			return 'namespace' . ($this->name ? ' ' . $this->name : '') . " {\n\n"
vendor/nette/php-generator/src/PhpGenerator/PhpNamespace.php:213:			return ($this->name ? "namespace {$this->name};\n\n" : '')
vendor/nette/php-generator/src/PhpGenerator/Closure.php:34:		return (new Factory)->fromFunctionReflection(new \ReflectionFunction($closure));
vendor/nette/php-generator/src/PhpGenerator/Closure.php:41:		foreach ($this->uses as $param) {
vendor/nette/php-generator/src/PhpGenerator/Closure.php:42:			$uses[] = ($param->isReference() ? '&' : '') . '$' . $param->getName();
vendor/nette/php-generator/src/PhpGenerator/Closure.php:49:			. ($this->returnReference ? '&' : '')
vendor/nette/php-generator/src/PhpGenerator/Closure.php:50:			. $this->parametersToString()
vendor/nette/php-generator/src/PhpGenerator/Closure.php:51:			. ($this->uses ? " use ($useStr)" : '')
vendor/nette/php-generator/src/PhpGenerator/Closure.php:52:			. $this->returnTypeToString()
vendor/nette/php-generator/src/PhpGenerator/Closure.php:53:			. " {\n" . Nette\Utils\Strings::indent(ltrim(rtrim($this->body) . "\n"), 1) . '}';
vendor/nette/php-generator/src/PhpGenerator/Closure.php:64:		$this->uses = $uses;
vendor/nette/php-generator/src/PhpGenerator/Closure.php:71:		return $this->uses;
vendor/nette/php-generator/src/PhpGenerator/Closure.php:77:		return $this->uses[] = new Parameter($name);
vendor/nette/php-generator/src/PhpGenerator/Factory.php:24:		$class = $from->isAnonymous()
vendor/nette/php-generator/src/PhpGenerator/Factory.php:26:			: new ClassType($from->getShortName(), new PhpNamespace($from->getNamespaceName()));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:27:		$class->setType($from->isInterface() ? 'interface' : ($from->isTrait() ? 'trait' : 'class'));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:28:		$class->setFinal($from->isFinal() && $class->getType() === 'class');
vendor/nette/php-generator/src/PhpGenerator/Factory.php:29:		$class->setAbstract($from->isAbstract() && $class->getType() === 'class');
vendor/nette/php-generator/src/PhpGenerator/Factory.php:30:		$class->setImplements($from->getInterfaceNames());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:31:		$class->setComment(Helpers::unformatDocComment((string) $from->getDocComment()));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:32:		if ($from->getParentClass()) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:33:			$class->setExtends($from->getParentClass()->getName());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:34:			$class->setImplements(array_diff($class->getImplements(), $from->getParentClass()->getInterfaceNames()));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:37:		foreach ($from->getProperties() as $prop) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:38:			if ($prop->isDefault() && $prop->getDeclaringClass()->getName() === $from->getName()) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:39:				$props[] = $this->fromPropertyReflection($prop);
vendor/nette/php-generator/src/PhpGenerator/Factory.php:42:		$class->setProperties($props);
vendor/nette/php-generator/src/PhpGenerator/Factory.php:43:		foreach ($from->getMethods() as $method) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:44:			if ($method->getDeclaringClass()->getName() === $from->getName()) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:45:				$methods[] = $this->fromMethodReflection($method)->setNamespace($class->getNamespace());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:48:		$class->setMethods($methods);
vendor/nette/php-generator/src/PhpGenerator/Factory.php:49:		$class->setConstants($from->getConstants());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:56:		$method = new Method($from->getName());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:57:		$method->setParameters(array_map([$this, 'fromParameterReflection'], $from->getParameters()));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:58:		$method->setStatic($from->isStatic());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:59:		$isInterface = $from->getDeclaringClass()->isInterface();
vendor/nette/php-generator/src/PhpGenerator/Factory.php:60:		$method->setVisibility($from->isPrivate() ? 'private' : ($from->isProtected() ? 'protected' : ($isInterface ? null : 'public')));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:61:		$method->setFinal($from->isFinal());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:62:		$method->setAbstract($from->isAbstract() && !$isInterface);
vendor/nette/php-generator/src/PhpGenerator/Factory.php:63:		$method->setBody($from->isAbstract() ? null : '');
vendor/nette/php-generator/src/PhpGenerator/Factory.php:64:		$method->setReturnReference($from->returnsReference());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:65:		$method->setVariadic($from->isVariadic());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:66:		$method->setComment(Helpers::unformatDocComment((string) $from->getDocComment()));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:67:		if ($from->hasReturnType()) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:68:			$method->setReturnType((string) $from->getReturnType());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:69:			$method->setReturnNullable($from->getReturnType()->allowsNull());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:80:		$function = $from->isClosure() ? new Closure : new GlobalFunction($from->getName());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:81:		$function->setParameters(array_map([$this, 'fromParameterReflection'], $from->getParameters()));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:82:		$function->setReturnReference($from->returnsReference());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:83:		$function->setVariadic($from->isVariadic());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:84:		if (!$from->isClosure()) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:85:			$function->setComment(Helpers::unformatDocComment((string) $from->getDocComment()));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:87:		if ($from->hasReturnType()) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:88:			$function->setReturnType((string) $from->getReturnType());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:89:			$function->setReturnNullable($from->getReturnType()->allowsNull());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:97:		$param = new Parameter($from->getName());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:98:		$param->setReference($from->isPassedByReference());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:99:		$param->setTypeHint($from->hasType() ? (string) $from->getType() : null);
vendor/nette/php-generator/src/PhpGenerator/Factory.php:100:		$param->setNullable($from->hasType() && $from->getType()->allowsNull());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:101:		if ($from->isDefaultValueAvailable()) {
vendor/nette/php-generator/src/PhpGenerator/Factory.php:102:			$param->setDefaultValue($from->isDefaultValueConstant()
vendor/nette/php-generator/src/PhpGenerator/Factory.php:103:				? new PhpLiteral($from->getDefaultValueConstantName())
vendor/nette/php-generator/src/PhpGenerator/Factory.php:104:				: $from->getDefaultValue());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:105:			$param->setNullable($param->isNullable() && $param->getDefaultValue() !== null);
vendor/nette/php-generator/src/PhpGenerator/Factory.php:113:		$prop = new Property($from->getName());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:114:		$prop->setValue($from->getDeclaringClass()->getDefaultProperties()[$prop->getName()] ?? null);
vendor/nette/php-generator/src/PhpGenerator/Factory.php:115:		$prop->setStatic($from->isStatic());
vendor/nette/php-generator/src/PhpGenerator/Factory.php:116:		$prop->setVisibility($from->isPrivate() ? 'private' : ($from->isProtected() ? 'protected' : 'public'));
vendor/nette/php-generator/src/PhpGenerator/Factory.php:117:		$prop->setComment(Helpers::unformatDocComment((string) $from->getDocComment()));
vendor/nette/php-generator/src/PhpGenerator/Method.php:52:		return (new Factory)->fromMethodReflection($method);
vendor/nette/php-generator/src/PhpGenerator/Method.php:61:		$this->name = $name;
vendor/nette/php-generator/src/PhpGenerator/Method.php:67:		return Helpers::formatDocComment($this->comment . "\n")
vendor/nette/php-generator/src/PhpGenerator/Method.php:68:			. ($this->abstract ? 'abstract ' : '')
vendor/nette/php-generator/src/PhpGenerator/Method.php:69:			. ($this->final ? 'final ' : '')
vendor/nette/php-generator/src/PhpGenerator/Method.php:70:			. ($this->visibility ? $this->visibility . ' ' : '')
vendor/nette/php-generator/src/PhpGenerator/Method.php:71:			. ($this->static ? 'static ' : '')
vendor/nette/php-generator/src/PhpGenerator/Method.php:73:			. ($this->returnReference ? '&' : '')
vendor/nette/php-generator/src/PhpGenerator/Method.php:74:			. $this->name
vendor/nette/php-generator/src/PhpGenerator/Method.php:75:			. ($params = $this->parametersToString())
vendor/nette/php-generator/src/PhpGenerator/Method.php:76:			. $this->returnTypeToString()
vendor/nette/php-generator/src/PhpGenerator/Method.php:77:			. ($this->abstract || $this->body === null
vendor/nette/php-generator/src/PhpGenerator/Method.php:81:					. Nette\Utils\Strings::indent(ltrim(rtrim($this->body) . "\n"), 1)
vendor/nette/php-generator/src/PhpGenerator/Method.php:96:		$this->body = $args === null || $code === null ? $code : Helpers::formatArgs($code, $args);
vendor/nette/php-generator/src/PhpGenerator/Method.php:106:		return $this->body;
vendor/nette/php-generator/src/PhpGenerator/Method.php:115:		$this->static = $state;
vendor/nette/php-generator/src/PhpGenerator/Method.php:122:		return $this->static;
vendor/nette/php-generator/src/PhpGenerator/Method.php:131:		$this->final = $state;
vendor/nette/php-generator/src/PhpGenerator/Method.php:138:		return $this->final;
vendor/nette/php-generator/src/PhpGenerator/Method.php:147:		$this->abstract = $state;
vendor/nette/php-generator/src/PhpGenerator/Method.php:154:		return $this->abstract;
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:20: * - opening tag (<?php)
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:21: * - doc comments
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:22: * - one or more namespaces
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:36:			->addNamespace(Helpers::extractNamespace($name))
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:37:			->addClass(Helpers::extractShortName($name));
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:44:			->addNamespace(Helpers::extractNamespace($name))
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:45:			->addInterface(Helpers::extractShortName($name));
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:52:			->addNamespace(Helpers::extractNamespace($name))
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:53:			->addTrait(Helpers::extractShortName($name));
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:59:		if (!isset($this->namespaces[$name])) {
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:60:			$this->namespaces[$name] = new PhpNamespace($name);
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:62:		return $this->namespaces[$name];
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:68:		foreach ($this->namespaces as $namespace) {
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:69:			$namespace->setBracketedSyntax(count($this->namespaces) > 1 && isset($this->namespaces['']));
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:74:			. ($this->comment ? "\n" . Helpers::formatDocComment($this->comment . "\n") . "\n" : '')
vendor/nette/php-generator/src/PhpGenerator/PhpFile.php:75:			. implode("\n\n", $this->namespaces)
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:22:	const PHP_IDENT = '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*';
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:55:		} elseif (is_string($var) && (preg_match('#[^\x09\x20-\x7E\xA0-\x{10FFFF}]#u', $var) || preg_last_error())) {
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:101:			$wrap = strpos($out, "\n") !== false || strlen($out) > self::WRAP_LENGTH - $level * self::INDENT_LENGTH;
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:113:			if ((new \ReflectionObject($var))->isAnonymous()) {
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:117:				return self::formatArgs("new $class(?, new DateTimeZone(?))", [$var->format('Y-m-d H:i:s.u'), $var->getTimeZone()->getName()]);
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:131:					foreach ($var->__sleep() as $v) {
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:170:		$tokens = preg_split('#(\.\.\.\?|\$\?|->\?|::\?|\\\\\?|\?\*|\?)#', $statement, -1, PREG_SPLIT_DELIM_CAPTURE);
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:194:			} else { // $  ->  ::
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:195:				$res .= substr($token, 0, -1) . self::formatMember(array_shift($args));
vendor/nette/php-generator/src/PhpGenerator/Helpers.php:253:		return unserialize('O' . substr(serialize($class), 1, -1) . substr(serialize($props), 1));
vendor/nette/php-generator/src/PhpGenerator/PhpLiteral.php:24:		$this->value = $value;
vendor/nette/php-generator/src/PhpGenerator/PhpLiteral.php:30:		return $this->value;
vendor/nette/php-generator/src/PhpGenerator/Constant.php:34:		$this->value = $val;
vendor/nette/php-generator/src/PhpGenerator/Constant.php:41:		return $this->value;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:46:		$this->reference = $state;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:53:		return $this->reference;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:63:		$this->typeHint = $hint ? (string) $hint : null;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:73:		return $this->typeHint;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:83:		$this->hasDefaultValue = $state;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:94:		return $this->hasDefaultValue;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:103:		$this->nullable = $state;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:110:		return $this->nullable;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:119:		$this->defaultValue = $val;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:120:		$this->hasDefaultValue = true;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:127:		return $this->defaultValue;
vendor/nette/php-generator/src/PhpGenerator/Parameter.php:133:		return $this->hasDefaultValue;
vendor/nette/php-generator/src/PhpGenerator/GlobalFunction.php:32:		return (new Factory)->fromFunctionReflection(new \ReflectionFunction($function));
vendor/nette/php-generator/src/PhpGenerator/GlobalFunction.php:38:		return Helpers::formatDocComment($this->comment . "\n")
vendor/nette/php-generator/src/PhpGenerator/GlobalFunction.php:40:			. ($this->returnReference ? '&' : '')
vendor/nette/php-generator/src/PhpGenerator/GlobalFunction.php:41:			. $this->name
vendor/nette/php-generator/src/PhpGenerator/GlobalFunction.php:42:			. $this->parametersToString()
vendor/nette/php-generator/src/PhpGenerator/GlobalFunction.php:43:			. $this->returnTypeToString()
vendor/nette/php-generator/src/PhpGenerator/GlobalFunction.php:44:			. "\n{\n" . Nette\Utils\Strings::indent(ltrim(rtrim($this->body) . "\n"), 1) . '}';
vendor/nette/php-generator/src/PhpGenerator/Traits/NameAware.php:29:		$this->name = $name;
vendor/nette/php-generator/src/PhpGenerator/Traits/NameAware.php:35:		return $this->name;
vendor/nette/php-generator/src/PhpGenerator/Traits/VisibilityAware.php:33:		$this->visibility = $val;
vendor/nette/php-generator/src/PhpGenerator/Traits/VisibilityAware.php:43:		return $this->visibility;
vendor/nette/php-generator/src/PhpGenerator/Traits/CommentAware.php:28:		$this->comment = $val ? (string) $val : null;
vendor/nette/php-generator/src/PhpGenerator/Traits/CommentAware.php:38:		return $this->comment;
vendor/nette/php-generator/src/PhpGenerator/Traits/CommentAware.php:47:		$this->comment .= $this->comment ? "\n$val" : $val;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:50:		$this->body = $args === null ? $code : Helpers::formatArgs($code, $args);
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:57:		return $this->body;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:66:		$this->body .= ($args === null ? $code : Helpers::formatArgs($code, $args)) . "\n";
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:77:		$this->parameters = [];
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:82:			$this->parameters[$v->getName()] = $v;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:93:		return $this->parameters;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:104:			$param->setDefaultValue($defaultValue);
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:106:		return $this->parameters[$name] = $param;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:115:		$this->variadic = $state;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:122:		return $this->variadic;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:132:		$this->returnType = $val ? (string) $val : null;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:142:		return $this->returnType;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:151:		$this->returnReference = $state;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:158:		return $this->returnReference;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:167:		$this->returnNullable = $state;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:174:		return $this->returnNullable;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:183:		$this->namespace = $val;
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:191:		foreach ($this->parameters as $param) {
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:192:			$variadic = $this->variadic && $param === end($this->parameters);
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:193:			$hint = $param->getTypeHint();
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:194:			$params[] = ($hint ? ($param->isNullable() ? '?' : '') . ($this->namespace ? $this->namespace->unresolveName($hint) : $hint) . ' ' : '')
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:195:				. ($param->isReference() ? '&' : '')
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:197:				. '$' . $param->getName()
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:198:				. ($param->hasDefaultValue() && !$variadic ? ' = ' . Helpers::dump($param->getDefaultValue()) : '');
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:209:		return $this->returnType
vendor/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php:210:			? ': ' . ($this->returnNullable ? '?' : '') . ($this->namespace ? $this->namespace->unresolveName($this->returnType) : $this->returnType)
vendor/nette/bootstrap/composer.json:6:	"license": ["BSD-3-Clause", "GPL-2.0", "GPL-3.0"],
vendor/nette/bootstrap/composer.json:23:		"nette/robot-loader": "to use Configurator::createRobotLoader()",
vendor/nette/bootstrap/composer.json:26:	"require-dev": {
vendor/nette/bootstrap/composer.json:33:		"nette/robot-loader": "^2.4.2 || ^3.0",
vendor/nette/bootstrap/composer.json:34:		"nette/safe-stream": "~2.2",
vendor/nette/bootstrap/composer.json:46:	"minimum-stability": "dev",
vendor/nette/bootstrap/composer.json:48:		"branch-alias": {
vendor/nette/bootstrap/composer.json:49:			"dev-master": "2.4-dev"
vendor/nette/bootstrap/readme.md:5:[![Build Status](https://travis-ci.org/nette/bootstrap.svg?branch=master)](https://travis-ci.org/nette/bootstrap)
vendor/nette/bootstrap/readme.md:8:[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/bootstrap/blob/master/license.md)
vendor/nette/bootstrap/readme.md:25://$configurator->setDebugMode(true);
vendor/nette/bootstrap/readme.md:26:$configurator->enableTracy(__DIR__ . '/../log');
vendor/nette/bootstrap/readme.md:32:$configurator->setTempDirectory(__DIR__ . '/../temp');
vendor/nette/bootstrap/readme.md:35:Activate [autoloading](https://doc.nette.org/en/auto-loading#toc-nette-loaders-robotloader), that will automatically load all the files with our classes:
vendor/nette/bootstrap/readme.md:38:$configurator->createRobotLoader()
vendor/nette/bootstrap/readme.md:39:	->addDirectory(__DIR__)
vendor/nette/bootstrap/readme.md:40:	->addDirectory(__DIR__ . '/../vendor/others')
vendor/nette/bootstrap/readme.md:41:	->register();
vendor/nette/bootstrap/readme.md:49:$configurator->addConfig(__DIR__ . '/config/config.neon');
vendor/nette/bootstrap/readme.md:50:$configurator->addConfig(__DIR__ . '/config/config.local.neon');
vendor/nette/bootstrap/readme.md:51:return $configurator->createContainer();
vendor/nette/bootstrap/readme.md:58:$container->getService('application')->run();
vendor/nette/bootstrap/license.md:17:project or top-level domain, and choose a name that stands on its own merits.
vendor/nette/bootstrap/license.md:22:---------------
vendor/nette/bootstrap/license.md:54:--------------------------
vendor/nette/bootstrap/license.md:59:- [GPL version 2](http://www.gnu.org/licenses/gpl-2.0.html)
vendor/nette/bootstrap/license.md:60:- [GPL version 3](http://www.gnu.org/licenses/gpl-3.0.html)
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:31:			Tracy\Debugger::getBar()->getPanel('Tracy:info')->data['Nette Framework'] = $version;
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:32:			$blueScreen->info[] = "Nette Framework $version";
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:40:		$blueScreen->addPanel(function ($e) {
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:44:					'panel' => (preg_match('#\n|\?#', $e->sourceName)
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:47:								. (@is_file($e->sourceName) // @ - may trigger error
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:48:									? '<b>File:</b> ' . Helpers::editorLink($e->sourceName, $e->sourceLine)
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:49:									: '<b>' . htmlspecialchars($e->sourceName . ($e->sourceLine ? ':' . $e->sourceLine : '')) . '</b>')
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:52:						. BlueScreen::highlightLine(htmlspecialchars($e->sourceCode, ENT_IGNORE, 'UTF-8'), $e->sourceLine)
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:58:		$blueScreen->addPanel(function ($e) {
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:61:				&& preg_match('#line (\d+)#', $e->getMessage(), $m)
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:62:				&& ($trace = Helpers::findTrace($e->getTrace(), 'Nette\Neon\Decoder::decode'))
vendor/nette/bootstrap/src/Bridges/Framework/TracyBridge.php:66:					'panel' => ($trace2 = Helpers::findTrace($e->getTrace(), 'Nette\DI\Config\Adapters\NeonAdapter::load'))
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:25:	const COOKIE_SECRET = 'nette-debug';
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:71:		$this->parameters = $this->getDefaultParameters();
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:87:		$this->parameters['debugMode'] = $value;
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:88:		$this->parameters['productionMode'] = !$this->parameters['debugMode']; // compatibility
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:98:		return $this->parameters['debugMode'];
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:109:		$this->parameters['tempDir'] = $path;
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:122:		@ini_set('date.timezone', $timezone); // @ - function may be disabled
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:133:		$this->parameters = DI\Config\Helpers::merge($params, $this->parameters);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:144:		$this->dynamicParameters = $params + $this->dynamicParameters;
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:155:		$this->services = $services + $this->services;
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:185:		$this->enableDebugger($logDirectory, $email);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:198:		Tracy\Debugger::enable(!$this->parameters['debugMode'], $logDirectory, $email);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:210:			throw new Nette\NotSupportedException('RobotLoader not found, do you have `nette/robot-loader` package installed?');
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:214:		$loader->setTempDirectory($this->getCacheDirectory() . '/Nette.RobotLoader');
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:215:		$loader->setAutoRefresh($this->parameters['debugMode']);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:231:		$this->files[] = [$file, $section === self::AUTO ? ($this->parameters['debugMode'] ? 'development' : 'production') : $section];
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:242:		$class = $this->loadContainer();
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:243:		$container = new $class($this->dynamicParameters);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:244:		foreach ($this->services as $name => $service) {
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:245:			$container->addService($name, $service);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:247:		$container->initialize();
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:262:			$this->getCacheDirectory() . '/Nette.Configurator',
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:263:			$this->parameters['debugMode']
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:265:		$class = $loader->load(
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:267:			[$this->parameters, array_keys($this->dynamicParameters), $this->files, PHP_VERSION_ID - PHP_RELEASE_VERSION]
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:279:		$compiler->addConfig(['parameters' => $this->parameters]);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:280:		$compiler->setDynamicParameterNames(array_keys($this->dynamicParameters));
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:282:		$loader = $this->createLoader();
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:284:		foreach ($this->files as $info) {
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:287:				$info[0] = $loader->load($info[0], $info[1]);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:289:			$compiler->addConfig($this->fixCompatibility($info[0]));
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:291:		$compiler->addDependencies($loader->getDependencies());
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:293:		$builder = $compiler->getContainerBuilder();
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:294:		$builder->addExcludedClasses($this->autowireExcludedClasses);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:296:		foreach ($this->defaultExtensions as $name => $extension) {
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:299:				$args = DI\Helpers::expand($args, $this->parameters, true);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:300:				$compiler->addExtension($name, (new \ReflectionClass($class))->newInstanceArgs($args));
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:304:		$this->onCompile($this, $compiler);
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:306:		$classes = $compiler->compile();
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:325:		if (empty($this->parameters['tempDir'])) {
vendor/nette/bootstrap/src/Bootstrap/Configurator.php:328:		$dir = $this->parameters['tempDir'] . '/cache';
vendor/ocramius/package-versions/composer.json:2:    "name": "ocramius/package-versions",
vendor/ocramius/package-versions/composer.json:4:    "type": "composer-plugin",
vendor/ocramius/package-versions/composer.json:14:        "composer-plugin-api": "^1.0"
vendor/ocramius/package-versions/composer.json:16:    "require-dev": {
vendor/ocramius/package-versions/composer.json:18:        "humbug/humbug":     "dev-master",
vendor/ocramius/package-versions/composer.json:20:        "ext-zip":           "*"
vendor/ocramius/package-versions/composer.json:23:        "psr-4": {
vendor/ocramius/package-versions/composer.json:27:    "autoload-dev": {
vendor/ocramius/package-versions/composer.json:28:        "psr-4": {
vendor/ocramius/package-versions/composer.json:34:        "branch-alias": {
vendor/ocramius/package-versions/composer.json:35:            "dev-master": "2.0.x-dev"
vendor/ocramius/package-versions/composer.json:39:        "post-update-cmd":  "PackageVersions\\Installer::dumpVersionsClass",
vendor/ocramius/package-versions/composer.json:40:        "post-install-cmd": "PackageVersions\\Installer::dumpVersionsClass"
vendor/ocramius/package-versions/README.md:8:$version = \PackageVersions\Versions::getVersion('ocramius/package-versions');
vendor/ocramius/package-versions/README.md:13:[![Build Status](https://travis-ci.org/Ocramius/PackageVersions.svg?branch=master)](https://travis-ci.org/Ocramius/PackageVersions)
vendor/ocramius/package-versions/README.md:14:[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/Ocramius/PackageVersions/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/Ocramius/PackageVersions/?branch=master)
vendor/ocramius/package-versions/README.md:15:[![Code Coverage](https://scrutinizer-ci.com/g/Ocramius/PackageVersions/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/Ocramius/PackageVersions/?branch=master)
vendor/ocramius/package-versions/README.md:16:[![Downloads](https://img.shields.io/packagist/dt/ocramius/package-versions.svg)](https://packagist.org/packages/ocramius/package-versions)
vendor/ocramius/package-versions/README.md:17:[![Packagist](https://img.shields.io/packagist/v/ocramius/package-versions.svg)](https://packagist.org/packages/ocramius/package-versions)
vendor/ocramius/package-versions/README.md:18:[![Packagist Pre Release](https://img.shields.io/packagist/vpre/ocramius/package-versions.svg)](https://packagist.org/packages/ocramius/package-versions)
vendor/ocramius/package-versions/README.md:23:composer require ocramius/package-versions
vendor/ocramius/package-versions/README.md:29:Therefore you should use `optimize-autoloader: true` in your composer.json:
vendor/ocramius/package-versions/README.md:33:        "optimize-autoloader": true
vendor/ocramius/package-versions/README.md:37:see https://getcomposer.org/doc/06-config.md#optimize-autoloader
vendor/ocramius/package-versions/README.md:39:In case you manually generate your autoloader via the CLI use the `--optimize` flag:
vendor/ocramius/package-versions/README.md:42:composer dump-autoload --optimize
vendor/ocramius/package-versions/README.md:45:### Use-cases
vendor/ocramius/package-versions/CONTRIBUTING.md:1:---
vendor/ocramius/package-versions/CONTRIBUTING.md:3:---
vendor/ocramius/package-versions/CONTRIBUTING.md:7: * Coding standard for the project is [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)
vendor/ocramius/package-versions/CONTRIBUTING.md:8: * The project will follow strict [object calisthenics](http://www.slideshare.net/guilhermeblanco/object-calisthenics-applied-to-php)
vendor/ocramius/package-versions/CONTRIBUTING.md:10: * Any un-confirmed issue needs a failing test case before being accepted
vendor/ocramius/package-versions/CONTRIBUTING.md:25:$ curl -s https://getcomposer.org/installer | php
vendor/ocramius/package-versions/CONTRIBUTING.md:31:The PHPUnit version to be used is the one installed as a dev- dependency via composer:
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:6: * This class is generated by ocramius/package-versions, specifically by
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:14:  'dnoegel/php-xdg-base-dir' => '0.1@265b8593498b997dc2d31e75b89f053b5cc9621a',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:15:  'jakub-onderka/php-console-color' => '0.1@e0b393dacf7703fc36a4efc3df1435485197e6c1',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:16:  'jakub-onderka/php-console-highlighter' => 'v0.3.2@7daa75df45242c8d5b75a22c00a201e7954e4fb5',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:17:  'nikic/php-parser' => 'v3.1.5@bb87e28e7d7b8d9a7fda231d37457c9210faf6ce',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:22:  'symfony/polyfill-mbstring' => 'v1.8.0@3296adf6a6454a050679cde90f95350ad604b171',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:23:  'symfony/var-dumper' => 'v3.4.12@e173954a28a44a32c690815fbe4d0f2eac43accb',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:24:  'jean85/pretty-package-versions' => '1.2@75c7effcf3f77501d0e0caa75111aff4daa0dd48',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:29:  'nette/php-generator' => 'v3.0.4@b381ecacbf5a0b5f99cc0b303d5b0578d409f446',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:30:  'nette/robot-loader' => 'v3.0.3@92d4b40b49d5e2d9e37fc736bbcebe6da55fa44a',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:32:  'ocramius/package-versions' => '1.2.0@ad8a245decad4897cc6b432743913dad0d69753c',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:33:  'phpstan/phpdoc-parser' => '0.2@02f909f134fe06f0cd4790d8627ee24efbe84d6a',
vendor/ocramius/package-versions/src/PackageVersions/Versions.php:36:  '__root__' => 'dev-master@8a0f2858e99e405520db58c0cdc27d5168155da7',
vendor/ocramius/package-versions/src/PackageVersions/FallbackVersions.php:11: * happens when running composer with `--no-scripts` flag)
vendor/ocramius/package-versions/src/PackageVersions/FallbackVersions.php:58:            . 'If you customized your composer vendor directory and ran composer installation with --no-scripts, '
vendor/ocramius/package-versions/src/PackageVersions/FallbackVersions.php:68:        $lockData['packages-dev'] = $lockData['packages-dev'] ?? [];
vendor/ocramius/package-versions/src/PackageVersions/FallbackVersions.php:70:        foreach (array_merge($lockData['packages'], $lockData['packages-dev']) as $package) {
vendor/ocramius/package-versions/src/PackageVersions/FallbackVersions.php:76:        yield 'unknown/root-package@UNKNOWN';
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:25: * This class is generated by ocramius/package-versions, specifically by
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:83:        $composer = $composerEvent->getComposer();
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:84:        $versions = iterator_to_array(self::getVersions($composer->getLocker(), $composer->getPackage()));
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:86:        if (!array_key_exists('ocramius/package-versions', $versions)) {
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:87:            //plugin must be globally installed - we only want to generate versions for projects which specifically
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:88:            //require ocramius/package-versions
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:92:        self::writeVersionClassToFile(self::generateVersionsClass($versions), $composer, $composerEvent->getIO());
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:99:            'fin' . 'al ' . 'cla' . 'ss ' . 'Versions', // note: workaround for regex-based code parsers :-(
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:115:        $installPath = self::locateRootPackageInstallPath($composer->getConfig(), $composer->getPackage())
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:119:            $io->write('<info>ocramius/package-versions:</info> Package not found (probably scheduled for removal); generation of version class skipped.');
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:124:        $io->write('<info>ocramius/package-versions:</info>  Generating version class...');
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:129:        $io->write('<info>ocramius/package-versions:</info> ...done generating version class');
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:144:        if ('ocramius/package-versions' === self::getRootPackageAlias($rootPackage)->getName()) {
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:145:            return dirname($composerConfig->get('vendor-dir'));
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:148:        return $composerConfig->get('vendor-dir') . '/ocramius/package-versions';
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:156:            $package = $package->getAliasOf();
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:170:        $lockData = $locker->getLockData();
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:172:        $lockData['packages-dev'] = $lockData['packages-dev'] ?? [];
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:174:        foreach (array_merge($lockData['packages'], $lockData['packages-dev']) as $package) {
vendor/ocramius/package-versions/src/PackageVersions/Installer.php:180:        yield $rootPackage->getName() => $rootPackage->getPrettyVersion() . '@' . $rootPackage->getSourceReference();
vendor/ocramius/package-versions/CHANGELOG.md:3:## 1.1.3 - 2017-09-06
vendor/ocramius/package-versions/CHANGELOG.md:14:- [40: Mutation testing, PHP 7.1 testing](https://github.com/Ocramius/PackageVersions/pull/40) thanks to @Ocramius
vendor/ocramius/package-versions/CHANGELOG.md:15:- [41: Removing this package on install results in file access error](https://github.com/Ocramius/PackageVersions/issues/41) thanks to @Xerkus
vendor/ocramius/package-versions/CHANGELOG.md:16:- [46: #41 Avoid issues when the package is scheduled for removal](https://github.com/Ocramius/PackageVersions/pull/46) thanks to @Jean85
vendor/ocramius/package-versions/CHANGELOG.md:18:## 1.1.2 - 2016-12-30
vendor/ocramius/package-versions/CHANGELOG.md:25:- [35: remove all temp directories](https://github.com/Ocramius/PackageVersions/pull/35)
vendor/ocramius/package-versions/CHANGELOG.md:26:- [38: Interferes with other projects when installed globally](https://github.com/Ocramius/PackageVersions/issues/38)
vendor/ocramius/package-versions/CHANGELOG.md:27:- [39: Ignore the global plugin when updating local projects](https://github.com/Ocramius/PackageVersions/pull/39)
vendor/ocramius/package-versions/CHANGELOG.md:29:## 1.1.1 - 2016-07-25
vendor/ocramius/package-versions/CHANGELOG.md:31:This release removes the [`"files"`](https://getcomposer.org/doc/04-schema.md#files) directive from
vendor/ocramius/package-versions/CHANGELOG.md:33:as it is no longer needed for `composer install --classmap-authoritative`.
vendor/ocramius/package-versions/CHANGELOG.md:39:- [34: Fatal error during travis build after update to 1.1.0](https://github.com/Ocramius/PackageVersions/issues/34)
vendor/ocramius/package-versions/CHANGELOG.md:41:## 1.1.0 - 2016-07-22
vendor/ocramius/package-versions/CHANGELOG.md:43:This release introduces support for running `composer install --classmap-authoritative`
vendor/ocramius/package-versions/CHANGELOG.md:44:and `composer install --no-scripts`. Please note that performance
vendor/ocramius/package-versions/CHANGELOG.md:53:- [18: Fails when using composer install --no-scripts](https://github.com/Ocramius/PackageVersions/issues/18)
vendor/ocramius/package-versions/CHANGELOG.md:54:- [20: CS (spacing)](https://github.com/Ocramius/PackageVersions/pull/20)
vendor/ocramius/package-versions/CHANGELOG.md:55:- [22: Document the way the require-dev section is treated](https://github.com/Ocramius/PackageVersions/issues/22)
vendor/ocramius/package-versions/CHANGELOG.md:56:- [23: Underline that composer.lock is used as source of information](https://github.com/Ocramius/PackageVersions/pull/23)
vendor/ocramius/package-versions/CHANGELOG.md:57:- [27: Fix incompatibility with --classmap-authoritative](https://github.com/Ocramius/PackageVersions/pull/27)
vendor/ocramius/package-versions/CHANGELOG.md:58:- [29: mention optimize-autoloader composer.json config option in README](https://github.com/Ocramius/PackageVersions/pull/29)
vendor/ocramius/package-versions/CHANGELOG.md:59:- [30: The version class is generated twice during composer update](https://github.com/Ocramius/PackageVersions/issues/30)
vendor/ocramius/package-versions/CHANGELOG.md:60:- [31: Remove double registration of the event listeners](https://github.com/Ocramius/PackageVersions/pull/31)
vendor/ocramius/package-versions/CHANGELOG.md:61:- [32: Update the usage of mock APIs to use the new API](https://github.com/Ocramius/PackageVersions/pull/32)
vendor/ocramius/package-versions/CHANGELOG.md:62:- [33: Fix for #18 -  support running with --no-scripts flag](https://github.com/Ocramius/PackageVersions/pull/33)
vendor/ocramius/package-versions/CHANGELOG.md:64:## 1.0.4 - 2016-04-23
vendor/ocramius/package-versions/CHANGELOG.md:67:which causes `ocramius/package-versions` to sometimes generate a
vendor/ocramius/package-versions/CHANGELOG.md:69:`Versions_composer_tmp0`) when running `composer require <package-name>`.
vendor/ocramius/package-versions/CHANGELOG.md:73:- [16: Workaround for composer/composer#5237 - class parsing](https://github.com/Ocramius/PackageVersions/pull/16)
vendor/ocramius/package-versions/CHANGELOG.md:74:- [17: Weird Class name being generated](https://github.com/Ocramius/PackageVersions/issues/17)
vendor/ocramius/package-versions/CHANGELOG.md:76:## 1.0.3 - 2016-02-26
vendor/ocramius/package-versions/CHANGELOG.md:79:re-generation caused by multiple composer plugins being installed.
vendor/ocramius/package-versions/CHANGELOG.md:80:The issue was solved by removing autoloader re-generation from this
vendor/ocramius/package-versions/CHANGELOG.md:83:It is now recommended that you run `composer dump-autoload --optimize`
vendor/ocramius/package-versions/CHANGELOG.md:85:Please note that `composer (install|update) -o` is not sufficient
vendor/ocramius/package-versions/CHANGELOG.md:90:- [15: Remove autoload re-dump optimization](https://github.com/Ocramius/PackageVersions/pull/15)
vendor/ocramius/package-versions/CHANGELOG.md:92:## 1.0.2 - 2016-02-24
vendor/ocramius/package-versions/CHANGELOG.md:101:- [11: fix composer install --no-dev PHP7](https://github.com/Ocramius/PackageVersions/pull/11)
vendor/ocramius/package-versions/CHANGELOG.md:102:- [12: Packages don't always have a source/reference](https://github.com/Ocramius/PackageVersions/issues/12)
vendor/ocramius/package-versions/CHANGELOG.md:103:- [13: Fix #12 - support dist and missing package version references](https://github.com/Ocramius/PackageVersions/pull/13)
vendor/ocramius/package-versions/CHANGELOG.md:105:## 1.0.1 - 2016-02-01
vendor/ocramius/package-versions/CHANGELOG.md:110:`ocramius/package-versions` caused the installation to be unable
vendor/ocramius/package-versions/CHANGELOG.md:115:- [2: remove unused use statement](https://github.com/Ocramius/PackageVersions/pull/2)
vendor/ocramius/package-versions/CHANGELOG.md:116:- [3: Remove useless files from dist package](https://github.com/Ocramius/PackageVersions/pull/3)
vendor/ocramius/package-versions/CHANGELOG.md:117:- [5: failed to open stream: phar error: write operations disabled by the php.ini setting phar.readonly](https://github.com/Ocramius/PackageVersions/issues/5)
vendor/ocramius/package-versions/CHANGELOG.md:118:- [6: Fix/#5 use composer vendor dir](https://github.com/Ocramius/PackageVersions/pull/6)
vendor/ocramius/package-versions/CHANGELOG.md:119:- [7: Hotfix - #5 generate package versions also when in phar context](https://github.com/Ocramius/PackageVersions/pull/7)
vendor/ocramius/package-versions/CHANGELOG.md:120:- [8: Versions class should be ignored by VCS, as it is an install-time artifact](https://github.com/Ocramius/PackageVersions/pull/8)
vendor/nikic/php-parser/composer.json:2:    "name": "nikic/php-parser",
vendor/nikic/php-parser/composer.json:6:    "license": "BSD-3-Clause",
vendor/nikic/php-parser/composer.json:14:        "ext-tokenizer": "*"
vendor/nikic/php-parser/composer.json:16:    "require-dev": {
vendor/nikic/php-parser/composer.json:20:        "psr-4": {
vendor/nikic/php-parser/composer.json:24:    "bin": ["bin/php-parse"],
vendor/nikic/php-parser/composer.json:26:        "branch-alias": {
vendor/nikic/php-parser/composer.json:27:            "dev-master": "3.0-dev"
vendor/nikic/php-parser/UPGRADE-2.0.md:1:Upgrading from PHP-Parser 1.x to 2.0
vendor/nikic/php-parser/UPGRADE-2.0.md:6:PHP-Parser now requires PHP 5.4 or newer to run. It is however still possible to *parse* PHP 5.2 and
vendor/nikic/php-parser/UPGRADE-2.0.md:25:$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/UPGRADE-2.0.md:45:$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7, $lexer);
vendor/nikic/php-parser/UPGRADE-2.0.md:56:All legacy aliases for classes have been removed. This includes the old non-namespaced `PHPParser_`
vendor/nikic/php-parser/UPGRADE-2.0.md:62:deprecated. Instead `Name::concat()` and `Name->slice()` should be used.
vendor/nikic/php-parser/README.md:4:[![Build Status](https://travis-ci.org/nikic/PHP-Parser.svg?branch=master)](https://travis-ci.org/nikic/PHP-Parser) [![Coverage Status](https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master)](https://coveralls.io/github/nikic/PHP-Parser?branch=master)
vendor/nikic/php-parser/README.md:16:-------------
vendor/nikic/php-parser/README.md:78:------------
vendor/nikic/php-parser/README.md:82:    php composer.phar require nikic/php-parser
vendor/nikic/php-parser/README.md:85:-------------
vendor/nikic/php-parser/README.md:97: [doc_1_x]: https://github.com/nikic/PHP-Parser/tree/1.x/doc
vendor/nikic/php-parser/README.md:98: [doc_2_x]: https://github.com/nikic/PHP-Parser/tree/2.x/doc
vendor/nikic/php-parser/README.md:99: [doc_master]: https://github.com/nikic/PHP-Parser/tree/master/doc
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:27:        $output5 = $this->getParseOutput($parser5, $code, $dumpPositions);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:28:        $output7 = $this->getParseOutput($parser7, $code, $dumpPositions);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:31:            $this->assertSame($expected, $output5, $name);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:32:            $this->assertNotSame($expected, $output7, $name);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:34:            $this->assertNotSame($expected, $output5, $name);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:35:            $this->assertSame($expected, $output7, $name);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:37:            $this->assertSame($expected, $output5, $name);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:38:            $this->assertSame($expected, $output7, $name);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:44:        $stmts = $parser->parse($code, $errors);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:47:        foreach ($errors->getErrors() as $error) {
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:48:            $output .= $this->formatErrorMessage($error, $code) . "\n";
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:53:            $output .= $dumper->dump($stmts, $code);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:60:        return $this->getTests(__DIR__ . '/../code/parser', 'test');
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:64:        if ($e->hasColumnInfo()) {
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:65:            return $e->getMessageWithColumnInfo($code);
vendor/nikic/php-parser/test/PhpParser/CodeParsingTest.php:67:            return $e->getMessage();
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:17:        $this->assertSame($this->canonicalize($dump), $this->canonicalize($dumper->dump($node)));
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:64:        $parser = (new ParserFactory)->create(
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:73:    0: Expr_Assign[2:1 - 2:6](
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:74:        var: Expr_Variable[2:1 - 2:2](
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:77:        expr: Scalar_LNumber[2:6 - 2:6](
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:81:    1: Stmt_Echo[3:1 - 3:8](
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:83:            0: Expr_Variable[3:6 - 3:7](
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:91:        $stmts = $parser->parse($code);
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:92:        $dump = $dumper->dump($stmts, $code);
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:94:        $this->assertSame($this->canonicalize($expected), $this->canonicalize($dump));
vendor/nikic/php-parser/test/PhpParser/NodeDumperTest.php:103:        $dumper->dump(new \stdClass);
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:14:        $this->assertInstanceOf($className, $factory->$methodName('test'));
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:32:        $this->setExpectedException('LogicException', 'Method "foo" does not exist');
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:34:        $factory->foo();
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:39:        $node = $factory->namespace('Name\Space')
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:40:            ->addStmt($factory->use('Foo\Bar\SomeOtherClass'))
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:41:            ->addStmt($factory->use('Foo\Bar')->as('A'))
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:42:            ->addStmt($factory
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:43:                ->class('SomeClass')
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:44:                ->extend('SomeOtherClass')
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:45:                ->implement('A\Few', '\Interfaces')
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:46:                ->makeAbstract()
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:48:                ->addStmt($factory->method('firstMethod'))
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:50:                ->addStmt($factory->method('someMethod')
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:51:                    ->makePublic()
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:52:                    ->makeAbstract()
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:53:                    ->addParam($factory->param('someParam')->setTypeHint('SomeClass'))
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:54:                    ->setDocComment('/**
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:60:                ->addStmt($factory->method('anotherMethod')
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:61:                    ->makeProtected()
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:62:                    ->addParam($factory->param('someParam')->setDefault('test'))
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:63:                    ->addStmt(new Expr\Print_(new Expr\Variable('someParam'))))
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:65:                ->addStmt($factory->property('someProperty')->makeProtected())
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:66:                ->addStmt($factory->property('anotherProperty')
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:67:                    ->makePrivate()
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:68:                    ->setDefault(array(1, 2, 3))))
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:69:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:101:        $generated = $prettyPrinter->prettyPrintFile($stmts);
vendor/nikic/php-parser/test/PhpParser/BuilderFactoryTest.php:103:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:14:        $this->assertSame('Some error', $error->getRawMessage());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:15:        $this->assertSame($attributes, $error->getAttributes());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:16:        $this->assertSame(10, $error->getStartLine());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:17:        $this->assertSame(11, $error->getEndLine());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:18:        $this->assertSame('Some error on line 10', $error->getMessage());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:27:        $error->setRawMessage('Some other error');
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:28:        $this->assertSame('Some other error', $error->getRawMessage());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:30:        $error->setStartLine(15);
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:31:        $this->assertSame(15, $error->getStartLine());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:32:        $this->assertSame('Some other error on line 15', $error->getMessage());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:38:        $this->assertSame(-1, $error->getStartLine());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:39:        $this->assertSame(-1, $error->getEndLine());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:40:        $this->assertSame('Some error on unknown line', $error->getMessage());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:50:        $this->assertSame(true, $error->hasColumnInfo());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:51:        $this->assertSame($startColumn, $error->getStartColumn($code));
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:52:        $this->assertSame($endColumn, $error->getEndColumn($code));
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:80:        $this->assertSame(false, $error->hasColumnInfo());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:82:            $error->getStartColumn('');
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:83:            $this->fail('Expected RuntimeException');
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:85:            $this->assertSame('Error does not have column information', $e->getMessage());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:88:            $error->getEndColumn('');
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:89:            $this->fail('Expected RuntimeException');
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:91:            $this->assertSame('Error does not have column information', $e->getMessage());
vendor/nikic/php-parser/test/PhpParser/ErrorTest.php:104:        $error->getStartColumn('code');
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:25:        list($version, $options) = $this->parseModeLine($modeLine);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:29:            $output5 = canonicalize($prettyPrinter->$method($parser5->parse($code)));
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:38:            $output7 = canonicalize($prettyPrinter->$method($parser7->parse($code)));
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:47:            $this->assertSame($expected, $output5, $name);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:48:            $this->assertNotSame($expected, $output7, $name);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:50:            $this->assertSame($expected, $output7, $name);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:51:            $this->assertNotSame($expected, $output5, $name);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:53:            $this->assertSame($expected, $output5, $name);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:54:            $this->assertSame($expected, $output7, $name);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:63:        $this->doTestPrettyPrintMethod('prettyPrint', $name, $code, $expected, $mode);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:71:        $this->doTestPrettyPrintMethod('prettyPrintFile', $name, $code, $expected, $mode);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:75:        return $this->getTests(__DIR__ . '/../code/prettyPrinter', 'test');
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:79:        return $this->getTests(__DIR__ . '/../code/prettyPrinter', 'file-test');
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:88:        $this->assertEquals('($a + $b) * $c', $prettyPrinter->prettyPrintExpr($expr));
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:93:        $this->assertEquals("function () {\n    return 'a\nb';\n}", $prettyPrinter->prettyPrintExpr($expr));
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:101:        $this->assertSame($expected, $prettyPrinter->prettyPrintFile($stmts));
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:117:        $this->assertSame($expected, $prettyPrinter->prettyPrintExpr($expr));
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:125:        $result = $prttyPrinter->prettyPrintExpr($node);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:126:        $this->assertSame($expected, $result);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:171:        $result = $prttyPrinter->prettyPrintExpr($node);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:172:        $this->assertSame($expected, $result);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:177:            [new LNumber(-1), '-1'],
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:178:            [new LNumber(-PHP_INT_MAX - 1), '(-' . PHP_INT_MAX . '-1)'],
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:179:            [new LNumber(-1, ['kind' => LNumber::KIND_BIN]), '-0b1'],
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:180:            [new LNumber(-1, ['kind' => LNumber::KIND_OCT]), '-01'],
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:181:            [new LNumber(-1, ['kind' => LNumber::KIND_HEX]), '-0x1'],
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:183:            [new DNumber(-\INF), '-\INF'],
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:184:            [new DNumber(-\NAN), '\NAN'],
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:190:     * @expectedExceptionMessage Cannot pretty-print AST with Error nodes
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:195:        $prettyPrinter->prettyPrint($stmts);
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:200:     * @expectedExceptionMessage Cannot pretty-print AST with Error nodes
vendor/nikic/php-parser/test/PhpParser/PrettyPrinterTest.php:205:        $prettyPrinter->prettyPrint($stmts);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:20:        $parser = $this->getParser(new Lexer());
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:21:        $parser->parse('<?php foo');
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:29:        $parser = $this->getParser(new Lexer());
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:30:        $parser->parse('<?php use foo as self;');
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:38:        $parser = $this->getParser(new Lexer());
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:39:        $parser->parse('<?php /*');
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:61:        $parser = $this->getParser($lexer);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:62:        $stmts = $parser->parse($code);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:66:        $this->assertInstanceOf('PhpParser\Node\Stmt\Function_', $fn);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:67:        $this->assertEquals(array(
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:75:        ), $fn->getAttributes());
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:77:        $param = $fn->params[0];
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:78:        $this->assertInstanceOf('PhpParser\Node\Param', $param);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:79:        $this->assertEquals(array(
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:84:        ), $param->getAttributes());
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:87:        $echo = $fn->stmts[0];
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:88:        $this->assertInstanceOf('PhpParser\Node\Stmt\Echo_', $echo);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:89:        $this->assertEquals(array(
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:98:        ), $echo->getAttributes());
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:101:        $var = $echo->exprs[0];
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:102:        $this->assertInstanceOf('PhpParser\Node\Expr\Variable', $var);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:103:        $this->assertEquals(array(
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:108:        ), $var->getAttributes());
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:117:        $parser = $this->getParser($lexer);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:118:        $parser->parse('dummy');
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:125:        $parser = $this->getParser(new Lexer);
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:126:        $stmts = $parser->parse("<?php $code;");
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:127:        $attributes = $stmts[0]->getAttributes();
vendor/nikic/php-parser/test/PhpParser/ParserTest.php:129:            $this->assertSame($value, $attributes[$name]);
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:12:<?xml version="1.0" encoding="UTF-8"?>
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:33:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:41:            $unserializer->unserialize($xml)
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:47:<?xml version="1.0" encoding="UTF-8"?>
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:55:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:57:            $unserializer->unserialize($xml)
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:63:<?xml version="1.0" encoding="UTF-8"?>
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:89:        $this->assertEquals($result, $unserializer->unserialize($xml));
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:98:<?xml version="1.0" encoding="UTF-8"?>
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:103:        $unserializer->unserialize($xml);
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:110:        $this->setExpectedException('DomainException', $errorMsg);
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:113:<?xml version="1.0" encoding="UTF-8"?>
vendor/nikic/php-parser/test/PhpParser/Unserializer/XMLTest.php:123:        $unserializer->unserialize($xml);
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:23:        $trait = $this->createTraitBuilder('TestTrait')
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:24:            ->setDocComment('/** Nice trait */')
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:25:            ->addStmt($method1)
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:26:            ->addStmts([$method2, $method3])
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:27:            ->addStmt($prop)
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:28:            ->addStmt($use)
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:29:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:30:        $this->assertEquals(new Stmt\Trait_('TestTrait', [
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:44:        $this->createTraitBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/TraitTest.php:45:            ->addStmt(new Stmt\Echo_(array()))
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:18:        $node = $this->createFunctionBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:19:            ->makeReturnByRef()
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:20:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:23:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:36:        $node = $this->createFunctionBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:37:            ->addParam($param1)
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:38:            ->addParams(array($param2, $param3))
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:39:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:42:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:55:        $node = $this->createFunctionBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:56:            ->addStmt($stmt1)
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:57:            ->addStmts(array($stmt2, $stmt3))
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:58:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:61:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:70:        $node = $this->createFunctionBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:71:            ->setDocComment('/** Test */')
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:72:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:74:        $this->assertEquals(new Stmt\Function_('test', array(), array(
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:80:        $node = $this->createFunctionBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:81:            ->setReturnType('void')
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:82:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:84:        $this->assertEquals(new Stmt\Function_('test', array(
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:94:        $this->createFunctionBuilder('test')->setReturnType('?void');
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:102:        $this->createFunctionBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/FunctionTest.php:103:            ->addParam(new Node\Name('foo'))
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:14:        $node = $this->createUseBuilder('Foo\Bar')->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:15:        $this->assertEquals(new Stmt\Use_(array(
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:19:        $node = $this->createUseBuilder(new Name('Foo\Bar'))->as('XYZ')->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:20:        $this->assertEquals(new Stmt\Use_(array(
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:24:        $node = $this->createUseBuilder('foo\bar', Stmt\Use_::TYPE_FUNCTION)->as('foo')->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:25:        $this->assertEquals(new Stmt\Use_(array(
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:31:        $this->setExpectedException('LogicException', 'Method "foo" does not exist');
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:32:        $builder = $this->createUseBuilder('Test');
vendor/nikic/php-parser/test/PhpParser/Builder/UseTest.php:33:        $builder->foo();
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:17:        $node = $this->createClassBuilder('SomeLogger')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:18:            ->extend('BaseLogger')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:19:            ->implement('Namespaced\Logger', new Name('SomeInterface'))
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:20:            ->implement('\Fully\Qualified', 'namespace\NamespaceRelative')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:21:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:24:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:39:        $node = $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:40:            ->makeAbstract()
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:41:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:44:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:53:        $node = $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:54:            ->makeFinal()
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:55:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:58:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:77:        $node = $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:78:            ->addStmt($method)
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:79:            ->addStmt($property)
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:80:            ->addStmts(array($const, $use))
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:81:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:84:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:98:        $class = $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:99:            ->setDocComment($docComment)
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:100:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:102:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:111:        $class = $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:112:            ->setDocComment(new Comment\Doc($docComment))
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:113:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:115:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:130:        $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:131:            ->addStmt(new Stmt\Echo_(array()))
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:140:        $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:141:            ->setDocComment(new Comment('Test'));
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:149:        $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:150:            ->extend('');
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:158:        $this->createClassBuilder('Test')
vendor/nikic/php-parser/test/PhpParser/Builder/ClassTest.php:159:            ->extend(array('Foo'));
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:26:        $node = $this->createNamespaceBuilder('Name\Space')
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:27:            ->addStmt($stmt1)
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:28:            ->addStmts(array($stmt2, $stmt3))
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:29:            ->setDocComment($docComment)
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:30:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:32:        $this->assertEquals($expected, $node);
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:34:        $node = $this->createNamespaceBuilder(new Node\Name(array('Name', 'Space')))
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:35:            ->setDocComment($docComment)
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:36:            ->addStmts(array($stmt1, $stmt2))
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:37:            ->addStmt($stmt3)
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:38:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:40:        $this->assertEquals($expected, $node);
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:42:        $node = $this->createNamespaceBuilder(null)->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:43:        $this->assertNull($node->name);
vendor/nikic/php-parser/test/PhpParser/Builder/NamespaceTest.php:44:        $this->assertEmpty($node->stmts);
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:18:        $node = $this->createPropertyBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:19:            ->makePrivate()
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:20:            ->makeStatic()
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:21:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:24:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:35:        $node = $this->createPropertyBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:36:            ->makeProtected()
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:37:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:40:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:50:        $node = $this->createPropertyBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:51:            ->makePublic()
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:52:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:55:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:67:        $node = $this->createPropertyBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:68:            ->setDocComment('/** Test */')
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:69:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:71:        $this->assertEquals(new Stmt\Property(
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:86:        $node = $this->createPropertyBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:87:            ->setDefault($value)
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:88:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/PropertyTest.php:91:        $this->assertEquals($expectedValueNode, $node->props[0]->default);
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:18:        $node = $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:19:            ->makePublic()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:20:            ->makeAbstract()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:21:            ->makeStatic()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:22:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:25:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:35:        $node = $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:36:            ->makeProtected()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:37:            ->makeFinal()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:38:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:41:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:49:        $node = $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:50:            ->makePrivate()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:51:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:54:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:63:        $node = $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:64:            ->makeReturnByRef()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:65:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:68:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:81:        $node = $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:82:            ->addParam($param1)
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:83:            ->addParams(array($param2, $param3))
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:84:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:87:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:100:        $node = $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:101:            ->addStmt($stmt1)
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:102:            ->addStmts(array($stmt2, $stmt3))
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:103:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:106:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:114:        $node = $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:115:            ->setDocComment('/** Test */')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:116:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:118:        $this->assertEquals(new Stmt\ClassMethod('test', array(), array(
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:124:        $node = $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:125:            ->setReturnType('bool')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:126:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:127:        $this->assertEquals(new Stmt\ClassMethod('test', array(
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:137:        $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:138:            ->makeAbstract()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:139:            ->addStmt(new Print_(new String_('test')))
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:148:        $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:149:            ->addStmt(new Print_(new String_('test')))
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:150:            ->makeAbstract()
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:159:        $this->createMethodBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/MethodTest.php:160:            ->addParam(new Node\Name('foo'))
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:19:        $node = $this->createParamBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:20:            ->setDefault($value)
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:21:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:24:        $this->assertEquals($expectedValueNode, $node->default);
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:85:        $node = $this->createParamBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:86:            ->setTypeHint($typeHint)
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:87:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:89:        $type = $node->type;
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:93:            $this->assertInstanceOf(get_class($expectedType), $type);
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:94:            $expectedType = $expectedType->type;
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:95:            $type = $type->type;
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:99:            $this->assertInstanceOf(get_class($expectedType), $type);
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:100:            $this->assertEquals($expectedType, $type);
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:102:            $this->assertSame($expectedType, $type);
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:137:        $this->createParamBuilder('test')->setTypeHint('void');
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:145:        $this->createParamBuilder('test')->setTypeHint(new \stdClass);
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:149:        $node = $this->createParamBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:150:            ->makeByRef()
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:151:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:154:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:161:        $node = $this->createParamBuilder('test')
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:162:            ->makeVariadic()
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:163:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/ParamTest.php:166:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:16:        $this->builder = new Interface_('Contract');
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:21:        return $pp->prettyPrint(array($node));
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:25:        $contract = $this->builder->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:26:        $this->assertInstanceOf('PhpParser\Node\Stmt\Interface_', $contract);
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:27:        $this->assertSame('Contract', $contract->name);
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:31:        $contract = $this->builder->extend('Space\Root1', 'Root2')->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:32:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:44:        $contract = $this->builder->addStmt($method)->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:45:        $this->assertSame(array($method), $contract->stmts);
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:52:        $contract = $this->builder->addStmt($const)->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:53:        $this->assertSame(299792458.0, $contract->stmts[0]->consts[0]->value->value);
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:61:        $contract = $this->builder
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:62:            ->addStmt($method)
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:63:            ->addStmt($const)
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:64:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:67:        $this->assertInstanceOf('PhpParser\Node\Stmt\ClassConst', $contract->stmts[0]);
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:68:        $this->assertInstanceOf('PhpParser\Node\Stmt\ClassMethod', $contract->stmts[1]);
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:72:        $node = $this->builder
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:73:            ->setDocComment('/** Test */')
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:74:            ->getNode();
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:76:        $this->assertEquals(new Stmt\Interface_('Contract', array(), array(
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:86:        $this->builder->addStmt(new Stmt\PropertyProperty('invalid'));
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:94:        $contract = $this->builder
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:95:            ->addStmt($method)
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:96:            ->addStmt($const)
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:97:            ->getNode()
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:100:        eval($this->dump($contract));
vendor/nikic/php-parser/test/PhpParser/Builder/InterfaceTest.php:102:        $this->assertTrue(interface_exists('Contract', false));
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:32:        $this->assertEquals($expected, $parser->parse($code));
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:40:                $this->getPrefer5(),
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:49:                '<?php global $$a->b;',
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:50:                $this->getPrefer7(),
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:60:                $this->getPrefer5(),
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:70:                $this->getPrefer7(),
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:81:        $this->setExpectedException('PhpParser\Error', 'FAIL A');
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:83:        $parserA = $this->getMockBuilder('PhpParser\Parser')->getMock();
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:84:        $parserA->expects($this->at(0))
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:85:            ->method('parse')->will($this->throwException(new Error('FAIL A')));
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:87:        $parserB = $this->getMockBuilder('PhpParser\Parser')->getMock();
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:88:        $parserB->expects($this->at(0))
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:89:            ->method('parse')->will($this->throwException(new Error('FAIL B')));
vendor/nikic/php-parser/test/PhpParser/Parser/MultipleTest.php:92:        $parser->parse('dummy');
vendor/nikic/php-parser/test/PhpParser/ParserFactoryTest.php:10:        $this->assertInstanceOf($expected, (new ParserFactory)->create($kind, $lexer));
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/ThrowingTest.php:14:        $errorHandler->handleError(new Error('Test'));
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:10:        $this->assertFalse($errorHandler->hasErrors());
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:11:        $this->assertEmpty($errorHandler->getErrors());
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:13:        $errorHandler->handleError($e1 = new Error('Test 1'));
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:14:        $errorHandler->handleError($e2 = new Error('Test 2'));
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:15:        $this->assertTrue($errorHandler->hasErrors());
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:16:        $this->assertSame([$e1, $e2], $errorHandler->getErrors());
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:18:        $errorHandler->clearErrors();
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:19:        $this->assertFalse($errorHandler->hasErrors());
vendor/nikic/php-parser/test/PhpParser/ErrorHandler/CollectingTest.php:20:        $this->assertEmpty($errorHandler->getErrors());
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:16:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:18:        $visitor->expects($this->at(0))->method('beforeTraverse')->with($stmts);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:19:        $visitor->expects($this->at(1))->method('enterNode')->with($echoNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:20:        $visitor->expects($this->at(2))->method('enterNode')->with($str1Node);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:21:        $visitor->expects($this->at(3))->method('leaveNode')->with($str1Node);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:22:        $visitor->expects($this->at(4))->method('enterNode')->with($str2Node);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:23:        $visitor->expects($this->at(5))->method('leaveNode')->with($str2Node);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:24:        $visitor->expects($this->at(6))->method('leaveNode')->with($echoNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:25:        $visitor->expects($this->at(7))->method('afterTraverse')->with($stmts);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:28:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:30:        $this->assertEquals($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:39:        $visitor1 = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:40:        $visitor2 = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:43:        $visitor1->expects($this->at(0))->method('beforeTraverse')->with(array())
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:44:                 ->will($this->returnValue(array($str1Node)));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:45:        $visitor2->expects($this->at(0))->method('beforeTraverse')->with(array($str1Node));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:48:        $visitor1->expects($this->at(1))->method('enterNode')->with($str1Node)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:49:                 ->will($this->returnValue($printNode));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:50:        $visitor2->expects($this->at(1))->method('enterNode')->with($printNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:53:        $visitor1->expects($this->at(2))->method('enterNode')->with($str1Node)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:54:                 ->will($this->returnValue($str2Node));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:55:        $visitor2->expects($this->at(2))->method('enterNode')->with($str2Node);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:58:        $visitor1->expects($this->at(3))->method('leaveNode')->with($str2Node)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:59:                 ->will($this->returnValue($str1Node));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:60:        $visitor2->expects($this->at(3))->method('leaveNode')->with($str1Node);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:63:        $visitor1->expects($this->at(4))->method('leaveNode')->with($printNode)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:64:                 ->will($this->returnValue($str1Node));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:65:        $visitor2->expects($this->at(4))->method('leaveNode')->with($str1Node);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:68:        $visitor1->expects($this->at(5))->method('afterTraverse')->with(array($str1Node))
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:69:                 ->will($this->returnValue(array()));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:70:        $visitor2->expects($this->at(5))->method('afterTraverse')->with(array());
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:73:        $traverser->addVisitor($visitor1);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:74:        $traverser->addVisitor($visitor2);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:77:        $this->assertEquals(array(), $traverser->traverse(array()));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:84:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:87:        $visitor->expects($this->at(2))->method('leaveNode')->with($str1Node)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:88:                ->will($this->returnValue(false));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:91:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:93:        $this->assertEquals(array($str2Node), $traverser->traverse(array($str1Node, $str2Node)));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:103:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:106:        $visitor->expects($this->at(4))->method('leaveNode')->with($strMiddle)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:107:                ->will($this->returnValue(array($strR1, $strR2)));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:110:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:112:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:114:            $traverser->traverse(array($strStart, $strMiddle, $strEnd))
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:122:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:123:        $visitor->expects($this->at(1))->method('enterNode')->with($strNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:126:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:128:        $this->assertEquals($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:139:        $visitor1 = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:140:        $visitor2 = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:142:        $visitor1->expects($this->at(1))->method('enterNode')->with($printNode)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:143:            ->will($this->returnValue(NodeTraverser::DONT_TRAVERSE_CHILDREN));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:144:        $visitor2->expects($this->at(1))->method('enterNode')->with($printNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:146:        $visitor1->expects($this->at(2))->method('leaveNode')->with($printNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:147:        $visitor2->expects($this->at(2))->method('leaveNode')->with($printNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:149:        $visitor1->expects($this->at(3))->method('enterNode')->with($negNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:150:        $visitor2->expects($this->at(3))->method('enterNode')->with($negNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:152:        $visitor1->expects($this->at(4))->method('enterNode')->with($mulNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:153:        $visitor2->expects($this->at(4))->method('enterNode')->with($mulNode)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:154:            ->will($this->returnValue(NodeTraverser::DONT_TRAVERSE_CHILDREN));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:156:        $visitor1->expects($this->at(5))->method('leaveNode')->with($mulNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:157:        $visitor2->expects($this->at(5))->method('leaveNode')->with($mulNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:159:        $visitor1->expects($this->at(6))->method('leaveNode')->with($negNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:160:        $visitor2->expects($this->at(6))->method('leaveNode')->with($negNode);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:163:        $traverser->addVisitor($visitor1);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:164:        $traverser->addVisitor($visitor2);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:166:        $this->assertEquals($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:178:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:179:        $visitor->expects($this->at(1))->method('enterNode')->with($mulNode)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:180:            ->will($this->returnValue(NodeTraverser::STOP_TRAVERSAL));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:181:        $visitor->expects($this->at(2))->method('afterTraverse');
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:183:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:184:        $this->assertEquals($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:187:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:188:        $visitor->expects($this->at(2))->method('enterNode')->with($varNode1)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:189:            ->will($this->returnValue(NodeTraverser::STOP_TRAVERSAL));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:190:        $visitor->expects($this->at(3))->method('afterTraverse');
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:192:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:193:        $this->assertEquals($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:196:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:197:        $visitor->expects($this->at(3))->method('leaveNode')->with($varNode1)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:198:            ->will($this->returnValue(NodeTraverser::STOP_TRAVERSAL));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:199:        $visitor->expects($this->at(4))->method('afterTraverse');
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:201:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:202:        $this->assertEquals($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:205:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:206:        $visitor->expects($this->at(6))->method('leaveNode')->with($mulNode)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:207:            ->will($this->returnValue(NodeTraverser::STOP_TRAVERSAL));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:208:        $visitor->expects($this->at(7))->method('afterTraverse');
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:210:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:211:        $this->assertEquals($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:214:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:215:        $visitor->expects($this->at(6))->method('leaveNode')->with($mulNode)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:216:            ->will($this->returnValue(NodeTraverser::REMOVE_NODE));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:217:        $visitor->expects($this->at(7))->method('enterNode')->with($printNode)
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:218:            ->will($this->returnValue(NodeTraverser::STOP_TRAVERSAL));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:219:        $visitor->expects($this->at(8))->method('afterTraverse');
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:221:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:222:        $this->assertEquals([$printNode], $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:227:        $visitor1 = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:228:        $visitor2 = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:229:        $visitor3 = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:232:        $traverser->addVisitor($visitor1);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:233:        $traverser->addVisitor($visitor2);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:234:        $traverser->addVisitor($visitor3);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:237:        $this->assertAttributeSame($preExpected, 'visitors', $traverser, 'The appropriate visitors have not been added');
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:239:        $traverser->removeVisitor($visitor2);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:242:        $this->assertAttributeSame($postExpected, 'visitors', $traverser, 'The appropriate visitors are not present after removal');
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:250:        $this->assertSame($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:260:        $visitor = $this->getMockBuilder('PhpParser\NodeVisitor')->getMock();
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:261:        $visitor->method('leaveNode')->willReturn(array(new Node\Scalar\DNumber(42.0)));
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:264:        $traverser->addVisitor($visitor);
vendor/nikic/php-parser/test/PhpParser/NodeTraverserTest.php:265:        $traverser->traverse($stmts);
vendor/nikic/php-parser/test/PhpParser/AutoloaderTest.php:9:        $this->assertTrue(class_exists('PhpParser\NodeVisitorAbstract'));
vendor/nikic/php-parser/test/PhpParser/AutoloaderTest.php:10:        $this->assertFalse(class_exists('PHPParser_NodeVisitor_NameResolver'));
vendor/nikic/php-parser/test/PhpParser/AutoloaderTest.php:12:        $this->assertFalse(class_exists('PhpParser\FooBar'));
vendor/nikic/php-parser/test/PhpParser/AutoloaderTest.php:13:        $this->assertFalse(class_exists('PHPParser_FooBar'));
vendor/nikic/php-parser/test/PhpParser/CodeTestAbstract.php:15:            $fileName = $file->getPathname();
vendor/nikic/php-parser/test/PhpParser/CodeTestAbstract.php:29:            $parts = preg_split("/\n-----(?:\n|$)/", $fileContents);
vendor/nikic/php-parser/test/PhpParser/CodeTestAbstract.php:39:                list($expected, $mode) = $this->extractMode($chunk[1]);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:19:            $this->markTestSkipped('HHVM does not throw warnings from token_get_all()');
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:23:        $lexer = $this->getLexer(['usedAttributes' => [
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:26:        $lexer->startLexing($code, $errorHandler);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:27:        $errors = $errorHandler->getErrors();
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:29:        $this->assertSame(count($messages), count($errors));
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:31:            $this->assertSame($messages[$i], $errors[$i]->getMessageWithColumnInfo($code));
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:54:        $lexer = $this->getLexer($options);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:55:        $lexer->startLexing($code);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:56:        while ($id = $lexer->getNextToken($value, $startAttributes, $endAttributes)) {
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:59:            $this->assertSame($token[0], $id);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:60:            $this->assertSame($token[1], $value);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:61:            $this->assertEquals($token[2], $startAttributes);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:62:            $this->assertEquals($token[3], $endAttributes);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:218:        $lexer = $this->getLexer();
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:219:        $lexer->startLexing($code);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:221:        while (Tokens::T_HALT_COMPILER !== $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:223:        $this->assertSame($remaining, $lexer->handleHaltCompiler());
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:224:        $this->assertSame(0, $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:242:        $lexer = $this->getLexer();
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:243:        $lexer->startLexing('<?php ... __halt_compiler invalid ();');
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:245:        while (Tokens::T_HALT_COMPILER !== $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:246:        $lexer->handleHaltCompiler();
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:261:        $lexer = $this->getLexer();
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:262:        $lexer->startLexing($code);
vendor/nikic/php-parser/test/PhpParser/LexerTest.php:263:        $this->assertSame($expectedTokens, $lexer->getTokens());
vendor/nikic/php-parser/test/PhpParser/Serializer/XMLTest.php:22:<?xml version="1.0" encoding="UTF-8"?>
vendor/nikic/php-parser/test/PhpParser/Serializer/XMLTest.php:160:        $stmts = $parser->parse($code);
vendor/nikic/php-parser/test/PhpParser/Serializer/XMLTest.php:161:        $this->assertXmlStringEqualsXmlString($xml, $serializer->serialize($stmts));
vendor/nikic/php-parser/test/PhpParser/Serializer/XMLTest.php:170:        $serializer->serialize(array(new \stdClass));
vendor/nikic/php-parser/test/PhpParser/CommentTest.php:10:        $this->assertSame('/* Some comment */', $comment->getText());
vendor/nikic/php-parser/test/PhpParser/CommentTest.php:11:        $this->assertSame('/* Some comment */', (string) $comment);
vendor/nikic/php-parser/test/PhpParser/CommentTest.php:12:        $this->assertSame(1, $comment->getLine());
vendor/nikic/php-parser/test/PhpParser/CommentTest.php:13:        $this->assertSame(10, $comment->getFilePos());
vendor/nikic/php-parser/test/PhpParser/CommentTest.php:21:        $this->assertSame($reformattedText, $comment->getReformattedText());
vendor/nikic/php-parser/test/PhpParser/CommentTest.php:64:            // invalid comment -> no reformatting
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:171:        $traverser->addVisitor(new NameResolver);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:173:        $stmts = $parser->parse($code);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:174:        $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:176:        $this->assertSame(
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:177:            $this->canonicalize($expectedCode),
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:178:            $prettyPrinter->prettyPrint($stmts)
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:270:        $traverser->addVisitor(new NameResolver);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:272:        $stmts = $parser->parse($code);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:273:        $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:275:        $this->assertSame(
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:276:            $this->canonicalize($expectedCode),
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:277:            $prettyPrinter->prettyPrint($stmts)
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:285:        $traverser->addVisitor(new NameResolver);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:287:        $this->assertEquals($stmts, $traverser->traverse($stmts));
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:303:        $traverser->addVisitor(new NameResolver);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:305:        $stmts = $traverser->traverse([new Stmt\Namespace_(new Name('NS'), $nsStmts)]);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:306:        $this->assertSame('NS\\A', (string) $stmts[0]->stmts[0]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:307:        $this->assertSame('NS\\B', (string) $stmts[0]->stmts[1]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:308:        $this->assertSame('NS\\C', (string) $stmts[0]->stmts[2]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:309:        $this->assertSame('NS\\D', (string) $stmts[0]->stmts[3]->consts[0]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:310:        $this->assertSame('NS\\E', (string) $stmts[0]->stmts[4]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:311:        $this->assertObjectNotHasAttribute('namespacedName', $stmts[0]->stmts[5]->class);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:313:        $stmts = $traverser->traverse([new Stmt\Namespace_(null, $nsStmts)]);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:314:        $this->assertSame('A',     (string) $stmts[0]->stmts[0]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:315:        $this->assertSame('B',     (string) $stmts[0]->stmts[1]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:316:        $this->assertSame('C',     (string) $stmts[0]->stmts[2]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:317:        $this->assertSame('D',     (string) $stmts[0]->stmts[3]->consts[0]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:318:        $this->assertSame('E',     (string) $stmts[0]->stmts[4]->namespacedName);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:319:        $this->assertObjectNotHasAttribute('namespacedName', $stmts[0]->stmts[5]->class);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:335:        $traverser->addVisitor(new NameResolver);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:336:        $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:338:        $this->assertSame('NS\\foo', (string) $stmts[0]->stmts[0]->name->getAttribute('namespacedName'));
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:339:        $this->assertSame('NS\\FOO', (string) $stmts[0]->stmts[1]->name->getAttribute('namespacedName'));
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:341:        $this->assertFalse($stmts[1]->stmts[0]->name->hasAttribute('namespacedName'));
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:342:        $this->assertFalse($stmts[1]->stmts[1]->name->hasAttribute('namespacedName'));
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:349:        $this->setExpectedException('PhpParser\Error', $errorMsg);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:352:        $traverser->addVisitor(new NameResolver);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:353:        $traverser->traverse(array($stmt));
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:408:        $stmts = $parser->parse($source);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:411:        $traverser->addVisitor(new NameResolver);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:413:        $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:416:        $this->assertSame(array('Bar', 'Baz'), $stmt->stmts[1]->expr->class->parts);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:436:        $stmts = $parser->parse($source);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:439:        $traverser->addVisitor(new NameResolver);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:441:        $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:443:        $methodStmt = $classStmt->stmts[0]->stmts[0];
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:445:        $this->assertSame('SELF', (string)$methodStmt->stmts[0]->class);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:446:        $this->assertSame('PARENT', (string)$methodStmt->stmts[1]->class);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:447:        $this->assertSame('STATIC', (string)$methodStmt->stmts[2]->class);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:452:        $traverser->addVisitor(new NameResolver(null, ['preserveOriginalNames' => true]));
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:463:        $stmts = $traverser->traverse($origStmts);
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:465:        $this->assertSame($n1, $stmts[0]->stmts[0]->class->getAttribute('originalName'));
vendor/nikic/php-parser/test/PhpParser/NodeVisitor/NameResolverTest.php:466:        $this->assertSame($n2, $stmts[0]->stmts[1]->name->getAttribute('originalName'));
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:20:        $lexer = $this->getLexer();
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:21:        $lexer->startLexing('<?php ' . $keyword);
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:23:        $this->assertSame($expectedToken, $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:24:        $this->assertSame(0, $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:31:        $lexer = $this->getLexer();
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:32:        $lexer->startLexing('<?php ->' . $keyword);
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:34:        $this->assertSame(Tokens::T_OBJECT_OPERATOR, $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:35:        $this->assertSame(Tokens::T_STRING, $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:36:        $this->assertSame(0, $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:63:        $lexer = $this->getLexer();
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:64:        $lexer->startLexing('<?php ' . $code);
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:68:            $this->assertSame($expectedTokenType, $lexer->getNextToken($text));
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:69:            $this->assertSame($expectedTokenText, $text);
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:71:        $this->assertSame(0, $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:80:        $lexer = $this->getLexer();
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:81:        $lexer->startLexing('<?php ' . $stringifiedToken);
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:83:        $this->assertSame(Tokens::T_CONSTANT_ENCAPSED_STRING, $lexer->getNextToken($text));
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:84:        $this->assertSame($stringifiedToken, $text);
vendor/nikic/php-parser/test/PhpParser/Lexer/EmulativeTest.php:85:        $this->assertSame(0, $lexer->getNextToken());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:11:        $this->subNode1 = $subNode1;
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:12:        $this->subNode2 = $subNode2;
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:37:        $node->notSubNode = 'value3';
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:48:        $this->assertSame('Dummy', $node->getType());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:49:        $this->assertSame(array('subNode1', 'subNode2'), $node->getSubNodeNames());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:50:        $this->assertSame(10, $node->getLine());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:51:        $this->assertSame('/** doc comment */', $node->getDocComment()->getText());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:52:        $this->assertSame('value1', $node->subNode1);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:53:        $this->assertSame('value2', $node->subNode2);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:54:        $this->assertTrue(isset($node->subNode1));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:55:        $this->assertTrue(isset($node->subNode2));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:56:        $this->assertFalse(isset($node->subNode3));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:57:        $this->assertSame($attributes, $node->getAttributes());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:66:        $this->assertSame('/** doc comment */', $node->getDocComment()->getText());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:67:        array_pop($node->getAttribute('comments')); // remove doc comment
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:68:        $this->assertNull($node->getDocComment());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:69:        array_pop($node->getAttribute('comments')); // remove comment
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:70:        $this->assertNull($node->getDocComment());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:78:        $node->setDocComment($docComment);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:79:        $this->assertSame($docComment, $node->getDocComment());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:83:        $node->setDocComment($docComment);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:84:        $this->assertSame($docComment, $node->getDocComment());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:90:        $node->setAttribute('comments', [$c1, $c2]);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:91:        $node->setDocComment($docComment);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:92:        $this->assertSame([$c1, $c2, $docComment], $node->getAttribute('comments'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:100:        $node->setLine(15);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:101:        $this->assertSame(15, $node->getLine());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:104:        $node->subNode = 'newValue';
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:105:        $this->assertSame('newValue', $node->subNode);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:108:        $subNode =& $node->subNode;
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:110:        $this->assertSame('newNewValue', $node->subNode);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:113:        unset($node->subNode);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:114:        $this->assertFalse(isset($node->subNode));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:126:                $this->assertSame('subNode1', $key);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:127:                $this->assertSame('value1', $value);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:129:                $this->assertSame('subNode2', $key);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:130:                $this->assertSame('value2', $value);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:132:                $this->assertSame('notSubNode', $key);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:133:                $this->assertSame('value3', $value);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:139:        $this->assertSame(3, $i);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:144:        $node = $this->getMockForAbstractClass('PhpParser\NodeAbstract');
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:146:        $this->assertEmpty($node->getAttributes());
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:148:        $node->setAttribute('key', 'value');
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:149:        $this->assertTrue($node->hasAttribute('key'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:150:        $this->assertSame('value', $node->getAttribute('key'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:152:        $this->assertFalse($node->hasAttribute('doesNotExist'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:153:        $this->assertNull($node->getAttribute('doesNotExist'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:154:        $this->assertSame('default', $node->getAttribute('doesNotExist', 'default'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:156:        $node->setAttribute('null', null);
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:157:        $this->assertTrue($node->hasAttribute('null'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:158:        $this->assertNull($node->getAttribute('null'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:159:        $this->assertNull($node->getAttribute('null', 'default'));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:161:        $this->assertSame(
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:166:            $node->getAttributes()
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:270:        $stmts = $parser->parse(canonicalize($code));
vendor/nikic/php-parser/test/PhpParser/NodeAbstractTest.php:272:        $this->assertEquals(canonicalize($expected), canonicalize($json));
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassConstTest.php:16:        $this->assertTrue($node->{'is' . $modifier}());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassConstTest.php:22:        $this->assertTrue($node->isPublic());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassConstTest.php:23:        $this->assertFalse($node->isProtected());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassConstTest.php:24:        $this->assertFalse($node->isPrivate());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassConstTest.php:25:        $this->assertFalse($node->isStatic());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:9:        $this->assertTrue($class->isAbstract());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:12:        $this->assertFalse($class->isAbstract());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:17:        $this->assertTrue($class->isFinal());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:20:        $this->assertFalse($class->isFinal());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:40:        $this->assertSame($methods, $class->getMethods());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:55:        $this->assertSame($methodConstruct, $class->getMethod('__construct'));
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:56:        $this->assertSame($methodTest, $class->getMethod('test'));
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:57:        $this->assertNull($class->getMethod('nonExisting'));
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:62:        $this->assertTrue($class->isAbstract());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:63:        $this->assertSame(Class_::MODIFIER_ABSTRACT, $class->flags);
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassTest.php:64:        $this->assertSame(Class_::MODIFIER_ABSTRACT, $class->type);
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassMethodTest.php:15:        $this->assertTrue($node->{'is' . $modifier}());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassMethodTest.php:21:        $this->assertTrue($node->isPublic());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassMethodTest.php:22:        $this->assertFalse($node->isProtected());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassMethodTest.php:23:        $this->assertFalse($node->isPrivate());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassMethodTest.php:24:        $this->assertFalse($node->isAbstract());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassMethodTest.php:25:        $this->assertFalse($node->isFinal());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassMethodTest.php:26:        $this->assertFalse($node->isStatic());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/ClassMethodTest.php:53:        $this->assertTrue($node->isPublic(), 'Node should be implicitly public');
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:16:        $this->assertTrue($node->{'is' . $modifier}());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:22:        $this->assertTrue($node->isPublic());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:23:        $this->assertFalse($node->isProtected());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:24:        $this->assertFalse($node->isPrivate());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:25:        $this->assertFalse($node->isStatic());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:30:        $this->assertTrue($node->isPublic());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:31:        $this->assertFalse($node->isProtected());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:32:        $this->assertFalse($node->isPrivate());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/PropertyTest.php:33:        $this->assertTrue($node->isStatic());
vendor/nikic/php-parser/test/PhpParser/Node/Stmt/InterfaceTest.php:24:        $this->assertSame($methods, $interface->getMethods());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:9:        $this->assertSame(array('foo', 'bar'), $name->parts);
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:12:        $this->assertSame(array('foo', 'bar'), $name->parts);
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:15:        $this->assertSame(array('foo', 'bar'), $name->parts);
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:20:        $this->assertSame('foo', $name->getFirst());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:21:        $this->assertSame('foo', $name->getLast());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:24:        $this->assertSame('foo', $name->getFirst());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:25:        $this->assertSame('bar', $name->getLast());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:31:        $this->assertSame('foo\bar', (string) $name);
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:32:        $this->assertSame('foo\bar', $name->toString());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:37:        $this->assertEquals(new Name('foo\bar\baz'), $name->slice(0));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:38:        $this->assertEquals(new Name('bar\baz'), $name->slice(1));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:39:        $this->assertNull($name->slice(3));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:40:        $this->assertEquals(new Name('foo\bar\baz'), $name->slice(-3));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:41:        $this->assertEquals(new Name('bar\baz'), $name->slice(-2));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:42:        $this->assertEquals(new Name('foo\bar'), $name->slice(0, -1));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:43:        $this->assertNull($name->slice(0, -3));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:44:        $this->assertEquals(new Name('bar'), $name->slice(1, -1));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:45:        $this->assertNull($name->slice(1, -2));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:46:        $this->assertEquals(new Name('bar'), $name->slice(-2, 1));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:47:        $this->assertEquals(new Name('bar'), $name->slice(-2, -1));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:48:        $this->assertNull($name->slice(-2, -2));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:56:        (new Name('foo\bar\baz'))->slice(4);
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:61:     * @expectedExceptionMessage Offset -4 is out of bounds
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:64:        (new Name('foo\bar\baz'))->slice(-4);
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:72:        (new Name('foo\bar\baz'))->slice(0, 4);
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:77:     * @expectedExceptionMessage Length -4 is out of bounds
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:80:        (new Name('foo\bar\baz'))->slice(0, -4);
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:84:        $this->assertEquals(new Name('foo\bar\baz'), Name::concat('foo', 'bar\baz'));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:85:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:91:        $this->assertEquals(
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:96:        $this->assertEquals(new Name('foo'), Name::concat(null, 'foo'));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:97:        $this->assertEquals(new Name('foo'), Name::concat('foo', null));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:98:        $this->assertNull(Name::concat(null, null));
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:103:        $this->assertTrue ($name->isUnqualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:104:        $this->assertFalse($name->isQualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:105:        $this->assertFalse($name->isFullyQualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:106:        $this->assertFalse($name->isRelative());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:109:        $this->assertFalse($name->isUnqualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:110:        $this->assertTrue ($name->isQualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:111:        $this->assertFalse($name->isFullyQualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:112:        $this->assertFalse($name->isRelative());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:115:        $this->assertFalse($name->isUnqualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:116:        $this->assertFalse($name->isQualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:117:        $this->assertTrue ($name->isFullyQualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:118:        $this->assertFalse($name->isRelative());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:121:        $this->assertFalse($name->isUnqualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:122:        $this->assertFalse($name->isQualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:123:        $this->assertFalse($name->isFullyQualified());
vendor/nikic/php-parser/test/PhpParser/Node/NameTest.php:124:        $this->assertTrue ($name->isRelative());
vendor/nikic/php-parser/test/PhpParser/Node/Scalar/StringTest.php:11:        $this->assertSame(
vendor/nikic/php-parser/test/PhpParser/Node/Scalar/StringTest.php:21:        $this->assertSame(
vendor/nikic/php-parser/test/PhpParser/Node/Scalar/StringTest.php:52:        foreach ($this->provideTestParseEscapeSequences() as $i => $test) {
vendor/nikic/php-parser/test/PhpParser/Node/Scalar/MagicConstTest.php:10:        $this->assertSame($name, $magicConst->getName());
vendor/nikic/php-parser/test/code/prettyPrinter/commentsInCommaList.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/commentsInCommaList.test:29:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/for.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/for.test:20:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/nullable_types.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/nullable_types.test:7:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/haltCompiler.file-test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/haltCompiler.file-test:9:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/haltCompiler.file-test:16:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/haltCompiler.file-test:22:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/function_signatures.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/function_signatures.test:24:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/class_const.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/class_const.test:12:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/class.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/class.test:12:        $this->a = 'bar';
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/class.test:27:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/class.test:35:        $this->a = 'bar';
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/namespaces.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/namespaces.test:16:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/namespaces.test:27:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/namespaces.test:40:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/declare.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/declare.test:11:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/multiCatch.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/multiCatch.test:11:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/do_while.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/do_while.test:8:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/if.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/if.test:12:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/throw.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/throw.test:6:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/tryCatch.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/tryCatch.test:17:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/while.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/while.test:8:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/switch.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/switch.test:21:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/goto.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/goto.test:7:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/const.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/const.test:8:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/break_continue.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/break_continue.test:9:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/global_static_variables.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/global_static_variables.test:8:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/traitUse.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/traitUse.test:15:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/groupUse.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/groupUse.test:10:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/alias.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/alias.test:13:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/foreach.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/stmt/foreach.test:20:-----
vendor/nikic/php-parser/test/code/prettyPrinter/comments.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/comments.test:30:-----
vendor/nikic/php-parser/test/code/prettyPrinter/comments.test:56:-----
vendor/nikic/php-parser/test/code/prettyPrinter/comments.test:63:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:6:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:10:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:15:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:21:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:27:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:33:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:43:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:53:-----
vendor/nikic/php-parser/test/code/prettyPrinter/inlineHTMLandPHPtest.file-test:55:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/literals.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/literals.test:38:1E-100;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/literals.test:83:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/literals.test:114:1.0E-100;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:1:Pretty printer generates least-parentheses output
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:34:-1 ** 2;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:41:-(-$a);
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:43:-(--$a);
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:51:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:74:-1 ** 2;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:78:-(-$a);
vendor/nikic/php-parser/test/code/prettyPrinter/expr/parentheses.test:80:-(--$a);
vendor/nikic/php-parser/test/code/prettyPrinter/expr/stringEscaping.test:1:Escape sequences in double-quoted strings
vendor/nikic/php-parser/test/code/prettyPrinter/expr/stringEscaping.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/stringEscaping.test:14:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/closure.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/closure.test:12:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/list.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/list.test:12:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/uvs.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/uvs.test:11:($a->b)();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/uvs.test:13:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/uvs.test:22:($a->b)();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/constant_deref.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/constant_deref.test:9:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/anonymousClass.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/anonymousClass.test:10:        $this->a = $a;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/anonymousClass.test:13:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/anonymousClass.test:25:        $this->a = $a;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/intrinsics.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/intrinsics.test:17:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/call.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/call.test:9:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/arrayDestructuring.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/arrayDestructuring.test:9:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/shortArraySyntax.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/shortArraySyntax.test:8:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/docStrings.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/docStrings.test:28:{$c->d}
vendor/nikic/php-parser/test/code/prettyPrinter/expr/docStrings.test:48:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/docStrings.test:69:{$c->d}
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:7:-0;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:9:-0.0;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:11:-42;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:13:-42.0;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:15:-42.5;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:17:-1e42;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:19:-1e1000;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:20:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:23:-0;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:25:-0.0;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:27:-42;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:29:-42.0;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:31:-42.5;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:33:-1.0E+42;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/numbers.test:35:-\INF;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:8:$a->b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:9:$a->b();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:10:$a->b($c);
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:11:$a->$b();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:12:$a->{$b}();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:13:$a->$b[$c]();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:14:$$a->b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:26:$a::{$b->c}();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:31:$a->b()[$c];
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:33:(new A)->b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:34:(new A())->b();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:36:(new $a->b)->c;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:38:global $a, $$a, $$a[$b], $$a->b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:39:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:44:$a->b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:45:$a->b();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:46:$a->b($c);
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:47:$a->{$b}();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:48:$a->{$b}();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:49:$a->{$b[$c]}();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:50:${$a}->b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:62:$a::{$b->c}();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:67:$a->b()[$c];
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:69:(new A())->b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:70:(new A())->b();
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:72:(new $a->b())->c;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/variables.test:73:global $a, ${$a}, ${$a[$b]}, ${$a->b};
vendor/nikic/php-parser/test/code/prettyPrinter/expr/include.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/include.test:6:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:8:--$a;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:10:$a--;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:14:-$a;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:34:$a - $b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:63:$a -= $b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:78:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:81:--$a;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:83:$a--;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:86:-$a;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:104:$a - $b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/operators.test:132:$a -= $b;
vendor/nikic/php-parser/test/code/prettyPrinter/expr/yield.test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/yield.test:15:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/yield.test:26:-----
vendor/nikic/php-parser/test/code/prettyPrinter/expr/yield.test:37:-----
vendor/nikic/php-parser/test/code/prettyPrinter/onlyInlineHTML.file-test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/onlyInlineHTML.file-test:7:-----
vendor/nikic/php-parser/test/code/prettyPrinter/onlyInlineHTML.file-test:12:-----
vendor/nikic/php-parser/test/code/prettyPrinter/onlyInlineHTML.file-test:16:-----
vendor/nikic/php-parser/test/code/prettyPrinter/onlyPHP.file-test:2:-----
vendor/nikic/php-parser/test/code/prettyPrinter/onlyPHP.file-test:7:-----
vendor/nikic/php-parser/test/code/prettyPrinter/onlyPHP.file-test:12:-----
vendor/nikic/php-parser/test/code/prettyPrinter/onlyPHP.file-test:15:-----
vendor/nikic/php-parser/test/code/parser/semiReserved.test:2:-----
vendor/nikic/php-parser/test/code/parser/semiReserved.test:23:$t->array();
vendor/nikic/php-parser/test/code/parser/semiReserved.test:24:$t->public();
vendor/nikic/php-parser/test/code/parser/semiReserved.test:29:$t->class;
vendor/nikic/php-parser/test/code/parser/semiReserved.test:30:$t->private;
vendor/nikic/php-parser/test/code/parser/semiReserved.test:54:-----
vendor/nikic/php-parser/test/code/parser/stmt/generator/basic.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/generator/basic.test:26:    $foo->func(yield $foo);
vendor/nikic/php-parser/test/code/parser/stmt/generator/basic.test:33:-----
vendor/nikic/php-parser/test/code/parser/stmt/generator/yieldPrecedence.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/generator/yieldPrecedence.test:16:-----
vendor/nikic/php-parser/test/code/parser/stmt/generator/yieldUnaryPrecedence.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/generator/yieldUnaryPrecedence.test:7:    yield -1;
vendor/nikic/php-parser/test/code/parser/stmt/generator/yieldUnaryPrecedence.test:8:    yield * -1;
vendor/nikic/php-parser/test/code/parser/stmt/generator/yieldUnaryPrecedence.test:10:-----
vendor/nikic/php-parser/test/code/parser/stmt/controlFlow.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/controlFlow.test:18:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/returnTypes.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/returnTypes.test:9:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/specialVars.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/specialVars.test:9:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/variadicDefaultValue.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/variadicDefaultValue.test:5:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/defaultValues.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/defaultValues.test:10:    $g = -1.0,
vendor/nikic/php-parser/test/code/parser/stmt/function/defaultValues.test:16:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/byRef.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/byRef.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/typeDeclarations.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/typeDeclarations.test:6:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/conditional.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/conditional.test:8:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/nullableTypes.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/nullableTypes.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/builtinTypeDeclarations.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/builtinTypeDeclarations.test:5:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/variadic.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/function/variadic.test:8:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/braced.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/braced.test:11:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/notBraced.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/notBraced.test:10:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUseErrors.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUseErrors.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUseErrors.test:53:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUseErrors.test:57:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUseErrors.test:93:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUseErrors.test:97:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUseTrailingComma.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUseTrailingComma.test:6:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/mix.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/mix.test:10:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/mix.test:53:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/mix.test:61:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmtInvalid.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmtInvalid.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmtInvalid.test:34:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmtInvalid.test:38:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmtInvalid.test:58:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmtInvalid.test:64:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/nested.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/nested.test:9:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/commentAfterNamespace.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/commentAfterNamespace.test:6:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/nsAfterHashbang.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/nsAfterHashbang.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:4:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:17:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:19:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:32:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:34:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:38:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:40:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:58:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:60:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:78:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/invalidName.test:80:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmt.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmt.test:11:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmt.test:37:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/outsideStmt.test:42:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUsePositions.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUsePositions.test:5:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUsePositions.test:8:    0: Stmt_GroupUse[2:1 - 2:17](
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUsePositions.test:10:        prefix: Name[2:5 - 2:11](
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUsePositions.test:17:            0: Stmt_UseUse[2:14 - 2:16](
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUsePositions.test:19:                name: Name[2:14 - 2:16](
vendor/nikic/php-parser/test/code/parser/stmt/namespace/name.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/name.test:9:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUse.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/groupUse.test:10:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/alias.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/alias.test:9:// evil alias notation - Do Not Use!
vendor/nikic/php-parser/test/code/parser/stmt/namespace/alias.test:18:-----
vendor/nikic/php-parser/test/code/parser/stmt/namespace/alias.test:88:            0: // evil alias notation - Do Not Use!
vendor/nikic/php-parser/test/code/parser/stmt/declare.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/declare.test:11:-----
vendor/nikic/php-parser/test/code/parser/stmt/multiCatch.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/multiCatch.test:11:-----
vendor/nikic/php-parser/test/code/parser/stmt/tryWithoutCatch.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/tryWithoutCatch.test:8:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/simple.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/simple.test:18:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/trait.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/trait.test:23:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:4:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:26:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:28:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:50:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:52:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:74:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:76:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:98:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:100:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:123:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:125:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:147:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:150:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:168:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:170:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:192:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/modifier.test:194:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/abstract.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/abstract.test:9:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/anonymous.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/anonymous.test:23:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifierErrors.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifierErrors.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifierErrors.test:32:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifierErrors.test:37:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifierErrors.test:62:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifierErrors.test:67:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifierErrors.test:92:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifierErrors.test:97:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/interface.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/interface.test:8:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/php4Style.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/php4Style.test:10:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/implicitPublic.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/implicitPublic.test:14:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/conditional.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/conditional.test:8:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:4:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:17:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:19:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:32:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:34:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:38:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:40:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:57:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:59:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:76:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:78:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:95:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:97:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:115:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:117:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:135:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:137:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:155:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:157:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:168:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:170:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:181:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:183:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:187:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:189:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:205:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:207:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:223:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/name.test:225:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifiers.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/constModifiers.test:11:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:4:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:27:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:29:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:52:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:54:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:77:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:79:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:102:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:104:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:127:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/staticMethod.test:129:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/final.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/class/final.test:6:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompilerInvalidSyntax.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompilerInvalidSyntax.test:5:-----
vendor/nikic/php-parser/test/code/parser/stmt/if.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/if.test:19:-----
vendor/nikic/php-parser/test/code/parser/stmt/loop/for.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/loop/for.test:17:-----
vendor/nikic/php-parser/test/code/parser/stmt/loop/do.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/loop/do.test:8:-----
vendor/nikic/php-parser/test/code/parser/stmt/loop/while.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/loop/while.test:9:-----
vendor/nikic/php-parser/test/code/parser/stmt/loop/foreach.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/loop/foreach.test:19:-----
vendor/nikic/php-parser/test/code/parser/stmt/blocklessStatement.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/blocklessStatement.test:18:-----
vendor/nikic/php-parser/test/code/parser/stmt/hashbang.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/hashbang.test:10:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompilerOutermostScope.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompilerOutermostScope.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompiler.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompiler.test:9:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompiler.test:18:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompiler.test:23:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompiler.test:32:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompiler.test:38:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompilerOffset.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/haltCompilerOffset.test:8:-----
vendor/nikic/php-parser/test/code/parser/stmt/tryCatch.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/tryCatch.test:23:-----
vendor/nikic/php-parser/test/code/parser/stmt/switch.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/switch.test:20:-----
vendor/nikic/php-parser/test/code/parser/stmt/const.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/const.test:6:-----
vendor/nikic/php-parser/test/code/parser/stmt/unset.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/unset.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/echo.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/echo.test:7:-----
vendor/nikic/php-parser/test/code/parser/stmt/inlineHTML.test:2:-----
vendor/nikic/php-parser/test/code/parser/stmt/inlineHTML.test:12:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:2:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:8:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:41:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:47:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:78:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:84:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:115:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:119:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:133:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:138:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:154:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:162:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:190:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:198:// The output here drops the loop - would require Error node to handle this
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:199:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:228:            0: // The output here drops the loop - would require Error node to handle this
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:232:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:241:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:243:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:245:$foo->
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:247:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:251:    0: Expr_PropertyFetch[2:1 - 2:6](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:252:        var: Expr_Variable[2:1 - 2:4](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:255:        name: Expr_Error[3:1 - 2:6](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:259:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:262:    $bar->
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:264:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:268:    0: Stmt_Function[2:1 - 4:1](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:275:            0: Expr_PropertyFetch[3:5 - 3:10](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:276:                var: Expr_Variable[3:5 - 3:8](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:279:                name: Expr_Error[4:1 - 3:10](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:285:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:288:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:301:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:304:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:308:    0: Expr_New[2:1 - 2:3](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:309:        class: Expr_Error[2:4 - 2:3](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:315:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:318:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:330:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:333:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:342:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:345:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:359:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:362:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:376:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:393:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:514:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:545:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:836:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:840:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:844:    0: Expr_FuncCall[3:1 - 3:10](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:845:        name: Name[3:1 - 3:3](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:851:            0: Arg[3:5 - 3:9](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:852:                value: Expr_ClassConstFetch[3:5 - 3:9](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:853:                    class: Name[3:5 - 3:7](
vendor/nikic/php-parser/test/code/parser/errorHandling/recovery.test:858:                    name: Expr_Error[3:10 - 3:9](
vendor/nikic/php-parser/test/code/parser/errorHandling/eofError.test:2:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/eofError.test:4:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/eofError.test:15:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/eofError.test:17:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:2:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:8:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:26:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:32:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:52:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:58:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:78:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:86:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:115:-----
vendor/nikic/php-parser/test/code/parser/errorHandling/lexerErrors.test:122:-----
vendor/nikic/php-parser/test/code/parser/blockComments.test:2:-----
vendor/nikic/php-parser/test/code/parser/blockComments.test:16:-----
vendor/nikic/php-parser/test/code/parser/scalar/docString.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/docString.test:24:Test $a and $b->c test
vendor/nikic/php-parser/test/code/parser/scalar/docString.test:31:-----
vendor/nikic/php-parser/test/code/parser/scalar/constantString.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/constantString.test:18:-----
vendor/nikic/php-parser/test/code/parser/scalar/int.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/int.test:14:-----
vendor/nikic/php-parser/test/code/parser/scalar/unicodeEscape.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/unicodeEscape.test:8:-----
vendor/nikic/php-parser/test/code/parser/scalar/magicConst.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/magicConst.test:13:-----
vendor/nikic/php-parser/test/code/parser/scalar/encapsedString.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/encapsedString.test:6:"$A->B";
vendor/nikic/php-parser/test/code/parser/scalar/encapsedString.test:29:-----
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:4:"$a[-0]";
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:5:"$a[-1]";
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:6:"$a[-0x0]";
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:7:"$a[-00]";
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:8:"$a[@@{ -PHP_INT_MAX - 1 }@@]";
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:9:-----
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:19:                    value: -0
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:31:                    value: -1
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:43:                    value: -0x0
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:55:                    value: -00
vendor/nikic/php-parser/test/code/parser/scalar/encapsedNegVarOffset.test:67:                    value: @@{ -PHP_INT_MAX - 1 }@@
vendor/nikic/php-parser/test/code/parser/scalar/invalidOctal.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/invalidOctal.test:5:-----
vendor/nikic/php-parser/test/code/parser/scalar/invalidOctal.test:13:-----
vendor/nikic/php-parser/test/code/parser/scalar/invalidOctal.test:16:-----
vendor/nikic/php-parser/test/code/parser/scalar/float.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/float.test:11:0e-0;
vendor/nikic/php-parser/test/code/parser/scalar/float.test:16:// various integer -> float overflows
vendor/nikic/php-parser/test/code/parser/scalar/float.test:23:-----
vendor/nikic/php-parser/test/code/parser/scalar/float.test:58:            0: // various integer -> float overflows
vendor/nikic/php-parser/test/code/parser/scalar/docStringNewlines.test:2:-----
vendor/nikic/php-parser/test/code/parser/scalar/docStringNewlines.test:15:-----
vendor/nikic/php-parser/test/code/parser/comments.test:2:-----
vendor/nikic/php-parser/test/code/parser/comments.test:22:-----
vendor/nikic/php-parser/test/code/parser/comments.test:60:-----
vendor/nikic/php-parser/test/code/parser/comments.test:69:-----
vendor/nikic/php-parser/test/code/parser/comments.test:80:-----
vendor/nikic/php-parser/test/code/parser/comments.test:85:-----
vendor/nikic/php-parser/test/code/parser/expr/errorSuppress.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/errorSuppress.test:5:-----
vendor/nikic/php-parser/test/code/parser/expr/shellExec.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/shellExec.test:9:-----
vendor/nikic/php-parser/test/code/parser/expr/exit.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/exit.test:10:-----
vendor/nikic/php-parser/test/code/parser/expr/constant_expr.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/constant_expr.test:15:const T_9 = ~-1;
vendor/nikic/php-parser/test/code/parser/expr/constant_expr.test:16:const T_10 = (-1?:1) + (0?2:3);
vendor/nikic/php-parser/test/code/parser/expr/constant_expr.test:35:const T_29 = 12 - 13;
vendor/nikic/php-parser/test/code/parser/expr/constant_expr.test:42:-----
vendor/nikic/php-parser/test/code/parser/expr/print.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/print.test:5:-----
vendor/nikic/php-parser/test/code/parser/expr/assign.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/assign.test:13:$a -= $b;
vendor/nikic/php-parser/test/code/parser/expr/assign.test:35:--$a;
vendor/nikic/php-parser/test/code/parser/expr/assign.test:36:$a--;
vendor/nikic/php-parser/test/code/parser/expr/assign.test:37:-----
vendor/nikic/php-parser/test/code/parser/expr/closure.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/closure.test:11:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/newDeref.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/newDeref.test:5:(new A)->b;
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/newDeref.test:6:(new A)->b();
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/newDeref.test:9:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:6:$a->b;
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:7:$a->b['c'];
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:8:$a->b{'c'};
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:11:$a->b();
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:12:$a->{'b'}();
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:13:$a->$b();
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:14:$a->$b['c']();
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:17:$a->b()['c'];
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:18:$a->b(){'c'}; // invalid PHP: drop Support?
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/objectAccess.test:19:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/constFetch.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/constFetch.test:8:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/staticCall.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/staticCall.test:20:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/args.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/args.test:10:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/staticPropertyFetch.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/staticPropertyFetch.test:15:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/funcCall.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/funcCall.test:13:$a->b['c']();
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/funcCall.test:17:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/constantDeref.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/constantDeref.test:17:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/simpleArrayAccess.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/fetchAndCall/simpleArrayAccess.test:10:-----
vendor/nikic/php-parser/test/code/parser/expr/comparison.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/comparison.test:15:-----
vendor/nikic/php-parser/test/code/parser/expr/ternaryAndCoalesce.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/ternaryAndCoalesce.test:18:-----
vendor/nikic/php-parser/test/code/parser/expr/new.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/new.test:13:new $a->b();
vendor/nikic/php-parser/test/code/parser/expr/new.test:14:new $a->b->c();
vendor/nikic/php-parser/test/code/parser/expr/new.test:15:new $a->b['c']();
vendor/nikic/php-parser/test/code/parser/expr/new.test:16:new $a->b{'c'}();
vendor/nikic/php-parser/test/code/parser/expr/new.test:20:-----
vendor/nikic/php-parser/test/code/parser/expr/assignNewByRef.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/assignNewByRef.test:5:-----
vendor/nikic/php-parser/test/code/parser/expr/assignNewByRef.test:23:-----
vendor/nikic/php-parser/test/code/parser/expr/assignNewByRef.test:26:-----
vendor/nikic/php-parser/test/code/parser/expr/includeAndEval.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/includeAndEval.test:9:-----
vendor/nikic/php-parser/test/code/parser/expr/cast.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/cast.test:15:-----
vendor/nikic/php-parser/test/code/parser/expr/math.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/math.test:8:-$a;
vendor/nikic/php-parser/test/code/parser/expr/math.test:16:$a - $b;
vendor/nikic/php-parser/test/code/parser/expr/math.test:35:-----
vendor/nikic/php-parser/test/code/parser/expr/issetAndEmpty.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/issetAndEmpty.test:10:-----
vendor/nikic/php-parser/test/code/parser/expr/logic.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/logic.test:22:-----
vendor/nikic/php-parser/test/code/parser/expr/listWithKeys.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/listWithKeys.test:7:-----
vendor/nikic/php-parser/test/code/parser/expr/arrayDestructuring.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/arrayDestructuring.test:9:-----
vendor/nikic/php-parser/test/code/parser/expr/variable.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/variable.test:11:-----
vendor/nikic/php-parser/test/code/parser/expr/clone.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/clone.test:6:-----
vendor/nikic/php-parser/test/code/parser/expr/arrayDef.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/arrayDef.test:15:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/new.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/new.test:7:new $obj->className;
vendor/nikic/php-parser/test/code/parser/expr/uvs/new.test:10:new $weird[0]->foo::$className;
vendor/nikic/php-parser/test/code/parser/expr/uvs/new.test:11:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/staticProperty.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/staticProperty.test:12:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/isset.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/isset.test:6:isset(['a' => 'b']->a);
vendor/nikic/php-parser/test/code/parser/expr/uvs/isset.test:7:isset("str"->a);
vendor/nikic/php-parser/test/code/parser/expr/uvs/isset.test:8:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/indirectCall.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/indirectCall.test:17:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/globalNonSimpleVarError.test:1:Non-simple variables are forbidden in PHP 7
vendor/nikic/php-parser/test/code/parser/expr/uvs/globalNonSimpleVarError.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/globalNonSimpleVarError.test:4:global $$foo->bar;
vendor/nikic/php-parser/test/code/parser/expr/uvs/globalNonSimpleVarError.test:5:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/misc.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/uvs/misc.test:7:"string"->length();
vendor/nikic/php-parser/test/code/parser/expr/uvs/misc.test:8:(clone $obj)->b[0](1);
vendor/nikic/php-parser/test/code/parser/expr/uvs/misc.test:10:-----
vendor/nikic/php-parser/test/code/parser/expr/newWithoutClass.test:2:-----
vendor/nikic/php-parser/test/code/parser/expr/newWithoutClass.test:5:-----
vendor/nikic/php-parser/test/code/parser/expr/newWithoutClass.test:10:-----
vendor/nikic/php-parser/test/code/parser/expr/newWithoutClass.test:13:-----
vendor/nikic/php-parser/grammar/php7.y:9:    top_statement_list                                      { $$ = $this->handleNamespaces($1); }
vendor/nikic/php-parser/grammar/php7.y:19:          { makeNop($nop, $this->lookaheadStartAttributes);
vendor/nikic/php-parser/grammar/php7.y:59:    | ',' { $this->emitError(new Error('A trailing comma is not allowed here', attributes())); }
vendor/nikic/php-parser/grammar/php7.y:71:          { $$ = Stmt\HaltCompiler[$this->lexer->handleHaltCompiler()]; }
vendor/nikic/php-parser/grammar/php7.y:74:            $$->setAttribute('kind', Stmt\Namespace_::KIND_SEMICOLON);
vendor/nikic/php-parser/grammar/php7.y:75:            $this->checkNamespace($$); }
vendor/nikic/php-parser/grammar/php7.y:78:            $$->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
vendor/nikic/php-parser/grammar/php7.y:79:            $this->checkNamespace($$); }
vendor/nikic/php-parser/grammar/php7.y:82:            $$->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
vendor/nikic/php-parser/grammar/php7.y:83:            $this->checkNamespace($$); }
vendor/nikic/php-parser/grammar/php7.y:138:          { $$ = Stmt\UseUse[$1, null, Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($$, #1); }
vendor/nikic/php-parser/grammar/php7.y:140:          { $$ = Stmt\UseUse[$1, $3, Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($$, #3); }
vendor/nikic/php-parser/grammar/php7.y:149:      unprefixed_use_declaration                            { $$ = $1; $$->type = Stmt\Use_::TYPE_NORMAL; }
vendor/nikic/php-parser/grammar/php7.y:150:    | use_type unprefixed_use_declaration                   { $$ = $2; $$->type = $1; }
vendor/nikic/php-parser/grammar/php7.y:187:          { makeNop($nop, $this->lookaheadStartAttributes);
vendor/nikic/php-parser/grammar/php7.y:205:            makeNop($$, $this->startAttributeStack[#1]);
vendor/nikic/php-parser/grammar/php7.y:233:          { $$ = Stmt\TryCatch[$3, $5, $6]; $this->checkTryCatch($$); }
vendor/nikic/php-parser/grammar/php7.y:243:          { makeNop($$, $this->startAttributeStack[#1]);
vendor/nikic/php-parser/grammar/php7.y:294:            $this->checkClass($$, #2); }
vendor/nikic/php-parser/grammar/php7.y:297:            $this->checkInterface($$, #2); }
vendor/nikic/php-parser/grammar/php7.y:435:          { $$ = Node\Param[parseVar($4), null, $1, $2, $3]; $this->checkParam($$); }
vendor/nikic/php-parser/grammar/php7.y:437:          { $$ = Node\Param[parseVar($4), $6, $1, $2, $3]; $this->checkParam($$); }
vendor/nikic/php-parser/grammar/php7.y:446:      name                                                  { $$ = $this->handleBuiltinTypes($1); }
vendor/nikic/php-parser/grammar/php7.y:511:          { $$ = Stmt\Property[$1, $2]; $this->checkProperty($$, #1); }
vendor/nikic/php-parser/grammar/php7.y:513:          { $$ = Stmt\ClassConst[$3, $1]; $this->checkClassConst($$, #1); }
vendor/nikic/php-parser/grammar/php7.y:516:            $this->checkClassMethod($$, #1); }
vendor/nikic/php-parser/grammar/php7.y:568:    | non_empty_member_modifiers member_modifier            { $this->checkModifier($1, $2, #2); $$ = $1 | $2; }
vendor/nikic/php-parser/grammar/php7.y:643:    | expr '-' expr                                         { $$ = Expr\BinaryOp\Minus     [$1, $3]; }
vendor/nikic/php-parser/grammar/php7.y:651:    | '-' expr %prec T_INC                                  { $$ = Expr\UnaryMinus[$2]; }
vendor/nikic/php-parser/grammar/php7.y:705:            $this->checkClass($$[0], -1); }
vendor/nikic/php-parser/grammar/php7.y:752:    | error                                                 { $$ = Expr\Error[]; $this->errorState = 2; }
vendor/nikic/php-parser/grammar/php7.y:784:          { $$ = Expr\ClassConstFetch[$1, new Expr\Error(stackAttributes(#3))]; $this->errorState = 2; }
vendor/nikic/php-parser/grammar/php7.y:804:      T_LNUMBER                                             { $$ = $this->parseLNumber($1, attributes()); }
vendor/nikic/php-parser/grammar/php7.y:867:    | '$' error                                             { $$ = Expr\Error[]; $this->errorState = 2; }
vendor/nikic/php-parser/grammar/php7.y:894:    | error                                                 { $$ = Expr\Error[]; $this->errorState = 2; }
vendor/nikic/php-parser/grammar/php7.y:916:          { $$ = $1; $end = count($$)-1; if ($$[$end] === null) unset($$[$end]); }
vendor/nikic/php-parser/grammar/php7.y:960:    | T_NUM_STRING                                          { $$ = $this->parseNumString($1, attributes()); }
vendor/nikic/php-parser/grammar/php7.y:961:    | '-' T_NUM_STRING                                      { $$ = $this->parseNumString('-' . $2, attributes()); }
vendor/nikic/php-parser/grammar/parser.template:3:#semval($) $this->semValue
vendor/nikic/php-parser/grammar/parser.template:4:#semval($,%t) $this->semValue
vendor/nikic/php-parser/grammar/parser.template:5:#semval(%n) $this->stackPos-(%l-%n)
vendor/nikic/php-parser/grammar/parser.template:6:#semval(%n,%t) $this->stackPos-(%l-%n)
vendor/nikic/php-parser/grammar/parser.template:24:class #(-p) extends \PhpParser\ParserAbstract
vendor/nikic/php-parser/grammar/parser.template:85:#if -t
vendor/nikic/php-parser/grammar/parser.template:88:        #production-strings;
vendor/nikic/php-parser/grammar/parser.template:99:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/grammar/README.md:19: * Some function-like constructs are resolved (see `rebuildParsers.php` for a list)
vendor/nikic/php-parser/grammar/README.md:24:In order to rebuild the parser, you need [moriyoshi's fork of kmyacc](https://github.com/moriyoshi/kmyacc-forked).
vendor/nikic/php-parser/grammar/README.md:28:script with `--debug`. If you want to retain the preprocessed grammar pass `--keep-tmp-grammar`.
vendor/nikic/php-parser/grammar/tokens.y:1:/* We currently rely on the token ID mapping to be the same between PHP 5 and PHP 7 - so the same lexer can be used for
vendor/nikic/php-parser/grammar/tokens.y:24:%left '+' '-' '.'
vendor/nikic/php-parser/grammar/tokens.template:3:#semval($) $this->semValue
vendor/nikic/php-parser/grammar/tokens.template:4:#semval($,%t) $this->semValue
vendor/nikic/php-parser/grammar/tokens.template:5:#semval(%n) $this->stackPos-(%l-%n)
vendor/nikic/php-parser/grammar/tokens.template:6:#semval(%n,%t) $this->stackPos-(%l-%n)
vendor/nikic/php-parser/grammar/rebuildParsers.php:23:$optionDebug = isset($options['--debug']);
vendor/nikic/php-parser/grammar/rebuildParsers.php:24:$optionKeepTmpGrammar = isset($options['--keep-tmp-grammar']);
vendor/nikic/php-parser/grammar/rebuildParsers.php:59:    $additionalArgs = $optionDebug ? '-t -v' : '';
vendor/nikic/php-parser/grammar/rebuildParsers.php:62:    $output = trim(shell_exec("$kmyacc $additionalArgs -l -m $skeletonFile -p $name $tmpGrammarFile 2>&1"));
vendor/nikic/php-parser/grammar/rebuildParsers.php:73:    $output = trim(shell_exec("$kmyacc -l -m $tokensTemplate $tmpGrammarFile 2>&1"));
vendor/nikic/php-parser/grammar/rebuildParsers.php:88:        '~\b(?<name>[A-Z][a-zA-Z_\\\\]++)\s*' . PARAMS . '~',
vendor/nikic/php-parser/grammar/rebuildParsers.php:111:        '~\b(?<!::|->)(?!array\()(?<name>[a-z][A-Za-z]++)' . ARGS . '~',
vendor/nikic/php-parser/grammar/rebuildParsers.php:124:                return '$this->startAttributeStack[#1] + $this->endAttributes';
vendor/nikic/php-parser/grammar/rebuildParsers.php:129:                return '$this->startAttributeStack[' . $args[0] . ']'
vendor/nikic/php-parser/grammar/rebuildParsers.php:130:                     . ' + $this->endAttributeStack[' . $args[0] . ']';
vendor/nikic/php-parser/grammar/rebuildParsers.php:166:                     . ' $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, ' . $args[1] . ', ' . $args[2] . '); } }';
vendor/nikic/php-parser/grammar/rebuildParsers.php:173:                     . ' $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, null, ' . $args[1] . '); } }'
vendor/nikic/php-parser/grammar/rebuildParsers.php:174:                     . ' $s->value = preg_replace(\'~(\r\n|\n|\r)\z~\', \'\', $s->value);'
vendor/nikic/php-parser/grammar/rebuildParsers.php:175:                     . ' if (\'\' === $s->value) array_pop(' . $args[0] . ');';
vendor/nikic/php-parser/grammar/rebuildParsers.php:200:                     . 'preg_match(\'/\A[bB]?<<<[ \t]*[\\\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\\\'"]?(?:\r\n|\n|\r)\z/\', ' . $args[1] . ', $matches); '
vendor/nikic/php-parser/grammar/rebuildParsers.php:207:                return '$attrs = $this->startAttributeStack[#1]; $stmts = ' . $args[0] . '; '
vendor/nikic/php-parser/grammar/rebuildParsers.php:209:                . '$stmts[0]->setAttribute(\'comments\', '
vendor/nikic/php-parser/grammar/rebuildParsers.php:210:                . 'array_merge($attrs[\'comments\'], $stmts[0]->getAttribute(\'comments\', []))); }';
vendor/nikic/php-parser/grammar/rebuildParsers.php:226:    $code = preg_replace('/\$\d+/', '$this->semStack[$0]', $code);
vendor/nikic/php-parser/grammar/php5.y:9:    top_statement_list                                      { $$ = $this->handleNamespaces($1); }
vendor/nikic/php-parser/grammar/php5.y:19:          { makeNop($nop, $this->lookaheadStartAttributes);
vendor/nikic/php-parser/grammar/php5.y:57:          { $$ = Stmt\HaltCompiler[$this->lexer->handleHaltCompiler()]; }
vendor/nikic/php-parser/grammar/php5.y:60:            $$->setAttribute('kind', Stmt\Namespace_::KIND_SEMICOLON);
vendor/nikic/php-parser/grammar/php5.y:61:            $this->checkNamespace($$); }
vendor/nikic/php-parser/grammar/php5.y:64:            $$->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
vendor/nikic/php-parser/grammar/php5.y:65:            $this->checkNamespace($$); }
vendor/nikic/php-parser/grammar/php5.y:68:            $$->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
vendor/nikic/php-parser/grammar/php5.y:69:            $this->checkNamespace($$); }
vendor/nikic/php-parser/grammar/php5.y:111:          { $$ = Stmt\UseUse[$1, null, Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($$, #1); }
vendor/nikic/php-parser/grammar/php5.y:113:          { $$ = Stmt\UseUse[$1, $3, Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($$, #3); }
vendor/nikic/php-parser/grammar/php5.y:122:      unprefixed_use_declaration                            { $$ = $1; $$->type = Stmt\Use_::TYPE_NORMAL; }
vendor/nikic/php-parser/grammar/php5.y:123:    | use_type unprefixed_use_declaration                   { $$ = $2; $$->type = $1; }
vendor/nikic/php-parser/grammar/php5.y:151:          { makeNop($nop, $this->lookaheadStartAttributes);
vendor/nikic/php-parser/grammar/php5.y:169:            makeNop($$, $this->startAttributeStack[#1]);
vendor/nikic/php-parser/grammar/php5.y:201:          { $$ = Stmt\TryCatch[$3, $5, $6]; $this->checkTryCatch($$); }
vendor/nikic/php-parser/grammar/php5.y:212:          { makeNop($$, $this->startAttributeStack[#1]);
vendor/nikic/php-parser/grammar/php5.y:254:            $this->checkClass($$, #2); }
vendor/nikic/php-parser/grammar/php5.y:257:            $this->checkInterface($$, #2); }
vendor/nikic/php-parser/grammar/php5.y:386:          { $$ = Node\Param[parseVar($4), null, $1, $2, $3]; $this->checkParam($$); }
vendor/nikic/php-parser/grammar/php5.y:388:          { $$ = Node\Param[parseVar($4), $6, $1, $2, $3]; $this->checkParam($$); }
vendor/nikic/php-parser/grammar/php5.y:452:          { $$ = Stmt\Property[$1, $2]; $this->checkProperty($$, #1); }
vendor/nikic/php-parser/grammar/php5.y:456:            $this->checkClassMethod($$, #1); }
vendor/nikic/php-parser/grammar/php5.y:508:    | non_empty_member_modifiers member_modifier            { $this->checkModifier($1, $2, #2); $$ = $1 | $2; }
vendor/nikic/php-parser/grammar/php5.y:574:    | expr '-' expr                                         { $$ = Expr\BinaryOp\Minus     [$1, $3]; }
vendor/nikic/php-parser/grammar/php5.y:582:    | '-' expr %prec T_INC                                  { $$ = Expr\UnaryMinus[$2]; }
vendor/nikic/php-parser/grammar/php5.y:667:            $this->checkClass($$[0], -1); }
vendor/nikic/php-parser/grammar/php5.y:697:                $$ = Expr\StaticCall[$1->class, Expr\Variable[$1->name], $2];
vendor/nikic/php-parser/grammar/php5.y:700:                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
vendor/nikic/php-parser/grammar/php5.y:701:                    $tmp = $tmp->var;
vendor/nikic/php-parser/grammar/php5.y:704:                $$ = Expr\StaticCall[$tmp->var->class, $1, $2];
vendor/nikic/php-parser/grammar/php5.y:705:                $tmp->var = Expr\Variable[$tmp->var->name];
vendor/nikic/php-parser/grammar/php5.y:770:      T_LNUMBER                                             { $$ = $this->parseLNumber($1, attributes(), true); }
vendor/nikic/php-parser/grammar/php5.y:811:    | static_scalar '-' static_scalar                       { $$ = Expr\BinaryOp\Minus     [$1, $3]; }
vendor/nikic/php-parser/grammar/php5.y:819:    | '-' static_scalar %prec T_INC                         { $$ = Expr\UnaryMinus[$2]; }
vendor/nikic/php-parser/grammar/php5.y:942:    | error                                                 { $$ = Expr\Error[]; $this->errorState = 2; }
vendor/nikic/php-parser/grammar/php5.y:1005:    | T_NUM_STRING                                          { $$ = $this->parseNumString($1, attributes()); }
vendor/nikic/php-parser/.travis.yml:7:    - $HOME/.composer/cache
vendor/nikic/php-parser/.travis.yml:10:  - 5.5
vendor/nikic/php-parser/.travis.yml:11:  - 5.6
vendor/nikic/php-parser/.travis.yml:12:  - 7.0
vendor/nikic/php-parser/.travis.yml:13:  - nightly
vendor/nikic/php-parser/.travis.yml:14:  - hhvm
vendor/nikic/php-parser/.travis.yml:17:  - if [ $TRAVIS_PHP_VERSION = '5.6' ]; then composer require satooshi/php-coveralls '~1.0'; fi
vendor/nikic/php-parser/.travis.yml:18:  - composer install --prefer-dist
vendor/nikic/php-parser/.travis.yml:22:    - php: nightly
vendor/nikic/php-parser/.travis.yml:26:  - if [ $TRAVIS_PHP_VERSION = '5.6' ]; then vendor/bin/phpunit --coverage-clover build/logs/clover.xml; else vendor/bin/phpunit; fi
vendor/nikic/php-parser/.travis.yml:27:  - if [ $TRAVIS_PHP_VERSION = '7.0' ]; then test_old/run-php-src.sh; fi
vendor/nikic/php-parser/phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/nikic/php-parser/UPGRADE-1.0.md:1:Upgrading from PHP-Parser 0.9 to 1.0
vendor/nikic/php-parser/UPGRADE-1.0.md:6:PHP-Parser now requires PHP 5.3 or newer to run. It is however still possible to *parse* PHP 5.2 source code, while
vendor/nikic/php-parser/UPGRADE-1.0.md:29:Note that the `PHPParser` prefix was changed to `PhpParser`. While PHP class names are technically case-insensitive,
vendor/nikic/php-parser/UPGRADE-1.0.md:98:    project built on top of PHP-Parser instead.
vendor/nikic/php-parser/UPGRADE-1.0.md:107:        return 'trait ' . $node->name
vendor/nikic/php-parser/UPGRADE-1.0.md:108:             . "\n" . '{' . "\n" . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/UPGRADE-1.0.md:116:        return 'trait ' . $node->name
vendor/nikic/php-parser/UPGRADE-1.0.md:117:             . "\n" . '{' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/UPGRADE-1.0.md:121:  [code_gen]: https://github.com/nikic/PHP-Parser/wiki/Projects-using-the-PHP-Parser#code-generation
vendor/nikic/php-parser/UPGRADE-3.0.md:1:Upgrading from PHP-Parser 2.x to 3.0
vendor/nikic/php-parser/UPGRADE-3.0.md:4:The backwards-incompatible changes in this release may be summarized as follows:
vendor/nikic/php-parser/UPGRADE-3.0.md:14:PHP-Parser now requires PHP 5.5 or newer to run. It is however still possible to *parse* PHP 5.2,
vendor/nikic/php-parser/UPGRADE-3.0.md:46:$parser = (new ParserFactory)->create(ParserFactor::ONLY_PHP7, $lexer, [
vendor/nikic/php-parser/UPGRADE-3.0.md:50:$stmts = $parser->parse($code);
vendor/nikic/php-parser/UPGRADE-3.0.md:51:$errors = $parser->getErrors();
vendor/nikic/php-parser/UPGRADE-3.0.md:58:Both the `throwOnError` option and the `getErrors()` method have been removed in PHP-Parser 3.0.
vendor/nikic/php-parser/UPGRADE-3.0.md:63:$parser = (new ParserFactory)->create(ParserFactor::ONLY_PHP7, $lexer);
vendor/nikic/php-parser/UPGRADE-3.0.md:66:$stmts = $parser->parse($code, $errorHandler);
vendor/nikic/php-parser/UPGRADE-3.0.md:67:if ($errorHandler->hasErrors()) {
vendor/nikic/php-parser/UPGRADE-3.0.md:68:    handleErrors($errorHandler->getErrors());
vendor/nikic/php-parser/UPGRADE-3.0.md:76:`PREFER_PHP7` or `PREFER_PHP5`), it will now return the result of the first *non-throwing* parse. As
vendor/nikic/php-parser/UPGRADE-3.0.md:81:`global $$foo->bar` are not supported (other differences are in representation only). The PHP 7
vendor/nikic/php-parser/UPGRADE-3.0.md:93:$stmts7 = $parser7->parse($code, $errors7);
vendor/nikic/php-parser/UPGRADE-3.0.md:94:if ($errors7->hasErrors()) {
vendor/nikic/php-parser/UPGRADE-3.0.md:96:    $stmts5 = $parser5->parse($code, $errors5);
vendor/nikic/php-parser/UPGRADE-3.0.md:97:    if (!$errors5->hasErrors()) {
vendor/nikic/php-parser/bin/php-parse:14:ini_set('xdebug.var_display_max_children', -1);
vendor/nikic/php-parser/bin/php-parse:15:ini_set('xdebug.var_display_max_data', -1);
vendor/nikic/php-parser/bin/php-parse:16:ini_set('xdebug.var_display_max_depth', -1);
vendor/nikic/php-parser/bin/php-parse:32:$parser = (new PhpParser\ParserFactory)->create(
vendor/nikic/php-parser/bin/php-parse:38:    'dumpPositions' => $attributes['with-positions'],
vendor/nikic/php-parser/bin/php-parse:44:$traverser->addVisitor(new PhpParser\NodeVisitor\NameResolver);
vendor/nikic/php-parser/bin/php-parse:59:    if ($attributes['with-recovery']) {
vendor/nikic/php-parser/bin/php-parse:61:        $stmts = $parser->parse($code, $errorHandler);
vendor/nikic/php-parser/bin/php-parse:62:        foreach ($errorHandler->getErrors() as $error) {
vendor/nikic/php-parser/bin/php-parse:63:            $message = formatErrorMessage($error, $code, $attributes['with-column-info']);
vendor/nikic/php-parser/bin/php-parse:71:            $stmts = $parser->parse($code);
vendor/nikic/php-parser/bin/php-parse:73:            $message = formatErrorMessage($error, $code, $attributes['with-column-info']);
vendor/nikic/php-parser/bin/php-parse:81:            echo $dumper->dump($stmts, $code), "\n";
vendor/nikic/php-parser/bin/php-parse:82:        } elseif ('pretty-print' === $operation) {
vendor/nikic/php-parser/bin/php-parse:84:            echo $prettyPrinter->prettyPrintFile($stmts), "\n";
vendor/nikic/php-parser/bin/php-parse:85:        } elseif ('serialize-xml' === $operation) {
vendor/nikic/php-parser/bin/php-parse:87:            echo $serializer->serialize($stmts), "\n";
vendor/nikic/php-parser/bin/php-parse:88:        } elseif ('var-dump' === $operation) {
vendor/nikic/php-parser/bin/php-parse:91:        } elseif ('resolve-names' === $operation) {
vendor/nikic/php-parser/bin/php-parse:93:            $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/bin/php-parse:99:    if ($withColumnInfo && $e->hasColumnInfo()) {
vendor/nikic/php-parser/bin/php-parse:100:        return $e->getMessageWithColumnInfo($code);
vendor/nikic/php-parser/bin/php-parse:102:        return $e->getMessage();
vendor/nikic/php-parser/bin/php-parse:111:Usage: php-parse [operations] file1.php [file2.php ...]
vendor/nikic/php-parser/bin/php-parse:112:   or: php-parse [operations] "<?php code"
vendor/nikic/php-parser/bin/php-parse:115:Operations is a list of the following options (--dump by default):
vendor/nikic/php-parser/bin/php-parse:117:    -d, --dump              Dump nodes using NodeDumper
vendor/nikic/php-parser/bin/php-parse:118:    -p, --pretty-print      Pretty print file using PrettyPrinter\Standard
vendor/nikic/php-parser/bin/php-parse:119:        --serialize-xml     Serialize nodes using Serializer\XML
vendor/nikic/php-parser/bin/php-parse:120:        --var-dump          var_dump() nodes (for exact structure)
vendor/nikic/php-parser/bin/php-parse:121:    -N, --resolve-names     Resolve names using NodeVisitor\NameResolver
vendor/nikic/php-parser/bin/php-parse:122:    -c, --with-column-info  Show column-numbers for errors (if available)
vendor/nikic/php-parser/bin/php-parse:123:    -P, --with-positions    Show positions in node dumps
vendor/nikic/php-parser/bin/php-parse:124:    -r, --with-recovery     Use parsing with error recovery
vendor/nikic/php-parser/bin/php-parse:125:    -h, --help              Display this page
vendor/nikic/php-parser/bin/php-parse:128:    php-parse -d -p -N -d file.php
vendor/nikic/php-parser/bin/php-parse:141:        'with-column-info' => false,
vendor/nikic/php-parser/bin/php-parse:142:        'with-positions' => false,
vendor/nikic/php-parser/bin/php-parse:143:        'with-recovery' => false,
vendor/nikic/php-parser/bin/php-parse:155:            case '--dump':
vendor/nikic/php-parser/bin/php-parse:156:            case '-d':
vendor/nikic/php-parser/bin/php-parse:159:            case '--pretty-print':
vendor/nikic/php-parser/bin/php-parse:160:            case '-p':
vendor/nikic/php-parser/bin/php-parse:161:                $operations[] = 'pretty-print';
vendor/nikic/php-parser/bin/php-parse:163:            case '--serialize-xml':
vendor/nikic/php-parser/bin/php-parse:164:                $operations[] = 'serialize-xml';
vendor/nikic/php-parser/bin/php-parse:166:            case '--var-dump':
vendor/nikic/php-parser/bin/php-parse:167:                $operations[] = 'var-dump';
vendor/nikic/php-parser/bin/php-parse:169:            case '--resolve-names':
vendor/nikic/php-parser/bin/php-parse:170:            case '-N';
vendor/nikic/php-parser/bin/php-parse:171:                $operations[] = 'resolve-names';
vendor/nikic/php-parser/bin/php-parse:173:            case '--with-column-info':
vendor/nikic/php-parser/bin/php-parse:174:            case '-c';
vendor/nikic/php-parser/bin/php-parse:175:                $attributes['with-column-info'] = true;
vendor/nikic/php-parser/bin/php-parse:177:            case '--with-positions':
vendor/nikic/php-parser/bin/php-parse:178:            case '-P':
vendor/nikic/php-parser/bin/php-parse:179:                $attributes['with-positions'] = true;
vendor/nikic/php-parser/bin/php-parse:181:            case '--with-recovery':
vendor/nikic/php-parser/bin/php-parse:182:            case '-r':
vendor/nikic/php-parser/bin/php-parse:183:                $attributes['with-recovery'] = true;
vendor/nikic/php-parser/bin/php-parse:185:            case '--help':
vendor/nikic/php-parser/bin/php-parse:186:            case '-h';
vendor/nikic/php-parser/bin/php-parse:189:            case '--':
vendor/nikic/php-parser/bin/php-parse:193:                if ($arg[0] === '-') {
vendor/nikic/php-parser/LICENSE:1:Copyright (c) 2011-2018 by Nikita Popov.
vendor/nikic/php-parser/CHANGELOG.md:1:Version 3.1.6-dev
vendor/nikic/php-parser/CHANGELOG.md:2:-----------------
vendor/nikic/php-parser/CHANGELOG.md:6:Version 3.1.5 (2018-02-28)
vendor/nikic/php-parser/CHANGELOG.md:7:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:12:* Improve compatibility with PHP-Scoper. (#477)
vendor/nikic/php-parser/CHANGELOG.md:14:Version 3.1.4 (2018-01-25)
vendor/nikic/php-parser/CHANGELOG.md:15:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:19:* Fixed pretty printing of `-(-$x)` and `+(+$x)`. (#459)
vendor/nikic/php-parser/CHANGELOG.md:21:Version 3.1.3 (2017-12-26)
vendor/nikic/php-parser/CHANGELOG.md:22:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:26:* Improve compatibility with php-scoper, by supporting prefixed namespaces in
vendor/nikic/php-parser/CHANGELOG.md:29:Version 3.1.2 (2017-11-04)
vendor/nikic/php-parser/CHANGELOG.md:30:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:42:Version 3.1.1 (2017-09-02)
vendor/nikic/php-parser/CHANGELOG.md:43:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:47:* Fixed syntax error on comment after brace-style namespace declaration. (#412)
vendor/nikic/php-parser/CHANGELOG.md:50:Version 3.1.0 (2017-07-28)
vendor/nikic/php-parser/CHANGELOG.md:51:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:61:* Floating-point numbers are now printed correctly if the LC_NUMERIC locale uses a comma as decimal
vendor/nikic/php-parser/CHANGELOG.md:68:Version 3.0.6 (2017-06-28)
vendor/nikic/php-parser/CHANGELOG.md:69:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:87:Version 3.0.5 (2017-03-05)
vendor/nikic/php-parser/CHANGELOG.md:88:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:98:Version 3.0.4 (2017-02-10)
vendor/nikic/php-parser/CHANGELOG.md:99:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:104:  into `p()`, instead of directly dispatching to the type-specific printing method).
vendor/nikic/php-parser/CHANGELOG.md:105:* Fixed notice in `bin/php-parse` script.
vendor/nikic/php-parser/CHANGELOG.md:112:Version 3.0.3 (2017-02-03)
vendor/nikic/php-parser/CHANGELOG.md:113:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:120:* Throw a `LogicException` when trying to pretty-print an `Error` node. Previously this resulted in
vendor/nikic/php-parser/CHANGELOG.md:125:* [PHP 7.1] Added support for negative interpolated offsets: `"$foo[-1]"`
vendor/nikic/php-parser/CHANGELOG.md:128:* Added `php-parse --with-positions` option, which dumps nodes with position information.
vendor/nikic/php-parser/CHANGELOG.md:135:Version 3.0.2 (2016-12-06)
vendor/nikic/php-parser/CHANGELOG.md:136:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:141:* Fixed pretty-printing of nullable types.
vendor/nikic/php-parser/CHANGELOG.md:143:Version 3.0.1 (2016-12-01)
vendor/nikic/php-parser/CHANGELOG.md:144:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:152:Version 3.0.0 (2016-11-30)
vendor/nikic/php-parser/CHANGELOG.md:153:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:160:Version 3.0.0-beta2 (2016-10-29)
vendor/nikic/php-parser/CHANGELOG.md:161:--------------------------------
vendor/nikic/php-parser/CHANGELOG.md:170:* Added support for recovering from "special" errors (i.e. non-syntax parse errors).
vendor/nikic/php-parser/CHANGELOG.md:203:Version 3.0.0-beta1 (2016-09-16)
vendor/nikic/php-parser/CHANGELOG.md:204:--------------------------------
vendor/nikic/php-parser/CHANGELOG.md:214:* Partial parsing of `$obj->` (with missing property name) is now supported in error recovery mode.
vendor/nikic/php-parser/CHANGELOG.md:215:* The error recovery mode is now exposed in the `php-parse` script through the `--with-recovery`
vendor/nikic/php-parser/CHANGELOG.md:216:  or `-r` flags.
vendor/nikic/php-parser/CHANGELOG.md:218:The following changes are also part of PHP-Parser 2.1.1:
vendor/nikic/php-parser/CHANGELOG.md:221:* Comments on free-standing code blocks will now be retained as comments on the first statement in
vendor/nikic/php-parser/CHANGELOG.md:224:Version 3.0.0-alpha1 (2016-07-25)
vendor/nikic/php-parser/CHANGELOG.md:225:---------------------------------
vendor/nikic/php-parser/CHANGELOG.md:237:  appear as the left-hand-side of assignments and foreach value targets. Additionally the array
vendor/nikic/php-parser/CHANGELOG.md:241:* [7.1] Added support for multi-catch. The `Catch` subnode `type` has been renamed to `types` and
vendor/nikic/php-parser/CHANGELOG.md:272:* Removed support for running on PHP 5.4. It is however still possible to parse PHP 5.2-5.4 code
vendor/nikic/php-parser/CHANGELOG.md:277:Version 2.1.1 (2016-09-16)
vendor/nikic/php-parser/CHANGELOG.md:278:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:282:* The pretty printer will now escape all control characters in the range `\x00-\x1F` inside double
vendor/nikic/php-parser/CHANGELOG.md:287:* Comments on free-standing code blocks will no be retained as comments on the first statement in
vendor/nikic/php-parser/CHANGELOG.md:290:Version 2.1.0 (2016-04-19)
vendor/nikic/php-parser/CHANGELOG.md:291:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:296:* Fixed reformatting of indented parts in a certain non-standard comment style.
vendor/nikic/php-parser/CHANGELOG.md:308:  single-quoted, double-quoted, heredoc and nowdoc string.
vendor/nikic/php-parser/CHANGELOG.md:313:* Added `-h` and `--help` options to `php-parse` script.
vendor/nikic/php-parser/CHANGELOG.md:330:* The internal (but public) method `Scalar\LNumber::parse()` has been removed. A non-internal
vendor/nikic/php-parser/CHANGELOG.md:333:Version 2.0.1 (2016-02-28)
vendor/nikic/php-parser/CHANGELOG.md:334:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:341:* Magic constants are now supported as semi-reserved keywords.
vendor/nikic/php-parser/CHANGELOG.md:349:Version 2.0.0 (2015-12-04)
vendor/nikic/php-parser/CHANGELOG.md:350:--------------------------
vendor/nikic/php-parser/CHANGELOG.md:359:Version 2.0.0-beta1 (2015-10-21)
vendor/nikic/php-parser/CHANGELOG.md:360:--------------------------------
vendor/nikic/php-parser/CHANGELOG.md:370:* Renamed `php-parse.php` to `php-parse` and registered it as a composer bin.
vendor/nikic/php-parser/CHANGELOG.md:371:* Use composer PSR-4 autoloader instead of custom autoloader.
vendor/nikic/php-parser/CHANGELOG.md:378:Version 2.0.0-alpha1 (2015-07-14)
vendor/nikic/php-parser/CHANGELOG.md:379:---------------------------------
vendor/nikic/php-parser/CHANGELOG.md:382:[upgrading guide](UPGRADE-2.0.md).
vendor/nikic/php-parser/CHANGELOG.md:388:* Removed legacy class name aliases. This includes the old non-namespaced class names and the old
vendor/nikic/php-parser/CHANGELOG.md:404:* Added `Name->slice()` which takes a subslice of a name.
vendor/nikic/php-parser/CHANGELOG.md:411:* The `Name->set()`, `Name->append()`, `Name->prepend()` and `Name->setFirst()` methods are
vendor/nikic/php-parser/CHANGELOG.md:412:  deprecated in favor of `Name::concat()` and `Name->slice()`.
vendor/nikic/php-parser/CHANGELOG.md:418:---
vendor/nikic/php-parser/CHANGELOG.md:421:[1.x series changelog](https://github.com/nikic/PHP-Parser/blob/1.x/CHANGELOG.md) and the
vendor/nikic/php-parser/CHANGELOG.md:422:[0.9 series changelog](https://github.com/nikic/PHP-Parser/blob/0.9/CHANGELOG.md).**
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor.php:11:     *  * null:      $nodes stays as-is
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor.php:25:     *        => $node stays as-is
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor.php:27:     *        => Children of $node are not traversed. $node stays as-is
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor.php:29:     *        => Traversal is aborted. $node stays as-is
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor.php:44:     *        => $node stays as-is
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor.php:48:     *        => Traversal is aborted. $node stays as-is
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor.php:64:     *  * null:      $nodes stays as-is
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:43:        $this->visitors = array();
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:52:        $this->visitors[] = $visitor;
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:61:        foreach ($this->visitors as $index => $storedVisitor) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:63:                unset($this->visitors[$index]);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:77:        $this->stopTraversal = false;
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:79:        foreach ($this->visitors as $visitor) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:80:            if (null !== $return = $visitor->beforeTraverse($nodes)) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:85:        $nodes = $this->traverseArray($nodes);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:87:        foreach ($this->visitors as $visitor) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:88:            if (null !== $return = $visitor->afterTraverse($nodes)) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:97:        foreach ($node->getSubNodeNames() as $name) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:98:            $subNode =& $node->$name;
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:101:                $subNode = $this->traverseArray($subNode);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:102:                if ($this->stopTraversal) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:107:                foreach ($this->visitors as $visitor) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:108:                    $return = $visitor->enterNode($subNode);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:112:                        $this->stopTraversal = true;
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:120:                    $subNode = $this->traverseNode($subNode);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:121:                    if ($this->stopTraversal) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:126:                foreach ($this->visitors as $visitor) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:127:                    $return = $visitor->leaveNode($subNode);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:129:                        $this->stopTraversal = true;
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:152:                $node = $this->traverseArray($node);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:153:                if ($this->stopTraversal) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:158:                foreach ($this->visitors as $visitor) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:159:                    $return = $visitor->enterNode($node);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:163:                        $this->stopTraversal = true;
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:171:                    $node = $this->traverseNode($node);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:172:                    if ($this->stopTraversal) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:177:                foreach ($this->visitors as $visitor) {
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:178:                    $return = $visitor->leaveNode($node);
vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php:184:                        $this->stopTraversal = true;
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:28:        $this->dumpComments = !empty($options['dumpComments']);
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:29:        $this->dumpPositions = !empty($options['dumpPositions']);
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:43:        $this->code = $code;
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:44:        return $this->dumpRecursive($node);
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:49:            $r = $node->getType();
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:50:            if ($this->dumpPositions && null !== $p = $this->dumpPosition($node)) {
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:55:            foreach ($node->getSubNodeNames() as $key) {
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:58:                $value = $node->$key;
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:67:                        $r .= $this->dumpFlags($value);
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:69:                        $r .= $this->dumpIncludeType($value);
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:72:                        $r .= $this->dumpUseType($value);
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:77:                    $r .= str_replace("\n", "\n    ", $this->dumpRecursive($value));
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:81:            if ($this->dumpComments && $comments = $node->getAttribute('comments')) {
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:82:                $r .= "\n    comments: " . str_replace("\n", "\n    ", $this->dumpRecursive($comments));
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:99:                    $r .= str_replace("\n", "\n    ", $this->dumpRecursive($value));
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:103:            return $node->getReformattedText();
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:168:        if (!$node->hasAttribute('startLine') || !$node->hasAttribute('endLine')) {
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:172:        $start = $node->getAttribute('startLine');
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:173:        $end = $node->getAttribute('endLine');
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:174:        if ($node->hasAttribute('startFilePos') && $node->hasAttribute('endFilePos')
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:175:            && null !== $this->code
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:177:            $start .= ':' . $this->toColumn($this->code, $node->getAttribute('startFilePos'));
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:178:            $end .= ':' . $this->toColumn($this->code, $node->getAttribute('endFilePos'));
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:180:        return "[$start - $end]";
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:189:        $lineStartPos = strrpos($code, "\n", $pos - strlen($code));
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:191:            $lineStartPos = -1;
vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php:194:        return $pos - $lineStartPos;
vendor/nikic/php-parser/lib/PhpParser/Comment.php:18:    public function __construct($text, $startLine = -1, $startFilePos = -1) {
vendor/nikic/php-parser/lib/PhpParser/Comment.php:19:        $this->text = $text;
vendor/nikic/php-parser/lib/PhpParser/Comment.php:20:        $this->line = $startLine;
vendor/nikic/php-parser/lib/PhpParser/Comment.php:21:        $this->filePos = $startFilePos;
vendor/nikic/php-parser/lib/PhpParser/Comment.php:30:        return $this->text;
vendor/nikic/php-parser/lib/PhpParser/Comment.php:39:        return $this->line;
vendor/nikic/php-parser/lib/PhpParser/Comment.php:48:        return $this->filePos;
vendor/nikic/php-parser/lib/PhpParser/Comment.php:57:        return $this->text;
vendor/nikic/php-parser/lib/PhpParser/Comment.php:71:        $text = trim($this->text);
vendor/nikic/php-parser/lib/PhpParser/Comment.php:85:            return preg_replace('(^\s+\*)m', ' *', $this->text);
vendor/nikic/php-parser/lib/PhpParser/Comment.php:108:            $prefixLen = $this->getShortestWhitespacePrefixLen(substr($text, $newlinePos + 1));
vendor/nikic/php-parser/lib/PhpParser/Comment.php:109:            $removeLen = $prefixLen - strlen($matches[0]);
vendor/nikic/php-parser/lib/PhpParser/Comment.php:135:            'text' => $this->text,
vendor/nikic/php-parser/lib/PhpParser/Comment.php:136:            'line' => $this->line,
vendor/nikic/php-parser/lib/PhpParser/Comment.php:137:            'filePos' => $this->filePos,
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:17:        $this->reader = new XMLReader;
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:21:        $this->reader->XML($string);
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:23:        $this->reader->read();
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:24:        if ('AST' !== $this->reader->name) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:28:        return $this->read($this->reader->depth);
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:33:        while ($this->reader->read() && $depthLimit < $this->reader->depth) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:34:            if (XMLReader::ELEMENT !== $this->reader->nodeType) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:38:            if ('node' === $this->reader->prefix) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:39:                return $this->readNode();
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:40:            } elseif ('scalar' === $this->reader->prefix) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:41:                return $this->readScalar();
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:42:            } elseif ('comment' === $this->reader->name) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:43:                return $this->readComment();
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:45:                throw new DomainException(sprintf('Unexpected node of type "%s"', $this->reader->name));
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:56:        $className = $this->getClassNameFromType($this->reader->localName);
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:66:        $depthLimit = $this->reader->depth;
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:67:        while ($this->reader->read() && $depthLimit < $this->reader->depth) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:68:            if (XMLReader::ELEMENT !== $this->reader->nodeType) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:72:            $type = $this->reader->prefix;
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:75:                    sprintf('Expected sub node or attribute, got node of type "%s"', $this->reader->name)
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:79:            $name = $this->reader->localName;
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:80:            $value = $this->read($this->reader->depth);
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:83:                $node->$name = $value;
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:85:                $node->setAttribute($name, $value);
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:93:        switch ($name = $this->reader->localName) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:95:                $depth = $this->reader->depth;
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:98:                    $node = $this->read($depth, false, $nodeFound);
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:106:                return $this->reader->readString();
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:108:                return $this->parseInt($this->reader->readString());
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:110:                $text = $this->reader->readString();
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:118:                if (!$this->reader->isEmptyElement) {
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:135:        $className = $this->reader->getAttribute('isDocComment') === 'true'
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:140:            $this->reader->readString(),
vendor/nikic/php-parser/lib/PhpParser/Unserializer/XML.php:141:            $this->parseInt($this->reader->getAttribute('line'))
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:22:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:31:        $this->setModifier(Stmt\Class_::MODIFIER_PUBLIC);
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:42:        $this->setModifier(Stmt\Class_::MODIFIER_PROTECTED);
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:53:        $this->setModifier(Stmt\Class_::MODIFIER_PRIVATE);
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:64:        $this->setModifier(Stmt\Class_::MODIFIER_STATIC);
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:77:        $this->default = $this->normalizeValue($value);
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:90:        $this->attributes = array(
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:91:            'comments' => array($this->normalizeDocComment($docComment))
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:104:            $this->flags !== 0 ? $this->flags : Stmt\Class_::MODIFIER_PUBLIC,
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:106:                new Stmt\PropertyProperty($this->name, $this->default)
vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php:108:            $this->attributes
vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php:27:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php:38:        $this->default = $this->normalizeValue($value);
vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php:51:        $this->type = $this->normalizeType($type);
vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php:52:        if ($this->type === 'void') {
vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php:65:        $this->byRef = true;
vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php:76:        $this->variadic = true;
vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php:88:            $this->name, $this->default, $this->type, $this->byRef, $this->variadic
vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php:20:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php:31:        $this->stmts[] = $this->normalizeNode($stmt);
vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php:42:        return new Stmt\Function_($this->name, array(
vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php:43:            'byRef'      => $this->returnByRef,
vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php:44:            'params'     => $this->params,
vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php:45:            'returnType' => $this->returnType,
vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php:46:            'stmts'      => $this->stmts,
vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php:47:        ), $this->attributes);
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:22:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:34:            $this->extends[] = $this->normalizeName($interface);
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:48:        $stmt = $this->normalizeNode($stmt);
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:50:        $type = $stmt->getType();
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:53:                $this->constants[] = $stmt;
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:58:                $stmt->stmts = null;
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:59:                $this->methods[] = $stmt;
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:75:        return new Stmt\Interface_($this->name, array(
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:76:            'extends' => $this->extends,
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:77:            'stmts' => array_merge($this->constants, $this->methods),
vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php:78:        ), $this->attributes);
vendor/nikic/php-parser/lib/PhpParser/Builder/Use_.php:24:        $this->name = $this->normalizeName($name);
vendor/nikic/php-parser/lib/PhpParser/Builder/Use_.php:25:        $this->type = $type;
vendor/nikic/php-parser/lib/PhpParser/Builder/Use_.php:36:        $this->alias = $alias;
vendor/nikic/php-parser/lib/PhpParser/Builder/Use_.php:53:        $alias = null !== $this->alias ? $this->alias : $this->name->getLast();
vendor/nikic/php-parser/lib/PhpParser/Builder/Use_.php:55:            new Stmt\UseUse($this->name, $alias)
vendor/nikic/php-parser/lib/PhpParser/Builder/Use_.php:56:        ), $this->type);
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:23:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:32:        $this->setModifier(Stmt\Class_::MODIFIER_PUBLIC);
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:43:        $this->setModifier(Stmt\Class_::MODIFIER_PROTECTED);
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:54:        $this->setModifier(Stmt\Class_::MODIFIER_PRIVATE);
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:65:        $this->setModifier(Stmt\Class_::MODIFIER_STATIC);
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:76:        if (!empty($this->stmts)) {
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:80:        $this->setModifier(Stmt\Class_::MODIFIER_ABSTRACT);
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:81:        $this->stmts = null; // abstract methods don't have statements
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:92:        $this->setModifier(Stmt\Class_::MODIFIER_FINAL);
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:105:        if (null === $this->stmts) {
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:109:        $this->stmts[] = $this->normalizeNode($stmt);
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:120:        return new Stmt\ClassMethod($this->name, array(
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:121:            'flags'      => $this->flags,
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:122:            'byRef'      => $this->returnByRef,
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:123:            'params'     => $this->params,
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:124:            'returnType' => $this->returnType,
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:125:            'stmts'      => $this->stmts,
vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php:126:        ), $this->attributes);
vendor/nikic/php-parser/lib/PhpParser/Builder/Namespace_.php:20:        $this->name = null !== $name ? $this->normalizeName($name) : null;
vendor/nikic/php-parser/lib/PhpParser/Builder/Namespace_.php:31:        $this->stmts[] = $this->normalizeNode($stmt);
vendor/nikic/php-parser/lib/PhpParser/Builder/Namespace_.php:42:        return new Stmt\Namespace_($this->name, $this->stmts, $this->attributes);
vendor/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php:22:        $this->returnByRef = true;
vendor/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php:35:        $param = $this->normalizeNode($param);
vendor/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php:38:            throw new \LogicException(sprintf('Expected parameter node, got "%s"', $param->getType()));
vendor/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php:41:        $this->params[] = $param;
vendor/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php:55:            $this->addParam($param);
vendor/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php:71:        $this->returnType = $this->normalizeType($type);
vendor/nikic/php-parser/lib/PhpParser/Builder/Declaration.php:22:            $this->addStmt($stmt);
vendor/nikic/php-parser/lib/PhpParser/Builder/Declaration.php:36:        $this->attributes['comments'] = array(
vendor/nikic/php-parser/lib/PhpParser/Builder/Declaration.php:37:            $this->normalizeDocComment($docComment)
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:21:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:32:        $stmt = $this->normalizeNode($stmt);
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:35:            $this->properties[] = $stmt;
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:37:            $this->methods[] = $stmt;
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:39:            $this->uses[] = $stmt;
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:41:            throw new \LogicException(sprintf('Unexpected node of type "%s"', $stmt->getType()));
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:54:            $this->name, array(
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:55:                'stmts' => array_merge($this->uses, $this->properties, $this->methods)
vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php:56:            ), $this->attributes
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:28:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:39:        $this->extends = $this->normalizeName($class);
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:53:            $this->implements[] = $this->normalizeName($interface);
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:65:        $this->setModifier(Stmt\Class_::MODIFIER_ABSTRACT);
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:76:        $this->setModifier(Stmt\Class_::MODIFIER_FINAL);
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:89:        $stmt = $this->normalizeNode($stmt);
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:92:            'Stmt_TraitUse'    => &$this->uses,
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:93:            'Stmt_ClassConst'  => &$this->constants,
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:94:            'Stmt_Property'    => &$this->properties,
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:95:            'Stmt_ClassMethod' => &$this->methods,
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:98:        $type = $stmt->getType();
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:114:        return new Stmt\Class_($this->name, array(
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:115:            'flags' => $this->flags,
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:116:            'extends' => $this->extends,
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:117:            'implements' => $this->implements,
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:118:            'stmts' => array_merge($this->uses, $this->constants, $this->properties, $this->methods),
vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php:119:        ), $this->attributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Multiple.php:23:        $this->parsers = $parsers;
vendor/nikic/php-parser/lib/PhpParser/Parser/Multiple.php:31:        list($firstStmts, $firstError) = $this->tryParse($this->parsers[0], $errorHandler, $code);
vendor/nikic/php-parser/lib/PhpParser/Parser/Multiple.php:36:        for ($i = 1, $c = count($this->parsers); $i < $c; ++$i) {
vendor/nikic/php-parser/lib/PhpParser/Parser/Multiple.php:37:            list($stmts, $error) = $this->tryParse($this->parsers[$i], $errorHandler, $code);
vendor/nikic/php-parser/lib/PhpParser/Parser/Multiple.php:50:            $stmts = $parser->parse($code, $errorHandler);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:26:    protected $defaultAction = -32766;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:81:        "'-'",
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:238:          108,  109,  110,  111,  112,-32766,-32766,-32766,   97,   98,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:239:           99,    0,  241,  387, -282,-32766,-32766,-32766,-32766, -487,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:240:         1081,  544, 1084, 1082,  100,-32766,  664,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:241:        -32766,-32766,  591,  901,  903,-32766,   30,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:242:        -32766,-32766,-32766, 1034,-32766,  295,  592,  593,  594,  595,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:243:          596,  597,  598,-32766,  274,  658,  869,  870,  871,  868,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:248:          650,  641,  639,  640,  636,  637, -251,  628,  634,  635,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:254:           99,  218,  241,  996, -487, -443, -487,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:256:          222,   55,   56,   57,   58,   59,   60,   61,   62, -173,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:257:           24,  234,   63,  347,  393,-32766,-32766,-32766, 1001, 1002,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:258:          394,  228, 1034,  217,  729,-32766, 1000,   34,   19,  395,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:259:         1051,  396,  127,  397,  118,  398, -442,   24,  399,  984,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:260:           43,  267,   36,   37,  400,  351, -443,   38,  401, 1034,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:261:          248,   64,  289, 1000,  288,  290,  248,-32766,  741,  226,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:262:         -443, 1034,  404,  405,  406,  442,  291, -443,  371, -446,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:263:          376, -251,  409,  410,   26, 1006, 1007, 1008, 1009, 1003,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:264:         1004,  245,  977,-32766,-32766,-32766,  419, 1010, 1005,  349,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:265:         -488,  226,  549,  278,   65,-32766,  257, -442,  262,  266,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:266:          410,  660,  467,-32766, 1073,-32766, 1048, 1072,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:267:        -32766, -442,-32766,-32766,-32766, 1078,-32766, 1034, -442,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:268:         -445,   67, 1014,-32766,-32766,-32766,  266,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:269:         -479,  123,-32766,  660, -172,-32766,  418,-32766,  266,  531,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:270:        -32766,-32766,-32766,-32766,-32766,-32766,-32766,  223,-32766,  560,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:271:          977,-32766,  818,  819, -173,-32766,-32766,-32766,  818,  819,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:272:        -32766,-32766, -227,  561,-32766,   27,  224,-32766,  418,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:273:        -32766,  122, -441,-32766, -232,-32766,  824,   40,  124,  227,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:274:          -88,  791,  265,-32766,  984, 1052,-32766,-32766,-32766,  660,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:275:           94,   95,   96,-32766,  266,  364,-32766,-32766,-32766,   42,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:276:        -32766,  553,-32766,  122,-32766,-32766,-32766,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:277:        -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  363,  532,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:278:        -32766,  660,  554,-32766,  418,-32766, -477,    9,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:279:        -32766,-32766,-32766, -441,-32766, -488,-32766, -488,  249,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:280:          248,  660,  121,-32766,-32766,-32766,-32766, -441,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:281:          359,  555,-32766,  551, -441,-32766,  418,  517,  518,  115,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:282:          250,-32766, 1034,-32766,-32767,-32767,-32767,-32767,   92,   93,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:283:           94,   95,   96,   23,  308, -479,  504,   20,  344, -172,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:284:          225,  117,  741,  126,-32766,  533, -441,  564,  349,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:285:          660,  133,  847,-32766,-32766,  977,  120,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:286:          792,-32766,  119,-32766,  114,-32766,  345,  419,-32766,  113,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:287:          349,  130,-32766,-32766,-32766,  132,-32766,-32766,-32766,  738,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:288:          741,-32766,  660,  241,-32766,  418,-32766,  244,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:289:        -32766,-32766,-32766,-32766,  128,-32766,  753,-32766,  527,  266,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:290:        -32766,  741,  818,  819,-32766,-32766,-32766, -441,  100,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:291:        -32766,  129,  313,-32766,  680,  681,-32766,  418,   41,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:292:          660, -441,-32766,  453,-32766,  660,  321,-32766, -441,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:293:          777, -477,-32766,-32766,-32766, 1083,-32766,  261,-32766,  441,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:294:        -32766,  385,    8,-32766,  437,   24,  360,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:295:          497,  498,-32766,-32766,-32766,  501,-32766, 1034,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:296:          418, 1000,  818,  819,  660,  846,  575,-32766,-32766,  358,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:297:           -4,-32766,-32766,-32766,  301,-32766, 1076,-32766,  661,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:298:          455,  696,-32766,  858,  565,  513,-32766,-32766,-32766,  440,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:299:          977,-32766,-32766,  973,  446,-32766,  505,-32766,-32766,  418,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:300:         -133, -133, -133,-32766,-32766,-32766,-32766,  409,  410,  451,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:301:          542,  528,  509,  521,  510, -133,   12, -133,  -80, -133,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:302:          216, -133,  495,-32766,  458,-32766,-32766,-32766,-32766,   67,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:303:          348,  356,  259,  258,  266, 1016,-32766,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:305:          715,  760,  407,  408,  977,  761,  762,-32766,   11,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:306:        -32766,-32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,-32767,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:307:          264,  229,  348,  337, 1013,  852,  741,   17, -133,  256,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:308:         -212, -212, -212,  402,  403, -400,  348,    5,  307,  775,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:309:          758,   21,  672,  760,  407,  408,  329,  402,  403, -211,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:310:         -211, -211,  448,   24,  326,  348,  715,  760,  407,  408,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:312:           -4,-32766,-32766,-32766,  359,  715,  760,  407,  408,  755,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:313:          552,   33,  741,  573, -212,  574,  720,  842,  794,  778,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:314:           32,-32766,  851,-32766,-32766,  854,  853,  850,  977,  773,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:315:          785,  741,  718, -211,  786,  843,  741,  252,  334,  550,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:320:         1049, 1046, 1041, 1077, 1035, 1028,    0, -444, -467, -446,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:321:         -445,   22,   25,   31,   35,   39,   66,  338,  336,  275,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:323:           71,   70,   69,   68, -469,    0,  310,  475,  941,  491,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:324:          541,  944,   13,  969,  825,  998,  940,  988, -230,  -88,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:326:         -227, -228,    0,  957, -412,    0,  503,    0, 1040, 1075,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:412:          149,  149,  149,  149,   -1,  150,  150,  150,  150,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:413:          150,  150,  150,  150,  150,  150,   -1,  151,  150,  150,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:415:          150,  150,  150,  150,  150,  150,   -1,  151,  151,  151,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:418:          151,  151,  151,  151,  151,   -1,  152,  152,  152,  152,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:421:          152,  152,   -1,  153,  153,   -1,  154,   -1,  154,  154,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:422:          154,  154,  154,   -1,  155
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:426:            0,  568,  610,  624,  643,  182,  342,  567,   -2,   -2,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:427:           -2,   -2,  -36,  393,  110,  334,  110,  372,  422,  648,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:450:          222,  238,  228,  -45,  412,  183,  536,  759,  472,  229,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:451:          229,  118,  169,  -22,  -22,  -22,   49,  552,  582,  582,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:452:          582,  582,  225,  225,  582,  582,    4,  -37,  305,  305,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:454:          558,  667,  557,  681,  310,  283,   32,  605,  -16,  604,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:455:          569,  -16,  484,  404,  385,  737,   45,  583,   45,   45,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:456:           45,   45,   45,   45,   45,   45,   45,  -16,  -16,   45,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:484:          143,  143,  143,   -2,   -2,   -2,    0,    0,    0,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:485:           -2,  143,  143,  143,  143,  143,  143,  143,  143,  143,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:504:           -3,  128,  128,   -3,  128,  128,  128,  128,  128,  128,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:505:          -22,  -22,  -22,  -22,  364,  364,  364,  364,  364,  364,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:507:          571,  571,  364,  -22,  -22,  364,  364,  364,  364,  364,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:508:          364,  571,  364,  225,  225,  225,  364,  -16,  -16,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:510:            0,    0,  364,  364,  -16,    0,    0,    0,    0,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:663:           -1,   93,   -1,   -1,   -1,   60,   60,   60,   60,   93,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:664:           93,   60,   60,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:665:           -1,   -1,   60,   -1,   -1,   60,   93,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:666:           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:667:           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:668:           -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:669:           -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   93
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:673:            0,    0, -336,    0,    0,  137,    0,  113, -141,   57,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:674:          -20, -120,  -25,  124,  140,  132,   47,   75,    0,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:675:            4,   55,    0,  -17,    0,   46,    0,   58,    0,  -10,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:676:          -22,    0,    0,  198, -329,    0, -403,  220,    0,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:679:          107,    0,  -98,    0,  -43,  -60,    0,  -21,  -27, -441,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:680:            0,    2,  -55,    0,    0,  -15, -259,    0,   24,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:681:            0,   93,    3,    0,   74,    0,   50,   71,  -95,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:682:          228,    0,   45,  120,    0,  -14,    0,    0,    0,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:683:            0,    0,    0,    0,    0,    0,  109,    0,    0,  -29,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:684:            0,    0,   52,    0,    0,    0,  -24,    0,   -8,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:685:            0,    6,    0,    0,    0,    0,    0,    0,  -13,  -39,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:686:          231,  -53,    0,   70,    0,    0,  245,    0,  239,   -6,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:691:        -32768,  391,  579,    2,  580,  651,  659,  515,  411,  439,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:817:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:821:         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:825:         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:829:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:833:         $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $nop = null; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:834:            if ($nop !== null) { $this->semStack[$this->stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:838:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:842:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:846:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:850:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:854:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:858:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:862:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:866:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:870:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:874:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:878:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:882:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:886:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:890:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:894:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:898:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:902:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:906:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:910:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:914:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:918:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:922:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:926:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:930:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:934:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:938:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:942:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:946:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:950:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:954:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:958:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:962:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:966:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:970:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:974:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:978:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:982:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:986:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:990:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:994:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:998:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1002:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1006:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1010:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1014:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1018:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1022:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1026:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1030:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1034:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1038:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1042:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1046:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1050:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1054:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1058:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1062:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1066:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1070:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1074:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1078:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1082:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1086:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1090:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1094:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1098:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1102:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1106:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1110:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1114:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1118:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1122:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1126:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1130:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1134:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1138:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1142:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1146:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1150:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1154:         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1170:         $this->emitError(new Error('A trailing comma is not allowed here', $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1174:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1178:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1182:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1186:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1190:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1194:         $this->semValue = new Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1198:         $this->semValue = new Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1199:            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_SEMICOLON);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1200:            $this->checkNamespace($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1204:         $this->semValue = new Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1205:            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1206:            $this->checkNamespace($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1210:         $this->semValue = new Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1211:            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1212:            $this->checkNamespace($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1216:         $this->semValue = new Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1220:         $this->semValue = new Stmt\Use_($this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1224:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1228:         $this->semValue = new Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1232:         $this->semValue = Stmt\Use_::TYPE_FUNCTION;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1236:         $this->semValue = Stmt\Use_::TYPE_CONSTANT;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1240:         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(7-3)], $this->startAttributeStack[$this->stackPos-(7-3)] + $this->endAttributeStack[$this->stackPos-(7-3)]), $this->semStack[$this->stackPos-(7-6)], $this->semStack[$this->stackPos-(7-2)], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1244:         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(8-4)], $this->startAttributeStack[$this->stackPos-(8-4)] + $this->endAttributeStack[$this->stackPos-(8-4)]), $this->semStack[$this->stackPos-(8-7)], $this->semStack[$this->stackPos-(8-2)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1248:         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-2)] + $this->endAttributeStack[$this->stackPos-(6-2)]), $this->semStack[$this->stackPos-(6-5)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1252:         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(7-3)], $this->startAttributeStack[$this->stackPos-(7-3)] + $this->endAttributeStack[$this->stackPos-(7-3)]), $this->semStack[$this->stackPos-(7-6)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1256:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1260:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1264:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1268:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1272:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1276:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1280:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1284:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1288:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1292:         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $this->stackPos-(1-1));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1296:         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $this->stackPos-(3-3));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1300:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1304:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1308:         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; $this->semValue->type = Stmt\Use_::TYPE_NORMAL;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1312:         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; $this->semValue->type = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1316:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1320:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1324:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1328:         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1332:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1336:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1340:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1344:         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1348:         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1352:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1356:         $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $nop = null; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1357:            if ($nop !== null) { $this->semStack[$this->stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1361:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1365:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1369:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1373:         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1378:        if ($this->semStack[$this->stackPos-(3-2)]) {
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1379:            $this->semValue = $this->semStack[$this->stackPos-(3-2)]; $attrs = $this->startAttributeStack[$this->stackPos-(3-1)]; $stmts = $this->semValue; if (!empty($attrs['comments'])) {$stmts[0]->setAttribute('comments', array_merge($attrs['comments'], $stmts[0]->getAttribute('comments', []))); };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1381:            $startAttributes = $this->startAttributeStack[$this->stackPos-(3-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $this->semValue = null; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1382:            if (null === $this->semValue) { $this->semValue = array(); }
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1388:         $this->semValue = new Stmt\If_($this->semStack[$this->stackPos-(7-3)], ['stmts' => is_array($this->semStack[$this->stackPos-(7-5)]) ? $this->semStack[$this->stackPos-(7-5)] : array($this->semStack[$this->stackPos-(7-5)]), 'elseifs' => $this->semStack[$this->stackPos-(7-6)], 'else' => $this->semStack[$this->stackPos-(7-7)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1392:         $this->semValue = new Stmt\If_($this->semStack[$this->stackPos-(10-3)], ['stmts' => $this->semStack[$this->stackPos-(10-6)], 'elseifs' => $this->semStack[$this->stackPos-(10-7)], 'else' => $this->semStack[$this->stackPos-(10-8)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1396:         $this->semValue = new Stmt\While_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1400:         $this->semValue = new Stmt\Do_($this->semStack[$this->stackPos-(7-5)], is_array($this->semStack[$this->stackPos-(7-2)]) ? $this->semStack[$this->stackPos-(7-2)] : array($this->semStack[$this->stackPos-(7-2)]), $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1404:         $this->semValue = new Stmt\For_(['init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1408:         $this->semValue = new Stmt\Switch_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1412:         $this->semValue = new Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1416:         $this->semValue = new Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1420:         $this->semValue = new Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1424:         $this->semValue = new Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1428:         $this->semValue = new Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1432:         $this->semValue = new Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1436:         $this->semValue = new Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1440:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1444:         $this->semValue = new Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1448:         $this->semValue = new Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1452:         $this->semValue = new Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], ['keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1456:         $this->semValue = new Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1460:         $this->semValue = new Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); $this->checkTryCatch($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1464:         $this->semValue = new Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1468:         $this->semValue = new Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1472:         $this->semValue = new Stmt\Label($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1476:         $this->semValue = array(); /* means: no statement */
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1480:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1484:         $startAttributes = $this->startAttributeStack[$this->stackPos-(1-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $this->semValue = null; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1485:            if ($this->semValue === null) $this->semValue = array(); /* means: no statement */
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1489:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1493:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1497:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1501:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1505:         $this->semValue = new Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1509:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1513:         $this->semValue = new Stmt\Finally_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1517:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1521:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1525:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1529:         $this->semValue = false;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1533:         $this->semValue = true;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1537:         $this->semValue = false;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1541:         $this->semValue = true;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1545:         $this->semValue = new Stmt\Function_($this->semStack[$this->stackPos-(10-3)], ['byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1549:         $this->semValue = new Stmt\Class_($this->semStack[$this->stackPos-(7-2)], ['type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1550:            $this->checkClass($this->semValue, $this->stackPos-(7-2));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1554:         $this->semValue = new Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], ['extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1555:            $this->checkInterface($this->semValue, $this->stackPos-(6-2));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1559:         $this->semValue = new Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], ['stmts' => $this->semStack[$this->stackPos-(5-4)]], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1563:         $this->semValue = 0;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1567:         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1571:         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1575:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1579:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1583:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1587:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1591:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1595:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1599:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1603:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1607:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1611:         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1615:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1619:         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1623:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1627:         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1631:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1635:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1639:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1643:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1647:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1651:         $this->semValue = new Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1655:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1659:         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1663:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1667:         $this->semValue = $this->semStack[$this->stackPos-(5-3)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1671:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1675:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1679:         $this->semValue = new Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1683:         $this->semValue = new Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1687:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1691:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1695:         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1699:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1703:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1707:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1711:         $this->semValue = new Stmt\ElseIf_($this->semStack[$this->stackPos-(5-3)], is_array($this->semStack[$this->stackPos-(5-5)]) ? $this->semStack[$this->stackPos-(5-5)] : array($this->semStack[$this->stackPos-(5-5)]), $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1715:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1719:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1723:         $this->semValue = new Stmt\ElseIf_($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1727:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1731:         $this->semValue = new Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1735:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1739:         $this->semValue = new Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1743:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1747:         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1751:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1755:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1759:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1763:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1767:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1771:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1775:         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); $this->checkParam($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1779:         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); $this->checkParam($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1783:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1787:         $this->semValue = new Node\NullableType($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1791:         $this->semValue = $this->handleBuiltinTypes($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1795:         $this->semValue = 'array';
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1799:         $this->semValue = 'callable';
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1803:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1807:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1811:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1815:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1819:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1823:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1827:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1831:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1835:         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1839:         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1843:         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1847:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1851:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1855:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1859:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1863:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1867:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1871:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1875:         $this->semValue = new Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1879:         $this->semValue = new Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1883:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1887:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1891:         $this->semValue = new Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); $this->checkProperty($this->semValue, $this->stackPos-(3-1));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1895:         $this->semValue = new Stmt\ClassConst($this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-1)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); $this->checkClassConst($this->semValue, $this->stackPos-(4-1));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1899:         $this->semValue = new Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], ['type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1900:            $this->checkClassMethod($this->semValue, $this->stackPos-(9-1));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1904:         $this->semValue = new Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1908:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1912:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1916:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1920:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1924:         $this->semValue = new Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1928:         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1932:         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1936:         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1940:         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1944:         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1948:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1952:         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1956:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1960:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1964:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1968:         $this->semValue = 0;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1972:         $this->semValue = 0;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1976:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1980:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1984:         $this->checkModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->stackPos-(2-2)); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1988:         $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1992:         $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:1996:         $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2000:         $this->semValue = Stmt\Class_::MODIFIER_STATIC;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2004:         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2008:         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2012:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2016:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2020:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2024:         $this->semValue = new Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2028:         $this->semValue = new Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2032:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2036:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2040:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2044:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2048:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2052:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2056:         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2060:         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2064:         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2068:         $this->semValue = new Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2072:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2076:         $this->semValue = new Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2080:         $this->semValue = new Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2084:         $this->semValue = new Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2088:         $this->semValue = new Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2092:         $this->semValue = new Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2096:         $this->semValue = new Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2100:         $this->semValue = new Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2104:         $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2108:         $this->semValue = new Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2112:         $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2116:         $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2120:         $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2124:         $this->semValue = new Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2128:         $this->semValue = new Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2132:         $this->semValue = new Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2136:         $this->semValue = new Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2140:         $this->semValue = new Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2144:         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2148:         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2152:         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2156:         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2160:         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2164:         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2168:         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2172:         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2176:         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2180:         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2184:         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2188:         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2192:         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2196:         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2200:         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2204:         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2208:         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2212:         $this->semValue = new Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2216:         $this->semValue = new Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2220:         $this->semValue = new Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2224:         $this->semValue = new Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2228:         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2232:         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2236:         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2240:         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2244:         $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2248:         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2252:         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2256:         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2260:         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2264:         $this->semValue = new Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2268:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2272:         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2276:         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2280:         $this->semValue = new Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2284:         $this->semValue = new Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2288:         $this->semValue = new Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2292:         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2296:         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2300:         $this->semValue = new Expr\Eval_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2304:         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2308:         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2312:         $this->semValue = new Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2316:         $this->semValue = new Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2320:         $this->semValue = new Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2324:         $this->semValue = new Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2328:         $this->semValue = new Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2332:         $this->semValue = new Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2336:         $this->semValue = new Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2340:         $attrs = $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2341:            $attrs['kind'] = strtolower($this->semStack[$this->stackPos-(2-1)]) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2342:            $this->semValue = new Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2346:         $this->semValue = new Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2350:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2354:         $this->semValue = new Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2358:         $this->semValue = new Expr\Print_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2362:         $this->semValue = new Expr\Yield_(null, null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2366:         $this->semValue = new Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2370:         $this->semValue = new Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2374:         $this->semValue = new Expr\YieldFrom($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2378:         $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2382:         $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]], $this->startAttributeStack[$this->stackPos-(11-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2386:         $this->semValue = array(new Stmt\Class_(null, ['type' => 0, 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(7-2)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2387:            $this->checkClass($this->semValue[0], -1);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2391:         $this->semValue = new Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2395:         list($class, $ctorArgs) = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2399:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2403:         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2407:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2411:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2415:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2419:         $this->semValue = new Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2423:         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2427:         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2431:         $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2435:         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2439:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2443:         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2447:         $this->semValue = new Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2451:         $this->semValue = new Name\Relative($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2455:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2459:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2463:         $this->semValue = new Expr\Error($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2467:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2471:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2475:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2479:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2483:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2487:         $this->semValue = array(new Scalar\EncapsedStringPart(Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`'), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2491:         foreach ($this->semStack[$this->stackPos-(1-1)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', true); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2495:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2499:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2503:         $this->semValue = new Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2507:         $this->semValue = new Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2511:         $this->semValue = new Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], new Expr\Error($this->startAttributeStack[$this->stackPos-(3-3)] + $this->endAttributeStack[$this->stackPos-(3-3)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); $this->errorState = 2;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2515:         $attrs = $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_SHORT;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2516:            $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2520:         $attrs = $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_LONG;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2521:            $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2525:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2529:         $attrs = $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$this->stackPos-(1-1)][0] === "'" || ($this->semStack[$this->stackPos-(1-1)][1] === "'" && ($this->semStack[$this->stackPos-(1-1)][0] === 'b' || $this->semStack[$this->stackPos-(1-1)][0] === 'B')) ? Scalar\String_::KIND_SINGLE_QUOTED : Scalar\String_::KIND_DOUBLE_QUOTED);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2530:            $this->semValue = new Scalar\String_(Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)]), $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2534:         $this->semValue = $this->parseLNumber($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2538:         $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2542:         $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2546:         $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2550:         $this->semValue = new Scalar\MagicConst\Dir($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2554:         $this->semValue = new Scalar\MagicConst\Class_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2558:         $this->semValue = new Scalar\MagicConst\Trait_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2562:         $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2566:         $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2570:         $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2574:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2578:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2582:         $attrs = $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$this->stackPos-(3-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$this->stackPos-(3-1)], $matches); $attrs['docLabel'] = $matches[1];;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2583:            $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2587:         $attrs = $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$this->stackPos-(2-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$this->stackPos-(2-1)], $matches); $attrs['docLabel'] = $matches[1];;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2588:            $this->semValue = new Scalar\String_('', $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2592:         $attrs = $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2593:            foreach ($this->semStack[$this->stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '"', true); } }; $this->semValue = new Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2597:         $attrs = $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$this->stackPos-(3-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$this->stackPos-(3-1)], $matches); $attrs['docLabel'] = $matches[1];;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2598:            foreach ($this->semStack[$this->stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, null, true); } } $s->value = preg_replace('~(\r\n|\n|\r)\z~', '', $s->value); if ('' === $s->value) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2602:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2606:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2610:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2614:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2618:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2622:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2626:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2630:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2634:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2638:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2642:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2646:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2650:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2654:         $this->semValue = new Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2658:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2662:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2666:         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2670:         $this->semValue = substr($this->semStack[$this->stackPos-(1-1)], 1);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2674:         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2678:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2682:         $this->semValue = new Expr\Error($this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); $this->errorState = 2;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2686:         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2690:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2694:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2698:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2702:         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2706:         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2710:         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2714:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2718:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2722:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2726:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2730:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2734:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2738:         $this->semValue = new Expr\Error($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2742:         $this->semValue = new Expr\List_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2746:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2750:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2754:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2758:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2762:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2766:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2770:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2774:         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; $end = count($this->semValue)-1; if ($this->semValue[$end] === null) unset($this->semValue[$end]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2778:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2782:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2786:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2790:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2794:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2798:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2802:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2806:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2810:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2814:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2818:         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2822:         $this->semValue = new Scalar\EncapsedStringPart($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2826:         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2830:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2834:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2838:         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2842:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2846:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2850:         $this->semValue = new Expr\ArrayDimFetch(new Expr\Variable($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(6-4)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2854:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2858:         $this->semValue = new Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2862:         $this->semValue = $this->parseNumString($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2866:         $this->semValue = $this->parseNumString('-' . $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:2870:         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:26:    protected $defaultAction = -32766;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:81:        "'-'",
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:236:          674,  675,  676,  677,  678,-32766,  679,  680,  681,  717,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:239:          236,  237,  238,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:240:        -32766,-32767,-32767,-32767,-32767,  442,  239,  240,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:241:        -32766,-32766,  682,-32766,  308,-32766,-32766,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:242:        -32766,-32767,-32767,-32767,-32767,-32767,  683,  684,  685,  686,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:243:          687,  688,  689, 1174,  462,  749,-32766,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:244:        -32766,   25,  690,  691,  692,  693,  694,  695,  696,  697,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:250:           57,  729,  740,  739,  421,   58,   59,  341,   60,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:251:        -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,    9,-32767,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:252:        -32767,-32767,-32767,   52,  327,-32766,  331,  947,  948,  949,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:254:          823,   61,   62, 1101, -269, 1180,  764,   63, 1174,   64,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:256:          129,   26,  301,   73,  415,-32766,-32766,-32766,-32766, 1089,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:257:         1090,  751,  635, 1180,-32766,  920,  206,  466,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:258:        -32766,  824,  409,-32766,  313,-32766,  902,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:259:        -32766,-32766,-32766,  215,  216,  217,  430,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:260:        -32766,-32766,-32766,-32766,-32766,  122,  493,  947,  948,  949,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:264:          427,  587, -220, 1212,  123,   41,  449,  336,  323, 1056,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:265:          324,  423, -122, -122, -122,   -4,  824,  465,  101,  102,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:266:          103,  813,  303,  282,   40,   21,  424, -122,  467, -122,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:267:          468, -122,  469, -122,  104,  425,  215,  216,  217,   30,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:273:         -122,  824,  465,  215,  216,  217,  813, 1140,  241,   40,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:277:        -32766,-32766,-32766,  128,  474,  921,  811,  757,  842,  477,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:278:          478,-32767,-32767,-32767,-32767,   96,   97,   98,   99,  100,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:279:        -32766,   20,-32766,-32766,-32766,-32766,  895,  896,  335, 1038,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:280:          479,  423, -216,  826,  640,   -4,  824,  465,  872,  494,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:282:          468, 1038,  469, -497,  118,  425, -201, -201, -201,   30,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:284:          217,  351,  352,  472,  473,-32766,-32766,-32766,   36,  474,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:286:          126,-32766,-32766,-32766,  441,-32766,  417,-32766,-32766,-32766,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:287:           49,   33,  296,-32766,-32766,-32766,  423,  208,  826,  640,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:288:         -201,-32766,  465,-32766,-32766,  807,  813,  379,  117,   40,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:289:           21,  424, 1066,  467,-32766,  468,  217,  469,  805,  245,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:290:          425, -200, -200, -200,   30,   31,  470,  426, 1038,   32,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:292:        -32766,-32766,-32766,  494,  474,  125,  427,  795,  842,  477,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:294:        -32766,  436,  427,  646,  642,  126,-32766,-32766,-32766,  244,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:295:          901,  246,  119,  826,  640, -200,   34,  298,   81,   82,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:301:          285,  104,  643,   30,   31,  470,  824,-32766,   32,  471,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:302:          295,  303,   74,-32766,-32766,  351,  352,  215,  216,  217,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:303:        -32766,-32766,   50,  474,   98,   99,  100,  233,  234,  235,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:312:          471,  614,  604,   74, 1059,  581,  351,  352,-32766,  526,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:314:          328,  844,  314,  539,   14,  653,  -80,  597,  837,  584,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:315:          330,  843,  325, -398,  395,  423, 1146,    0,    0,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:319:          312, -498,   74,  465, -497,  351,  352,  813,  479,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:321:           11,  425, -407,   13, -406,   30,   31,  470, 1036,  386,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:332:          211, 1040, 1089, 1090, 1041,  212,-32766,  213,  829,  863,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:335:         1042,-32766,  305,  304,   24, 1091,   27,  292,  291,  283,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:337:        -32766,    0, 1018, 1017, 1082,  571, -216,  567, 1105, 1095,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:340:        -32766,   18,  567, -217, 1095, 1096, 1097, 1098, 1092, 1093,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:341:          385,   17,   16,  605,    0, -416, 1099, 1094, 1160, 1159,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:342:         1106, 1209, 1079,  214, 1176,-32766, 1047,    0, 1164, 1178,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:426:          126,  123,  126,  142,  146,   71,  139,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:427:           -1,   77,  139,  148,  149,   81,  109,   -1,   84,   85,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:428:           86,   -1,   88,   -1,   90,   -1,   92,   -1,  142,   95,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:429:           -1,  127,   -1,   99,  100,  101,    1,   71,  104,  105,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:430:          128,  128,  108,   77,  128,  111,  112,   81,  129,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:448:          151,   -1,  152,  152,  152,  152,  152,  130,  152,  132,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:450:          152,  144,  145,  152,  152,  152,  152,  152,  151,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:452:          138,  152,  152,  155,   -1,  154,  144,  145,  155,  155,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:453:          155,  155,  155,  151,  155,  153,  155,   -1,  155,  155,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:454:          155,  155,  155,  155,  155,   -1,  156
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:458:            0,  220,  295,  370,  445,  109,  109,  180,  744,   -2,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:459:           -2,   -2,   -2,   -2,  135,  655,  724,  756,  724,  623,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:474:          568,  568,  568,  568,  568,  568,  568,   -3,  365,  225,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:482:          912,  912,  912,  912,  912,  912,  912,  493,  -20,  -20,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:495:          547,  315,   -6,  279,  782,  755,  863,  861,  249,  133,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:525:          134,  134,  134,  134,   -2,   -2,   -2,   -2,    0,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:526:            0,    0,    0,   -2,  134,  134,  134,  134,  134,  134,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:541:            0,    0,    0,    0,    0,    0,  568,  -20,  -20,  -20,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:542:          -20,  568,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  568,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:544:          568,  568,  568,  568,  568,  568,  -20,  568,  568,  568,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:545:          -20,  420,  -20,  420,  420,  420,  420,  420,  420,  420,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:550:          -20,  568,  -20,  568,  -20,  568,  568,  568,  568,  568,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:551:          568,  -20,  -20,  -20,  -20,  -20,  -20,    0,  248,  248,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:552:          248,  248,  -20,  -20,  -20,  -20,   55,   55,   55,   55,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:755:           60,   30,   65,   80,  123,  101,   93,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:756:           -1,   -1,   -1,   30,   -1,   -1,   -1,   -1,   30,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:757:           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:758:           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:759:           -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:760:           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:765:            0,    0, -340,    0,    0,  142,    0,  345,   27,  186,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:767:          169,  184,   87,   35,    0,  101, -241,    0, -182,  354,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:768:           92,    0,    0,    0,    0,    0,  187,    0,    0,  -24,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:770:            0,    0,    0,  102,   53,    0,  109,  -83,    0,   89,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:771:           82, -175,    0,  -92,  154,   83, -152,    0,  166,    0,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:772:            0,  -53,    0,  178,    0,  160,   65,    0,  357,  165,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:776:          -79,  -93,  110,    0,    0,   78,  106,  -23,   31,  -47,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:782:        -32768,  464,  670,    2,  671,  742,  750,  603,  481,  517,
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:915:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:919:         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:923:         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:927:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:931:         $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $nop = null; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:932:            if ($nop !== null) { $this->semStack[$this->stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:936:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:940:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:944:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:948:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:952:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:956:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:960:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:964:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:968:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:972:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:976:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:980:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:984:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:988:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:992:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:996:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1000:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1004:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1008:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1012:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1016:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1020:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1024:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1028:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1032:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1036:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1040:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1044:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1048:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1052:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1056:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1060:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1064:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1068:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1072:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1076:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1080:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1084:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1088:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1092:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1096:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1100:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1104:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1108:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1112:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1116:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1120:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1124:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1128:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1132:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1136:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1140:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1144:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1148:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1152:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1156:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1160:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1164:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1168:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1172:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1176:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1180:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1184:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1188:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1192:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1196:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1200:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1204:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1208:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1212:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1216:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1220:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1224:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1228:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1232:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1236:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1240:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1244:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1248:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1252:         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1256:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1260:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1264:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1268:         $this->semValue = new Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1272:         $this->semValue = new Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1273:            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_SEMICOLON);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1274:            $this->checkNamespace($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1278:         $this->semValue = new Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1279:            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1280:            $this->checkNamespace($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1284:         $this->semValue = new Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1285:            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1286:            $this->checkNamespace($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1290:         $this->semValue = new Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1294:         $this->semValue = new Stmt\Use_($this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1298:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1302:         $this->semValue = new Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1306:         $this->semValue = Stmt\Use_::TYPE_FUNCTION;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1310:         $this->semValue = Stmt\Use_::TYPE_CONSTANT;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1314:         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(7-3)], $this->startAttributeStack[$this->stackPos-(7-3)] + $this->endAttributeStack[$this->stackPos-(7-3)]), $this->semStack[$this->stackPos-(7-6)], $this->semStack[$this->stackPos-(7-2)], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1318:         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(8-4)], $this->startAttributeStack[$this->stackPos-(8-4)] + $this->endAttributeStack[$this->stackPos-(8-4)]), $this->semStack[$this->stackPos-(8-7)], $this->semStack[$this->stackPos-(8-2)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1322:         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-2)] + $this->endAttributeStack[$this->stackPos-(6-2)]), $this->semStack[$this->stackPos-(6-5)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1326:         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(7-3)], $this->startAttributeStack[$this->stackPos-(7-3)] + $this->endAttributeStack[$this->stackPos-(7-3)]), $this->semStack[$this->stackPos-(7-6)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1330:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1334:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1338:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1342:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1346:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1350:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1354:         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $this->stackPos-(1-1));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1358:         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $this->stackPos-(3-3));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1362:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1366:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1370:         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; $this->semValue->type = Stmt\Use_::TYPE_NORMAL;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1374:         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; $this->semValue->type = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1378:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1382:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1386:         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1390:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1394:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1398:         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1402:         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1406:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1410:         $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $nop = null; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1411:            if ($nop !== null) { $this->semStack[$this->stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1415:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1419:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1423:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1427:         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1432:        if ($this->semStack[$this->stackPos-(3-2)]) {
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1433:            $this->semValue = $this->semStack[$this->stackPos-(3-2)]; $attrs = $this->startAttributeStack[$this->stackPos-(3-1)]; $stmts = $this->semValue; if (!empty($attrs['comments'])) {$stmts[0]->setAttribute('comments', array_merge($attrs['comments'], $stmts[0]->getAttribute('comments', []))); };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1435:            $startAttributes = $this->startAttributeStack[$this->stackPos-(3-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $this->semValue = null; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1436:            if (null === $this->semValue) { $this->semValue = array(); }
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1442:         $this->semValue = new Stmt\If_($this->semStack[$this->stackPos-(5-2)], ['stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1446:         $this->semValue = new Stmt\If_($this->semStack[$this->stackPos-(8-2)], ['stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1450:         $this->semValue = new Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1454:         $this->semValue = new Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1458:         $this->semValue = new Stmt\For_(['init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1462:         $this->semValue = new Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1466:         $this->semValue = new Stmt\Break_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1470:         $this->semValue = new Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1474:         $this->semValue = new Stmt\Continue_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1478:         $this->semValue = new Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1482:         $this->semValue = new Stmt\Return_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1486:         $this->semValue = new Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1490:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1494:         $this->semValue = new Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1498:         $this->semValue = new Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1502:         $this->semValue = new Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1506:         $this->semValue = new Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1510:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1514:         $this->semValue = new Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1518:         $this->semValue = new Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1522:         $this->semValue = new Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], ['keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1526:         $this->semValue = new Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1530:         $this->semValue = new Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); $this->checkTryCatch($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1534:         $this->semValue = new Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1538:         $this->semValue = new Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1542:         $this->semValue = new Stmt\Label($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1546:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1550:         $this->semValue = array(); /* means: no statement */
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1554:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1558:         $startAttributes = $this->startAttributeStack[$this->stackPos-(1-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $this->semValue = null; };
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1559:            if ($this->semValue === null) $this->semValue = array(); /* means: no statement */
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1563:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1567:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1571:         $this->semValue = new Stmt\Catch_(array($this->semStack[$this->stackPos-(8-3)]), substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1575:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1579:         $this->semValue = new Stmt\Finally_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1583:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1587:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1591:         $this->semValue = false;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1595:         $this->semValue = true;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1599:         $this->semValue = false;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1603:         $this->semValue = true;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1607:         $this->semValue = new Stmt\Function_($this->semStack[$this->stackPos-(10-3)], ['byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1611:         $this->semValue = new Stmt\Class_($this->semStack[$this->stackPos-(7-2)], ['type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1612:            $this->checkClass($this->semValue, $this->stackPos-(7-2));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1616:         $this->semValue = new Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], ['extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1617:            $this->checkInterface($this->semValue, $this->stackPos-(6-2));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1621:         $this->semValue = new Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], ['stmts' => $this->semStack[$this->stackPos-(5-4)]], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1625:         $this->semValue = 0;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1629:         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1633:         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1637:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1641:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1645:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1649:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1653:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1657:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1661:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1665:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1669:         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1673:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1677:         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1681:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1685:         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1689:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1693:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1697:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1701:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1705:         $this->semValue = new Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1709:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1713:         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1717:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1721:         $this->semValue = $this->semStack[$this->stackPos-(5-3)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1725:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1729:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1733:         $this->semValue = new Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1737:         $this->semValue = new Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1741:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1745:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1749:         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1753:         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1757:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1761:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1765:         $this->semValue = new Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1769:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1773:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1777:         $this->semValue = new Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1781:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1785:         $this->semValue = new Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1789:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1793:         $this->semValue = new Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1797:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1801:         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1805:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1809:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1813:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1817:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1821:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1825:         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); $this->checkParam($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1829:         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); $this->checkParam($this->semValue);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1833:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1837:         $this->semValue = 'array';
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1841:         $this->semValue = 'callable';
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1845:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1849:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1853:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1857:         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1861:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1865:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1869:         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1873:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1877:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1881:         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1885:         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1889:         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1893:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1897:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1901:         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1905:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1909:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1913:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1917:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1921:         $this->semValue = new Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1925:         $this->semValue = new Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1929:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1933:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1937:         $this->semValue = new Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); $this->checkProperty($this->semValue, $this->stackPos-(3-1));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1941:         $this->semValue = new Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], 0, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1945:         $this->semValue = new Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], ['type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1946:            $this->checkClassMethod($this->semValue, $this->stackPos-(9-1));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1950:         $this->semValue = new Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1954:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1958:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1962:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1966:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1970:         $this->semValue = new Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1974:         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1978:         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1982:         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1986:         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1990:         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1994:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:1998:         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2002:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2006:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2010:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2014:         $this->semValue = 0;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2018:         $this->semValue = 0;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2022:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2026:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2030:         $this->checkModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->stackPos-(2-2)); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2034:         $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2038:         $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2042:         $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2046:         $this->semValue = Stmt\Class_::MODIFIER_STATIC;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2050:         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2054:         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2058:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2062:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2066:         $this->semValue = new Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2070:         $this->semValue = new Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2074:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2078:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2082:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2086:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2090:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2094:         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2098:         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2102:         $this->semValue = new Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2106:         $this->semValue = new Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2110:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2114:         $this->semValue = new Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2118:         $this->semValue = new Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2122:         $this->semValue = new Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2126:         $this->semValue = new Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2130:         $this->semValue = new Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2134:         $this->semValue = new Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2138:         $this->semValue = new Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2142:         $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2146:         $this->semValue = new Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2150:         $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2154:         $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2158:         $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2162:         $this->semValue = new Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2166:         $this->semValue = new Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2170:         $this->semValue = new Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2174:         $this->semValue = new Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2178:         $this->semValue = new Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2182:         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2186:         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2190:         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2194:         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2198:         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2202:         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2206:         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2210:         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2214:         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2218:         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2222:         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2226:         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2230:         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2234:         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2238:         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2242:         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2246:         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2250:         $this->semValue = new Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2254:         $this->semValue = new Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2258:         $this->semValue = new Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2262:         $this->semValue = new Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2266:         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2270:         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2274:         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2278:         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2282:         $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2286:         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2290:         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2294:         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2298:         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2302:         $this->semValue = new Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2306:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2310:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2314:         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2318:         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2322:         $this->semValue = new Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2326:         $this->semValue = new Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2330:         $this->semValue = new Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2334:         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2338:         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2342:         $this->semValue = new Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2346:         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2350:         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2354:         $this->semValue = new Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2358:         $this->semValue = new Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2362:         $this->semValue = new Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2366:         $this->semValue = new Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2370:         $this->semValue = new Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2374:         $this->semValue = new Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2378:         $this->semValue = new Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2382:         $attrs = $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2383:            $attrs['kind'] = strtolower($this->semStack[$this->stackPos-(2-1)]) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2384:            $this->semValue = new Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2388:         $this->semValue = new Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2392:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2396:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2400:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2404:         $this->semValue = new Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2408:         $this->semValue = new Expr\Print_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2412:         $this->semValue = new Expr\Yield_(null, null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2416:         $this->semValue = new Expr\YieldFrom($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2420:         $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2424:         $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]], $this->startAttributeStack[$this->stackPos-(11-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2428:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2432:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2436:         $this->semValue = new Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2440:         $this->semValue = new Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2444:         $attrs = $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_LONG;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2445:            $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2449:         $attrs = $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_SHORT;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2450:            $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2454:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2458:         $attrs = $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$this->stackPos-(4-1)][0] === "'" || ($this->semStack[$this->stackPos-(4-1)][1] === "'" && ($this->semStack[$this->stackPos-(4-1)][0] === 'b' || $this->semStack[$this->stackPos-(4-1)][0] === 'B')) ? Scalar\String_::KIND_SINGLE_QUOTED : Scalar\String_::KIND_DOUBLE_QUOTED);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2459:            $this->semValue = new Expr\ArrayDimFetch(new Scalar\String_(Scalar\String_::parse($this->semStack[$this->stackPos-(4-1)]), $attrs), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2463:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2467:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2471:         $this->semValue = array(new Stmt\Class_(null, ['type' => 0, 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(7-2)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2472:            $this->checkClass($this->semValue[0], -1);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2476:         $this->semValue = new Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2480:         list($class, $ctorArgs) = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2484:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2488:         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2492:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2496:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2500:         $this->semValue = new Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2504:         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2508:         $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2512:         $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2517:            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2518:                $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2519:            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2520:                $tmp = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2521:                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2522:                    $tmp = $tmp->var;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2525:                $this->semValue = new Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2526:                $tmp->var = new Expr\Variable($tmp->var->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2534:         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2538:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2542:         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2546:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2550:         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2554:         $this->semValue = new Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2558:         $this->semValue = new Name\Relative($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2562:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2566:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2570:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2574:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2578:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2582:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2586:         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2590:         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2594:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2598:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2602:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2606:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2610:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2614:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2618:         $this->semValue = array(new Scalar\EncapsedStringPart(Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`', false), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes));
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2622:         foreach ($this->semStack[$this->stackPos-(1-1)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', false); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2626:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2630:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2634:         $this->semValue = $this->parseLNumber($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes, true);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2638:         $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2642:         $attrs = $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$this->stackPos-(1-1)][0] === "'" || ($this->semStack[$this->stackPos-(1-1)][1] === "'" && ($this->semStack[$this->stackPos-(1-1)][0] === 'b' || $this->semStack[$this->stackPos-(1-1)][0] === 'B')) ? Scalar\String_::KIND_SINGLE_QUOTED : Scalar\String_::KIND_DOUBLE_QUOTED);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2643:            $this->semValue = new Scalar\String_(Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)], false), $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2647:         $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2651:         $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2655:         $this->semValue = new Scalar\MagicConst\Dir($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2659:         $this->semValue = new Scalar\MagicConst\Class_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2663:         $this->semValue = new Scalar\MagicConst\Trait_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2667:         $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2671:         $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2675:         $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2679:         $attrs = $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$this->stackPos-(3-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$this->stackPos-(3-1)], $matches); $attrs['docLabel'] = $matches[1];;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2680:            $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], false), $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2684:         $attrs = $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$this->stackPos-(2-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$this->stackPos-(2-1)], $matches); $attrs['docLabel'] = $matches[1];;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2685:            $this->semValue = new Scalar\String_('', $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2689:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2693:         $this->semValue = new Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2697:         $this->semValue = new Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2701:         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2705:         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2709:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2713:         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2717:         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2721:         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2725:         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2729:         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2733:         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2737:         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2741:         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2745:         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2749:         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2753:         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2757:         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2761:         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2765:         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2769:         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2773:         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2777:         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2781:         $this->semValue = new Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2785:         $this->semValue = new Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2789:         $this->semValue = new Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2793:         $this->semValue = new Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2797:         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2801:         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2805:         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2809:         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2813:         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2817:         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2821:         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2825:         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2829:         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2833:         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2837:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2841:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2845:         $this->semValue = new Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2849:         $this->semValue = new Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2853:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2857:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2861:         $attrs = $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2862:            foreach ($this->semStack[$this->stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '"', true); } }; $this->semValue = new Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2866:         $attrs = $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$this->stackPos-(3-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$this->stackPos-(3-1)], $matches); $attrs['docLabel'] = $matches[1];;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2867:            foreach ($this->semStack[$this->stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, null, true); } } $s->value = preg_replace('~(\r\n|\n|\r)\z~', '', $s->value); if ('' === $s->value) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attrs);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2871:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2875:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2879:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2883:        $this->semValue = $this->semStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2887:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2891:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2895:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2899:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2903:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2907:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2911:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2915:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2919:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2923:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2927:         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2931:         $this->semValue = new Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2935:         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2939:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2943:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2947:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2951:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2955:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2959:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2963:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2967:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2971:         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2975:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2979:         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2983:         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2987:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2991:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2995:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:2999:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3003:         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3007:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3011:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3015:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3019:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3023:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3027:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3031:         $this->semValue = new Expr\Error($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3035:         $this->semValue = new Expr\List_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3039:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3043:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3047:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3051:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3055:         $this->semValue = null;
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3059:         $this->semValue = array();
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3063:         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3067:         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3071:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3075:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3079:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3083:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3087:         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3091:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3095:         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3099:         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3103:         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3107:         $this->semValue = new Scalar\EncapsedStringPart($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3111:         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3115:         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3119:         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3123:         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3127:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3131:         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3135:         $this->semValue = new Expr\ArrayDimFetch(new Expr\Variable($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(6-4)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3139:         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3143:         $this->semValue = new Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3147:         $this->semValue = $this->parseNumString($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:3151:         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
vendor/nikic/php-parser/lib/PhpParser/ErrorHandler/Collecting.php:19:        $this->errors[] = $error;
vendor/nikic/php-parser/lib/PhpParser/ErrorHandler/Collecting.php:28:        return $this->errors;
vendor/nikic/php-parser/lib/PhpParser/ErrorHandler/Collecting.php:37:        return !empty($this->errors);
vendor/nikic/php-parser/lib/PhpParser/ErrorHandler/Collecting.php:44:        $this->errors = [];
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:17:        $this->attributes = $attributes;
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:40:        return $this->getAttribute('startLine', -1);
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:51:        $this->setAttribute('startLine', (int) $line);
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:62:        $comments = $this->getAttribute('comments');
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:67:        $lastComment = $comments[count($comments) - 1];
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:83:        $comments = $this->getAttribute('comments', []);
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:86:        if ($numComments > 0 && $comments[$numComments - 1] instanceof Comment\Doc) {
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:88:            $comments[$numComments - 1] = $docComment;
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:94:        $this->setAttribute('comments', $comments);
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:98:        $this->attributes[$key] = $value;
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:102:        return array_key_exists($key, $this->attributes);
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:106:        if (!array_key_exists($key, $this->attributes)) {
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:109:            return $this->attributes[$key];
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:114:        return $this->attributes;
vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php:118:        return ['nodeType' => $this->getType()] + get_object_vars($this);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:24:    const SYMBOL_NONE = -1;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:68:    /** @var array Map of non-terminals to a displacement into the $goto table. The corresponding goto state for this
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:69:     *             non-terminal/state pair is $goto[$gotoBase[$nonTerminal] + $state] (unless defaulted) */
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:76:    /** @var array Map of non-terminals to the default state to goto after their reduction */
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:79:    /** @var array Map of rules to the non-terminal on their left-hand side, i.e. the non-terminal to use for
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:82:    /** @var array Map of rules to the length of their right-hand side, which is the number of elements that have to
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:121:        $this->lexer = $lexer;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:122:        $this->errors = array();
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:133:     * If a non-throwing error handler is used, the parser will continue parsing after an error
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:144:        $this->errorHandler = $errorHandler ?: new ErrorHandler\Throwing;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:147:        $this->lexer->startLexing($code, $this->errorHandler);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:149:        // We start off with no lookahead-token
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:157:        $this->endAttributes = $endAttributes;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:160:        $this->startAttributeStack = array();
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:161:        $this->endAttributeStack = array($endAttributes);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:168:        $this->semStack = array();
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:171:        $this->stackPos = 0;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:173:        $this->errorState = 0;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:176:            //$this->traceNewState($state, $symbol);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:178:            if ($this->actionBase[$state] == 0) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:179:                $rule = $this->actionDefault[$state];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:182:                    // Fetch the next token id from the lexer and fetch additional info by-ref.
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:184:                    // shifted (not during read). Otherwise you would sometimes get off-by-one errors, when a rule is
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:186:                    $tokenId = $this->lexer->getNextToken($tokenValue, $startAttributes, $endAttributes);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:189:                    $symbol = $tokenId >= 0 && $tokenId < $this->tokenToSymbolMapSize
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:190:                        ? $this->tokenToSymbol[$tokenId]
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:191:                        : $this->invalidSymbol;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:193:                    if ($symbol === $this->invalidSymbol) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:202:                    $this->startAttributeStack[$this->stackPos+1] = $startAttributes;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:203:                    $this->endAttributeStack[$this->stackPos+1] = $endAttributes;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:204:                    $this->lookaheadStartAttributes = $startAttributes;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:206:                    //$this->traceRead($symbol);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:209:                $idx = $this->actionBase[$state] + $symbol;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:210:                if ((($idx >= 0 && $idx < $this->actionTableSize && $this->actionCheck[$idx] == $symbol)
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:211:                     || ($state < $this->YY2TBLSTATE
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:212:                         && ($idx = $this->actionBase[$state + $this->YYNLSTATES] + $symbol) >= 0
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:213:                         && $idx < $this->actionTableSize && $this->actionCheck[$idx] == $symbol))
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:214:                    && ($action = $this->action[$idx]) != $this->defaultAction) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:220:                     * = -YYUNEXPECTED: error
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:224:                        //$this->traceShift($symbol);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:226:                        ++$this->stackPos;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:227:                        $stateStack[$this->stackPos] = $state = $action;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:228:                        $this->semStack[$this->stackPos] = $tokenValue;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:229:                        $this->startAttributeStack[$this->stackPos] = $startAttributes;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:230:                        $this->endAttributeStack[$this->stackPos] = $endAttributes;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:231:                        $this->endAttributes = $endAttributes;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:234:                        if ($this->errorState) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:235:                            --$this->errorState;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:238:                        if ($action < $this->YYNLSTATES) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:242:                        /* $yyn >= YYNLSTATES means shift-and-reduce */
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:243:                        $rule = $action - $this->YYNLSTATES;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:245:                        $rule = -$action;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:248:                    $rule = $this->actionDefault[$state];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:255:                    //$this->traceAccept();
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:256:                    return $this->semValue;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:257:                } elseif ($rule !== $this->unexpectedTokenRule) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:259:                    //$this->traceReduce($rule);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:262:                        $this->{'reduceRule' . $rule}();
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:264:                        if (-1 === $e->getStartLine() && isset($startAttributes['startLine'])) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:265:                            $e->setStartLine($startAttributes['startLine']);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:268:                        $this->emitError($e);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:273:                    /* Goto - shift nonterminal */
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:274:                    $lastEndAttributes = $this->endAttributeStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:275:                    $this->stackPos -= $this->ruleToLength[$rule];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:276:                    $nonTerminal = $this->ruleToNonTerminal[$rule];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:277:                    $idx = $this->gotoBase[$nonTerminal] + $stateStack[$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:278:                    if ($idx >= 0 && $idx < $this->gotoTableSize && $this->gotoCheck[$idx] == $nonTerminal) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:279:                        $state = $this->goto[$idx];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:281:                        $state = $this->gotoDefault[$nonTerminal];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:284:                    ++$this->stackPos;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:285:                    $stateStack[$this->stackPos]     = $state;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:286:                    $this->semStack[$this->stackPos] = $this->semValue;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:287:                    $this->endAttributeStack[$this->stackPos] = $lastEndAttributes;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:290:                    switch ($this->errorState) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:292:                            $msg = $this->getErrorMessage($symbol, $state);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:293:                            $this->emitError(new Error($msg, $startAttributes + $endAttributes));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:297:                            $this->errorState = 3;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:299:                            // Pop until error-expecting state uncovered
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:301:                                (($idx = $this->actionBase[$state] + $this->errorSymbol) >= 0
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:302:                                    && $idx < $this->actionTableSize && $this->actionCheck[$idx] == $this->errorSymbol)
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:303:                                || ($state < $this->YY2TBLSTATE
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:304:                                    && ($idx = $this->actionBase[$state + $this->YYNLSTATES] + $this->errorSymbol) >= 0
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:305:                                    && $idx < $this->actionTableSize && $this->actionCheck[$idx] == $this->errorSymbol)
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:306:                            ) || ($action = $this->action[$idx]) == $this->defaultAction) { // Not totally sure about this
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:307:                                if ($this->stackPos <= 0) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:311:                                $state = $stateStack[--$this->stackPos];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:312:                                //$this->tracePop($state);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:315:                            //$this->traceShift($this->errorSymbol);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:316:                            ++$this->stackPos;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:317:                            $stateStack[$this->stackPos] = $state = $action;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:320:                            // to the end attributes of the last non-error symbol
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:321:                            $this->endAttributeStack[$this->stackPos] = $this->endAttributeStack[$this->stackPos - 1];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:322:                            $this->endAttributes = $this->endAttributeStack[$this->stackPos - 1];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:331:                            //$this->traceDiscard($symbol);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:337:                if ($state < $this->YYNLSTATES) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:341:                /* >= YYNLSTATES means shift-and-reduce */
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:342:                $rule = $state - $this->YYNLSTATES;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:350:        $this->errorHandler->handleError($error);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:355:        if ($expected = $this->getExpectedTokens($state)) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:359:        return 'Syntax error, unexpected ' . $this->symbolToName[$symbol] . $expectedString;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:365:        $base = $this->actionBase[$state];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:366:        foreach ($this->symbolToName as $symbol => $name) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:368:            if ($idx >= 0 && $idx < $this->actionTableSize && $this->actionCheck[$idx] === $symbol
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:369:                || $state < $this->YY2TBLSTATE
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:370:                && ($idx = $this->actionBase[$state + $this->YYNLSTATES] + $symbol) >= 0
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:371:                && $idx < $this->actionTableSize && $this->actionCheck[$idx] === $symbol
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:373:                if ($this->action[$idx] != $this->unexpectedTokenRule
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:374:                    && $this->action[$idx] != $this->defaultAction
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:375:                    && $symbol != $this->errorSymbol
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:397:            . ', Lookahead ' . ($symbol == self::SYMBOL_NONE ? '--none--' : $this->symbolToName[$symbol]) . "\n";
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:401:        echo '% Reading ' . $this->symbolToName[$symbol] . "\n";
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:405:        echo '% Shift ' . $this->symbolToName[$symbol] . "\n";
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:413:        echo '% Reduce by (' . $n . ') ' . $this->productions[$n] . "\n";
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:421:        echo '% Discard ' . $this->symbolToName[$symbol] . "\n";
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:430:     * Moves statements of semicolon-style namespaces into $ns->stmts and checks various error conditions.
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:437:        $style = $this->getNamespacingStyle($stmts);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:450:                    $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:451:                        'No code may exist outside of namespace {}', $stmt->getAttributes()));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:457:            // For semicolon namespaces we have to move the statements after a namespace declaration into ->stmts
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:462:                    if ($stmt->stmts === null) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:463:                        $stmt->stmts = array();
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:464:                        $targetStmts =& $stmt->stmts;
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:487:                $currentStyle = null === $stmt->stmts ? 'semicolon' : 'brace';
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:491:                        $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:493:                            $stmt->getLine() // Avoid marking the entire namespace as an error
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:497:                    $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:499:                        $stmt->getLine() // Avoid marking the entire namespace as an error
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:515:            if ($i == 0 && $stmt instanceof Node\Stmt\InlineHTML && preg_match('/\A#!.*\r?\n\z/', $stmt->value)) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:536:        if (!$name->isUnqualified()) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:540:        $lowerName = strtolower($name->toString());
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:551:        return $this->startAttributeStack[$pos] + $this->endAttributeStack[$pos];
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:558:            $this->emitError($error);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:565:        if (!preg_match('/^(?:0|-?[1-9][0-9]*)$/', $str)) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:582:            $error->setAttributes($this->getAttributesAt($modifierPos));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:583:            $this->emitError($error);
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:588:        if ($node->variadic && null !== $node->default) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:589:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:591:                $node->default->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:597:        if (empty($node->catches) && null === $node->finally) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:598:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:599:                'Cannot use try without catch or finally', $node->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:605:        if (isset(self::$specialNames[strtolower($node->name)])) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:606:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:607:                sprintf('Cannot use \'%s\' as namespace name', $node->name),
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:608:                $node->name->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:612:        if (null !== $node->stmts) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:613:            foreach ($node->stmts as $stmt) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:615:                    $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:616:                        'Namespace declarations cannot be nested', $stmt->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:624:        if (null !== $node->name && isset(self::$specialNames[strtolower($node->name)])) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:625:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:626:                sprintf('Cannot use \'%s\' as class name as it is reserved', $node->name),
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:627:                $this->getAttributesAt($namePos)
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:631:        if (isset(self::$specialNames[strtolower($node->extends)])) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:632:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:633:                sprintf('Cannot use \'%s\' as class name as it is reserved', $node->extends),
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:634:                $node->extends->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:638:        foreach ($node->implements as $interface) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:640:                $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:642:                    $interface->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:649:        if (null !== $node->name && isset(self::$specialNames[strtolower($node->name)])) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:650:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:651:                sprintf('Cannot use \'%s\' as class name as it is reserved', $node->name),
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:652:                $this->getAttributesAt($namePos)
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:656:        foreach ($node->extends as $interface) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:658:                $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:660:                    $interface->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:667:        if ($node->flags & Class_::MODIFIER_STATIC) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:668:            switch (strtolower($node->name)) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:670:                    $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:671:                        sprintf('Constructor %s() cannot be static', $node->name),
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:672:                        $this->getAttributesAt($modifierPos)));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:675:                    $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:676:                        sprintf('Destructor %s() cannot be static', $node->name),
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:677:                        $this->getAttributesAt($modifierPos)));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:680:                    $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:681:                        sprintf('Clone method %s() cannot be static', $node->name),
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:682:                        $this->getAttributesAt($modifierPos)));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:689:        if ($node->flags & Class_::MODIFIER_STATIC) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:690:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:692:                $this->getAttributesAt($modifierPos)));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:694:        if ($node->flags & Class_::MODIFIER_ABSTRACT) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:695:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:697:                $this->getAttributesAt($modifierPos)));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:699:        if ($node->flags & Class_::MODIFIER_FINAL) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:700:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:702:                $this->getAttributesAt($modifierPos)));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:707:        if ($node->flags & Class_::MODIFIER_ABSTRACT) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:708:            $this->emitError(new Error('Properties cannot be declared abstract',
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:709:                $this->getAttributesAt($modifierPos)));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:712:        if ($node->flags & Class_::MODIFIER_FINAL) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:713:            $this->emitError(new Error('Properties cannot be declared final',
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:714:                $this->getAttributesAt($modifierPos)));
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:719:        if ('self' == strtolower($node->alias) || 'parent' == strtolower($node->alias)) {
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:720:            $this->emitError(new Error(
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:723:                    $node->name, $node->alias
vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:725:                $this->getAttributesAt($namePos)
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:22:            return $node->getNode();
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:58:     * Normalizes a type: Converts plain-text type names into proper AST representation.
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:90:            $type = $this->normalizeName($type);
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:127:            $lastKey = -1;
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:132:                        $this->normalizeValue($itemValue)
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:137:                        $this->normalizeValue($itemValue),
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:138:                        $this->normalizeValue($itemKey)
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:167:     * Sets a modifier in the $this->type property.
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:172:        Stmt\Class_::verifyModifier($this->flags, $modifier);
vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php:173:        $this->flags |= $modifier;
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:21:        $this->writer = new XMLWriter;
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:22:        $this->writer->openMemory();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:23:        $this->writer->setIndent(true);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:27:        $this->writer->flush();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:28:        $this->writer->startDocument('1.0', 'UTF-8');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:30:        $this->writer->startElement('AST');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:31:        $this->writer->writeAttribute('xmlns:node',      'http://nikic.github.com/PHPParser/XML/node');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:32:        $this->writer->writeAttribute('xmlns:subNode',   'http://nikic.github.com/PHPParser/XML/subNode');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:33:        $this->writer->writeAttribute('xmlns:attribute', 'http://nikic.github.com/PHPParser/XML/attribute');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:34:        $this->writer->writeAttribute('xmlns:scalar',    'http://nikic.github.com/PHPParser/XML/scalar');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:36:        $this->_serialize($nodes);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:38:        $this->writer->endElement();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:40:        return $this->writer->outputMemory();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:45:            $this->writer->startElement('node:' . $node->getType());
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:47:            foreach ($node->getAttributes() as $name => $value) {
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:48:                $this->writer->startElement('attribute:' . $name);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:49:                $this->_serialize($value);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:50:                $this->writer->endElement();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:54:                $this->writer->startElement('subNode:' . $name);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:55:                $this->_serialize($subNode);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:56:                $this->writer->endElement();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:59:            $this->writer->endElement();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:61:            $this->writer->startElement('comment');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:62:            $this->writer->writeAttribute('isDocComment', $node instanceof Comment\Doc ? 'true' : 'false');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:63:            $this->writer->writeAttribute('line', (string) $node->getLine());
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:64:            $this->writer->text($node->getText());
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:65:            $this->writer->endElement();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:67:            $this->writer->startElement('scalar:array');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:69:                $this->_serialize($subNode);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:71:            $this->writer->endElement();
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:73:            $this->writer->writeElement('scalar:string', $node);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:75:            $this->writer->writeElement('scalar:int', (string) $node);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:78:            $this->writer->writeElement('scalar:float', (string) $node);
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:80:            $this->writer->writeElement('scalar:true');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:82:            $this->writer->writeElement('scalar:false');
vendor/nikic/php-parser/lib/PhpParser/Serializer/XML.php:84:            $this->writer->writeElement('scalar:null');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:11:        // [precedence, associativity] where for the latter -1 is %left, 0 is %nonassoc and 1 is %right
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:16:        'Expr_PostInc'                 => array( 10, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:17:        'Expr_PostDec'                 => array( 10, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:30:        'Expr_BinaryOp_Mul'            => array( 40, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:31:        'Expr_BinaryOp_Div'            => array( 40, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:32:        'Expr_BinaryOp_Mod'            => array( 40, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:33:        'Expr_BinaryOp_Plus'           => array( 50, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:34:        'Expr_BinaryOp_Minus'          => array( 50, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:35:        'Expr_BinaryOp_Concat'         => array( 50, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:36:        'Expr_BinaryOp_ShiftLeft'      => array( 60, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:37:        'Expr_BinaryOp_ShiftRight'     => array( 60, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:47:        'Expr_BinaryOp_BitwiseAnd'     => array( 90, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:48:        'Expr_BinaryOp_BitwiseXor'     => array(100, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:49:        'Expr_BinaryOp_BitwiseOr'      => array(110, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:50:        'Expr_BinaryOp_BooleanAnd'     => array(120, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:51:        'Expr_BinaryOp_BooleanOr'      => array(130, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:53:        'Expr_Ternary'                 => array(150, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:71:        'Expr_BinaryOp_LogicalAnd'     => array(170, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:72:        'Expr_BinaryOp_LogicalXor'     => array(180, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:73:        'Expr_BinaryOp_LogicalOr'      => array(190, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:74:        'Expr_Include'                 => array(200, -1),
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:92:        $this->noIndentToken = '_NO_INDENT_' . mt_rand();
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:93:        $this->docStringEndToken = '_DOC_STRING_END_' . mt_rand();
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:96:        $this->options = $options + $defaultOptions;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:107:        $this->preprocessNodes($stmts);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:109:        return ltrim($this->handleMagicTokens($this->pStmts($stmts, false)));
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:120:        return $this->handleMagicTokens($this->p($node));
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:135:        $p = "<?php\n\n" . $this->prettyPrint($stmts);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:140:        if ($stmts[count($stmts) - 1] instanceof Stmt\InlineHTML) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:148:     * Preprocesses the top-level nodes to initialize pretty printer state.
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:153:        /* We can use semicolon-namespaces unless there is a global namespace declaration */
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:154:        $this->canUseSemicolonNamespaces = true;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:156:            if ($node instanceof Stmt\Namespace_ && null === $node->name) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:157:                $this->canUseSemicolonNamespaces = false;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:163:        // Drop no-indent tokens
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:164:        $str = str_replace($this->noIndentToken, '', $str);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:166:        // Replace doc-string-end tokens with nothing or a newline
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:167:        $str = str_replace($this->docStringEndToken . ";\n", ";\n", $str);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:168:        $str = str_replace($this->docStringEndToken, "\n", $str);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:184:            $comments = $node->getAttribute('comments', array());
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:186:                $result .= "\n" . $this->pComments($comments);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:192:            $result .= "\n" . $this->p($node) . ($node instanceof Expr ? ';' : '');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:196:            return preg_replace('~\n(?!$|' . $this->noIndentToken . ')~', "\n    ", $result);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:210:        return $this->{'p' . $node->getType()}($node);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:214:        list($precedence, $associativity) = $this->precedenceMap[$type];
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:216:        return $this->pPrec($leftNode, $precedence, $associativity, -1)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:218:             . $this->pPrec($rightNode, $precedence, $associativity, 1);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:222:        list($precedence, $associativity) = $this->precedenceMap[$type];
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:223:        return $operatorString . $this->pPrec($node, $precedence, $associativity, 1);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:227:        list($precedence, $associativity) = $this->precedenceMap[$type];
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:228:        return $this->pPrec($node, $precedence, $associativity, -1) . $operatorString;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:237:     *                                  (-1 is left, 0 is nonassoc, 1 is right)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:239:     *                                  (-1 is left, 1 is right)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:244:        $type = $node->getType();
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:245:        if (isset($this->precedenceMap[$type])) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:246:            $childPrecedence = $this->precedenceMap[$type][0];
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:250:                return '(' . $this->p($node) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:254:        return $this->p($node);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:271:                $pNodes[] = $this->p($node);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:286:        return $this->pImplode($nodes, ', ');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:290:     * Pretty prints a comma-separated list of nodes in multiline style, including comments.
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:301:        $lastIdx = count($nodes) - 1;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:304:                $comments = $node->getAttribute('comments', array());
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:306:                    $result .= "\n" . $this->pComments($comments);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:309:                $result .= "\n" . $this->p($node);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:318:        return preg_replace('~\n(?!$|' . $this->noIndentToken . ')~', "\n    ", $result);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:326:     * @return string String marked with $this->noIndentToken's.
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:329:        return str_replace("\n", "\n" . $this->noIndentToken, $string);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php:343:            $formattedComments[] = $comment->getReformattedText();
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:38:        $this->errorHandler = $errorHandler ?: new ErrorHandler\Throwing;
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:39:        $this->preserveOriginalNames = !empty($options['preserveOriginalNames']);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:43:        $this->resetState();
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:48:            $this->resetState($node->name);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:50:            foreach ($node->uses as $use) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:51:                $this->addAlias($use, $node->type, null);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:54:            foreach ($node->uses as $use) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:55:                $this->addAlias($use, $node->type, $node->prefix);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:58:            if (null !== $node->extends) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:59:                $node->extends = $this->resolveClassName($node->extends);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:62:            foreach ($node->implements as &$interface) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:63:                $interface = $this->resolveClassName($interface);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:66:            if (null !== $node->name) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:67:                $this->addNamespacedName($node);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:70:            foreach ($node->extends as &$interface) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:71:                $interface = $this->resolveClassName($interface);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:74:            $this->addNamespacedName($node);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:76:            $this->addNamespacedName($node);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:78:            $this->addNamespacedName($node);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:79:            $this->resolveSignature($node);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:83:            $this->resolveSignature($node);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:85:            foreach ($node->consts as $const) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:86:                $this->addNamespacedName($const);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:94:            if ($node->class instanceof Name) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:95:                $node->class = $this->resolveClassName($node->class);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:98:            foreach ($node->types as &$type) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:99:                $type = $this->resolveClassName($type);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:102:            if ($node->name instanceof Name) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:103:                $node->name = $this->resolveOtherName($node->name, Stmt\Use_::TYPE_FUNCTION);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:106:            $node->name = $this->resolveOtherName($node->name, Stmt\Use_::TYPE_CONSTANT);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:108:            foreach ($node->traits as &$trait) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:109:                $trait = $this->resolveClassName($trait);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:112:            foreach ($node->adaptations as $adaptation) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:113:                if (null !== $adaptation->trait) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:114:                    $adaptation->trait = $this->resolveClassName($adaptation->trait);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:118:                    foreach ($adaptation->insteadof as &$insteadof) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:119:                        $insteadof = $this->resolveClassName($insteadof);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:127:        $this->namespace = $namespace;
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:128:        $this->aliases   = array(
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:137:        $name = $prefix ? Name::concat($prefix, $use->name) : $use->name;
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:139:        $type |= $use->type;
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:143:            $aliasName = $use->alias;
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:145:            $aliasName = strtolower($use->alias);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:148:        if (isset($this->aliases[$type][$aliasName])) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:155:            $this->errorHandler->handleError(new Error(
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:158:                    $typeStringMap[$type], $name, $use->alias
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:160:                $use->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:165:        $this->aliases[$type][$aliasName] = $name;
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:170:        foreach ($node->params as $param) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:171:            $param->type = $this->resolveType($param->type);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:173:        $node->returnType = $this->resolveType($node->returnType);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:178:            $node->type = $this->resolveType($node->type);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:182:            return $this->resolveClassName($node);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:188:        if ($this->preserveOriginalNames) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:192:            $name->setAttribute('originalName', $originalName);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:196:        if (in_array(strtolower($name->toString()), array('self', 'parent', 'static'))) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:197:            if (!$name->isUnqualified()) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:198:                $this->errorHandler->handleError(new Error(
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:199:                    sprintf("'\\%s' is an invalid class name", $name->toString()),
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:200:                    $name->getAttributes()
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:207:        if ($name->isFullyQualified()) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:211:        $aliasName = strtolower($name->getFirst());
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:212:        if (!$name->isRelative() && isset($this->aliases[Stmt\Use_::TYPE_NORMAL][$aliasName])) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:213:            // resolve aliases (for non-relative names)
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:214:            $alias = $this->aliases[Stmt\Use_::TYPE_NORMAL][$aliasName];
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:215:            return FullyQualified::concat($alias, $name->slice(1), $name->getAttributes());
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:219:        return FullyQualified::concat($this->namespace, $name, $name->getAttributes());
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:223:        if ($this->preserveOriginalNames) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:227:            $name->setAttribute('originalName', $originalName);
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:231:        if ($name->isFullyQualified()) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:236:        $aliasName = strtolower($name->getFirst());
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:237:        if ($name->isQualified() && isset($this->aliases[Stmt\Use_::TYPE_NORMAL][$aliasName])) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:238:            $alias = $this->aliases[Stmt\Use_::TYPE_NORMAL][$aliasName];
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:239:            return FullyQualified::concat($alias, $name->slice(1), $name->getAttributes());
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:242:        if ($name->isUnqualified()) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:244:                // constant aliases are case-sensitive, function aliases case-insensitive
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:245:                $aliasName = $name->getFirst();
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:248:            if (isset($this->aliases[$type][$aliasName])) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:250:                return new FullyQualified($this->aliases[$type][$aliasName], $name->getAttributes());
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:253:            if (null === $this->namespace) {
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:255:                return new FullyQualified($name, $name->getAttributes());
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:258:            // unqualified names inside a namespace cannot be resolved at compile-time
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:260:            $name->setAttribute('namespacedName',
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:261:                FullyQualified::concat($this->namespace, $name, $name->getAttributes()));
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:266:        return FullyQualified::concat($this->namespace, $name, $name->getAttributes());
vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php:270:        $node->namespacedName = Name::concat($this->namespace, $node->name);
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:30:        $this->newKeywords = array();
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:36:            $this->newKeywords += $newKeywords;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:42:        $this->tokenMap[self::T_COALESCE]   = Tokens::T_COALESCE;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:43:        $this->tokenMap[self::T_SPACESHIP]  = Tokens::T_SPACESHIP;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:44:        $this->tokenMap[self::T_YIELD_FROM] = Tokens::T_YIELD_FROM;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:49:        $this->tokenMap[self::T_ELLIPSIS]  = Tokens::T_ELLIPSIS;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:50:        $this->tokenMap[self::T_POW]       = Tokens::T_POW;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:51:        $this->tokenMap[self::T_POW_EQUAL] = Tokens::T_POW_EQUAL;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:55:        $this->inObjectAccess = false;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:58:        if ($this->requiresEmulation($code)) {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:59:            $this->emulateTokens();
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:89:        for ($i = 0, $c = count($this->tokens); $i < $c; ++$i) {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:91:            if (isset($this->tokens[$i + 1])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:92:                if ($this->tokens[$i] === '?' && $this->tokens[$i + 1] === '?') {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:93:                    array_splice($this->tokens, $i, 2, array(
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:96:                    $c--;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:99:                if ($this->tokens[$i][0] === T_IS_SMALLER_OR_EQUAL
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:100:                    && $this->tokens[$i + 1] === '>'
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:102:                    array_splice($this->tokens, $i, 2, array(
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:105:                    $c--;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:108:                if ($this->tokens[$i] === '*' && $this->tokens[$i + 1] === '*') {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:109:                    array_splice($this->tokens, $i, 2, array(
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:112:                    $c--;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:115:                if ($this->tokens[$i] === '*' && $this->tokens[$i + 1][0] === T_MUL_EQUAL) {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:116:                    array_splice($this->tokens, $i, 2, array(
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:119:                    $c--;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:124:            if (isset($this->tokens[$i + 2])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:125:                if ($this->tokens[$i][0] === T_YIELD && $this->tokens[$i + 1][0] === T_WHITESPACE
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:126:                    && $this->tokens[$i + 2][0] === T_STRING
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:127:                    && !strcasecmp($this->tokens[$i + 2][1], 'from')
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:129:                    array_splice($this->tokens, $i, 3, array(
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:132:                            $this->tokens[$i][1] . $this->tokens[$i + 1][1] . $this->tokens[$i + 2][1],
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:136:                    $c -= 2;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:137:                    $line += substr_count($this->tokens[$i][1], "\n");
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:140:                if ($this->tokens[$i] === '.' && $this->tokens[$i + 1] === '.'
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:141:                    && $this->tokens[$i + 2] === '.'
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:143:                    array_splice($this->tokens, $i, 3, array(
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:146:                    $c -= 2;
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:151:            if (\is_array($this->tokens[$i])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:152:                $line += substr_count($this->tokens[$i][1], "\n");
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:161:        // if we currently are in an object access (e.g. in $obj->namespace
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:163:        if (Tokens::T_STRING === $token && !$this->inObjectAccess) {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:164:            if (isset($this->newKeywords[strtolower($value)])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:165:                return $this->newKeywords[strtolower($value)];
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:168:            // keep track of whether we currently are in an object access (after ->)
vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php:169:            $this->inObjectAccess = Tokens::T_OBJECT_OPERATOR === $token;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:21:        return ($node->type ? $this->pType($node->type) . ' ' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:22:             . ($node->byRef ? '&' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:23:             . ($node->variadic ? '...' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:24:             . '$' . $node->name
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:25:             . ($node->default ? ' = ' . $this->p($node->default) : '');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:29:        return ($node->byRef ? '&' : '') . ($node->unpack ? '...' : '') . $this->p($node->value);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:33:        return $node->name . ' = ' . $this->p($node->value);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:37:        return '?' . $this->pType($node->type);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:43:        return implode('\\', $node->parts);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:47:        return '\\' . implode('\\', $node->parts);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:51:        return 'namespace\\' . implode('\\', $node->parts);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:91:        $kind = $node->getAttribute('kind', Scalar\String_::KIND_SINGLE_QUOTED);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:94:                $label = $node->getAttribute('docLabel');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:95:                if ($label && !$this->containsEndLabel($node->value, $label)) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:96:                    if ($node->value === '') {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:97:                        return $this->pNoIndent("<<<'$label'\n$label") . $this->docStringEndToken;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:100:                    return $this->pNoIndent("<<<'$label'\n$node->value\n$label")
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:101:                         . $this->docStringEndToken;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:105:                return '\'' . $this->pNoIndent(addcslashes($node->value, '\'\\')) . '\'';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:107:                $label = $node->getAttribute('docLabel');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:108:                if ($label && !$this->containsEndLabel($node->value, $label)) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:109:                    if ($node->value === '') {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:110:                        return $this->pNoIndent("<<<$label\n$label") . $this->docStringEndToken;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:113:                    $escaped = $this->escapeString($node->value, null);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:114:                    return $this->pNoIndent("<<<$label\n" . $escaped ."\n$label")
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:115:                         . $this->docStringEndToken;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:119:                return '"' . $this->escapeString($node->value, '"') . '"';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:125:        if ($node->getAttribute('kind') === Scalar\String_::KIND_HEREDOC) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:126:            $label = $node->getAttribute('docLabel');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:127:            if ($label && !$this->encapsedContainsEndLabel($node->parts, $label)) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:128:                if (count($node->parts) === 1
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:129:                    && $node->parts[0] instanceof Scalar\EncapsedStringPart
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:130:                    && $node->parts[0]->value === ''
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:132:                    return $this->pNoIndent("<<<$label\n$label") . $this->docStringEndToken;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:135:                return $this->pNoIndent(
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:136:                    "<<<$label\n" . $this->pEncapsList($node->parts, null) . "\n$label"
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:137:                ) . $this->docStringEndToken;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:140:        return '"' . $this->pEncapsList($node->parts, '"') . '"';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:144:        if ($node->value === -\PHP_INT_MAX-1) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:147:            return '(-' . \PHP_INT_MAX . '-1)';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:150:        $kind = $node->getAttribute('kind', Scalar\LNumber::KIND_DEC);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:152:            return (string) $node->value;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:155:        $sign = $node->value < 0 ? '-' : '';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:156:        $str = (string) $node->value;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:169:        if (!is_finite($node->value)) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:170:            if ($node->value === \INF) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:172:            } elseif ($node->value === -\INF) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:173:                return '-\INF';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:179:        // Try to find a short full-precision representation
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:180:        $stringValue = sprintf('%.16G', $node->value);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:181:        if ($node->value !== (double) $stringValue) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:182:            $stringValue = sprintf('%.17G', $node->value);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:185:        // %G is locale dependent and there exists no locale-independent alternative. We don't want
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:186:        // mess with switching locales here, so let's assume that a comma is the only non-standard
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:191:        return preg_match('/^-?[0-9]+$/', $stringValue) ? $stringValue . '.0' : $stringValue;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:197:        return $this->pInfixOp('Expr_Assign', $node->var, ' = ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:201:        return $this->pInfixOp('Expr_AssignRef', $node->var, ' =& ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:205:        return $this->pInfixOp('Expr_AssignOp_Plus', $node->var, ' += ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:209:        return $this->pInfixOp('Expr_AssignOp_Minus', $node->var, ' -= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:213:        return $this->pInfixOp('Expr_AssignOp_Mul', $node->var, ' *= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:217:        return $this->pInfixOp('Expr_AssignOp_Div', $node->var, ' /= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:221:        return $this->pInfixOp('Expr_AssignOp_Concat', $node->var, ' .= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:225:        return $this->pInfixOp('Expr_AssignOp_Mod', $node->var, ' %= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:229:        return $this->pInfixOp('Expr_AssignOp_BitwiseAnd', $node->var, ' &= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:233:        return $this->pInfixOp('Expr_AssignOp_BitwiseOr', $node->var, ' |= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:237:        return $this->pInfixOp('Expr_AssignOp_BitwiseXor', $node->var, ' ^= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:241:        return $this->pInfixOp('Expr_AssignOp_ShiftLeft', $node->var, ' <<= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:245:        return $this->pInfixOp('Expr_AssignOp_ShiftRight', $node->var, ' >>= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:249:        return $this->pInfixOp('Expr_AssignOp_Pow', $node->var, ' **= ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:255:        return $this->pInfixOp('Expr_BinaryOp_Plus', $node->left, ' + ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:259:        return $this->pInfixOp('Expr_BinaryOp_Minus', $node->left, ' - ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:263:        return $this->pInfixOp('Expr_BinaryOp_Mul', $node->left, ' * ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:267:        return $this->pInfixOp('Expr_BinaryOp_Div', $node->left, ' / ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:271:        return $this->pInfixOp('Expr_BinaryOp_Concat', $node->left, ' . ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:275:        return $this->pInfixOp('Expr_BinaryOp_Mod', $node->left, ' % ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:279:        return $this->pInfixOp('Expr_BinaryOp_BooleanAnd', $node->left, ' && ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:283:        return $this->pInfixOp('Expr_BinaryOp_BooleanOr', $node->left, ' || ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:287:        return $this->pInfixOp('Expr_BinaryOp_BitwiseAnd', $node->left, ' & ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:291:        return $this->pInfixOp('Expr_BinaryOp_BitwiseOr', $node->left, ' | ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:295:        return $this->pInfixOp('Expr_BinaryOp_BitwiseXor', $node->left, ' ^ ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:299:        return $this->pInfixOp('Expr_BinaryOp_ShiftLeft', $node->left, ' << ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:303:        return $this->pInfixOp('Expr_BinaryOp_ShiftRight', $node->left, ' >> ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:307:        return $this->pInfixOp('Expr_BinaryOp_Pow', $node->left, ' ** ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:311:        return $this->pInfixOp('Expr_BinaryOp_LogicalAnd', $node->left, ' and ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:315:        return $this->pInfixOp('Expr_BinaryOp_LogicalOr', $node->left, ' or ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:319:        return $this->pInfixOp('Expr_BinaryOp_LogicalXor', $node->left, ' xor ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:323:        return $this->pInfixOp('Expr_BinaryOp_Equal', $node->left, ' == ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:327:        return $this->pInfixOp('Expr_BinaryOp_NotEqual', $node->left, ' != ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:331:        return $this->pInfixOp('Expr_BinaryOp_Identical', $node->left, ' === ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:335:        return $this->pInfixOp('Expr_BinaryOp_NotIdentical', $node->left, ' !== ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:339:        return $this->pInfixOp('Expr_BinaryOp_Spaceship', $node->left, ' <=> ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:343:        return $this->pInfixOp('Expr_BinaryOp_Greater', $node->left, ' > ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:347:        return $this->pInfixOp('Expr_BinaryOp_GreaterOrEqual', $node->left, ' >= ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:351:        return $this->pInfixOp('Expr_BinaryOp_Smaller', $node->left, ' < ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:355:        return $this->pInfixOp('Expr_BinaryOp_SmallerOrEqual', $node->left, ' <= ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:359:        return $this->pInfixOp('Expr_BinaryOp_Coalesce', $node->left, ' ?? ', $node->right);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:363:        return $this->pInfixOp('Expr_Instanceof', $node->expr, ' instanceof ', $node->class);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:369:        return $this->pPrefixOp('Expr_BooleanNot', '!', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:373:        return $this->pPrefixOp('Expr_BitwiseNot', '~', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:377:        if ($node->expr instanceof Expr\UnaryMinus || $node->expr instanceof Expr\PreDec) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:378:            // Enforce -(-$expr) instead of --$expr
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:379:            return '-(' . $this->p($node->expr) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:381:        return $this->pPrefixOp('Expr_UnaryMinus', '-', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:385:        if ($node->expr instanceof Expr\UnaryPlus || $node->expr instanceof Expr\PreInc) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:387:            return '+(' . $this->p($node->expr) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:389:        return $this->pPrefixOp('Expr_UnaryPlus', '+', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:393:        return $this->pPrefixOp('Expr_PreInc', '++', $node->var);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:397:        return $this->pPrefixOp('Expr_PreDec', '--', $node->var);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:401:        return $this->pPostfixOp('Expr_PostInc', $node->var, '++');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:405:        return $this->pPostfixOp('Expr_PostDec', $node->var, '--');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:409:        return $this->pPrefixOp('Expr_ErrorSuppress', '@', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:413:        return $this->pPrefixOp('Expr_YieldFrom', 'yield from ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:417:        return $this->pPrefixOp('Expr_Print', 'print ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:423:        return $this->pPrefixOp('Expr_Cast_Int', '(int) ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:427:        return $this->pPrefixOp('Expr_Cast_Double', '(double) ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:431:        return $this->pPrefixOp('Expr_Cast_String', '(string) ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:435:        return $this->pPrefixOp('Expr_Cast_Array', '(array) ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:439:        return $this->pPrefixOp('Expr_Cast_Object', '(object) ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:443:        return $this->pPrefixOp('Expr_Cast_Bool', '(bool) ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:447:        return $this->pPrefixOp('Expr_Cast_Unset', '(unset) ', $node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:453:        return $this->pCallLhs($node->name)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:454:             . '(' . $this->pMaybeMultiline($node->args) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:458:        return $this->pDereferenceLhs($node->var) . '->' . $this->pObjectProperty($node->name)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:459:             . '(' . $this->pMaybeMultiline($node->args) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:463:        return $this->pDereferenceLhs($node->class) . '::'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:464:             . ($node->name instanceof Expr
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:465:                ? ($node->name instanceof Expr\Variable
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:466:                   ? $this->p($node->name)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:467:                   : '{' . $this->p($node->name) . '}')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:468:                : $node->name)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:469:             . '(' . $this->pMaybeMultiline($node->args) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:473:        return 'empty(' . $this->p($node->expr) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:477:        return 'isset(' . $this->pCommaSeparated($node->vars) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:481:        return 'eval(' . $this->p($node->expr) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:492:        return $map[$node->type] . ' ' . $this->p($node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:496:        return 'list(' . $this->pCommaSeparated($node->items) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:502:        throw new \LogicException('Cannot pretty-print AST with Error nodes');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:506:        if ($node->name instanceof Expr) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:507:            return '${' . $this->p($node->name) . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:509:            return '$' . $node->name;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:514:        $syntax = $node->getAttribute('kind',
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:515:            $this->options['shortArraySyntax'] ? Expr\Array_::KIND_SHORT : Expr\Array_::KIND_LONG);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:517:            return '[' . $this->pMaybeMultiline($node->items, true) . ']';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:519:            return 'array(' . $this->pMaybeMultiline($node->items, true) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:524:        return (null !== $node->key ? $this->p($node->key) . ' => ' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:525:             . ($node->byRef ? '&' : '') . $this->p($node->value);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:529:        return $this->pDereferenceLhs($node->var)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:530:             . '[' . (null !== $node->dim ? $this->p($node->dim) : '') . ']';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:534:        return $this->p($node->name);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:538:        return $this->p($node->class) . '::'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:539:             . (is_string($node->name) ? $node->name : $this->p($node->name));
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:543:        return $this->pDereferenceLhs($node->var) . '->' . $this->pObjectProperty($node->name);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:547:        return $this->pDereferenceLhs($node->class) . '::$' . $this->pObjectProperty($node->name);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:551:        return '`' . $this->pEncapsList($node->parts, '`') . '`';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:555:        return ($node->static ? 'static ' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:556:             . 'function ' . ($node->byRef ? '&' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:557:             . '(' . $this->pCommaSeparated($node->params) . ')'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:558:             . (!empty($node->uses) ? ' use(' . $this->pCommaSeparated($node->uses) . ')': '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:559:             . (null !== $node->returnType ? ' : ' . $this->pType($node->returnType) : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:560:             . ' {' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:564:        return ($node->byRef ? '&' : '') . '$' . $node->var;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:568:        if ($node->class instanceof Stmt\Class_) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:569:            $args = $node->args ? '(' . $this->pMaybeMultiline($node->args) . ')' : '';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:570:            return 'new ' . $this->pClassCommon($node->class, $args);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:572:        return 'new ' . $this->p($node->class) . '(' . $this->pMaybeMultiline($node->args) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:576:        return 'clone ' . $this->p($node->expr);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:582:        return $this->pInfixOp('Expr_Ternary',
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:583:            $node->cond, ' ?' . (null !== $node->if ? ' ' . $this->p($node->if) . ' ' : '') . ': ', $node->else
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:588:        $kind = $node->getAttribute('kind', Expr\Exit_::KIND_DIE);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:590:             . (null !== $node->expr ? '(' . $this->p($node->expr) . ')' : '');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:594:        if ($node->value === null) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:599:                 . ($node->key !== null ? $this->p($node->key) . ' => ' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:600:                 . $this->p($node->value)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:608:        if ($this->canUseSemicolonNamespaces) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:609:            return 'namespace ' . $this->p($node->name) . ';' . "\n" . $this->pStmts($node->stmts, false);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:611:            return 'namespace' . (null !== $node->name ? ' ' . $this->p($node->name) : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:612:                 . ' {' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:617:        return 'use ' . $this->pUseType($node->type)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:618:             . $this->pCommaSeparated($node->uses) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:622:        return 'use ' . $this->pUseType($node->type) . $this->pName($node->prefix)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:623:             . '\{' . $this->pCommaSeparated($node->uses) . '};';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:627:        return $this->pUseType($node->type) . $this->p($node->name)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:628:             . ($node->name->getLast() !== $node->alias ? ' as ' . $node->alias : '');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:637:        return 'interface ' . $node->name
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:638:             . (!empty($node->extends) ? ' extends ' . $this->pCommaSeparated($node->extends) : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:639:             . "\n" . '{' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:643:        return $this->pClassCommon($node, ' ' . $node->name);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:647:        return 'trait ' . $node->name
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:648:             . "\n" . '{' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:652:        return 'use ' . $this->pCommaSeparated($node->traits)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:653:             . (empty($node->adaptations)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:655:                : ' {' . $this->pStmts($node->adaptations) . "\n" . '}');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:659:        return $this->p($node->trait) . '::' . $node->method
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:660:             . ' insteadof ' . $this->pCommaSeparated($node->insteadof) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:664:        return (null !== $node->trait ? $this->p($node->trait) . '::' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:665:             . $node->method . ' as'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:666:             . (null !== $node->newModifier ? ' ' . rtrim($this->pModifiers($node->newModifier), ' ') : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:667:             . (null !== $node->newName     ? ' ' . $node->newName                        : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:672:        return (0 === $node->flags ? 'var ' : $this->pModifiers($node->flags)) . $this->pCommaSeparated($node->props) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:676:        return '$' . $node->name
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:677:             . (null !== $node->default ? ' = ' . $this->p($node->default) : '');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:681:        return $this->pModifiers($node->flags)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:682:             . 'function ' . ($node->byRef ? '&' : '') . $node->name
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:683:             . '(' . $this->pCommaSeparated($node->params) . ')'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:684:             . (null !== $node->returnType ? ' : ' . $this->pType($node->returnType) : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:685:             . (null !== $node->stmts
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:686:                ? "\n" . '{' . $this->pStmts($node->stmts) . "\n" . '}'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:691:        return $this->pModifiers($node->flags)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:692:             . 'const ' . $this->pCommaSeparated($node->consts) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:696:        return 'function ' . ($node->byRef ? '&' : '') . $node->name
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:697:             . '(' . $this->pCommaSeparated($node->params) . ')'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:698:             . (null !== $node->returnType ? ' : ' . $this->pType($node->returnType) : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:699:             . "\n" . '{' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:703:        return 'const ' . $this->pCommaSeparated($node->consts) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:707:        return 'declare (' . $this->pCommaSeparated($node->declares) . ')'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:708:             . (null !== $node->stmts ? ' {' . $this->pStmts($node->stmts) . "\n" . '}' : ';');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:712:        return $node->key . '=' . $this->p($node->value);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:718:        return 'if (' . $this->p($node->cond) . ') {'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:719:             . $this->pStmts($node->stmts) . "\n" . '}'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:720:             . $this->pImplode($node->elseifs)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:721:             . (null !== $node->else ? $this->p($node->else) : '');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:725:        return ' elseif (' . $this->p($node->cond) . ') {'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:726:             . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:730:        return ' else {' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:735:             . $this->pCommaSeparated($node->init) . ';' . (!empty($node->cond) ? ' ' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:736:             . $this->pCommaSeparated($node->cond) . ';' . (!empty($node->loop) ? ' ' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:737:             . $this->pCommaSeparated($node->loop)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:738:             . ') {' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:742:        return 'foreach (' . $this->p($node->expr) . ' as '
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:743:             . (null !== $node->keyVar ? $this->p($node->keyVar) . ' => ' : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:744:             . ($node->byRef ? '&' : '') . $this->p($node->valueVar) . ') {'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:745:             . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:749:        return 'while (' . $this->p($node->cond) . ') {'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:750:             . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:754:        return 'do {' . $this->pStmts($node->stmts) . "\n"
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:755:             . '} while (' . $this->p($node->cond) . ');';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:759:        return 'switch (' . $this->p($node->cond) . ') {'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:760:             . $this->pStmts($node->cases) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:764:        return (null !== $node->cond ? 'case ' . $this->p($node->cond) : 'default') . ':'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:765:             . $this->pStmts($node->stmts);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:769:        return 'try {' . $this->pStmts($node->stmts) . "\n" . '}'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:770:             . $this->pImplode($node->catches)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:771:             . ($node->finally !== null ? $this->p($node->finally) : '');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:775:        return ' catch (' . $this->pImplode($node->types, '|') . ' $' . $node->var . ') {'
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:776:             . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:780:        return ' finally {' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:784:        return 'break' . ($node->num !== null ? ' ' . $this->p($node->num) : '') . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:788:        return 'continue' . ($node->num !== null ? ' ' . $this->p($node->num) : '') . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:792:        return 'return' . (null !== $node->expr ? ' ' . $this->p($node->expr) : '') . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:796:        return 'throw ' . $this->p($node->expr) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:800:        return $node->name . ':';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:804:        return 'goto ' . $node->name . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:810:        return 'echo ' . $this->pCommaSeparated($node->exprs) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:814:        return 'static ' . $this->pCommaSeparated($node->vars) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:818:        return 'global ' . $this->pCommaSeparated($node->vars) . ';';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:822:        return '$' . $node->name
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:823:             . (null !== $node->default ? ' = ' . $this->p($node->default) : '');
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:827:        return 'unset(' . $this->pCommaSeparated($node->vars) . ');';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:831:        $newline = $node->getAttribute('hasLeadingNewline', true) ? "\n" : '';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:832:        return '?>' . $this->pNoIndent($newline . $node->value) . '<?php ';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:836:        return '__halt_compiler();' . $node->remaining;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:846:        return is_string($node) ? $node : $this->p($node);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:850:        return $this->pModifiers($node->flags)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:852:        . (null !== $node->extends ? ' extends ' . $this->p($node->extends) : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:853:        . (!empty($node->implements) ? ' implements ' . $this->pCommaSeparated($node->implements) : '')
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:854:        . "\n" . '{' . $this->pStmts($node->stmts) . "\n" . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:859:            return '{' . $this->p($node) . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:878:                $return .= $this->escapeString($element->value, $quote);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:880:                $return .= '{' . $this->p($element) . '}';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:896:        return preg_replace_callback('/([\0-\10\16-\37])(?=([0-7]?))/', function ($matches) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:916:            $atEnd = $i === count($parts) - 1;
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:918:                && $this->containsEndLabel($part->value, $label, $atStart, $atEnd)
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:940:            return $this->p($node);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:942:            return '(' . $this->p($node) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:955:            return $this->p($node);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:957:            return '(' . $this->p($node) . ')';
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:963:            if ($node && $node->getAttribute('comments')) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:971:        if (!$this->hasNodeWithComments($nodes)) {
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:972:            return $this->pCommaSeparated($nodes);
vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php:974:            return $this->pCommaSeparatedMultiline($nodes, $trailingComma) . "\n";
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:32:        $this->tokenMap = $this->createTokenMap();
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:36:        $this->dropTokens = array_fill_keys(
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:45:        $this->usedAttributes = array_fill_keys($options['usedAttributes'], true);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:63:        $this->code = $code; // keep the code around for __halt_compiler() handling
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:64:        $this->pos  = -1;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:65:        $this->line =  1;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:66:        $this->filePos = 0;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:70:        $this->prevCloseTagHasNewline = true;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:74:        $this->resetErrors();
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:75:        $this->tokens = @token_get_all($code);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:76:        $this->handleErrors($errorHandler);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:96:            $chr = $this->code[$i];
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:111:            $errorHandler->handleError(new Error($errorMsg, [
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:123:            && substr($token[1], -2) !== '*/';
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:139:        if (!$this->errorMayHaveOccurred()) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:150:        foreach ($this->tokens as $i => $token) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:154:            if (substr($this->code, $filePos, $tokenLen) !== $tokenValue) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:156:                $nextFilePos = strpos($this->code, $tokenValue, $filePos);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:157:                $this->handleInvalidCharacterRange(
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:166:        if ($filePos !== \strlen($this->code)) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:167:            if (substr($this->code, $filePos, 2) === '/*') {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:169:                $comment = substr($this->code, $filePos);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:170:                $errorHandler->handleError(new Error('Unterminated comment', [
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:179:                $this->tokens[] = [$isDocComment ? T_DOC_COMMENT : T_COMMENT, $comment, $line];
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:182:                $this->handleInvalidCharacterRange(
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:183:                    $filePos, \strlen($this->code), $line, $errorHandler);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:188:        if (count($this->tokens) > 0) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:190:            $lastToken = $this->tokens[count($this->tokens) - 1];
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:191:            if ($this->isUnterminatedComment($lastToken)) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:192:                $errorHandler->handleError(new Error('Unterminated comment', [
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:193:                    'startLine' => $line - substr_count($lastToken[1], "\n"),
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:195:                    'startFilePos' => $filePos - \strlen($lastToken[1]),
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:210:     *                       non-discarded token and the current one.
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:229:            if (isset($this->tokens[++$this->pos])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:230:                $token = $this->tokens[$this->pos];
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:236:            if (isset($this->usedAttributes['startLine'])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:237:                $startAttributes['startLine'] = $this->line;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:239:            if (isset($this->usedAttributes['startTokenPos'])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:240:                $startAttributes['startTokenPos'] = $this->pos;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:242:            if (isset($this->usedAttributes['startFilePos'])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:243:                $startAttributes['startFilePos'] = $this->filePos;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:250:                    $this->filePos += 2;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:253:                    $this->filePos += 1;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:256:            } elseif (!isset($this->dropTokens[$token[0]])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:258:                $id = $this->tokenMap[$token[0]];
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:260:                    $this->prevCloseTagHasNewline = false !== strpos($token[1], "\n");
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:262:                    $startAttributes['hasLeadingNewline'] = $this->prevCloseTagHasNewline;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:265:                $this->line += substr_count($value, "\n");
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:266:                $this->filePos += \strlen($value);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:269:                    if (isset($this->usedAttributes['comments'])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:271:                            ? new Comment\Doc($token[1], $this->line, $this->filePos)
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:272:                            : new Comment($token[1], $this->line, $this->filePos);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:277:                $this->line += substr_count($token[1], "\n");
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:278:                $this->filePos += \strlen($token[1]);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:282:            if (isset($this->usedAttributes['endLine'])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:283:                $endAttributes['endLine'] = $this->line;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:285:            if (isset($this->usedAttributes['endTokenPos'])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:286:                $endAttributes['endTokenPos'] = $this->pos;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:288:            if (isset($this->usedAttributes['endFilePos'])) {
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:289:                $endAttributes['endFilePos'] = $this->filePos - 1;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:309:        return $this->tokens;
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:319:        $textAfter = substr($this->code, $this->filePos);
vendor/nikic/php-parser/lib/PhpParser/Lexer.php:329:        $this->pos = count($this->tokens);
vendor/nikic/php-parser/lib/PhpParser/Node/Param.php:32:        $this->type = $type;
vendor/nikic/php-parser/lib/PhpParser/Node/Param.php:33:        $this->byRef = $byRef;
vendor/nikic/php-parser/lib/PhpParser/Node/Param.php:34:        $this->variadic = $variadic;
vendor/nikic/php-parser/lib/PhpParser/Node/Param.php:35:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Param.php:36:        $this->default = $default;
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:22:        $this->parts = self::prepareName($name);
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:35:        return $this->parts[0];
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:44:        return $this->parts[count($this->parts) - 1];
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:53:        return 1 == count($this->parts);
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:62:        return 1 < count($this->parts);
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:90:        return implode('\\', $this->parts);
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:100:        return implode('\\', $this->parts);
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:120:        $numParts = count($this->parts);
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:128:            $realLength = $numParts - $realOffset;
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:130:            $realLength = $length < 0 ? $length + $numParts - $realOffset : $length;
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:141:        return new static(array_slice($this->parts, $realOffset, $realLength), $this->attributes);
vendor/nikic/php-parser/lib/PhpParser/Node/Name.php:189:            return $name->parts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Case_.php:23:        $this->cond = $cond;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Case_.php:24:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/HaltCompiler.php:20:        $this->remaining = $remaining;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ElseIf_.php:23:        $this->cond = $cond;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ElseIf_.php:24:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/For_.php:30:        $this->init = isset($subNodes['init']) ? $subNodes['init'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/For_.php:31:        $this->cond = isset($subNodes['cond']) ? $subNodes['cond'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/For_.php:32:        $this->loop = isset($subNodes['loop']) ? $subNodes['loop'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/For_.php:33:        $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUse.php:24:        $this->traits = $traits;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUse.php:25:        $this->adaptations = $adaptations;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php:26:        $this->flags = $flags;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php:27:        $this->type = $flags;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php:28:        $this->props = $props;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php:36:        return ($this->flags & Class_::MODIFIER_PUBLIC) !== 0
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php:37:            || ($this->flags & Class_::VISIBILITY_MODIFIER_MASK) === 0;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php:41:        return (bool) ($this->flags & Class_::MODIFIER_PROTECTED);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php:45:        return (bool) ($this->flags & Class_::MODIFIER_PRIVATE);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php:49:        return (bool) ($this->flags & Class_::MODIFIER_STATIC);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Switch_.php:23:        $this->cond = $cond;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Switch_.php:24:        $this->cases = $cases;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:40:        $this->flags = isset($subNodes['flags']) ? $subNodes['flags']
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:42:        $this->type = $this->flags;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:43:        $this->byRef = isset($subNodes['byRef'])  ? $subNodes['byRef']  : false;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:44:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:45:        $this->params = isset($subNodes['params']) ? $subNodes['params'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:46:        $this->returnType = isset($subNodes['returnType']) ? $subNodes['returnType'] : null;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:47:        $this->stmts = array_key_exists('stmts', $subNodes) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:55:        return $this->byRef;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:59:        return $this->params;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:63:        return $this->returnType;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:67:        return $this->stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:71:        return ($this->flags & Class_::MODIFIER_PUBLIC) !== 0
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:72:            || ($this->flags & Class_::VISIBILITY_MODIFIER_MASK) === 0;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:76:        return (bool) ($this->flags & Class_::MODIFIER_PROTECTED);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:80:        return (bool) ($this->flags & Class_::MODIFIER_PRIVATE);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:84:        return (bool) ($this->flags & Class_::MODIFIER_ABSTRACT);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:88:        return (bool) ($this->flags & Class_::MODIFIER_FINAL);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php:92:        return (bool) ($this->flags & Class_::MODIFIER_STATIC);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:34:        $this->byRef = isset($subNodes['byRef']) ? $subNodes['byRef'] : false;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:35:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:36:        $this->params = isset($subNodes['params']) ? $subNodes['params'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:37:        $this->returnType = isset($subNodes['returnType']) ? $subNodes['returnType'] : null;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:38:        $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:46:        return $this->byRef;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:50:        return $this->params;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:54:        return $this->returnType;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php:58:        return $this->stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/StaticVar.php:23:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/StaticVar.php:24:        $this->default = $default;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Global_.php:20:        $this->vars = $vars;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassLike.php:20:        foreach ($this->stmts as $stmt) {
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassLike.php:31:     * @param string $name Name of the method (compared case-insensitively)
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassLike.php:37:        foreach ($this->stmts as $stmt) {
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassLike.php:38:            if ($stmt instanceof ClassMethod && $lowerName === strtolower($stmt->name)) {
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Precedence.php:22:        $this->trait = $trait;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Precedence.php:23:        $this->method = $method;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Precedence.php:24:        $this->insteadof = $insteadof;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Alias.php:25:        $this->trait = $trait;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Alias.php:26:        $this->method = $method;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Alias.php:27:        $this->newModifier = $newModifier;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Alias.php:28:        $this->newName = $newName;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Interface_.php:23:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Interface_.php:24:        $this->extends = isset($subNodes['extends']) ? $subNodes['extends'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Interface_.php:25:        $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Use_.php:36:        $this->type = $type;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Use_.php:37:        $this->uses = $uses;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/If_.php:30:        $this->cond = $cond;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/If_.php:31:        $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/If_.php:32:        $this->elseifs = isset($subNodes['elseifs']) ? $subNodes['elseifs'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/If_.php:33:        $this->else = isset($subNodes['else']) ? $subNodes['else'] : null;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Throw_.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TryCatch.php:26:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TryCatch.php:27:        $this->catches = $catches;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TryCatch.php:28:        $this->finally = $finally;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/DeclareDeclare.php:23:        $this->key = $key;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/DeclareDeclare.php:24:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Declare_.php:23:        $this->declares = $declares;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Declare_.php:24:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Namespace_.php:27:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Namespace_.php:28:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/PropertyProperty.php:23:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/PropertyProperty.php:24:        $this->default = $default;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Do_.php:23:        $this->cond = $cond;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Do_.php:24:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Trait_.php:19:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Trait_.php:20:        $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Foreach_.php:33:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Foreach_.php:34:        $this->keyVar = isset($subNodes['keyVar']) ? $subNodes['keyVar'] : null;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Foreach_.php:35:        $this->byRef = isset($subNodes['byRef']) ? $subNodes['byRef'] : false;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Foreach_.php:36:        $this->valueVar = $valueVar;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Foreach_.php:37:        $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Catch_.php:26:        $this->types = $types;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Catch_.php:27:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Catch_.php:28:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Finally_.php:20:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php:23:        $this->flags = $flags;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php:24:        $this->consts = $consts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php:32:        return ($this->flags & Class_::MODIFIER_PUBLIC) !== 0
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php:33:            || ($this->flags & Class_::VISIBILITY_MODIFIER_MASK) === 0;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php:37:        return (bool) ($this->flags & Class_::MODIFIER_PROTECTED);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php:41:        return (bool) ($this->flags & Class_::MODIFIER_PRIVATE);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php:45:        return (bool) ($this->flags & Class_::MODIFIER_STATIC);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Static_.php:20:        $this->vars = $vars;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/While_.php:23:        $this->cond = $cond;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/While_.php:24:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Continue_.php:20:        $this->num = $num;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Echo_.php:20:        $this->exprs = $exprs;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/InlineHTML.php:20:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Label.php:20:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Const_.php:20:        $this->consts = $consts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:50:        $this->flags = isset($subNodes['flags']) ? $subNodes['flags']
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:52:        $this->type = $this->flags;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:53:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:54:        $this->extends = isset($subNodes['extends']) ? $subNodes['extends'] : null;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:55:        $this->implements = isset($subNodes['implements']) ? $subNodes['implements'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:56:        $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:64:        return (bool) ($this->flags & self::MODIFIER_ABSTRACT);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:68:        return (bool) ($this->flags & self::MODIFIER_FINAL);
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php:72:        return null === $this->name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/GroupUse.php:27:        $this->type = $type;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/GroupUse.php:28:        $this->prefix = $prefix;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/GroupUse.php:29:        $this->uses = $uses;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Break_.php:20:        $this->num = $num;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Goto_.php:20:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Else_.php:20:        $this->stmts = $stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Return_.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Unset_.php:20:        $this->vars = $vars;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/UseUse.php:26:            $alias = $name->getLast();
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/UseUse.php:30:        $this->type = $type;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/UseUse.php:31:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/UseUse.php:32:        $this->alias = $alias;
vendor/nikic/php-parser/lib/PhpParser/Node/Arg.php:26:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Arg.php:27:        $this->byRef = $byRef;
vendor/nikic/php-parser/lib/PhpParser/Node/Arg.php:28:        $this->unpack = $unpack;
vendor/nikic/php-parser/lib/PhpParser/Node/NullableType.php:20:        $this->type = $type;
vendor/nikic/php-parser/lib/PhpParser/Node/Const_.php:23:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Const_.php:24:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Array_.php:24:        $this->items = $items;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/MethodCall.php:27:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/MethodCall.php:28:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/MethodCall.php:29:        $this->args = $args;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/UnaryMinus.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Eval_.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Ternary.php:26:        $this->cond = $cond;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Ternary.php:27:        $this->if = $if;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Ternary.php:28:        $this->else = $else;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/UnaryPlus.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticPropertyFetch.php:24:        $this->class = $class;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticPropertyFetch.php:25:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PreDec.php:20:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ShellExec.php:20:        $this->parts = $parts;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PostInc.php:20:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Isset_.php:20:        $this->vars = $vars;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/List_.php:20:        $this->items = $items;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:38:        $this->static = isset($subNodes['static']) ? $subNodes['static'] : false;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:39:        $this->byRef = isset($subNodes['byRef']) ? $subNodes['byRef'] : false;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:40:        $this->params = isset($subNodes['params']) ? $subNodes['params'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:41:        $this->uses = isset($subNodes['uses']) ? $subNodes['uses'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:42:        $this->returnType = isset($subNodes['returnType']) ? $subNodes['returnType'] : null;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:43:        $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:51:        return $this->byRef;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:55:        return $this->params;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:59:        return $this->returnType;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php:63:        return $this->stmts;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Empty_.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Clone_.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/New_.php:24:        $this->class = $class;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/New_.php:25:        $this->args = $args;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PostDec.php:20:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BitwiseNot.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Instanceof_.php:24:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Instanceof_.php:25:        $this->class = $class;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignRef.php:23:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignRef.php:24:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PreInc.php:20:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Assign.php:23:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Assign.php:24:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp.php:23:        $this->left = $left;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp.php:24:        $this->right = $right;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/FuncCall.php:24:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/FuncCall.php:25:        $this->args = $args;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Variable.php:20:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticCall.php:27:        $this->class = $class;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticCall.php:28:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticCall.php:29:        $this->args = $args;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Exit_.php:24:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Yield_.php:23:        $this->key = $key;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Yield_.php:24:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ErrorSuppress.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PropertyFetch.php:23:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PropertyFetch.php:24:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BooleanNot.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/YieldFrom.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Print_.php:20:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ClosureUse.php:23:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ClosureUse.php:24:        $this->byRef = $byRef;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ConstFetch.php:21:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayDimFetch.php:23:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayDimFetch.php:24:        $this->dim = $dim;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Include_.php:28:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Include_.php:29:        $this->type = $type;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp.php:23:        $this->var = $var;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp.php:24:        $this->expr = $expr;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ClassConstFetch.php:24:        $this->class = $class;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ClassConstFetch.php:25:        $this->name = $name;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayItem.php:26:        $this->key = $key;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayItem.php:27:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayItem.php:28:        $this->byRef = $byRef;
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/EncapsedStringPart.php:20:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/LNumber.php:27:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/DNumber.php:20:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/Encapsed.php:21:        $this->parts = $parts;
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php:38:        $this->value = $value;
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php:65:                substr($str, $bLength + 1, -1)
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php:69:                substr($str, $bLength + 1, -1), '"', $parseUnicodeEscape
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php:92:            $extra = '|u\{([0-9a-fA-F]+)\}';
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php:96:            '~\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3}' . $extra . ')~',
vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php:128:        throw new Error('Invalid UTF-8 codepoint escape sequence: Codepoint too large');
vendor/nikic/php-parser/lib/PhpParser/Error.php:15:     *                              (or start line of error -- deprecated)
vendor/nikic/php-parser/lib/PhpParser/Error.php:18:        $this->rawMessage = (string) $message;
vendor/nikic/php-parser/lib/PhpParser/Error.php:20:            $this->attributes = $attributes;
vendor/nikic/php-parser/lib/PhpParser/Error.php:22:            $this->attributes = array('startLine' => $attributes);
vendor/nikic/php-parser/lib/PhpParser/Error.php:24:        $this->updateMessage();
vendor/nikic/php-parser/lib/PhpParser/Error.php:33:        return $this->rawMessage;
vendor/nikic/php-parser/lib/PhpParser/Error.php:42:        return isset($this->attributes['startLine']) ? $this->attributes['startLine'] : -1;
vendor/nikic/php-parser/lib/PhpParser/Error.php:51:        return isset($this->attributes['endLine']) ? $this->attributes['endLine'] : -1;
vendor/nikic/php-parser/lib/PhpParser/Error.php:61:        return $this->attributes;
vendor/nikic/php-parser/lib/PhpParser/Error.php:70:        $this->attributes = $attributes;
vendor/nikic/php-parser/lib/PhpParser/Error.php:71:        $this->updateMessage();
vendor/nikic/php-parser/lib/PhpParser/Error.php:80:        $this->rawMessage = (string) $message;
vendor/nikic/php-parser/lib/PhpParser/Error.php:81:        $this->updateMessage();
vendor/nikic/php-parser/lib/PhpParser/Error.php:90:        $this->attributes['startLine'] = (int) $line;
vendor/nikic/php-parser/lib/PhpParser/Error.php:91:        $this->updateMessage();
vendor/nikic/php-parser/lib/PhpParser/Error.php:102:        return isset($this->attributes['startFilePos']) && isset($this->attributes['endFilePos']);
vendor/nikic/php-parser/lib/PhpParser/Error.php:106:     * Gets the start column (1-based) into the line where the error started.
vendor/nikic/php-parser/lib/PhpParser/Error.php:112:        if (!$this->hasColumnInfo()) {
vendor/nikic/php-parser/lib/PhpParser/Error.php:116:        return $this->toColumn($code, $this->attributes['startFilePos']);
vendor/nikic/php-parser/lib/PhpParser/Error.php:120:     * Gets the end column (1-based) into the line where the error ended.
vendor/nikic/php-parser/lib/PhpParser/Error.php:126:        if (!$this->hasColumnInfo()) {
vendor/nikic/php-parser/lib/PhpParser/Error.php:130:        return $this->toColumn($code, $this->attributes['endFilePos']);
vendor/nikic/php-parser/lib/PhpParser/Error.php:135:            '%s from %d:%d to %d:%d', $this->getRawMessage(),
vendor/nikic/php-parser/lib/PhpParser/Error.php:136:            $this->getStartLine(), $this->getStartColumn($code),
vendor/nikic/php-parser/lib/PhpParser/Error.php:137:            $this->getEndLine(), $this->getEndColumn($code)
vendor/nikic/php-parser/lib/PhpParser/Error.php:146:        $lineStartPos = strrpos($code, "\n", $pos - strlen($code));
vendor/nikic/php-parser/lib/PhpParser/Error.php:148:            $lineStartPos = -1;
vendor/nikic/php-parser/lib/PhpParser/Error.php:151:        return $pos - $lineStartPos;
vendor/nikic/php-parser/lib/PhpParser/Error.php:158:        $this->message = $this->rawMessage;
vendor/nikic/php-parser/lib/PhpParser/Error.php:160:        if (-1 === $this->getStartLine()) {
vendor/nikic/php-parser/lib/PhpParser/Error.php:161:            $this->message .= ' on unknown line';
vendor/nikic/php-parser/lib/PhpParser/Error.php:163:            $this->message .= ' on line ' . $this->getStartLine();
vendor/nikic/php-parser/test_old/run-php-src.sh:1:wget -q https://github.com/php/php-src/archive/php-7.1.0.tar.gz
vendor/nikic/php-parser/test_old/run-php-src.sh:2:mkdir -p ./data/php-src
vendor/nikic/php-parser/test_old/run-php-src.sh:3:tar -xzf ./php-7.1.0.tar.gz -C ./data/php-src --strip-components=1
vendor/nikic/php-parser/test_old/run-php-src.sh:4:php -n test_old/run.php --verbose --no-progress PHP7 ./data/php-src
vendor/nikic/php-parser/test_old/run.php:15:    php run.php [--no-progress] testType pathToTestFiles
vendor/nikic/php-parser/test_old/run.php:21:    --no-progress    Disables showing which file is currently tested.
vendor/nikic/php-parser/test_old/run.php:34:    if ('-' === $arg[0]) {
vendor/nikic/php-parser/test_old/run.php:48:    if ($option === '--no-progress') {
vendor/nikic/php-parser/test_old/run.php:50:    } elseif ($option === '--verbose') {
vendor/nikic/php-parser/test_old/run.php:82:| ext.mbstring.tests.zend_multibyte-01
vendor/nikic/php-parser/test_old/run.php:99:            if (!preg_match('~--FILE--\s*(.*?)--[A-Z]+--~s', $code, $matches)) {
vendor/nikic/php-parser/test_old/run.php:102:            if (preg_match('~--EXPECT(?:F|REGEX)?--\s*(?:Parse|Fatal) error~', $code)) {
vendor/nikic/php-parser/test_old/run.php:136:    $readTime += microtime(true) - $startTime;
vendor/nikic/php-parser/test_old/run.php:152:        $stmts = $parser->parse($code);
vendor/nikic/php-parser/test_old/run.php:153:        $parseTime += microtime(true) - $startTime;
vendor/nikic/php-parser/test_old/run.php:156:        $code = '<?php' . "\n" . $prettyPrinter->prettyPrint($stmts);
vendor/nikic/php-parser/test_old/run.php:157:        $ppTime += microtime(true) - $startTime;
vendor/nikic/php-parser/test_old/run.php:161:            $ppStmts = $parser->parse($code);
vendor/nikic/php-parser/test_old/run.php:162:            $reparseTime += microtime(true) - $startTime;
vendor/nikic/php-parser/test_old/run.php:165:            $same = $nodeDumper->dump($stmts) == $nodeDumper->dump($ppStmts);
vendor/nikic/php-parser/test_old/run.php:166:            $compareTime += microtime(true) - $startTime;
vendor/nikic/php-parser/test_old/run.php:177:            echo $file, ":\n    Parse of pretty print failed with message: {$e->getMessage()}\n";
vendor/nikic/php-parser/test_old/run.php:185:        echo $file, ":\n    Parse failed with message: {$e->getMessage()}\n";
vendor/nikic/php-parser/test_old/run.php:217:     'Total time:           ', microtime(true) - $totalStartTime, "\n",
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:7:-------------
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:26:-------
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:32:$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:38:-----|---------
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:57:$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:60:    $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:63:    echo 'Parse Error: ', $e->getMessage();
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:70:---------
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:120:`$node->subNodeName`. The `Stmt\Echo_` node has only one subnode `exprs`. So in order to access it
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:121:in the above example you would write `$stmts[0]->exprs`. If you wanted to access the name of the function
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:122:call, you would write `$stmts[0]->exprs[1]->name`.
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:126:`_` for reserved-keyword class names.
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:138:--------------
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:151:$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:156:    $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:160:          ->exprs     // sub expressions
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:162:          ->value     // it's value, i.e. 'Hi '
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:166:    $code = $prettyPrinter->prettyPrint($stmts);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:170:    echo 'Parse Error: ', $e->getMessage();
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:178:As you can see the source code was first parsed using `PhpParser\Parser->parse()`, then changed and then
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:179:again converted to code using `PhpParser\PrettyPrinter\Standard->prettyPrint()`.
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:188:-----------------
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:203:$parser        = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:208:$traverser->addVisitor(new MyNodeVisitor);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:214:    $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:217:    $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:220:    $code = $prettyPrinter->prettyPrintFile($stmts);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:224:    echo 'Parse Error: ', $e->getMessage();
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:238:            $node->value = 'foo';
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:282:-----------------------------
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:297:know which function they are referring to. In most cases this is a non-issue as the global functions
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:304:--------------------------------------------------------
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:322:$parser        = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:326:$traverser->addVisitor(new NameResolver); // we will need resolved names
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:327:$traverser->addVisitor(new NamespaceConverter); // our own node visitor
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:339:        $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:342:        $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:345:        $code = $prettyPrinter->prettyPrintFile($stmts);
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:349:            substr_replace($file->getPathname(), $outDir, 0, strlen($inDir)),
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:353:        echo 'Parse Error: ', $e->getMessage();
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:368:            return new Node\Name($node->toString('_'));
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:376:by underscores instead of backslashes. This is what `$node->toString('_')` does. (If you want to
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:377:create a name with backslashes either write `$node->toString()` or `(string) $node`.) Then we create
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:392:            return new Node\Name($node->toString('_'));
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:396:            $node->name = $node->namespacedName->toString('_');
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:398:            foreach ($node->consts as $const) {
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:399:                $const->name = $const->namespacedName->toString('_');
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:418:            return new Node\Name($node->toString('_'));
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:422:            $node->name = $node->namespacedName->toString('_');
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:424:            foreach ($node->consts as $const) {
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:425:                $const->name = $const->namespacedName->toString('_');
vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:429:            return $node->stmts;
vendor/nikic/php-parser/doc/component/Error_handling.markdown:11:------------------
vendor/nikic/php-parser/doc/component/Error_handling.markdown:20:$parser = (new PhpParser\ParserFactory)->create(PhpParser\ParserFactory::PREFER_PHP7, $lexer);
vendor/nikic/php-parser/doc/component/Error_handling.markdown:23:    $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/component/Error_handling.markdown:30:Before using column information its availability needs to be checked with `$e->hasColumnInfo()`, as the precise
vendor/nikic/php-parser/doc/component/Error_handling.markdown:35:if ($e->hasColumnInfo()) {
vendor/nikic/php-parser/doc/component/Error_handling.markdown:36:    echo $e->getRawMessage() . ' from ' . $e->getStartLine() . ':' . $e->getStartColumn($code)
vendor/nikic/php-parser/doc/component/Error_handling.markdown:37:        . ' to ' . $e->getEndLine() . ':' . $e->getEndColumn($code);
vendor/nikic/php-parser/doc/component/Error_handling.markdown:39:    echo $e->getMessageWithColumnInfo();
vendor/nikic/php-parser/doc/component/Error_handling.markdown:41:    echo $e->getMessage();
vendor/nikic/php-parser/doc/component/Error_handling.markdown:45:Both line numbers and column numbers are 1-based. EOF errors will be located at the position one past the end of the
vendor/nikic/php-parser/doc/component/Error_handling.markdown:49:--------------
vendor/nikic/php-parser/doc/component/Error_handling.markdown:59:$parser = (new PhpParser\ParserFactory)->create(PhpParser\ParserFactory::ONLY_PHP7);
vendor/nikic/php-parser/doc/component/Error_handling.markdown:62:$stmts = $parser->parse($code, $errorHandler);
vendor/nikic/php-parser/doc/component/Error_handling.markdown:64:if ($errorHandler->hasErrors()) {
vendor/nikic/php-parser/doc/component/Error_handling.markdown:65:    foreach ($errorHandler->getErrors() as $error) {
vendor/nikic/php-parser/doc/component/Error_handling.markdown:71:    // $stmts is a best-effort partial AST
vendor/nikic/php-parser/doc/component/Lexer.markdown:11:-------------
vendor/nikic/php-parser/doc/component/Lexer.markdown:15:accessed using `$node->getAttribute()`, `$node->setAttribute()`, `$node->hasAttribute()` and `$node->getAttributes()`
vendor/nikic/php-parser/doc/component/Lexer.markdown:29:   between the previous non-discarded token and the current one. Use of this attribute is required for the
vendor/nikic/php-parser/doc/component/Lexer.markdown:30:   `$node->getDocComment()` method to work. The attribute is also needed if you wish the pretty printer to retain
vendor/nikic/php-parser/doc/component/Lexer.markdown:32: * `startLine`: Line in which the node starts. This attribute is required for the `$node->getLine()` to work. It is also
vendor/nikic/php-parser/doc/component/Lexer.markdown:48:    $i = $prop->getAttribute('startTokenPos');
vendor/nikic/php-parser/doc/component/Lexer.markdown:60:        $this->tokens = $tokens;
vendor/nikic/php-parser/doc/component/Lexer.markdown:65:            var_dump(isDeclaredUsingVar($this->tokens, $node));
vendor/nikic/php-parser/doc/component/Lexer.markdown:75:$parser = (new PhpParser\ParserFactory)->create(PhpParser\ParserFactory::PREFER_PHP7, $lexer);
vendor/nikic/php-parser/doc/component/Lexer.markdown:79:$traverser->addVisitor($visitor);
vendor/nikic/php-parser/doc/component/Lexer.markdown:82:    $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/component/Lexer.markdown:83:    $visitor->setTokens($lexer->getTokens());
vendor/nikic/php-parser/doc/component/Lexer.markdown:84:    $stmts = $traverser->traverse($stmts);
vendor/nikic/php-parser/doc/component/Lexer.markdown:86:    echo 'Parse Error: ', $e->getMessage();
vendor/nikic/php-parser/doc/component/Lexer.markdown:94:---------------
vendor/nikic/php-parser/doc/component/Lexer.markdown:115:token should be written into the by-reference `$value` parameter (which will then be available as `$n` in the parser).
vendor/nikic/php-parser/doc/component/Lexer.markdown:119:The other two by-ref variables `$startAttributes` and `$endAttributes` define which attributes will eventually be
vendor/nikic/php-parser/doc/component/Lexer.markdown:140:        if ($tokenId == Tokens::T_CONSTANT_ENCAPSED_STRING   // non-interpolated string
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:7:--------------------
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:14:----------------------
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:30:$parser = (new PhpParser\ParserFactory)->create(PhpParser\ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:34:    $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:36:    echo $nodeDumper->dump($stmts), "\n";
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:38:    echo 'Parse Error: ', $e->getMessage();
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:90:-------------
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:106:$parser = (new PhpParser\ParserFactory)->create(PhpParser\ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:110:    $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:114:    echo 'Parse Error: ', $e->getMessage();
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:215:can be JSON encoded. In particular, JSON only supports UTF-8 strings.
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:218:--------------------
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:220:It is also possible to serialize the node tree to XML using `PhpParser\Serializer\XML->serialize()`
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:221:and to unserialize it using `PhpParser\Unserializer\XML->unserialize()`. This is useful for
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:236:$parser = (new PhpParser\ParserFactory)->create(PhpParser\ParserFactory::PREFER_PHP7);
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:240:    $stmts = $parser->parse($code);
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:242:    echo $serializer->serialize($stmts);
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:244:    echo 'Parse Error: ', $e->getMessage();
vendor/nikic/php-parser/doc/3_Other_node_tree_representations.markdown:251:<?xml version="1.0" encoding="UTF-8"?>
vendor/nikic/php-parser/doc/4_Code_generation.markdown:22:$node = $factory->namespace('Name\Space')
vendor/nikic/php-parser/doc/4_Code_generation.markdown:23:    ->addStmt($factory->use('Some\Other\Thingy')->as('SomeOtherClass'))
vendor/nikic/php-parser/doc/4_Code_generation.markdown:24:    ->addStmt($factory->class('SomeClass')
vendor/nikic/php-parser/doc/4_Code_generation.markdown:25:        ->extend('SomeOtherClass')
vendor/nikic/php-parser/doc/4_Code_generation.markdown:26:        ->implement('A\Few', '\Interfaces')
vendor/nikic/php-parser/doc/4_Code_generation.markdown:27:        ->makeAbstract() // ->makeFinal()
vendor/nikic/php-parser/doc/4_Code_generation.markdown:29:        ->addStmt($factory->method('someMethod')
vendor/nikic/php-parser/doc/4_Code_generation.markdown:30:            ->makePublic()
vendor/nikic/php-parser/doc/4_Code_generation.markdown:31:            ->makeAbstract() // ->makeFinal()
vendor/nikic/php-parser/doc/4_Code_generation.markdown:32:            ->setReturnType('bool')
vendor/nikic/php-parser/doc/4_Code_generation.markdown:33:            ->addParam($factory->param('someParam')->setTypeHint('SomeClass'))
vendor/nikic/php-parser/doc/4_Code_generation.markdown:34:            ->setDocComment('/**
vendor/nikic/php-parser/doc/4_Code_generation.markdown:41:        ->addStmt($factory->method('anotherMethod')
vendor/nikic/php-parser/doc/4_Code_generation.markdown:42:            ->makeProtected() // ->makePublic() [default], ->makePrivate()
vendor/nikic/php-parser/doc/4_Code_generation.markdown:43:            ->addParam($factory->param('someParam')->setDefault('test'))
vendor/nikic/php-parser/doc/4_Code_generation.markdown:45:            ->addStmt(new Node\Expr\Print_(new Node\Expr\Variable('someParam')))
vendor/nikic/php-parser/doc/4_Code_generation.markdown:49:        ->addStmt($factory->property('someProperty')->makeProtected())
vendor/nikic/php-parser/doc/4_Code_generation.markdown:50:        ->addStmt($factory->property('anotherProperty')->makePrivate()->setDefault(array(1, 2, 3)))
vendor/nikic/php-parser/doc/4_Code_generation.markdown:53:    ->getNode()
vendor/nikic/php-parser/doc/4_Code_generation.markdown:58:echo $prettyPrinter->prettyPrintFile($stmts);
vendor/nikic/php-parser/doc/0_Introduction.markdown:7:-----------------
vendor/nikic/php-parser/doc/0_Introduction.markdown:27:------------------
vendor/nikic/php-parser/doc/0_Introduction.markdown:29:The parser supports parsing PHP 5.2-5.6 and PHP 7.
vendor/nikic/php-parser/doc/0_Introduction.markdown:37:----------------------------
vendor/nikic/php-parser/doc/0_Introduction.markdown:65:--------------------
vendor/phpstan/phpstan/composer.json:3:	"description": "PHPStan - PHP Static Analysis Tool",
vendor/phpstan/phpstan/composer.json:9:		"branch-alias": {
vendor/phpstan/phpstan/composer.json:10:			"dev-master": "0.9-dev"
vendor/phpstan/phpstan/composer.json:17:		"nette/robot-loader": "^3.0.1",
vendor/phpstan/phpstan/composer.json:19:		"nikic/php-parser": "^3.1",
vendor/phpstan/phpstan/composer.json:22:		"jean85/pretty-package-versions": "^1.0.3",
vendor/phpstan/phpstan/composer.json:23:		"phpstan/phpdoc-parser": "^0.2"
vendor/phpstan/phpstan/composer.json:25:	"require-dev": {
vendor/phpstan/phpstan/composer.json:26:		"ext-intl": "*",
vendor/phpstan/phpstan/composer.json:27:		"ext-gd": "*",
vendor/phpstan/phpstan/composer.json:28:		"ext-mysqli": "*",
vendor/phpstan/phpstan/composer.json:29:		"consistence/coding-standard": "2.2.1",
vendor/phpstan/phpstan/composer.json:30:		"jakub-onderka/php-parallel-lint": "^0.9.2",
vendor/phpstan/phpstan/composer.json:32:		"phpstan/phpstan-php-parser": "^0.9",
vendor/phpstan/phpstan/composer.json:33:		"phpstan/phpstan-phpunit": "^0.9.3",
vendor/phpstan/phpstan/composer.json:34:		"phpstan/phpstan-strict-rules": "^0.9",
vendor/phpstan/phpstan/composer.json:36:		"slevomat/coding-standard": "4.0.0"
vendor/phpstan/phpstan/composer.json:39:		"psr-4": {"PHPStan\\": ["src/", "build/PHPStan"]}
vendor/phpstan/phpstan/composer.json:41:	"autoload-dev": {
vendor/phpstan/phpstan/phpcs.xml:3:	<rule ref="vendor/consistence/coding-standard/Consistence/ruleset.xml">
vendor/phpstan/phpstan/phpcs.xml:7:	<rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml">
vendor/phpstan/phpstan/phpcs.xml:22:		<exclude-pattern>tests/TestCase.php</exclude-pattern>
vendor/phpstan/phpstan/phpcs.xml:23:		<exclude-pattern>tests/PHPStan/Analyser/NodeScopeResolverTest.php</exclude-pattern>
vendor/phpstan/phpstan/phpcs.xml:26:		<exclude-pattern>tests/PHPStan/Analyser/NodeScopeResolverTest.php</exclude-pattern>
vendor/phpstan/phpstan/phpcs.xml:49:		<exclude-pattern>tests/PHPStan/Analyser/NodeScopeResolverTest.php</exclude-pattern>
vendor/phpstan/phpstan/README.md:1:# PHPStan - PHP Static Analysis Tool
vendor/phpstan/phpstan/README.md:3:[![Build Status](https://travis-ci.org/phpstan/phpstan.svg)](https://travis-ci.org/phpstan/phpstan)
vendor/phpstan/phpstan/README.md:6:[![PHPStan](https://img.shields.io/badge/PHPStan-enabled-brightgreen.svg?style=flat)](https://github.com/phpstan/phpstan)
vendor/phpstan/phpstan/README.md:18:**[Read more about PHPStan on Medium.com »](https://medium.com/@ondrejmirtes/phpstan-2939cd0ad0e3)**
vendor/phpstan/phpstan/README.md:20:**[Try out PHPStan on the on-line playground! »](https://phpstan.org/)**
vendor/phpstan/phpstan/README.md:38:* Unused constructor parameters - they can either be deleted or the author forgot to
vendor/phpstan/phpstan/README.md:44:* Correct case when referencing classes. Class names are case insensitive, but taking advantage of this is dangerous with autoloading on case-insensitive filesystems.
vendor/phpstan/phpstan/README.md:46:* Always-defined and never-defined variables in `isset()` call.
vendor/phpstan/phpstan/README.md:47:* Validating phpDocs - finding incompatible types between phpDocs and native typehints.
vendor/phpstan/phpstan/README.md:52:Unique feature of PHPStan is the ability to define and statically check "magic" behaviour of classes -
vendor/phpstan/phpstan/README.md:56:See [Class reflection extensions](#class-reflection-extensions) and [Dynamic return type extensions](#dynamic-return-type-extensions).
vendor/phpstan/phpstan/README.md:58:You can also install official framework-specific extensions:
vendor/phpstan/phpstan/README.md:60:* [Doctrine](https://github.com/phpstan/phpstan-doctrine)
vendor/phpstan/phpstan/README.md:61:* [PHPUnit](https://github.com/phpstan/phpstan-phpunit)
vendor/phpstan/phpstan/README.md:62:* [Nette Framework](https://github.com/phpstan/phpstan-nette)
vendor/phpstan/phpstan/README.md:63:* [Dibi - Database Abstraction Library](https://github.com/phpstan/phpstan-dibi)
vendor/phpstan/phpstan/README.md:64:* [PHP-Parser](https://github.com/phpstan/phpstan-php-parser)
vendor/phpstan/phpstan/README.md:68:* [Phony](https://github.com/eloquent/phpstan-phony)
vendor/phpstan/phpstan/README.md:69:* [Symfony Framework](https://github.com/lookyman/phpstan-symfony)
vendor/phpstan/phpstan/README.md:70:* [Prophecy](https://github.com/Jan0707/phpstan-prophecy)
vendor/phpstan/phpstan/README.md:79:PHPStan works best with modern object-oriented code. The more strongly-typed your code is, the more information
vendor/phpstan/phpstan/README.md:90:composer require --dev phpstan/phpstan
vendor/phpstan/phpstan/README.md:93:Composer will install PHPStan's executable in its `bin-dir` which defaults to `vendor/bin`.
vendor/phpstan/phpstan/README.md:95:If you have conflicting dependencies or you want to install PHPStan globally, the best way is via a PHAR archive. You will always find the latest stable PHAR archive below the [release notes](https://github.com/phpstan/phpstan/releases). You can also use the [phpstan/phpstan-shim](https://packagist.org/packages/phpstan/phpstan-shim) package to install PHPStan via Composer without the risk of conflicting dependencies.
vendor/phpstan/phpstan/README.md:97:You can also use [PHPStan via Docker](https://github.com/phpstan/docker-image).
vendor/phpstan/phpstan/README.md:125:(0 is the loosest and 7 is the strictest) by passing `--level` to `analyse` command. Default level is `0`.
vendor/phpstan/phpstan/README.md:130:You can also use `--level max` as an alias for the highest level. This will ensure that you will always use the highest level when upgrading to new versions of PHPStan. Please note that this can create a significant obstacle when upgrading to a newer version because you might have to fix a lot of code to bring the number of errors down to zero.
vendor/phpstan/phpstan/README.md:134:Config file is passed to the `phpstan` executable with `-c` option:
vendor/phpstan/phpstan/README.md:137:vendor/bin/phpstan analyse -l 4 -c phpstan.neon src tests
vendor/phpstan/phpstan/README.md:140:When using a custom project config file, you have to pass the `--level` (`-l`)
vendor/phpstan/phpstan/README.md:143:[NEON file format](https://ne-on.org/) is very similar to YAML.
vendor/phpstan/phpstan/README.md:149:is through the `autoload`/`autoload-dev` sections in composer.json.
vendor/phpstan/phpstan/README.md:153:If PHPStan complains about some non-existent classes and you're sure the classes
vendor/phpstan/phpstan/README.md:161:		- %rootDir%/../../../build
vendor/phpstan/phpstan/README.md:163:		- %rootDir%/../../../generated/routes/GeneratedRouteList.php
vendor/phpstan/phpstan/README.md:170:PHPStan supports global installation using [`composer global`](https://getcomposer.org/doc/03-cli.md#global) or via a [PHAR archive](#installation).
vendor/phpstan/phpstan/README.md:181:you can specify the path to the autoloader with the `--autoload-file|-a` option:
vendor/phpstan/phpstan/README.md:184:phpstan analyse --autoload-file=/path/to/autoload.php src tests
vendor/phpstan/phpstan/README.md:197:		- %rootDir%/../../../tests/*/data/*
vendor/phpstan/phpstan/README.md:208:		- php
vendor/phpstan/phpstan/README.md:209:		- module
vendor/phpstan/phpstan/README.md:210:		- inc
vendor/phpstan/phpstan/README.md:216:They are used as universal holders of data - any property can be set and read on them. Notable examples
vendor/phpstan/phpstan/README.md:224:		- Dibi\Row
vendor/phpstan/phpstan/README.md:225:		- Ratchet\ConnectionInterface
vendor/phpstan/phpstan/README.md:228:### Add non-obviously assigned variables to scope
vendor/phpstan/phpstan/README.md:234:	$author = $this->getLoggedInUser();
vendor/phpstan/phpstan/README.md:235:	$post = $this->postRepository->getById($id);
vendor/phpstan/phpstan/README.md:242:If you are enumerating over all possible situations in if-elseif branches
vendor/phpstan/phpstan/README.md:266:can be perceived by project developers also as early terminating - like a `redirect()` that stops execution
vendor/phpstan/phpstan/README.md:275:	$this->redirect('homepage');
vendor/phpstan/phpstan/README.md:287:			- redirect
vendor/phpstan/phpstan/README.md:288:			- redirectUrl
vendor/phpstan/phpstan/README.md:289:			- sendJson
vendor/phpstan/phpstan/README.md:290:			- sendResponse
vendor/phpstan/phpstan/README.md:301:		- '#Call to an undefined method [a-zA-Z0-9\\_]+::method\(\)#'
vendor/phpstan/phpstan/README.md:302:		- '#Call to an undefined method [a-zA-Z0-9\\_]+::expects\(\)#'
vendor/phpstan/phpstan/README.md:303:		- '#Access to an undefined property PHPUnit_Framework_MockObject_MockObject::\$[a-zA-Z0-9_]+#'
vendor/phpstan/phpstan/README.md:304:		- '#Call to an undefined method PHPUnit_Framework_MockObject_MockObject::[a-zA-Z0-9_]+\(\)#'
vendor/phpstan/phpstan/README.md:318:	bootstrap: %rootDir%/../../../phpstan-bootstrap.php
vendor/phpstan/phpstan/README.md:328:	-
vendor/phpstan/phpstan/README.md:331:			- phpstan.rules.rule
vendor/phpstan/phpstan/README.md:335:to see a lot of built-in rules.
vendor/phpstan/phpstan/README.md:337:Check out also [phpstan-strict-rules](https://github.com/phpstan/phpstan-strict-rules) repository for extra strict and opinionated rules for PHPStan!
vendor/phpstan/phpstan/README.md:341:By default, PHPStan outputs found errors into tables grouped by files to be easily human-readable. To change the output, you can use the `--errorFormat` CLI option. There's an additional built-in `raw` format with one-per-line errors intended for easy parsing. You can also create your own error formatter by implementing the `PHPStan\Command\ErrorFormatter\ErrorFormatter` interface:
vendor/phpstan/phpstan/README.md:372:vendor/bin/phpstan analyse -c phpstan.neon -l 4 --errorFormat awesome src tests
vendor/phpstan/phpstan/README.md:377:Classes in PHP can expose "magical" properties and methods decided in run-time using
vendor/phpstan/phpstan/README.md:381:When PHPStan stumbles upon a property or a method that is unknown to built-in class reflection, it iterates
vendor/phpstan/phpstan/README.md:428:	-
vendor/phpstan/phpstan/README.md:431:			- phpstan.broker.propertiesClassReflectionExtension
vendor/phpstan/phpstan/README.md:487:	-
vendor/phpstan/phpstan/README.md:490:			- phpstan.broker.methodsClassReflectionExtension
vendor/phpstan/phpstan/README.md:498:Because you have to write the code with the type-resolving logic, it can be as complex as you want.
vendor/phpstan/phpstan/README.md:503:$mergedArticle = $this->entityManager->merge($article);
vendor/phpstan/phpstan/README.md:538:	return $methodReflection->getName() === 'merge';
vendor/phpstan/phpstan/README.md:543:	if (count($methodCall->args) === 0) {
vendor/phpstan/phpstan/README.md:544:		return $methodReflection->getReturnType();
vendor/phpstan/phpstan/README.md:546:	$arg = $methodCall->args[0]->value;
vendor/phpstan/phpstan/README.md:548:	return $scope->getType($arg);
vendor/phpstan/phpstan/README.md:556:	-
vendor/phpstan/phpstan/README.md:559:			- phpstan.broker.dynamicMethodReturnTypeExtension
vendor/phpstan/phpstan/.gitattributes:1:/build export-ignore
vendor/phpstan/phpstan/.gitattributes:2:/tests export-ignore
vendor/phpstan/phpstan/build.xml:1:<?xml version="1.0" encoding="utf-8"?>
vendor/phpstan/phpstan/build.xml:5:		composer-validate,
vendor/phpstan/phpstan/build.xml:6:		composer-install,
vendor/phpstan/phpstan/build.xml:13:	<target name="composer-validate">
vendor/phpstan/phpstan/build.xml:24:	<target name="composer-install">
vendor/phpstan/phpstan/build.xml:37:				executable="vendor/bin/parallel-lint"
vendor/phpstan/phpstan/build.xml:42:			<arg value="--exclude"/>
vendor/phpstan/phpstan/build.xml:44:			<arg value="--exclude"/>
vendor/phpstan/phpstan/build.xml:46:			<arg value="--exclude"/>
vendor/phpstan/phpstan/build.xml:60:			<arg value="--extensions=php"/>
vendor/phpstan/phpstan/build.xml:61:			<arg value="--encoding=utf-8"/>
vendor/phpstan/phpstan/build.xml:62:			<arg value="--tab-width=4"/>
vendor/phpstan/phpstan/build.xml:63:			<arg value="--ignore=tests/*/data,tests/*/traits"/>
vendor/phpstan/phpstan/build.xml:64:			<arg value="-sp"/>
vendor/phpstan/phpstan/build.xml:70:	<target name="cs-fix">
vendor/phpstan/phpstan/build.xml:77:			<arg value="--extensions=php"/>
vendor/phpstan/phpstan/build.xml:78:			<arg value="--encoding=utf-8"/>
vendor/phpstan/phpstan/build.xml:79:			<arg value="--tab-width=4"/>
vendor/phpstan/phpstan/build.xml:80:			<arg value="--ignore=tests/*/data,tests/*/traits"/>
vendor/phpstan/phpstan/build.xml:81:			<arg value="-sp"/>
vendor/phpstan/phpstan/build.xml:94:			<arg value="-c"/>
vendor/phpstan/phpstan/build.xml:102:		<property name="phpstan.config" value="build/phpstan-generated.neon"/>
vendor/phpstan/phpstan/build.xml:114:						text=", ignore-windows-errors.neon"
vendor/phpstan/phpstan/build.xml:123:						text=", ignore-php7.0-errors.neon"
vendor/phpstan/phpstan/build.xml:139:			<arg value="-c"/>
vendor/phpstan/phpstan/build.xml:141:			<arg value="-l"/>
vendor/phpstan/phpstan/.travis.yml:3:  - 7.0
vendor/phpstan/phpstan/.travis.yml:4:  - 7.1
vendor/phpstan/phpstan/.travis.yml:5:  - 7.2
vendor/phpstan/phpstan/.travis.yml:6:  - master
vendor/phpstan/phpstan/.travis.yml:9:  - dependencies=lowest
vendor/phpstan/phpstan/.travis.yml:10:  - dependencies=highest
vendor/phpstan/phpstan/.travis.yml:14:    - php: master
vendor/phpstan/phpstan/.travis.yml:16:    - php: master
vendor/phpstan/phpstan/.travis.yml:20:  - composer self-update
vendor/phpstan/phpstan/.travis.yml:21:  - if [ "$dependencies" = "lowest" ]; then composer update --prefer-lowest --no-interaction; fi;
vendor/phpstan/phpstan/.travis.yml:22:  - if [ "$dependencies" = "highest" ]; then composer update --no-interaction; fi;
vendor/phpstan/phpstan/.travis.yml:25:  - vendor/bin/phing
vendor/phpstan/phpstan/CODE_OF_CONDUCT.md:7:our community a harassment-free experience for everyone, regardless of age, body
vendor/phpstan/phpstan/CODE_OF_CONDUCT.md:50:representing a project or community include using an official project e-mail
vendor/phpstan/phpstan/CODE_OF_CONDUCT.md:71:available at [http://contributor-covenant.org/version/1/4][version]
vendor/phpstan/phpstan/CODE_OF_CONDUCT.md:73:[homepage]: http://contributor-covenant.org
vendor/phpstan/phpstan/CODE_OF_CONDUCT.md:74:[version]: http://contributor-covenant.org/version/1/4/
vendor/phpstan/phpstan/bin/phpstan:24:	$version = \Jean85\PrettyVersions::getVersion('phpstan/phpstan')->getPrettyVersion();
vendor/phpstan/phpstan/bin/phpstan:30:	'PHPStan - PHP Static Analysis Tool',
vendor/phpstan/phpstan/bin/phpstan:33:$application->setCatchExceptions(false);
vendor/phpstan/phpstan/bin/phpstan:34:$application->add(new AnalyseCommand());
vendor/phpstan/phpstan/bin/phpstan:35:$application->run();
vendor/phpstan/phpstan/appveyor.yml:4:  - x64
vendor/phpstan/phpstan/appveyor.yml:7:    - dependencies: lowest
vendor/phpstan/phpstan/appveyor.yml:9:    - dependencies: highest
vendor/phpstan/phpstan/appveyor.yml:11:    - dependencies: lowest
vendor/phpstan/phpstan/appveyor.yml:13:    - dependencies: highest
vendor/phpstan/phpstan/appveyor.yml:19:  php_archive_directory: c:\tools\php-archive
vendor/phpstan/phpstan/appveyor.yml:23:  - c:\tools\composer
vendor/phpstan/phpstan/appveyor.yml:24:  - c:\tools\php-archive
vendor/phpstan/phpstan/appveyor.yml:25:  - '%LOCALAPPDATA%\Composer'
vendor/phpstan/phpstan/appveyor.yml:27:  - ps: $Env:PATH = $Env:php_directory + ';' + $Env:composer_directory + ';' + $Env:PATH
vendor/phpstan/phpstan/appveyor.yml:28:  - ps: $Env:ANSICON = '121x90 (121x90)'
vendor/phpstan/phpstan/appveyor.yml:31:  - ps: If ((Test-Path $Env:php_archive_directory) -eq $False) { New-Item -Path $Env:php_archive_directory -ItemType 'directory' }
vendor/phpstan/phpstan/appveyor.yml:32:  - ps: $requested_php_version = %{If ($Env:dependencies -eq 'lowest') { $Env:php_version + '.0' } Else { (((choco search php --exact --all-versions -r | Select-String -pattern $Env:php_version) -replace '[php|]', '') | %{ New-Object System.Version $_ } | Sort-Object | Select-Object -Last 1).ToString() }}
vendor/phpstan/phpstan/appveyor.yml:33:  - ps: $php_version_url = %{If ($Env:dependencies -eq 'lowest') { 'http://windows.php.net/downloads/releases/archives/php-' + $requested_php_version + '-nts-Win32-VC14-' + $Env:platform + '.zip' } Else { 'http://windows.php.net/downloads/releases/php-' + $requested_php_version + '-nts-Win32-VC14-' + $Env:platform + '.zip' }}
vendor/phpstan/phpstan/appveyor.yml:34:  - ps: $php_version_file = $Env:php_archive_directory + '\php-' + $requested_php_version + '.zip'
vendor/phpstan/phpstan/appveyor.yml:35:  - ps: If ((Test-Path $php_version_file) -eq $False) { appveyor-retry appveyor DownloadFile $php_version_url -FileName $php_version_file }
vendor/phpstan/phpstan/appveyor.yml:38:  - ps: New-Item -Path $Env:php_directory -ItemType 'directory'
vendor/phpstan/phpstan/appveyor.yml:39:  - ps: cd $Env:php_directory
vendor/phpstan/phpstan/appveyor.yml:40:  - ps: 7z x $php_version_file
vendor/phpstan/phpstan/appveyor.yml:41:  - ps: Copy-Item php.ini-production -Destination php.ini
vendor/phpstan/phpstan/appveyor.yml:42:  - ps: Add-Content -Path php.ini -Value 'memory_limit=1G'
vendor/phpstan/phpstan/appveyor.yml:43:  - ps: Add-Content -Path php.ini -Value 'date.timezone="UTC"'
vendor/phpstan/phpstan/appveyor.yml:44:  - ps: Add-Content -Path php.ini -Value 'extension_dir=ext'
vendor/phpstan/phpstan/appveyor.yml:45:  - ps: Add-Content -Path php.ini -Value 'extension=php_curl.dll'
vendor/phpstan/phpstan/appveyor.yml:46:  - ps: Add-Content -Path php.ini -Value 'extension=php_intl.dll'
vendor/phpstan/phpstan/appveyor.yml:47:  - ps: Add-Content -Path php.ini -Value 'extension=php_mbstring.dll'
vendor/phpstan/phpstan/appveyor.yml:48:  - ps: Add-Content -Path php.ini -Value 'extension=php_openssl.dll'
vendor/phpstan/phpstan/appveyor.yml:49:  - ps: Add-Content -Path php.ini -Value 'extension=php_gd2.dll'
vendor/phpstan/phpstan/appveyor.yml:50:  - ps: Add-Content -Path php.ini -Value 'extension=php_mysqli.dll'
vendor/phpstan/phpstan/appveyor.yml:51:  - ps: php --version
vendor/phpstan/phpstan/appveyor.yml:54:  - ps: If ((Test-Path $Env:composer_directory) -eq $False) { New-Item -Path $Env:composer_directory -ItemType 'directory' }
vendor/phpstan/phpstan/appveyor.yml:55:  - ps: If ((Test-Path $Env:composer_executable) -eq $False) { appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar -FileName $Env:composer_executable }
vendor/phpstan/phpstan/appveyor.yml:56:  - ps: Set-Content -Path ($Env:composer_directory + '\composer.bat') -Value ('@php ' + $Env:composer_executable + ' %*')
vendor/phpstan/phpstan/appveyor.yml:57:  - composer self-update
vendor/phpstan/phpstan/appveyor.yml:60:  - ps: cd $Env:project_directory
vendor/phpstan/phpstan/appveyor.yml:61:  - IF %dependencies%==lowest composer update --prefer-lowest --no-interaction --no-progress
vendor/phpstan/phpstan/appveyor.yml:62:  - IF %dependencies%==highest composer update --no-interaction --no-progress
vendor/phpstan/phpstan/appveyor.yml:64:  # Apply patch to jakub-onderka/php-parallel-lint
vendor/phpstan/phpstan/appveyor.yml:65:  - ps: appveyor-retry appveyor DownloadFile https://github.com/slevomat/PHP-Parallel-Lint/commit/50e939edf81619be100186f9c6192d97decad173.diff -FileName php-parallel-lint.patch
vendor/phpstan/phpstan/appveyor.yml:66:  - git apply --directory vendor/jakub-onderka/php-parallel-lint -p1 --unsafe-paths --verbose php-parallel-lint.patch
vendor/phpstan/phpstan/appveyor.yml:67:  - ps: Remove-Item -Path php-parallel-lint.patch
vendor/phpstan/phpstan/appveyor.yml:69:  - ps: cd $Env:project_directory
vendor/phpstan/phpstan/appveyor.yml:70:  - vendor\bin\phing
vendor/phpstan/phpstan/BACKERS.md:6:Check out all the tiers - higher ones include additional goodies like placing
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:35:				if ($selfClass !== null && $broker->hasClass($selfClass)) {
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:36:					$classReflection = $broker->getClass($selfClass);
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:37:					if ($classReflection->getParentClass() !== false) {
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:38:						return new ObjectType($classReflection->getParentClass()->getName());
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:63:		if ($reflectionType->allowsNull()) {
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:87:					foreach ($phpDocType->getTypes() as $innerType) {
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:90:								$innerType->getIterableKeyType(),
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:91:								$innerType->getIterableValueType()
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:100:						$phpDocType->getIterableKeyType(),
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:101:						$phpDocType->getIterableValueType()
vendor/phpstan/phpstan/src/Type/TypehintHelper.php:106:			return $type->isSuperTypeOf($phpDocType)->yes() ? $phpDocType : $type;
vendor/phpstan/phpstan/src/Type/NestedArrayItemType.php:16:		$this->itemType = $itemType;
vendor/phpstan/phpstan/src/Type/NestedArrayItemType.php:17:		$this->depth = $depth;
vendor/phpstan/phpstan/src/Type/NestedArrayItemType.php:22:		return $this->itemType;
vendor/phpstan/phpstan/src/Type/NestedArrayItemType.php:27:		return $this->depth;
vendor/phpstan/phpstan/src/Type/VoidType.php:34:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:37:			foreach ($typeToRemove->getTypes() as $unionTypeToRemove) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:51:			foreach ($fromType->getTypes() as $innerType) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:58:		if ($typeToRemove->isSuperTypeOf($fromType)->yes()) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:73:			foreach ($type->getTypes() as $innerType) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:90:				array_splice($types, $i, 1, $types[$i]->getTypes());
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:108:						self::union($types[$i]->getIterableKeyType(), $types[$j]->getIterableKeyType()),
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:109:						self::union($types[$i]->getIterableValueType(), $types[$j]->getIterableValueType()),
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:110:						$types[$i]->isItemTypeInferredFromLiteralArray() || $types[$j]->isItemTypeInferredFromLiteralArray(),
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:111:						$types[$i]->isCallable()->and($types[$j]->isCallable())
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:117:						self::union($types[$i]->getIterableKeyType(), $types[$j]->getIterableKeyType()),
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:118:						self::union($types[$i]->getIterableValueType(), $types[$j]->getIterableValueType())
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:131:				if ($types[$j]->isSuperTypeOf($types[$i])->yes()) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:132:					array_splice($types, $i--, 1);
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:135:				} elseif ($types[$i]->isSuperTypeOf($types[$j])->yes()) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:136:					array_splice($types, $j--, 1);
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:158:				foreach ($type->getTypes() as $innerUnionSubType) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:173:				array_splice($types, $i, 1, $type->getTypes());
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:187:				$isSuperTypeA = $types[$j]->isSuperTypeOf($types[$i]);
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:188:				if ($isSuperTypeA->no()) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:191:				} elseif ($isSuperTypeA->yes()) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:192:					array_splice($types, $j--, 1);
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:196:				$isSuperTypeB = $types[$i]->isSuperTypeOf($types[$j]);
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:197:				if ($isSuperTypeB->maybe()) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:200:				} elseif ($isSuperTypeB->yes()) {
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:201:					array_splice($types, $i--, 1);
vendor/phpstan/phpstan/src/Type/TypeCombinator.php:218:		return !self::isUnionTypesEnabled() && count($unionType->getTypes()) > $typesLimit;
vendor/phpstan/phpstan/src/Type/UnionTypeHelper.php:17:				$types[$i] = $type->resolveStatic($className);
vendor/phpstan/phpstan/src/Type/UnionTypeHelper.php:33:				$types[$i] = $type->changeBaseClass($className);
vendor/phpstan/phpstan/src/Type/UnionTypeHelper.php:48:			$subTypeClasses[] = $type->getReferencedClasses();
vendor/phpstan/phpstan/src/Type/UnionTypeHelper.php:64:				return -1;
vendor/phpstan/phpstan/src/Type/UnionTypeHelper.php:67:			return strcasecmp($a->describe(), $b->describe());
vendor/phpstan/phpstan/src/Type/FalseBooleanType.php:96:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/CallableType.php:28:		return $type->isCallable()->yes() || $type instanceof StringType;
vendor/phpstan/phpstan/src/Type/CallableType.php:33:		return $type->isCallable();
vendor/phpstan/phpstan/src/Type/CallableType.php:39:			return $otherType->isSuperTypeOf($this);
vendor/phpstan/phpstan/src/Type/CallableType.php:42:		return $otherType->isCallable()
vendor/phpstan/phpstan/src/Type/CallableType.php:43:			->and($otherType instanceof self ? TrinaryLogic::createYes() : TrinaryLogic::createMaybe());
vendor/phpstan/phpstan/src/Type/NullType.php:42:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/StaticType.php:23:		$this->baseClass = $baseClass;
vendor/phpstan/phpstan/src/Type/StaticType.php:24:		$this->staticObjectType = new ObjectType($baseClass);
vendor/phpstan/phpstan/src/Type/StaticType.php:29:		return $this->baseClass;
vendor/phpstan/phpstan/src/Type/StaticType.php:37:		return $this->staticObjectType->getReferencedClasses();
vendor/phpstan/phpstan/src/Type/StaticType.php:42:		return $this->baseClass;
vendor/phpstan/phpstan/src/Type/StaticType.php:47:		return $this->staticObjectType->accepts($type);
vendor/phpstan/phpstan/src/Type/StaticType.php:53:			return $this->staticObjectType->isSuperTypeOf($type);
vendor/phpstan/phpstan/src/Type/StaticType.php:57:			return TrinaryLogic::createMaybe()->and($this->staticObjectType->isSuperTypeOf($type));
vendor/phpstan/phpstan/src/Type/StaticType.php:61:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/StaticType.php:69:		return sprintf('static(%s)', $this->baseClass);
vendor/phpstan/phpstan/src/Type/StaticType.php:74:		return $this->staticObjectType->canAccessProperties();
vendor/phpstan/phpstan/src/Type/StaticType.php:79:		return $this->staticObjectType->hasProperty($propertyName);
vendor/phpstan/phpstan/src/Type/StaticType.php:84:		return $this->staticObjectType->getProperty($propertyName, $scope);
vendor/phpstan/phpstan/src/Type/StaticType.php:89:		return $this->staticObjectType->canCallMethods();
vendor/phpstan/phpstan/src/Type/StaticType.php:94:		return $this->staticObjectType->hasMethod($methodName);
vendor/phpstan/phpstan/src/Type/StaticType.php:99:		return $this->staticObjectType->getMethod($methodName, $scope);
vendor/phpstan/phpstan/src/Type/StaticType.php:104:		return $this->staticObjectType->canAccessConstants();
vendor/phpstan/phpstan/src/Type/StaticType.php:109:		return $this->staticObjectType->hasConstant($constantName);
vendor/phpstan/phpstan/src/Type/StaticType.php:114:		return $this->staticObjectType->getConstant($constantName);
vendor/phpstan/phpstan/src/Type/StaticType.php:119:		return $this->staticObjectType->isDocumentableNatively();
vendor/phpstan/phpstan/src/Type/StaticType.php:137:		if (!$broker->hasClass($this->baseClass)) {
vendor/phpstan/phpstan/src/Type/StaticType.php:141:		$classReflection = $broker->getClass($this->baseClass);
vendor/phpstan/phpstan/src/Type/StaticType.php:142:		if ($classReflection->isSubclassOf(\Traversable::class) || $classReflection->getName() === \Traversable::class) {
vendor/phpstan/phpstan/src/Type/StaticType.php:153:		if (!$broker->hasClass($this->baseClass)) {
vendor/phpstan/phpstan/src/Type/StaticType.php:157:		$classReflection = $broker->getClass($this->baseClass);
vendor/phpstan/phpstan/src/Type/StaticType.php:159:		if ($classReflection->isSubclassOf(\Iterator::class) && $classReflection->hasNativeMethod('key')) {
vendor/phpstan/phpstan/src/Type/StaticType.php:160:			return $classReflection->getNativeMethod('key')->getReturnType();
vendor/phpstan/phpstan/src/Type/StaticType.php:163:		if ($classReflection->isSubclassOf(\IteratorAggregate::class) && $classReflection->hasNativeMethod('getIterator')) {
vendor/phpstan/phpstan/src/Type/StaticType.php:165:				return $classReflection->getNativeMethod('getIterator')->getReturnType()->getIterableKeyType();
vendor/phpstan/phpstan/src/Type/StaticType.php:169:		if ($classReflection->isSubclassOf(\Traversable::class)) {
vendor/phpstan/phpstan/src/Type/StaticType.php:180:		if (!$broker->hasClass($this->baseClass)) {
vendor/phpstan/phpstan/src/Type/StaticType.php:184:		$classReflection = $broker->getClass($this->baseClass);
vendor/phpstan/phpstan/src/Type/StaticType.php:186:		if ($classReflection->isSubclassOf(\Iterator::class) && $classReflection->hasNativeMethod('current')) {
vendor/phpstan/phpstan/src/Type/StaticType.php:187:			return $classReflection->getNativeMethod('current')->getReturnType();
vendor/phpstan/phpstan/src/Type/StaticType.php:190:		if ($classReflection->isSubclassOf(\IteratorAggregate::class) && $classReflection->hasNativeMethod('getIterator')) {
vendor/phpstan/phpstan/src/Type/StaticType.php:192:				return $classReflection->getNativeMethod('getIterator')->getReturnType()->getIterableValueType();
vendor/phpstan/phpstan/src/Type/StaticType.php:196:		if ($classReflection->isSubclassOf(\Traversable::class)) {
vendor/phpstan/phpstan/src/Type/StaticType.php:207:		if (!$broker->hasClass($this->baseClass)) {
vendor/phpstan/phpstan/src/Type/StaticType.php:211:		if ($broker->getClass($this->baseClass)->hasMethod('__invoke')) {
vendor/phpstan/phpstan/src/Type/ObjectWithoutClassType.php:44:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/JustNullableTypeTrait.php:38:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/TrueOrFalseBooleanType.php:92:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:22:		$this->types = UnionTypeHelper::sortTypes($types);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:30:		return $this->types;
vendor/phpstan/phpstan/src/Type/IntersectionType.php:38:		return UnionTypeHelper::getReferencedClasses($this->types);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:43:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:44:			if (!$type->accepts($otherType)) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:55:		foreach ($this->getTypes() as $innerType) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:56:			$results[] = $innerType->isSuperTypeOf($otherType);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:59:		return TrinaryLogic::createYes()->and(...$results);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:65:			return $otherType->isSuperTypeOf($this);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:69:		foreach ($this->getTypes() as $innerType) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:70:			$results[] = $otherType->isSuperTypeOf($innerType);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:80:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:81:			$typeNames[] = $type->describe();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:89:		$result = $this->intersectResults(function (Type $type): TrinaryLogic {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:90:			return $type->canAccessProperties() ? TrinaryLogic::createYes() : TrinaryLogic::createNo();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:93:		return $result->yes();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:98:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:99:			if ($type->hasProperty($propertyName)) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:109:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:110:			if ($type->hasProperty($propertyName)) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:111:				return $type->getProperty($propertyName, $scope);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:120:		$result = $this->intersectResults(function (Type $type): TrinaryLogic {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:121:			return $type->canCallMethods() ? TrinaryLogic::createYes() : TrinaryLogic::createNo();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:124:		return $result->yes();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:129:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:130:			if ($type->hasMethod($methodName)) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:140:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:141:			if ($type->hasMethod($methodName)) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:142:				return $type->getMethod($methodName, $scope);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:151:		$result = $this->intersectResults(function (Type $type): TrinaryLogic {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:152:			return $type->canAccessConstants() ? TrinaryLogic::createYes() : TrinaryLogic::createNo();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:155:		return $result->yes();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:160:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:161:			if ($type->hasConstant($constantName)) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:171:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:172:			if ($type->hasConstant($constantName)) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:173:				return $type->getConstant($constantName);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:187:		return $this->intersectResults(function (Type $type): TrinaryLogic {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:188:			return $type->isIterable();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:194:		return $this->intersectTypes(function (Type $type): Type {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:195:			return $type->getIterableKeyType();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:201:		return $this->intersectTypes(function (Type $type): Type {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:202:			return $type->getIterableValueType();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:208:		return $this->intersectResults(function (Type $type): TrinaryLogic {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:209:			return $type->isCallable();
vendor/phpstan/phpstan/src/Type/IntersectionType.php:215:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:216:			if ($type->isClonable()) {
vendor/phpstan/phpstan/src/Type/IntersectionType.php:226:		return new self(UnionTypeHelper::resolveStatic($className, $this->getTypes()));
vendor/phpstan/phpstan/src/Type/IntersectionType.php:231:		return new self(UnionTypeHelper::changeBaseClass($className, $this->getTypes()));
vendor/phpstan/phpstan/src/Type/IntersectionType.php:241:		$operands = array_map($getResult, $this->types);
vendor/phpstan/phpstan/src/Type/IntersectionType.php:247:		$operands = array_map($getType, $this->types);
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:23:		return isset($this->functionNames[strtolower($functionReflection->getName())]);
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:28:		if (!isset($functionCall->args[0])) {
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:29:			return $functionReflection->getReturnType();
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:32:		if ($functionCall->args[0]->unpack) {
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:33:			$argumentType = $scope->getType($functionCall->args[0]->value);
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:35:				return $argumentType->getItemType();
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:39:		if (count($functionCall->args) === 1) {
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:40:			$argumentType = $scope->getType($functionCall->args[0]->value);
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:42:				return $argumentType->getItemType();
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:47:		foreach ($functionCall->args as $arg) {
vendor/phpstan/phpstan/src/Type/Php/AllArgumentBasedFunctionReturnTypeExtension.php:48:			$argumentTypes[] = $scope->getType($arg->value);
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedFunctionReturnTypeExtension.php:21:		return isset($this->functionNames[strtolower($functionReflection->getName())]);
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedFunctionReturnTypeExtension.php:26:		$argumentPosition = $this->functionNames[strtolower($functionReflection->getName())];
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedFunctionReturnTypeExtension.php:28:		if (!isset($functionCall->args[$argumentPosition])) {
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedFunctionReturnTypeExtension.php:29:			return $functionReflection->getReturnType();
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedFunctionReturnTypeExtension.php:32:		$argumentValue = $functionCall->args[$argumentPosition]->value;
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedFunctionReturnTypeExtension.php:33:		return $scope->getType($argumentValue);
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedArrayFunctionReturnTypeExtension.php:23:		return isset($this->functionNames[strtolower($functionReflection->getName())]);
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedArrayFunctionReturnTypeExtension.php:28:		$argumentPosition = $this->functionNames[strtolower($functionReflection->getName())];
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedArrayFunctionReturnTypeExtension.php:30:		if (!isset($functionCall->args[$argumentPosition])) {
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedArrayFunctionReturnTypeExtension.php:31:			return $functionReflection->getReturnType();
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedArrayFunctionReturnTypeExtension.php:34:		$argumentValue = $functionCall->args[$argumentPosition]->value;
vendor/phpstan/phpstan/src/Type/Php/ArgumentBasedArrayFunctionReturnTypeExtension.php:35:		return new ArrayType(new MixedType(), $scope->getType($argumentValue), true);
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:20:		return strcasecmp($functionReflection->getName(), 'array_filter') === 0;
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:25:		$arrayArg = $functionCall->args[0]->value ?? null;
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:26:		$callbackArg = $functionCall->args[1]->value ?? null;
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:27:		$flagArg = $functionCall->args[2]->value ?? null;
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:30:			$arrayArgType = $scope->getType($arrayArg);
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:31:			$keyType = $arrayArgType->getIterableKeyType();
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:32:			$itemType = $arrayArgType->getIterableValueType();
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:34:			if ($flagArg === null && $callbackArg instanceof Closure && count($callbackArg->stmts) === 1) {
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:35:				$statement = $callbackArg->stmts[0];
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:36:				if ($statement instanceof Return_ && $statement->expr !== null && count($callbackArg->params) > 0) {
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:37:					$itemVariableName = $callbackArg->params[0]->name;
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:38:					$scope = $scope->assignVariable($itemVariableName, $itemType, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:39:					$scope = $scope->filterByTruthyValue($statement->expr);
vendor/phpstan/phpstan/src/Type/Php/ArrayFilterFunctionReturnTypeReturnTypeExtension.php:40:					$itemType = $scope->getVariableType($itemVariableName);
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedArrayFunctionReturnTypeExtension.php:23:		return isset($this->functionNames[strtolower($functionReflection->getName())]);
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedArrayFunctionReturnTypeExtension.php:28:		$argumentPosition = $this->functionNames[strtolower($functionReflection->getName())];
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedArrayFunctionReturnTypeExtension.php:30:		if (!isset($functionCall->args[$argumentPosition])) {
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedArrayFunctionReturnTypeExtension.php:31:			return $functionReflection->getReturnType();
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedArrayFunctionReturnTypeExtension.php:34:		$argumentValue = $functionCall->args[$argumentPosition]->value;
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedArrayFunctionReturnTypeExtension.php:36:			return $functionReflection->getReturnType();
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedArrayFunctionReturnTypeExtension.php:39:		$anonymousFunctionType = $scope->getFunctionType($argumentValue->returnType, $argumentValue->returnType === null, false);
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedFunctionReturnTypeExtension.php:21:		return isset($this->functionNames[strtolower($functionReflection->getName())]);
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedFunctionReturnTypeExtension.php:26:		$argumentPosition = $this->functionNames[strtolower($functionReflection->getName())];
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedFunctionReturnTypeExtension.php:28:		if (!isset($functionCall->args[$argumentPosition])) {
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedFunctionReturnTypeExtension.php:29:			return $functionReflection->getReturnType();
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedFunctionReturnTypeExtension.php:32:		$argumentValue = $functionCall->args[$argumentPosition]->value;
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedFunctionReturnTypeExtension.php:34:			return $functionReflection->getReturnType();
vendor/phpstan/phpstan/src/Type/Php/CallbackBasedFunctionReturnTypeExtension.php:37:		return $scope->getFunctionType($argumentValue->returnType, $argumentValue->returnType === null, false);
vendor/phpstan/phpstan/src/Type/ArrayType.php:31:		$this->keyType = $keyType;
vendor/phpstan/phpstan/src/Type/ArrayType.php:32:		$this->itemType = $itemType;
vendor/phpstan/phpstan/src/Type/ArrayType.php:33:		$this->itemTypeInferredFromLiteralArray = $itemTypeInferredFromLiteralArray;
vendor/phpstan/phpstan/src/Type/ArrayType.php:34:		$this->callable = $callable ?? TrinaryLogic::createMaybe()->and((new StringType)->isSuperTypeOf($itemType));
vendor/phpstan/phpstan/src/Type/ArrayType.php:43:			$this->keyType->getReferencedClasses(),
vendor/phpstan/phpstan/src/Type/ArrayType.php:44:			$this->getItemType()->getReferencedClasses()
vendor/phpstan/phpstan/src/Type/ArrayType.php:50:		$itemType = $nestedItemType->getItemType();
vendor/phpstan/phpstan/src/Type/ArrayType.php:51:		for ($i = 0; $i < $nestedItemType->getDepth() - 1; $i++) {
vendor/phpstan/phpstan/src/Type/ArrayType.php:60:		return $this->itemTypeInferredFromLiteralArray;
vendor/phpstan/phpstan/src/Type/ArrayType.php:66:			return $this->getItemType()->accepts($type->getItemType())
vendor/phpstan/phpstan/src/Type/ArrayType.php:67:				&& $this->keyType->accepts($type->keyType);
vendor/phpstan/phpstan/src/Type/ArrayType.php:80:			return $this->getItemType()->isSuperTypeOf($type->getItemType())
vendor/phpstan/phpstan/src/Type/ArrayType.php:81:				->and($this->keyType->isSuperTypeOf($type->keyType));
vendor/phpstan/phpstan/src/Type/ArrayType.php:85:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/ArrayType.php:93:		if ($this->keyType instanceof MixedType) {
vendor/phpstan/phpstan/src/Type/ArrayType.php:94:			if ($this->itemType instanceof MixedType) {
vendor/phpstan/phpstan/src/Type/ArrayType.php:98:			return sprintf('array<%s>', $this->itemType->describe());
vendor/phpstan/phpstan/src/Type/ArrayType.php:101:		return sprintf('array<%s, %s>', $this->keyType->describe(), $this->itemType->describe());
vendor/phpstan/phpstan/src/Type/ArrayType.php:111:		if ($this->getItemType() instanceof StaticResolvableType) {
vendor/phpstan/phpstan/src/Type/ArrayType.php:113:				$this->keyType,
vendor/phpstan/phpstan/src/Type/ArrayType.php:114:				$this->getItemType()->resolveStatic($className),
vendor/phpstan/phpstan/src/Type/ArrayType.php:115:				$this->isItemTypeInferredFromLiteralArray(),
vendor/phpstan/phpstan/src/Type/ArrayType.php:116:				$this->callable
vendor/phpstan/phpstan/src/Type/ArrayType.php:125:		if ($this->getItemType() instanceof StaticResolvableType) {
vendor/phpstan/phpstan/src/Type/ArrayType.php:127:				$this->keyType,
vendor/phpstan/phpstan/src/Type/ArrayType.php:128:				$this->getItemType()->changeBaseClass($className),
vendor/phpstan/phpstan/src/Type/ArrayType.php:129:				$this->isItemTypeInferredFromLiteralArray(),
vendor/phpstan/phpstan/src/Type/ArrayType.php:130:				$this->callable
vendor/phpstan/phpstan/src/Type/ArrayType.php:144:		return $this->keyType;
vendor/phpstan/phpstan/src/Type/ArrayType.php:149:		return $this->getItemType();
vendor/phpstan/phpstan/src/Type/ArrayType.php:154:		return $this->callable;
vendor/phpstan/phpstan/src/Type/TrueBooleanType.php:96:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/ObjectType.php:20:		$this->className = $className;
vendor/phpstan/phpstan/src/Type/ObjectType.php:25:		return $this->className;
vendor/phpstan/phpstan/src/Type/ObjectType.php:31:		if (!$broker->hasClass($this->className)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:35:		return $broker->getClass($this->className)->hasProperty($propertyName);
vendor/phpstan/phpstan/src/Type/ObjectType.php:41:		return $broker->getClass($this->className)->getProperty($propertyName, $scope);
vendor/phpstan/phpstan/src/Type/ObjectType.php:49:		return [$this->className];
vendor/phpstan/phpstan/src/Type/ObjectType.php:55:			return $this->checkSubclassAcceptability($type->getBaseClass());
vendor/phpstan/phpstan/src/Type/ObjectType.php:66:		return $this->checkSubclassAcceptability($type->getClassName());
vendor/phpstan/phpstan/src/Type/ObjectType.php:72:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/ObjectType.php:83:		$thisClassName = $this->className;
vendor/phpstan/phpstan/src/Type/ObjectType.php:84:		$thatClassName = $type->getClassName();
vendor/phpstan/phpstan/src/Type/ObjectType.php:92:		if (!$broker->hasClass($thisClassName) || !$broker->hasClass($thatClassName)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:96:		$thisClassReflection = $broker->getClass($thisClassName);
vendor/phpstan/phpstan/src/Type/ObjectType.php:97:		$thatClassReflection = $broker->getClass($thatClassName);
vendor/phpstan/phpstan/src/Type/ObjectType.php:99:		if ($thisClassReflection->getName() === $thatClassReflection->getName()) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:103:		if ($thatClassReflection->isSubclassOf($thisClassName)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:107:		if ($thisClassReflection->isSubclassOf($thatClassName)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:111:		if ($thisClassReflection->isInterface() && !$thatClassReflection->getNativeReflection()->isFinal()) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:115:		if ($thatClassReflection->isInterface() && !$thisClassReflection->getNativeReflection()->isFinal()) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:124:		if ($this->className === $thatClass) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:130:		if (!$broker->hasClass($this->className) || !$broker->hasClass($thatClass)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:134:		$thisReflection = $broker->getClass($this->className);
vendor/phpstan/phpstan/src/Type/ObjectType.php:135:		$thatReflection = $broker->getClass($thatClass);
vendor/phpstan/phpstan/src/Type/ObjectType.php:137:		if ($thisReflection->getName() === $thatReflection->getName()) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:142:		if ($thisReflection->isInterface() && $thatReflection->isInterface()) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:143:			return $thatReflection->getNativeReflection()->implementsInterface($this->className);
vendor/phpstan/phpstan/src/Type/ObjectType.php:146:		return $thatReflection->isSubclassOf($this->className);
vendor/phpstan/phpstan/src/Type/ObjectType.php:151:		return $this->className;
vendor/phpstan/phpstan/src/Type/ObjectType.php:161:		return strtolower($this->className) !== 'stdclass';
vendor/phpstan/phpstan/src/Type/ObjectType.php:167:		if (!$broker->hasClass($this->className)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:171:		return $broker->getClass($this->className)->hasMethod($methodName);
vendor/phpstan/phpstan/src/Type/ObjectType.php:177:		return $broker->getClass($this->className)->getMethod($methodName, $scope);
vendor/phpstan/phpstan/src/Type/ObjectType.php:188:		if (!$broker->hasClass($this->className)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:192:		return $broker->getClass($this->className)->hasConstant($constantName);
vendor/phpstan/phpstan/src/Type/ObjectType.php:198:		return $broker->getClass($this->className)->getConstant($constantName);
vendor/phpstan/phpstan/src/Type/ObjectType.php:210:		if (!$broker->hasClass($this->className)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:214:		$classReflection = $broker->getClass($this->className);
vendor/phpstan/phpstan/src/Type/ObjectType.php:215:		if ($classReflection->isSubclassOf(\Traversable::class) || $classReflection->getName() === \Traversable::class) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:219:		if ($classReflection->isInterface()) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:230:		if (!$broker->hasClass($this->className)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:234:		$classReflection = $broker->getClass($this->className);
vendor/phpstan/phpstan/src/Type/ObjectType.php:236:		if ($classReflection->isSubclassOf(\Iterator::class) && $classReflection->hasNativeMethod('key')) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:237:			return $classReflection->getNativeMethod('key')->getReturnType();
vendor/phpstan/phpstan/src/Type/ObjectType.php:240:		if ($classReflection->isSubclassOf(\IteratorAggregate::class) && $classReflection->hasNativeMethod('getIterator')) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:242:				return $classReflection->getNativeMethod('getIterator')->getReturnType()->getIterableKeyType();
vendor/phpstan/phpstan/src/Type/ObjectType.php:246:		if ($classReflection->isSubclassOf(\Traversable::class)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:257:		if (!$broker->hasClass($this->className)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:261:		$classReflection = $broker->getClass($this->className);
vendor/phpstan/phpstan/src/Type/ObjectType.php:263:		if ($classReflection->isSubclassOf(\Iterator::class) && $classReflection->hasNativeMethod('current')) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:264:			return $classReflection->getNativeMethod('current')->getReturnType();
vendor/phpstan/phpstan/src/Type/ObjectType.php:267:		if ($classReflection->isSubclassOf(\IteratorAggregate::class) && $classReflection->hasNativeMethod('getIterator')) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:269:				return $classReflection->getNativeMethod('getIterator')->getReturnType()->getIterableValueType();
vendor/phpstan/phpstan/src/Type/ObjectType.php:273:		if ($classReflection->isSubclassOf(\Traversable::class)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:284:		if (!$broker->hasClass($this->className)) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:288:		$classReflection = $broker->getClass($this->className);
vendor/phpstan/phpstan/src/Type/ObjectType.php:289:		if ($classReflection->hasNativeMethod('__invoke')) {
vendor/phpstan/phpstan/src/Type/ObjectType.php:293:		if (!$classReflection->getNativeReflection()->isFinal()) {
vendor/phpstan/phpstan/src/Type/ThisType.php:10:		return sprintf('$this(%s)', $this->getBaseClass());
vendor/phpstan/phpstan/src/Type/CommentHelper.php:16:		$phpDoc = $node->getDocComment();
vendor/phpstan/phpstan/src/Type/CommentHelper.php:18:			return $phpDoc->getText();
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:22:		$this->keyType = $keyType;
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:23:		$this->itemType = $itemType;
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:32:			$this->keyType->getReferencedClasses(),
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:33:			$this->getItemType()->getReferencedClasses()
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:43:		if ($type->isIterable()->yes()) {
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:44:			return $this->getIterableValueType()->accepts($type->getIterableValueType())
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:45:				&& $this->getIterableKeyType()->accepts($type->getIterableKeyType());
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:53:		return $type->isIterable()
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:54:			->and($this->getIterableValueType()->isSuperTypeOf($type->getIterableValueType()))
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:55:			->and($this->getIterableKeyType()->isSuperTypeOf($type->getIterableKeyType()));
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:61:			return $otherType->isSuperTypeOf(new UnionType([
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:62:				new ArrayType($this->keyType, $this->itemType),
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:76:		return $limit->and(
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:77:			$otherType->isIterable(),
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:78:			$otherType->getIterableValueType()->isSuperTypeOf($this->itemType),
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:79:			$otherType->getIterableKeyType()->isSuperTypeOf($this->keyType)
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:85:		if ($this->keyType instanceof MixedType) {
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:86:			if ($this->itemType instanceof MixedType) {
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:90:			return sprintf('iterable<%s>', $this->itemType->describe());
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:93:		return sprintf('iterable<%s, %s>', $this->keyType->describe(), $this->itemType->describe());
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:103:		if ($this->getItemType() instanceof StaticResolvableType) {
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:105:				$this->keyType,
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:106:				$this->getItemType()->resolveStatic($className)
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:115:		if ($this->getItemType() instanceof StaticResolvableType) {
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:117:				$this->keyType,
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:118:				$this->getItemType()->changeBaseClass($className)
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:132:		return $this->keyType;
vendor/phpstan/phpstan/src/Type/IterableIterableType.php:137:		return $this->getItemType();
vendor/phpstan/phpstan/src/Type/RecursionGuard.php:13:		$key = $type->describe();
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:36:		$this->phpParser = $phpParser;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:37:		$this->phpDocStringResolver = $phpDocStringResolver;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:38:		$this->cache = $cache;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:45:		if (isset($this->inProcess[$filename])) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:46:			if (isset($this->inProcess[$filename][$className][$key])) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:47:				$data = $this->inProcess[$filename][$className][$key];
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:49:					$this->inProcess[$filename][$className][$key] = false;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:50:					$this->inProcess[$filename][$className][$key] = $data();
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:53:					return $this->phpDocStringResolver->resolve('/** nothing */', new NameScope(null, []));
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:56:				assert($this->inProcess[$filename][$className][$key] instanceof ResolvedPhpDocBlock);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:57:				return $this->inProcess[$filename][$className][$key];
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:61:		$map = $this->getResolvedPhpDocMap($filename, $className);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:63:			return $this->phpDocStringResolver->resolve('/** nothing */', new NameScope(null, []));
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:76:		if (!isset($this->memoryCache[$fileName])) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:77:			$cacheKey = sprintf('%s-%d-v27', $fileName, filemtime($fileName));
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:78:			$map = $this->cache->load($cacheKey);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:81:				$map = $this->createResolvedPhpDocMap($fileName);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:82:				$this->cache->save($cacheKey, $map);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:85:			$this->memoryCache[$fileName] = $map;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:88:		if (!array_key_exists($className, $this->memoryCache[$fileName])) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:89:			// class with traits - class has no phpDocs but trait has some
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:93:		return $this->memoryCache[$fileName][$className];
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:109:		$this->processNodes(
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:110:			$this->phpParser->parseFile($fileName),
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:115:					$namespace = (string) $node->name;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:116:				} elseif ($node instanceof \PhpParser\Node\Stmt\Use_ && $node->type === \PhpParser\Node\Stmt\Use_::TYPE_NORMAL) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:117:					foreach ($node->uses as $use) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:118:						$uses[$use->alias] = (string) $use->name;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:121:					$prefix = (string) $node->prefix;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:122:					foreach ($node->uses as $use) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:123:						if ($node->type === \PhpParser\Node\Stmt\Use_::TYPE_NORMAL || $use->type === \PhpParser\Node\Stmt\Use_::TYPE_NORMAL) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:124:							$uses[$use->alias] = sprintf('%s\\%s', $prefix, $use->name);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:144:				$className = count($classStack) > 0 ? $classStack[count($classStack) - 1]->name : null;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:151:					return $this->phpDocStringResolver->resolve($phpDocString, $nameScope);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:168:			$this->inProcess[$fileName] = $phpDocMap;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:172:					$this->inProcess[$fileName][$className][$phpDocKey] = false;
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:173:					$this->inProcess[$fileName][$className][$phpDocKey] = $resolveCallback();
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:174:					$phpDocMap[$className][$phpDocKey] = $this->inProcess[$fileName][$className][$phpDocKey];
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:179:			unset($this->inProcess[$fileName]);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:194:			foreach ($node->getSubNodeNames() as $subNodeName) {
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:195:				$subNode = $node->{$subNodeName};
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:196:				$this->processNodes($subNode, $nodeCallback, $endNodeCallback);
vendor/phpstan/phpstan/src/Type/FileTypeMapper.php:201:				$this->processNodes($subNode, $nodeCallback, $endNodeCallback);
vendor/phpstan/phpstan/src/Type/FloatType.php:45:			return $type->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/IterableTypeTrait.php:18:		return $this->itemType;
vendor/phpstan/phpstan/src/Type/MixedType.php:21:		$this->isExplicitMixed = $isExplicitMixed;
vendor/phpstan/phpstan/src/Type/MixedType.php:133:		return $this->isExplicitMixed;
vendor/phpstan/phpstan/src/Type/CompoundTypeHelper.php:14:		return $compoundType->isSubTypeOf($otherType)->yes();
vendor/phpstan/phpstan/src/Type/UnionType.php:27:					return $type->describe();
vendor/phpstan/phpstan/src/Type/UnionType.php:39:		$this->types = UnionTypeHelper::sortTypes($types);
vendor/phpstan/phpstan/src/Type/UnionType.php:47:		return $this->types;
vendor/phpstan/phpstan/src/Type/UnionType.php:55:		return UnionTypeHelper::getReferencedClasses($this->getTypes());
vendor/phpstan/phpstan/src/Type/UnionType.php:68:		foreach ($this->getTypes() as $otherType) {
vendor/phpstan/phpstan/src/Type/UnionType.php:69:			if ($otherType->accepts($type)) {
vendor/phpstan/phpstan/src/Type/UnionType.php:80:			return $otherType->isSubTypeOf($this);
vendor/phpstan/phpstan/src/Type/UnionType.php:84:		foreach ($this->getTypes() as $innerType) {
vendor/phpstan/phpstan/src/Type/UnionType.php:85:			$results[] = $innerType->isSuperTypeOf($otherType);
vendor/phpstan/phpstan/src/Type/UnionType.php:88:		return TrinaryLogic::createNo()->or(...$results);
vendor/phpstan/phpstan/src/Type/UnionType.php:94:		foreach ($this->getTypes() as $innerType) {
vendor/phpstan/phpstan/src/Type/UnionType.php:95:			$results[] = $otherType->isSuperTypeOf($innerType);
vendor/phpstan/phpstan/src/Type/UnionType.php:105:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:107:				$typeNames[] = sprintf('(%s)', $type->describe());
vendor/phpstan/phpstan/src/Type/UnionType.php:109:				$typeNames[] = $type->describe();
vendor/phpstan/phpstan/src/Type/UnionType.php:118:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:119:			if (!$type->canAccessProperties()) {
vendor/phpstan/phpstan/src/Type/UnionType.php:129:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:133:			if (!$type->hasProperty($propertyName)) {
vendor/phpstan/phpstan/src/Type/UnionType.php:143:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:147:			return $type->getProperty($propertyName, $scope);
vendor/phpstan/phpstan/src/Type/UnionType.php:155:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:156:			if (!$type->canCallMethods()) {
vendor/phpstan/phpstan/src/Type/UnionType.php:166:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:170:			if (!$type->hasMethod($methodName)) {
vendor/phpstan/phpstan/src/Type/UnionType.php:180:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:184:			return $type->getMethod($methodName, $scope);
vendor/phpstan/phpstan/src/Type/UnionType.php:192:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:193:			if (!$type->canAccessConstants()) {
vendor/phpstan/phpstan/src/Type/UnionType.php:203:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:207:			if (!$type->hasConstant($constantName)) {
vendor/phpstan/phpstan/src/Type/UnionType.php:217:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:221:			return $type->getConstant($constantName);
vendor/phpstan/phpstan/src/Type/UnionType.php:234:		return new self(UnionTypeHelper::resolveStatic($className, $this->getTypes()));
vendor/phpstan/phpstan/src/Type/UnionType.php:239:		return new self(UnionTypeHelper::changeBaseClass($className, $this->getTypes()));
vendor/phpstan/phpstan/src/Type/UnionType.php:244:		return $this->unionResults(function (Type $type): TrinaryLogic {
vendor/phpstan/phpstan/src/Type/UnionType.php:245:			return $type->isIterable();
vendor/phpstan/phpstan/src/Type/UnionType.php:251:		return $this->unionTypes(function (Type $type): Type {
vendor/phpstan/phpstan/src/Type/UnionType.php:252:			return $type->getIterableKeyType();
vendor/phpstan/phpstan/src/Type/UnionType.php:258:		return $this->unionTypes(function (Type $type): Type {
vendor/phpstan/phpstan/src/Type/UnionType.php:259:			return $type->getIterableValueType();
vendor/phpstan/phpstan/src/Type/UnionType.php:265:		return $this->unionResults(function (Type $type): TrinaryLogic {
vendor/phpstan/phpstan/src/Type/UnionType.php:266:			return $type->isCallable();
vendor/phpstan/phpstan/src/Type/UnionType.php:272:		foreach ($this->types as $type) {
vendor/phpstan/phpstan/src/Type/UnionType.php:273:			if (!$type->isClonable()) {
vendor/phpstan/phpstan/src/Type/UnionType.php:288:		return TrinaryLogic::extremeIdentity(...array_map($getResult, $this->types));
vendor/phpstan/phpstan/src/Type/UnionType.php:293:		return TypeCombinator::union(...array_map($getType, $this->types));
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:53:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:54:		$this->propertiesClassReflectionExtensions = $propertiesClassReflectionExtensions;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:55:		$this->methodsClassReflectionExtensions = $methodsClassReflectionExtensions;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:56:		$this->displayName = $displayName;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:57:		$this->reflection = $reflection;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:58:		$this->anonymous = $anonymous;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:63:		return $this->reflection;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:71:		$fileName = $this->reflection->getFileName();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:88:		if ($this->reflection->getParentClass() === false) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:92:		return $this->broker->getClass($this->reflection->getParentClass()->getName());
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:97:		return $this->reflection->getName();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:102:		return $this->displayName;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:110:		if ($this->classHierarchyDistances === null) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:113:				$this->getName() => $distance,
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:115:			$currentClassReflection = $this->getNativeReflection();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:116:			while ($currentClassReflection->getParentClass() !== false) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:118:				$parentClassName = $currentClassReflection->getParentClass()->getName();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:122:				$currentClassReflection = $currentClassReflection->getParentClass();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:124:			foreach ($this->getNativeReflection()->getInterfaces() as $interface) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:126:				if (array_key_exists($interface->getName(), $distances)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:130:				$distances[$interface->getName()] = $distance;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:133:			$this->classHierarchyDistances = $distances;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:136:		return $this->classHierarchyDistances;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:141:		foreach ($this->propertiesClassReflectionExtensions as $extension) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:142:			if ($extension->hasProperty($this, $propertyName)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:152:		foreach ($this->methodsClassReflectionExtensions as $extension) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:153:			if ($extension->hasMethod($this, $methodName)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:164:		if ($scope->isInClass()) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:165:			$key = sprintf('%s-%s', $key, $scope->getClassReflection()->getName());
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:167:		if (!isset($this->methods[$key])) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:168:			foreach ($this->methodsClassReflectionExtensions as $extension) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:169:				if ($extension->hasMethod($this, $methodName)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:170:					$method = $extension->getMethod($this, $methodName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:171:					if ($scope->canCallMethod($method)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:172:						return $this->methods[$key] = $method;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:174:					$this->methods[$key] = $method;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:179:		if (!isset($this->methods[$key])) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:180:			throw new \PHPStan\Reflection\MissingMethodFromReflectionException($this->getName(), $methodName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:183:		return $this->methods[$key];
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:188:		return $this->getPhpExtension()->hasMethod($this, $methodName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:193:		if (!$this->hasNativeMethod($methodName)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:194:			throw new \PHPStan\Reflection\MissingMethodFromReflectionException($this->getName(), $methodName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:196:		return $this->getPhpExtension()->getNativeMethod($this, $methodName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:201:		$extension = $this->methodsClassReflectionExtensions[0];
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:212:		if ($scope->isInClass()) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:213:			$key = sprintf('%s-%s', $key, $scope->getClassReflection()->getName());
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:215:		if (!isset($this->properties[$key])) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:216:			foreach ($this->propertiesClassReflectionExtensions as $extension) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:217:				if ($extension->hasProperty($this, $propertyName)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:218:					$property = $extension->getProperty($this, $propertyName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:219:					if ($scope->canAccessProperty($property)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:220:						return $this->properties[$key] = $property;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:222:					$this->properties[$key] = $property;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:227:		if (!isset($this->properties[$key])) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:228:			throw new \PHPStan\Reflection\MissingPropertyFromReflectionException($this->getName(), $propertyName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:231:		return $this->properties[$key];
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:236:		return $this->getPhpExtension()->hasProperty($this, $propertyName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:241:		if (!$this->hasNativeProperty($propertyName)) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:242:			throw new \PHPStan\Reflection\MissingPropertyFromReflectionException($this->getName(), $propertyName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:244:		return $this->getPhpExtension()->getNativeProperty($this, $propertyName);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:249:		return $this->reflection->isAbstract();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:254:		return $this->reflection->isInterface();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:259:		return $this->reflection->isTrait();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:264:		return $this->anonymous;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:269:		return $this->reflection->isSubclassOf($className);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:278:		$parent = $this->getParentClass();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:281:			$parent = $parent->getParentClass();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:293:			return $this->broker->getClass($interface->getName());
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:294:		}, $this->getNativeReflection()->getInterfaces());
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:303:			return $this->broker->getClass($trait->getName());
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:304:		}, $this->getNativeReflection()->getTraits());
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:314:		while ($currentClassReflection->getParentClass() !== false) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:315:			$parentNames[] = $currentClassReflection->getParentClass()->getName();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:316:			$currentClassReflection = $currentClassReflection->getParentClass();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:324:		return $this->getNativeReflection()->hasConstant($name);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:329:		if (!isset($this->constants[$name])) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:331:				$this->constants[$name] = new ObsoleteClassConstantReflection(
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:334:					$this->getNativeReflection()->getConstant($name)
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:337:				$reflectionConstant = $this->getNativeReflection()->getReflectionConstant($name);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:338:				$this->constants[$name] = new ClassConstantWithVisibilityReflection(
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:339:					$this->broker->getClass($reflectionConstant->getDeclaringClass()->getName()),
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:344:		return $this->constants[$name];
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:349:		return in_array($traitName, $this->getTraitNames(), true);
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:354:		$class = $this->reflection;
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:355:		$traitNames = $class->getTraitNames();
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:356:		while ($class->getParentClass() !== false) {
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:357:			$traitNames = array_values(array_unique(array_merge($traitNames, $class->getParentClass()->getTraitNames())));
vendor/phpstan/phpstan/src/Reflection/ClassReflection.php:358:			$class = $class->getParentClass();
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:163:		$this->typeStringResolver = $typeStringResolver;
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:164:		$this->properties = self::$defaultProperties;
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:166:			$this->properties = array_merge_recursive($this->properties, self::$properties71);
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:172:		$classWithProperties = $this->getClassWithProperties($classReflection, $propertyName);
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:179:		$classWithProperties = $this->getClassWithProperties($classReflection, $propertyName);
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:180:		$typeString = $this->properties[$classWithProperties->getName()][$propertyName];
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:183:			$this->typeStringResolver->resolve($typeString)
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:194:		if (isset($this->properties[$classReflection->getName()][$propertyName])) {
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:198:		foreach ($classReflection->getParents() as $parentClass) {
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectClassReflectionExtension.php:199:			if (isset($this->properties[$parentClass->getName()][$propertyName])) {
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectPropertyReflection.php:23:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectPropertyReflection.php:24:		$this->type = $type;
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectPropertyReflection.php:29:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/PhpDefect/PhpDefectPropertyReflection.php:49:		return $this->type;
vendor/phpstan/phpstan/src/Reflection/ClassConstantWithVisibilityReflection.php:19:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/ClassConstantWithVisibilityReflection.php:20:		$this->reflection = $reflection;
vendor/phpstan/phpstan/src/Reflection/ClassConstantWithVisibilityReflection.php:25:		return $this->reflection->getName();
vendor/phpstan/phpstan/src/Reflection/ClassConstantWithVisibilityReflection.php:33:		return $this->reflection->getValue();
vendor/phpstan/phpstan/src/Reflection/ClassConstantWithVisibilityReflection.php:38:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/ClassConstantWithVisibilityReflection.php:48:		return $this->reflection->isPrivate();
vendor/phpstan/phpstan/src/Reflection/ClassConstantWithVisibilityReflection.php:53:		return $this->reflection->isPublic();
vendor/phpstan/phpstan/src/Reflection/MissingPropertyFromReflectionException.php:12:				'Property $%s was not found in reflection of class %s - probably the wrong version of class is autoloaded.',
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:27:		$this->reflection = $reflection;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:28:		$this->phpDocType = $phpDocType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:33:		return $this->reflection->isOptional();
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:38:		return $this->reflection->getName();
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:43:		if ($this->type === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:44:			$phpDocType = $this->phpDocType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:45:			if ($phpDocType !== null && $this->reflection->isDefaultValueAvailable() && $this->reflection->getDefaultValue() === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:48:			$this->type = TypehintHelper::decideTypeFromReflection(
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:49:				$this->reflection->getType(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:51:				$this->reflection->getDeclaringClass() !== null ? $this->reflection->getDeclaringClass()->getName() : null,
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:52:				$this->isVariadic()
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:56:		return $this->type;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:61:		return $this->reflection->isPassedByReference();
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:66:		return $this->reflection->isVariadic();
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:71:		if ($this->phpDocType !== null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:72:			return $this->phpDocType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:80:		if ($this->nativeType === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:81:			$this->nativeType = TypehintHelper::decideTypeFromReflection(
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:82:				$this->reflection->getType(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:84:				$this->reflection->getDeclaringClass() !== null ? $this->reflection->getDeclaringClass()->getName() : null,
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:85:				$this->isVariadic()
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterReflection.php:89:		return $this->nativeType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:47:		$this->name = $name;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:48:		$this->optional = $optional;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:49:		$this->realType = $realType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:50:		$this->phpDocType = $phpDocType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:51:		$this->passedByReference = $passedByReference;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:52:		$this->defaultValue = $defaultValue;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:53:		$this->variadic = $variadic;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:58:		return $this->name;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:63:		return $this->optional;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:68:		if ($this->type === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:69:			$phpDocType = $this->phpDocType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:70:			if ($phpDocType !== null && $this->defaultValue !== null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:72:					$this->defaultValue instanceof ConstFetch
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:73:					&& strtolower((string) $this->defaultValue->name) === 'null'
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:78:			$this->type = TypehintHelper::decideType($this->realType, $phpDocType);
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:81:		return $this->type;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:86:		return $this->passedByReference;
vendor/phpstan/phpstan/src/Reflection/Php/PhpParameterFromParserNodeReflection.php:91:		return $this->variadic;
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCratesClassReflectionExtension.php:27:		$this->classes = $classes;
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCratesClassReflectionExtension.php:32:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCratesClassReflectionExtension.php:37:		if ($this->filteredClasses === null) {
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCratesClassReflectionExtension.php:38:			$this->filteredClasses = array_values(array_filter($this->classes, function (string $class): bool {
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCratesClassReflectionExtension.php:39:				return $this->broker->hasClass($class);
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCratesClassReflectionExtension.php:42:		foreach ($this->filteredClasses as $className) {
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCratesClassReflectionExtension.php:44:				$classReflection->getName() === $className
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCratesClassReflectionExtension.php:45:				|| $classReflection->isSubclassOf($className)
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:58:		$this->methodReflectionFactory = $methodReflectionFactory;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:59:		$this->fileTypeMapper = $fileTypeMapper;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:60:		$this->annotationsMethodsClassReflectionExtension = $annotationsMethodsClassReflectionExtension;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:61:		$this->annotationsPropertiesClassReflectionExtension = $annotationsPropertiesClassReflectionExtension;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:66:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:71:		return $classReflection->getNativeReflection()->hasProperty($propertyName);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:76:		if (!isset($this->propertiesIncludingAnnotations[$classReflection->getName()][$propertyName])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:77:			$this->propertiesIncludingAnnotations[$classReflection->getName()][$propertyName] = $this->createProperty($classReflection, $propertyName, true);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:80:		return $this->propertiesIncludingAnnotations[$classReflection->getName()][$propertyName];
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:85:		if (!isset($this->nativeProperties[$classReflection->getName()][$propertyName])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:87:			$property = $this->createProperty($classReflection, $propertyName, false);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:88:			$this->nativeProperties[$classReflection->getName()][$propertyName] = $property;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:91:		return $this->nativeProperties[$classReflection->getName()][$propertyName];
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:100:		$propertyReflection = $classReflection->getNativeReflection()->getProperty($propertyName);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:101:		$propertyName = $propertyReflection->getName();
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:102:		$declaringClassReflection = $this->broker->getClass($propertyReflection->getDeclaringClass()->getName());
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:104:		if ($includingAnnotations && $this->annotationsPropertiesClassReflectionExtension->hasProperty($classReflection, $propertyName)) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:105:			$hierarchyDistances = $classReflection->getClassHierarchyDistances();
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:106:			$annotationProperty = $this->annotationsPropertiesClassReflectionExtension->getProperty($classReflection, $propertyName);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:107:			if (!isset($hierarchyDistances[$annotationProperty->getDeclaringClass()->getName()])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:110:			if (!isset($hierarchyDistances[$propertyReflection->getDeclaringClass()->getName()])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:114:			if ($hierarchyDistances[$annotationProperty->getDeclaringClass()->getName()] < $hierarchyDistances[$propertyReflection->getDeclaringClass()->getName()]) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:118:		if ($propertyReflection->getDocComment() === false) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:120:		} elseif (!$classReflection->isAnonymous() && !$declaringClassReflection->isAnonymous() && $declaringClassReflection->getFileName() !== false) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:122:				$this->broker,
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:123:				$propertyReflection->getDocComment(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:124:				$declaringClassReflection->getName(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:126:				$declaringClassReflection->getFileName()
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:129:			$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc(
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:130:				$phpDocBlock->getFile(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:131:				$phpDocBlock->getClass(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:132:				$phpDocBlock->getDocComment()
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:134:			$varTags = $resolvedPhpDoc->getVarTags();
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:136:				$type = $varTags[0]->getType();
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:138:				$type = $varTags[$propertyName]->getType();
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:155:		return $classReflection->getNativeReflection()->hasMethod($methodName);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:160:		if (isset($this->methodsIncludingAnnotations[$classReflection->getName()][$methodName])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:161:			return $this->methodsIncludingAnnotations[$classReflection->getName()][$methodName];
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:164:		$nativeMethodReflection = $classReflection->getNativeReflection()->getMethod($methodName);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:165:		if (!isset($this->methodsIncludingAnnotations[$classReflection->getName()][$nativeMethodReflection->getName()])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:167:			$method = $this->createMethod($classReflection, $nativeMethodReflection, true);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:168:			$this->methodsIncludingAnnotations[$classReflection->getName()][$nativeMethodReflection->getName()] = $method;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:169:			if ($nativeMethodReflection->getName() !== $methodName) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:170:				$this->methodsIncludingAnnotations[$classReflection->getName()][$methodName] = $method;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:174:		return $this->methodsIncludingAnnotations[$classReflection->getName()][$nativeMethodReflection->getName()];
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:179:		if (isset($this->nativeMethods[$classReflection->getName()][$methodName])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:180:			return $this->nativeMethods[$classReflection->getName()][$methodName];
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:183:		$nativeMethodReflection = $classReflection->getNativeReflection()->getMethod($methodName);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:184:		if (!isset($this->nativeMethods[$classReflection->getName()][$nativeMethodReflection->getName()])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:186:			$method = $this->createMethod($classReflection, $nativeMethodReflection, false);
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:187:			$this->nativeMethods[$classReflection->getName()][$nativeMethodReflection->getName()] = $method;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:190:		return $this->nativeMethods[$classReflection->getName()][$nativeMethodReflection->getName()];
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:199:		if ($includingAnnotations && $this->annotationsMethodsClassReflectionExtension->hasMethod($classReflection, $methodReflection->getName())) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:200:			$hierarchyDistances = $classReflection->getClassHierarchyDistances();
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:201:			$annotationMethod = $this->annotationsMethodsClassReflectionExtension->getMethod($classReflection, $methodReflection->getName());
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:202:			if (!isset($hierarchyDistances[$annotationMethod->getDeclaringClass()->getName()])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:205:			if (!isset($hierarchyDistances[$methodReflection->getDeclaringClass()->getName()])) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:209:			if ($hierarchyDistances[$annotationMethod->getDeclaringClass()->getName()] < $hierarchyDistances[$methodReflection->getDeclaringClass()->getName()]) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:213:		$declaringClass = $this->broker->getClass($methodReflection->getDeclaringClass()->getName());
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:217:		if (!$classReflection->isAnonymous() && !$declaringClass->isAnonymous() && $declaringClass->getFileName() !== false) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:218:			if ($methodReflection->getDocComment() !== false) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:220:					$this->broker,
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:221:					$methodReflection->getDocComment(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:222:					$declaringClass->getName(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:223:					$methodReflection->getName(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:224:					$declaringClass->getFileName()
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:227:				$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc(
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:228:					$phpDocBlock->getFile(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:229:					$phpDocBlock->getClass(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:230:					$phpDocBlock->getDocComment()
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:233:					return $tag->getType();
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:234:				}, $resolvedPhpDoc->getParamTags());
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:235:				$phpDocReturnType = $resolvedPhpDoc->getReturnTag() !== null ? $resolvedPhpDoc->getReturnTag()->getType() : null;
vendor/phpstan/phpstan/src/Reflection/Php/PhpClassReflectionExtension.php:239:		return $this->methodReflectionFactory->create(
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:27:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:28:		$this->type = $type;
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:29:		$this->reflection = $reflection;
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:34:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:42:		return $this->reflection->getDocComment();
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:47:		return $this->reflection->isStatic();
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:52:		return $this->reflection->isPrivate();
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:57:		return $this->reflection->isPublic();
vendor/phpstan/phpstan/src/Reflection/Php/PhpPropertyReflection.php:62:		return $this->type;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodFromParserNodeReflection.php:35:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodFromParserNodeReflection.php:40:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodFromParserNodeReflection.php:45:		return $this->declaringClass->getNativeMethod($this->getClassMethod()->name)->getPrototype();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodFromParserNodeReflection.php:51:		$functionLike = $this->getFunctionLike();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodFromParserNodeReflection.php:57:		return $this->getClassMethod()->isStatic();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodFromParserNodeReflection.php:62:		return $this->getClassMethod()->isPrivate();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodFromParserNodeReflection.php:67:		return $this->getClassMethod()->isPublic();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodFromParserNodeReflection.php:72:		if ($this->getName() === '__construct') {
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCrateProperty.php:17:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/Php/UniversalObjectCrateProperty.php:22:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:50:		$this->functionLike = $functionLike;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:51:		$this->realParameterTypes = $realParameterTypes;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:52:		$this->phpDocParameterTypes = $phpDocParameterTypes;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:53:		$this->realReturnTypePresent = $realReturnTypePresent;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:54:		$this->realReturnType = $realReturnType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:55:		$this->phpDocReturnType = $phpDocReturnType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:60:		return $this->functionLike;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:65:		if ($this->functionLike instanceof ClassMethod) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:66:			return $this->functionLike->name;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:69:		return (string) $this->functionLike->namespacedName;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:77:		if ($this->parameters === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:80:			foreach (array_reverse($this->functionLike->getParams()) as $parameter) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:81:				if (!$isOptional || $parameter->default === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:86:					$parameter->name,
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:88:					$this->realParameterTypes[$parameter->name],
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:89:					isset($this->phpDocParameterTypes[$parameter->name]) ? $this->phpDocParameterTypes[$parameter->name] : null,
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:90:					$parameter->byRef,
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:91:					$parameter->default,
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:92:					$parameter->variadic
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:96:			$this->parameters = array_reverse($parameters);
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:99:		return $this->parameters;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:104:		if ($this->isVariadic === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:106:			foreach ($this->functionLike->getParams() as $parameter) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:107:				if ($parameter->variadic) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:113:			$this->isVariadic = $isVariadic;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:116:		return $this->isVariadic;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:121:		if ($this->returnType === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:122:			$phpDocReturnType = $this->phpDocReturnType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:124:				$this->realReturnTypePresent
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:126:				&& TypeCombinator::containsNull($this->realReturnType) !== TypeCombinator::containsNull($phpDocReturnType)
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:130:			$this->returnType = TypehintHelper::decideType($this->realReturnType, $phpDocReturnType);
vendor/phpstan/phpstan/src/Reflection/Php/PhpFunctionFromParserNodeReflection.php:133:		return $this->returnType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:71:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:72:		$this->reflection = $reflection;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:73:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:74:		$this->parser = $parser;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:75:		$this->functionCallStatementFinder = $functionCallStatementFinder;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:76:		$this->cache = $cache;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:77:		$this->phpDocParameterTypes = $phpDocParameterTypes;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:78:		$this->phpDocReturnType = $phpDocReturnType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:83:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:91:		return $this->reflection->getDocComment();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:97:			$prototypeReflection = $this->reflection->getPrototype();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:98:			$prototypeDeclaringClass = $this->broker->getClassFromReflection(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:99:				$prototypeReflection->getDeclaringClass(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:100:				$prototypeReflection->getDeclaringClass()->getName(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:101:				$prototypeReflection->getDeclaringClass()->isAnonymous()
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:107:				$this->broker,
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:108:				$this->parser,
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:109:				$this->functionCallStatementFinder,
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:110:				$this->cache,
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:111:				$this->phpDocParameterTypes,
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:112:				$this->phpDocReturnType
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:121:		return $this->reflection->isStatic();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:126:		$name = $this->reflection->getName();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:130:			foreach ($this->getDeclaringClass()->getNativeReflection()->getTraitAliases() as $traitTarget) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:131:				$correctName = $this->getMethodNameWithCorrectCase($name, $traitTarget);
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:150:		$traitReflection = $this->broker->getClass($trait)->getNativeReflection();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:151:		foreach ($traitReflection->getTraitAliases() as $methodAlias => $traitTarget) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:156:			$correctName = $this->getMethodNameWithCorrectCase($lowercaseMethodName, $traitTarget);
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:170:		if ($this->parameters === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:171:			$this->parameters = array_map(function (\ReflectionParameter $reflection) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:174:					isset($this->phpDocParameterTypes[$reflection->getName()]) ? $this->phpDocParameterTypes[$reflection->getName()] : null
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:176:			}, $this->reflection->getParameters());
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:179:				$this->reflection->getName() === '__construct'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:180:				&& $this->declaringClass->getName() === 'ArrayObject'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:181:				&& count($this->parameters) === 1
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:184:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:189:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:197:				$this->declaringClass->getName() === 'ReflectionMethod'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:198:				&& $this->reflection->getName() === 'invoke'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:199:				&& !$this->parameters[1]->isOptional()
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:202:				$this->parameters[1] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:212:				$this->declaringClass->getName() === 'PDO'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:213:				&& $this->reflection->getName() === 'query'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:214:				&& count($this->parameters) < 4
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:216:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:221:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:226:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:231:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:238:				$this->declaringClass->getName() === 'DatePeriod'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:239:				&& $this->reflection->getName() === '__construct'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:240:				&& count($this->parameters) < 4
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:242:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:249:				$this->declaringClass->getName() === 'Closure'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:250:				&& $this->reflection->getName() === '__invoke'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:251:				&& count($this->parameters) < 1
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:253:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:262:				$this->declaringClass->getName() === 'ReflectionClass'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:263:				&& $this->reflection->getName() === 'newInstance'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:264:				&& count($this->parameters) === 1
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:266:				$this->parameters[0] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:275:				$this->declaringClass->getName() === 'DateTimeZone'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:276:				&& $this->reflection->getName() === 'getTransitions'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:277:				&& count($this->parameters) === 2
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:279:				$this->parameters[0] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:284:				$this->parameters[1] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:292:				$this->declaringClass->getName() === 'Locale'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:293:				&& $this->reflection->getName() === 'getDisplayLanguage'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:295:				$this->parameters[1] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:303:				$this->declaringClass->getName() === 'DOMDocument'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:304:				&& $this->reflection->getName() === 'saveHTML'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:305:				&& count($this->parameters) === 0
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:307:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:315:		return $this->parameters;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:320:		$isNativelyVariadic = $this->reflection->isVariadic();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:325:					$this->declaringClass->getName() === 'ReflectionMethod'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:326:					&& $this->reflection->getName() === 'invoke'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:329:					$this->declaringClass->getName() === 'Closure'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:330:					&& $this->reflection->getName() === '__invoke'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:333:					$this->declaringClass->getName() === 'ReflectionClass'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:334:					&& $this->reflection->getName() === 'newInstance'
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:341:		if (!$isNativelyVariadic && $this->declaringClass->getFileName() !== false) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:342:			$key = sprintf('variadic-method-%s-%s-v0', $this->declaringClass->getName(), $this->reflection->getName());
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:343:			$cachedResult = $this->cache->load($key);
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:345:				$nodes = $this->parser->parseFile($this->declaringClass->getFileName());
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:346:				$result = $this->callsFuncGetArgs($nodes);
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:347:				$this->cache->save($key, $result);
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:365:				if ($this->callsFuncGetArgs($node)) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:376:				&& isset($node->namespacedName)
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:377:				&& $this->declaringClass->getName() !== (string) $node->namespacedName
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:383:				if ($node->getStmts() === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:387:				$methodName = $node->name;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:388:				if ($methodName === $this->reflection->getName()) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:389:					return $this->functionCallStatementFinder->findFunctionCallInStatements(ParametersAcceptor::VARIADIC_FUNCTIONS, $node->getStmts()) !== null;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:395:			if ($this->callsFuncGetArgs($node)) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:405:		return $this->reflection->isPrivate();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:410:		return $this->reflection->isPublic();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:415:		if ($this->returnType === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:416:			if ($this->getName() === '__construct') {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:417:				return $this->returnType = new VoidType();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:419:			$returnType = $this->reflection->getReturnType();
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:420:			$phpDocReturnType = $this->phpDocReturnType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:424:				&& $returnType->allowsNull() !== TypeCombinator::containsNull($phpDocReturnType)
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:428:			$this->returnType = TypehintHelper::decideTypeFromReflection(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:431:				$this->declaringClass->getName()
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:435:		return $this->returnType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:440:		if ($this->phpDocReturnType !== null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:441:			return $this->phpDocReturnType;
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:449:		if ($this->nativeReturnType === null) {
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:450:			$this->nativeReturnType = TypehintHelper::decideTypeFromReflection(
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:451:				$this->reflection->getReturnType(),
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:453:				$this->declaringClass->getName()
vendor/phpstan/phpstan/src/Reflection/Php/PhpMethodReflection.php:457:		return $this->nativeReturnType;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:28:		$this->name = $name;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:29:		$this->type = $type;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:30:		$this->optional = $optional;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:31:		$this->passedByReference = $passedByReference;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:32:		$this->variadic = $variadic;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:37:		return $this->name;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:42:		return $this->optional;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:47:		return $this->type;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:52:		return $this->passedByReference;
vendor/phpstan/phpstan/src/Reflection/Php/DummyParameter.php:57:		return $this->variadic;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:60:		$this->reflection = $reflection;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:61:		$this->parser = $parser;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:62:		$this->functionCallStatementFinder = $functionCallStatementFinder;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:63:		$this->cache = $cache;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:64:		$this->phpDocParameterTypes = $phpDocParameterTypes;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:65:		$this->phpDocReturnType = $phpDocReturnType;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:70:		return $this->reflection;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:75:		return $this->reflection->getName();
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:83:		if ($this->parameters === null) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:84:			$this->parameters = array_map(function (\ReflectionParameter $reflection) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:87:					isset($this->phpDocParameterTypes[$reflection->getName()]) ? $this->phpDocParameterTypes[$reflection->getName()] : null
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:89:			}, $this->reflection->getParameters());
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:91:				$this->reflection->getName() === 'array_unique'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:92:				&& count($this->parameters) === 1
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:95:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:102:				$this->reflection->getName() === 'fputcsv'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:103:				&& count($this->parameters) === 4
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:105:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:112:				$this->reflection->getName() === 'unpack'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:115:				$this->parameters[2] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:122:				$this->reflection->getName() === 'imagepng'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:123:				&& count($this->parameters) === 2
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:125:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:130:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:138:				$this->reflection->getName() === 'session_start'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:139:				&& count($this->parameters) === 0
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:141:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:148:			if ($this->reflection->getName() === 'locale_get_display_language') {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:149:				$this->parameters[1] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:157:				$this->reflection->getName() === 'imagewebp'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:158:				&& count($this->parameters) === 2
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:160:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:168:				$this->reflection->getName() === 'setproctitle'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:169:				&& count($this->parameters) === 0
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:171:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:179:				$this->reflection->getName() === 'get_class'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:181:				$this->parameters = [
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:191:				$this->reflection->getName() === 'mysqli_fetch_all'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:192:				&& count($this->parameters) === 1
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:194:				$this->parameters[] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:202:				$this->reflection->getName() === 'openssl_open'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:203:				&& count($this->parameters) === 5
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:205:				$this->parameters[4] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:210:				$this->parameters[5] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:218:				$this->reflection->getName() === 'openssl_x509_parse'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:220:				$this->parameters[1] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:228:				$this->reflection->getName() === 'get_defined_functions'
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:229:				&& count($this->parameters) > 0
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:230:				&& !$this->parameters[0]->isOptional()
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:233:				$this->parameters[0] = new DummyParameter(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:241:		return $this->parameters;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:246:		$isNativelyVariadic = $this->reflection->isVariadic();
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:247:		if (!$isNativelyVariadic && $this->reflection->getFileName() !== false) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:248:			$key = sprintf('variadic-function-%s-v0', $this->reflection->getName());
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:249:			$cachedResult = $this->cache->load($key);
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:251:				$nodes = $this->parser->parseFile($this->reflection->getFileName());
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:252:				$result = $this->callsFuncGetArgs($nodes);
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:253:				$this->cache->save($key, $result);
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:271:				if ($this->callsFuncGetArgs($node)) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:281:				$functionName = (string) $node->namespacedName;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:283:				if ($functionName === $this->reflection->getName()) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:284:					return $this->functionCallStatementFinder->findFunctionCallInStatements(self::VARIADIC_FUNCTIONS, $node->getStmts()) !== null;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:290:			if ($this->callsFuncGetArgs($node)) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:300:		if ($this->returnType === null) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:301:			if ($this->reflection->getName() === 'count') {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:302:				return $this->returnType = new IntegerType();
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:304:			$returnType = $this->reflection->getReturnType();
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:305:			$phpDocReturnType = $this->phpDocReturnType;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:309:				&& $returnType->allowsNull() !== TypeCombinator::containsNull($phpDocReturnType)
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:313:			$this->returnType = TypehintHelper::decideTypeFromReflection(
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:319:		return $this->returnType;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:324:		if ($this->phpDocReturnType !== null) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:325:			return $this->phpDocReturnType;
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:333:		if ($this->nativeReturnType === null) {
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:334:			$this->nativeReturnType = TypehintHelper::decideTypeFromReflection($this->reflection->getReturnType());
vendor/phpstan/phpstan/src/Reflection/FunctionReflection.php:337:		return $this->nativeReturnType;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:28:		$this->name = $name;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:29:		$this->type = $type;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:30:		$this->isPassedByReference = $isPassedByReference;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:31:		$this->isOptional = $isOptional;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:32:		$this->isVariadic = $isVariadic;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:37:		return $this->name;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:42:		return $this->isOptional;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:47:		return $this->type;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:52:		return $this->isPassedByReference;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodParameterReflection.php:57:		return $this->isVariadic;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:21:		$this->fileTypeMapper = $fileTypeMapper;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:26:		if (!isset($this->properties[$classReflection->getName()])) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:27:			$this->properties[$classReflection->getName()] = $this->createProperties($classReflection, $classReflection);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:30:		return isset($this->properties[$classReflection->getName()][$propertyName]);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:35:		return $this->properties[$classReflection->getName()][$propertyName];
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:49:		foreach ($classReflection->getTraits() as $traitClass) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:50:			$properties += $this->createProperties($traitClass, $classReflection);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:52:		foreach ($classReflection->getParents() as $parentClass) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:53:			$properties += $this->createProperties($parentClass, $parentClass);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:54:			foreach ($parentClass->getTraits() as $traitClass) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:55:				$properties += $this->createProperties($traitClass, $parentClass);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:59:		foreach ($classReflection->getInterfaces() as $interfaceClass) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:60:			$properties += $this->createProperties($interfaceClass, $interfaceClass);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:63:		$fileName = $classReflection->getFileName();
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:68:		$docComment = $classReflection->getNativeReflection()->getDocComment();
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:73:		$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc($fileName, $classReflection->getName(), $docComment);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:74:		foreach ($resolvedPhpDoc->getPropertyTags() as $propertyName => $propertyTag) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:77:				$propertyTag->getType(),
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:78:				$propertyTag->isReadable(),
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsPropertiesClassReflectionExtension.php:79:				$propertyTag->isWritable()
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:32:		$this->name = $name;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:33:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:34:		$this->returnType = $returnType;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:35:		$this->parameters = $parameters;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:36:		$this->isStatic = $isStatic;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:37:		$this->isVariadic = $isVariadic;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:42:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:52:		return $this->isStatic;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:57:		return $this->parameters;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:62:		return $this->isVariadic;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:77:		return $this->name;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationMethodReflection.php:82:		return $this->returnType;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:21:		$this->fileTypeMapper = $fileTypeMapper;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:26:		if (!isset($this->methods[$classReflection->getName()])) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:27:			$this->methods[$classReflection->getName()] = $this->createMethods($classReflection, $classReflection);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:30:		return isset($this->methods[$classReflection->getName()][$methodName]);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:35:		return $this->methods[$classReflection->getName()][$methodName];
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:49:		foreach ($classReflection->getTraits() as $traitClass) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:50:			$methods += $this->createMethods($traitClass, $classReflection);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:52:		foreach ($classReflection->getParents() as $parentClass) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:53:			$methods += $this->createMethods($parentClass, $parentClass);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:54:			foreach ($parentClass->getTraits() as $traitClass) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:55:				$methods += $this->createMethods($traitClass, $parentClass);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:58:		foreach ($classReflection->getInterfaces() as $interfaceClass) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:59:			$methods += $this->createMethods($interfaceClass, $interfaceClass);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:62:		$fileName = $classReflection->getFileName();
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:67:		$docComment = $classReflection->getNativeReflection()->getDocComment();
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:72:		$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc($fileName, $classReflection->getName(), $docComment);
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:73:		foreach ($resolvedPhpDoc->getMethodTags() as $methodName => $methodTag) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:75:			foreach ($methodTag->getParameters() as $parameterName => $parameterTag) {
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:78:					$parameterTag->getType(),
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:79:					$parameterTag->isPassedByReference(),
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:80:					$parameterTag->isOptional(),
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:81:					$parameterTag->isVariadic()
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:88:				$methodTag->getReturnType(),
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:90:				$methodTag->isStatic(),
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:91:				$this->detectMethodVariadic($parameters)
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:107:		$possibleVariadicParameterIndex = count($parameters) - 1;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationsMethodsClassReflectionExtension.php:110:		return $possibleVariadicParameter->isVariadic();
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationPropertyReflection.php:31:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationPropertyReflection.php:32:		$this->type = $type;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationPropertyReflection.php:33:		$this->readable = $readable;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationPropertyReflection.php:34:		$this->writable = $writable;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationPropertyReflection.php:39:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationPropertyReflection.php:59:		return $this->type;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationPropertyReflection.php:64:		return $this->readable;
vendor/phpstan/phpstan/src/Reflection/Annotations/AnnotationPropertyReflection.php:69:		return $this->writable;
vendor/phpstan/phpstan/src/Reflection/ObsoleteClassConstantReflection.php:28:		$this->declaringClass = $declaringClass;
vendor/phpstan/phpstan/src/Reflection/ObsoleteClassConstantReflection.php:29:		$this->name = $name;
vendor/phpstan/phpstan/src/Reflection/ObsoleteClassConstantReflection.php:30:		$this->value = $value;
vendor/phpstan/phpstan/src/Reflection/ObsoleteClassConstantReflection.php:35:		return $this->name;
vendor/phpstan/phpstan/src/Reflection/ObsoleteClassConstantReflection.php:43:		return $this->value;
vendor/phpstan/phpstan/src/Reflection/ObsoleteClassConstantReflection.php:48:		return $this->declaringClass;
vendor/phpstan/phpstan/src/Reflection/MissingMethodFromReflectionException.php:12:				'Method %s() was not found in reflection of class %s - probably the wrong version of class is autoloaded.',
vendor/phpstan/phpstan/src/File/FileExcluder.php:20:		$this->analyseExcludes = array_map(function (string $exclude) use ($fileHelper): string {
vendor/phpstan/phpstan/src/File/FileExcluder.php:21:			$normalized = $fileHelper->normalizePath($exclude);
vendor/phpstan/phpstan/src/File/FileExcluder.php:23:			if ($this->isFnmatchPattern($normalized)) {
vendor/phpstan/phpstan/src/File/FileExcluder.php:27:			return $fileHelper->absolutizePath($normalized);
vendor/phpstan/phpstan/src/File/FileExcluder.php:33:		foreach ($this->analyseExcludes as $exclude) {
vendor/phpstan/phpstan/src/File/FileExcluder.php:45:			if ($this->isFnmatchPattern($exclude) && fnmatch($exclude, $file, $fnmatchFlags)) {
vendor/phpstan/phpstan/src/File/FileHelper.php:13:		$this->workingDirectory = $this->normalizePath($workingDirectory);
vendor/phpstan/phpstan/src/File/FileHelper.php:18:		return $this->workingDirectory;
vendor/phpstan/phpstan/src/File/FileHelper.php:33:		return rtrim($this->getWorkingDirectory(), '/\\') . DIRECTORY_SEPARATOR . ltrim($path, '/\\');
vendor/phpstan/phpstan/src/File/FileHelper.php:38:		if (preg_match('~^([a-z]+)\\:\\/\\/(.+)~', $originalPath, $m)) {
vendor/phpstan/phpstan/src/File/FileHelper.php:58:				if ($scheme === 'phar' && substr($removedPart, -5) === '.phar') {
vendor/phpstan/phpstan/src/Parser/DirectParser.php:22:		$this->parser = $parser;
vendor/phpstan/phpstan/src/Parser/DirectParser.php:23:		$this->traverser = $traverser;
vendor/phpstan/phpstan/src/Parser/DirectParser.php:32:		return $this->parseString(file_get_contents($file));
vendor/phpstan/phpstan/src/Parser/DirectParser.php:41:		$nodes = $this->parser->parse($sourceCode);
vendor/phpstan/phpstan/src/Parser/DirectParser.php:45:		return $this->traverser->traverse($nodes);
vendor/phpstan/phpstan/src/Parser/CachedParser.php:19:		$this->originalParser = $originalParser;
vendor/phpstan/phpstan/src/Parser/CachedParser.php:28:		if (!isset($this->cachedNodesByFile[$file])) {
vendor/phpstan/phpstan/src/Parser/CachedParser.php:29:			$this->cachedNodesByFile[$file] = $this->originalParser->parseFile($file);
vendor/phpstan/phpstan/src/Parser/CachedParser.php:32:		return $this->cachedNodesByFile[$file];
vendor/phpstan/phpstan/src/Parser/CachedParser.php:41:		if (!isset($this->cachedNodesByString[$sourceCode])) {
vendor/phpstan/phpstan/src/Parser/CachedParser.php:42:			$this->cachedNodesByString[$sourceCode] = $this->originalParser->parseString($sourceCode);
vendor/phpstan/phpstan/src/Parser/CachedParser.php:45:		return $this->cachedNodesByString[$sourceCode];
vendor/phpstan/phpstan/src/Parser/FunctionCallStatementFinder.php:20:				$result = $this->findFunctionCallInStatements($functionNames, $statement);
vendor/phpstan/phpstan/src/Parser/FunctionCallStatementFinder.php:30:			if ($statement instanceof FuncCall && $statement->name instanceof Name) {
vendor/phpstan/phpstan/src/Parser/FunctionCallStatementFinder.php:31:				if (in_array((string) $statement->name, $functionNames, true)) {
vendor/phpstan/phpstan/src/Parser/FunctionCallStatementFinder.php:36:			$result = $this->findFunctionCallInStatements($functionNames, $statement);
vendor/phpstan/phpstan/src/Testing/TestCase.php:46:			self::$container = $containerFactory->create($rootDir . '/tmp', [
vendor/phpstan/phpstan/src/Testing/TestCase.php:47:				$containerFactory->getConfigDirectory() . '/config.level7.neon',
vendor/phpstan/phpstan/src/Testing/TestCase.php:57:		$parser = $this->getContainer()->getService('directParser');
vendor/phpstan/phpstan/src/Testing/TestCase.php:72:		$parser = $this->getParser();
vendor/phpstan/phpstan/src/Testing/TestCase.php:93:				$this->parser = $parser;
vendor/phpstan/phpstan/src/Testing/TestCase.php:94:				$this->functionCallStatementFinder = $functionCallStatementFinder;
vendor/phpstan/phpstan/src/Testing/TestCase.php:95:				$this->cache = $cache;
vendor/phpstan/phpstan/src/Testing/TestCase.php:108:					$this->broker,
vendor/phpstan/phpstan/src/Testing/TestCase.php:109:					$this->parser,
vendor/phpstan/phpstan/src/Testing/TestCase.php:110:					$this->functionCallStatementFinder,
vendor/phpstan/phpstan/src/Testing/TestCase.php:111:					$this->cache,
vendor/phpstan/phpstan/src/Testing/TestCase.php:117:		$phpDocStringResolver = $this->getContainer()->getByType(PhpDocStringResolver::class);
vendor/phpstan/phpstan/src/Testing/TestCase.php:121:		$functionReflectionFactory = new class($this->getParser(), $functionCallStatementFinder, $cache) implements FunctionReflectionFactory {
vendor/phpstan/phpstan/src/Testing/TestCase.php:137:				$this->parser = $parser;
vendor/phpstan/phpstan/src/Testing/TestCase.php:138:				$this->functionCallStatementFinder = $functionCallStatementFinder;
vendor/phpstan/phpstan/src/Testing/TestCase.php:139:				$this->cache = $cache;
vendor/phpstan/phpstan/src/Testing/TestCase.php:150:					$this->parser,
vendor/phpstan/phpstan/src/Testing/TestCase.php:151:					$this->functionCallStatementFinder,
vendor/phpstan/phpstan/src/Testing/TestCase.php:152:					$this->cache,
vendor/phpstan/phpstan/src/Testing/TestCase.php:163:				new PhpDefectClassReflectionExtension($this->getContainer()->getByType(TypeStringResolver::class)),
vendor/phpstan/phpstan/src/Testing/TestCase.php:177:			new FileTypeMapper($this->getParser(), $phpDocStringResolver, $cache)
vendor/phpstan/phpstan/src/Testing/TestCase.php:179:		$methodReflectionFactory->broker = $broker;
vendor/phpstan/phpstan/src/Testing/TestCase.php:186:		return $this->getContainer()->getByType(FileHelper::class);
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:25:		if ($this->analyser === null) {
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:27:				$this->getRule(),
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:30:			$broker = $this->createBroker();
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:32:			$fileHelper = $this->getFileHelper();
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:34:			$this->analyser = new Analyser(
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:36:				$this->getParser(),
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:40:					$this->getParser(),
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:42:					new FileTypeMapper($this->getParser(), $this->getContainer()->getByType(PhpDocStringResolver::class), $this->createMock(Cache::class)),
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:44:					$this->shouldPolluteScopeWithLoopInitialAssignments(),
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:45:					$this->shouldPolluteCatchScopeWithTryAssignments(),
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:58:		return $this->analyser;
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:63:		$files = array_map([$this->getFileHelper(), 'normalizePath'], $files);
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:64:		$actualErrors = $this->getAnalyser()->analyse($files, false);
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:65:		$this->assertInternalType('array', $actualErrors);
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:86:				return sprintf('%02d: %s', $error->getLine(), $error->getMessage());
vendor/phpstan/phpstan/src/Testing/RuleTestCase.php:91:		$this->assertSame(implode("\n", $expectedErrors), implode("\n", $actualErrors));
vendor/phpstan/phpstan/src/Cache/MemoryCacheStorage.php:17:		return array_key_exists($key, $this->storage) ? $this->storage[$key] : null;
vendor/phpstan/phpstan/src/Cache/MemoryCacheStorage.php:27:		$this->storage[$key] = $data;
vendor/phpstan/phpstan/src/Cache/Cache.php:13:		$this->storage = $storage;
vendor/phpstan/phpstan/src/Cache/Cache.php:22:		return $this->storage->load($key);
vendor/phpstan/phpstan/src/Cache/Cache.php:32:		return $this->storage->save($key, $data);
vendor/phpstan/phpstan/src/Cache/FileCacheStorage.php:13:		$this->directory = $directory;
vendor/phpstan/phpstan/src/Cache/FileCacheStorage.php:15:		if (@mkdir($this->directory) && !is_dir($this->directory)) {
vendor/phpstan/phpstan/src/Cache/FileCacheStorage.php:16:			throw new \InvalidArgumentException(sprintf('Directory "%s" doesn\'t exist.', $this->directory));
vendor/phpstan/phpstan/src/Cache/FileCacheStorage.php:27:			$filePath = $this->getFilePath($key);
vendor/phpstan/phpstan/src/Cache/FileCacheStorage.php:28:			return is_file($filePath) ? require $this->getFilePath($key) : null;
vendor/phpstan/phpstan/src/Cache/FileCacheStorage.php:40:			$this->getFilePath($key),
vendor/phpstan/phpstan/src/Cache/FileCacheStorage.php:48:		return sprintf('%s/%s.php', $this->directory, preg_replace('~[^-\\w]~', '_', $key));
vendor/phpstan/phpstan/src/Rules/Constants/ConstantRule.php:19:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Constants/ConstantRule.php:34:		if (!$this->broker->hasConstant($node->name, $scope)) {
vendor/phpstan/phpstan/src/Rules/Constants/ConstantRule.php:38:					(string) $node->name
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:26:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:27:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:42:		if (!($node->name instanceof \PhpParser\Node\Name)) {
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:46:		if (!$this->broker->hasFunction($node->name, $scope)) {
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:50:		$function = $this->broker->getFunction($node->name, $scope);
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:52:		return $this->check->check(
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:57:				'Function ' . $function->getName() . ' invoked with %d parameter, %d required.',
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:58:				'Function ' . $function->getName() . ' invoked with %d parameters, %d required.',
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:59:				'Function ' . $function->getName() . ' invoked with %d parameter, at least %d required.',
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:60:				'Function ' . $function->getName() . ' invoked with %d parameters, at least %d required.',
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:61:				'Function ' . $function->getName() . ' invoked with %d parameter, %d-%d required.',
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:62:				'Function ' . $function->getName() . ' invoked with %d parameters, %d-%d required.',
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:63:				'Parameter #%d %s of function ' . $function->getName() . ' expects %s, %s given.',
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:64:				'Result of function ' . $function->getName() . ' (void) is used.',
vendor/phpstan/phpstan/src/Rules/Functions/CallToFunctionParametersRule.php:65:				'Parameter #%d %s of function ' . $function->getName() . ' is passed by reference, so it expects variables only.',
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:25:		if (!($node->name instanceof \PhpParser\Node\Name)) {
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:42:		$name = strtolower((string) $node->name);
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:49:		$args = $node->args;
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:55:		$formatArg = $args[$formatArgumentPosition]->value;
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:60:		foreach ($node->args as $arg) {
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:61:			if ($arg->unpack) {
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:66:		$format = $formatArg->value;
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:67:		$placeHoldersCount = $this->getPlaceholdersCount($name, $format);
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:68:		$argsCount -= $formatArgumentPosition;
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:76:						$argsCount - 1 === 1 ? '%d value given' : '%d values given'
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:80:					$argsCount - 1
vendor/phpstan/phpstan/src/Rules/Functions/PrintfParametersRule.php:91:		$pattern = '~(?<before>%*)%(?:(?<position>\d+)\$)?[-+]?(?:[ 0]|(?:\'[^%]))?-?\d*(?:\.\d*)?' . $specifiers . '~';
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:20:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:35:		if (!($node->name instanceof \PhpParser\Node\Name)) {
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:39:		$lowercaseFunctionName = strtolower((string) $node->name);
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:49:		if (!$this->broker->hasFunction($node->name, $scope)) {
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:50:			return [sprintf('Function %s not found.', (string) $node->name)];
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:53:		$function = $this->broker->getFunction($node->name, $scope);
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:54:		$name = (string) $node->name;
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:56:		$calledFunctionName = $this->broker->resolveFunctionName($node->name, $scope);
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:58:			strtolower($function->getName()) === strtolower($calledFunctionName)
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:59:			&& $function->getName() !== $calledFunctionName
vendor/phpstan/phpstan/src/Rules/Functions/CallToNonExistentFunctionRule.php:61:			return [sprintf('Call to function %s() with incorrect case: %s', $function->getName(), $name)];
vendor/phpstan/phpstan/src/Rules/Functions/CallToCountOnlyWithArrayOrCountableRule.php:23:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Functions/CallToCountOnlyWithArrayOrCountableRule.php:38:		if (!$node->name instanceof Node\Name) {
vendor/phpstan/phpstan/src/Rules/Functions/CallToCountOnlyWithArrayOrCountableRule.php:42:		$functionName = strtolower((string) $node->name);
vendor/phpstan/phpstan/src/Rules/Functions/CallToCountOnlyWithArrayOrCountableRule.php:47:		if (!isset($node->args[0])) {
vendor/phpstan/phpstan/src/Rules/Functions/CallToCountOnlyWithArrayOrCountableRule.php:51:		$argumentType = $scope->getType($node->args[0]->value);
vendor/phpstan/phpstan/src/Rules/Functions/CallToCountOnlyWithArrayOrCountableRule.php:57:		if (!$this->ruleLevelHelper->accepts($requiredType, $argumentType)) {
vendor/phpstan/phpstan/src/Rules/Functions/CallToCountOnlyWithArrayOrCountableRule.php:61:					$argumentType->describe()
vendor/phpstan/phpstan/src/Rules/Functions/UnusedClosureUsesRule.php:17:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Functions/UnusedClosureUsesRule.php:32:		if (count($node->uses) === 0) {
vendor/phpstan/phpstan/src/Rules/Functions/UnusedClosureUsesRule.php:36:		return $this->check->getUnusedParameters(
vendor/phpstan/phpstan/src/Rules/Functions/UnusedClosureUsesRule.php:38:				return $use->var;
vendor/phpstan/phpstan/src/Rules/Functions/UnusedClosureUsesRule.php:39:			}, $node->uses),
vendor/phpstan/phpstan/src/Rules/Functions/UnusedClosureUsesRule.php:40:			$node->stmts,
vendor/phpstan/phpstan/src/Rules/Functions/ExistingClassesInTypehintsRule.php:18:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Functions/ExistingClassesInTypehintsRule.php:33:		return $this->check->checkFunction(
vendor/phpstan/phpstan/src/Rules/Functions/ExistingClassesInTypehintsRule.php:38:				$node->namespacedName
vendor/phpstan/phpstan/src/Rules/Functions/ExistingClassesInTypehintsRule.php:42:				$node->namespacedName
vendor/phpstan/phpstan/src/Rules/Functions/NonExistentDefinedFunctionRule.php:19:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Functions/NonExistentDefinedFunctionRule.php:34:		$functionName = $node->name;
vendor/phpstan/phpstan/src/Rules/Functions/NonExistentDefinedFunctionRule.php:35:		if (isset($node->namespacedName)) {
vendor/phpstan/phpstan/src/Rules/Functions/NonExistentDefinedFunctionRule.php:36:			$functionName = (string) $node->namespacedName;
vendor/phpstan/phpstan/src/Rules/Functions/NonExistentDefinedFunctionRule.php:39:		if ($this->broker->hasFunction($functionNameName)) {
vendor/phpstan/phpstan/src/Rules/Functions/NonExistentDefinedFunctionRule.php:45:				'Function %s not found while trying to analyse it - autoloading is probably not configured properly.',
vendor/phpstan/phpstan/src/Rules/Functions/InnerFunctionRule.php:24:		if ($scope->getFunction() === null) {
vendor/phpstan/phpstan/src/Rules/Functions/InnerFunctionRule.php:29:			'Inner named functions are not supported by PHPStan. Consider refactoring to an anonymous function, class method, or a top-level-defined function. See issue #165 (https://github.com/phpstan/phpstan/issues/165) for more details.',
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:20:		$this->returnTypeCheck = $returnTypeCheck;
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:35:		if ($scope->getFunction() === null) {
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:39:		if ($scope->isInAnonymousFunction()) {
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:43:		$function = $scope->getFunction();
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:52:		if (function_exists($function->getName())) {
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:53:			$reflection = new \ReflectionFunction($function->getName());
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:56:		return $this->returnTypeCheck->checkReturnType(
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:58:			$function->getReturnType(),
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:59:			$node->expr,
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:62:				$function->getName()
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:66:				$function->getName()
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:70:				$function->getName()
vendor/phpstan/phpstan/src/Rules/Functions/ReturnTypeRule.php:72:			$reflection !== null && $reflection->isGenerator(),
vendor/phpstan/phpstan/src/Rules/Functions/ClosureReturnTypeRule.php:19:		$this->returnTypeCheck = $returnTypeCheck;
vendor/phpstan/phpstan/src/Rules/Functions/ClosureReturnTypeRule.php:34:		if (!$scope->isInAnonymousFunction()) {
vendor/phpstan/phpstan/src/Rules/Functions/ClosureReturnTypeRule.php:39:		$returnType = $scope->getAnonymousFunctionReturnType();
vendor/phpstan/phpstan/src/Rules/Functions/ClosureReturnTypeRule.php:42:		return $this->returnTypeCheck->checkReturnType(
vendor/phpstan/phpstan/src/Rules/Functions/ClosureReturnTypeRule.php:45:			$node->expr,
vendor/phpstan/phpstan/src/Rules/Functions/ClosureReturnTypeRule.php:49:			$generatorType->isSuperTypeOf($returnType)->yes(),
vendor/phpstan/phpstan/src/Rules/Functions/ExistingClassesInClosureTypehintsRule.php:18:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Functions/ExistingClassesInClosureTypehintsRule.php:33:		return $this->check->checkFunction(
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:59:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:60:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:61:		$this->checkClassCaseSensitivity = $checkClassCaseSensitivity;
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:62:		$this->checkThisOnly = $checkThisOnly;
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:80:			return $this->checkParametersAcceptor(
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:81:				$scope->getClassReflection()->getNativeMethod($function->name),
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:87:			$functionName = $function->name;
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:88:			if (isset($function->namespacedName)) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:89:				$functionName = (string) $function->namespacedName;
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:92:			if (!$this->broker->hasFunction($functionNameName)) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:95:			return $this->checkParametersAcceptor(
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:96:				$this->broker->getFunction($functionNameName),
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:103:		foreach ($function->getParams() as $param) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:104:			$class = $param->type instanceof NullableType
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:105:				? (string) $param->type->type
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:106:				: (string) $param->type;
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:111:			if (!$this->broker->hasClass($class)) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:112:				$errors[] = sprintf($parameterMessage, $param->name, $class);
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:113:			} elseif ($this->checkClassCaseSensitivity) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:116:					$this->classCaseSensitivityCheck->checkClassNames([$class])
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:121:		$returnType = $function->getReturnType() instanceof NullableType
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:122:			? (string) $function->getReturnType()->type
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:123:			: (string) $function->getReturnType();
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:129:			if (!$this->broker->hasClass($returnType)) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:131:			} elseif ($this->checkClassCaseSensitivity) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:134:					$this->classCaseSensitivityCheck->checkClassNames([$returnType])
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:149:		foreach ($parametersAcceptor->getParameters() as $parameter) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:150:			if ($this->checkThisOnly) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:151:				$referencedClasses = $parameter->getType()->getReferencedClasses();
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:154:					$parameter->getNativeType()->getReferencedClasses(),
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:155:					$parameter->getPhpDocType()->getReferencedClasses()
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:159:				if (!$this->broker->hasClass($class)) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:160:					$errors[] = sprintf($parameterMessage, $parameter->getName(), $class);
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:164:			if ($this->checkClassCaseSensitivity) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:167:					$this->classCaseSensitivityCheck->checkClassNames($referencedClasses)
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:170:			if ($parameter->getType() instanceof NonexistentParentClassType) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:171:				$errors[] = sprintf($parameterMessage, $parameter->getName(), $parameter->getType()->describe());
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:175:		if ($this->checkThisOnly) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:176:			$returnTypeReferencedClasses = $parametersAcceptor->getReturnType()->getReferencedClasses();
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:179:				$parametersAcceptor->getNativeReturnType()->getReferencedClasses(),
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:180:				$parametersAcceptor->getPhpDocReturnType()->getReferencedClasses()
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:185:			if (!$this->broker->hasClass($class)) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:190:		if ($this->checkClassCaseSensitivity) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:193:				$this->classCaseSensitivityCheck->checkClassNames($returnTypeReferencedClasses)
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:196:		if ($parametersAcceptor->getReturnType() instanceof NonexistentParentClassType) {
vendor/phpstan/phpstan/src/Rules/FunctionDefinitionCheck.php:197:			$errors[] = sprintf($returnMessage, $parametersAcceptor->getReturnType()->describe());
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:22:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:23:		$this->printer = $printer;
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:40:		foreach ($node->items as $item) {
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:44:			if ($item->key === null) {
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:48:			$key = $item->key;
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:59:				$printedValue = (string) $key->name;
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:67:				} elseif ($this->broker->hasConstant($key->name, $scope)) {
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:68:					$value = constant($this->broker->resolveConstantName($key->name, $scope));
vendor/phpstan/phpstan/src/Rules/Arrays/DuplicateKeysInLiteralArraysRule.php:73:				$printedValue = $this->printer->prettyPrintExpr($key);
vendor/phpstan/phpstan/src/Rules/Arrays/AppendedArrayItemTypeRule.php:19:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Arrays/AppendedArrayItemTypeRule.php:34:		if (!($node->var instanceof ArrayDimFetch)) {
vendor/phpstan/phpstan/src/Rules/Arrays/AppendedArrayItemTypeRule.php:38:		$assignedToType = $scope->getType($node->var->var);
vendor/phpstan/phpstan/src/Rules/Arrays/AppendedArrayItemTypeRule.php:43:		if ($assignedToType->isItemTypeInferredFromLiteralArray()) {
vendor/phpstan/phpstan/src/Rules/Arrays/AppendedArrayItemTypeRule.php:47:		$assignedValueType = $scope->getType($node->expr);
vendor/phpstan/phpstan/src/Rules/Arrays/AppendedArrayItemTypeRule.php:48:		if (!$this->ruleLevelHelper->accepts($assignedToType->getItemType(), $assignedValueType)) {
vendor/phpstan/phpstan/src/Rules/Arrays/AppendedArrayItemTypeRule.php:52:					$assignedToType->describe(),
vendor/phpstan/phpstan/src/Rules/Arrays/AppendedArrayItemTypeRule.php:53:					$assignedValueType->describe()
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayDimFetchRule.php:23:		if ($node->dim === null) {
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayDimFetchRule.php:27:		$varType = $scope->getType($node->var);
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayDimFetchRule.php:32:		$dimensionType = $scope->getType($node->dim);
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayDimFetchRule.php:33:		if (!AllowedArrayKeysTypes::getType()->accepts($dimensionType)) {
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayDimFetchRule.php:35:				sprintf('Invalid array key type %s.', $dimensionType->describe()),
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayItemRule.php:22:		if ($node->key === null) {
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayItemRule.php:26:		$dimensionType = $scope->getType($node->key);
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayItemRule.php:27:		if (!AllowedArrayKeysTypes::getType()->accepts($dimensionType)) {
vendor/phpstan/phpstan/src/Rules/Arrays/InvalidKeyInArrayItemRule.php:29:				sprintf('Invalid array key type %s.', $dimensionType->describe()),
vendor/phpstan/phpstan/src/Rules/Arrays/IterableInForeachRule.php:19:		$this->checkUnionTypes = $checkUnionTypes;
vendor/phpstan/phpstan/src/Rules/Arrays/IterableInForeachRule.php:34:		$iteratedExpressionType = $scope->getType($node->expr);
vendor/phpstan/phpstan/src/Rules/Arrays/IterableInForeachRule.php:35:		if (!$this->checkUnionTypes && $iteratedExpressionType instanceof UnionType) {
vendor/phpstan/phpstan/src/Rules/Arrays/IterableInForeachRule.php:39:		if (!$iteratedExpressionType instanceof MixedType && !$iteratedExpressionType->isIterable()->yes()) {
vendor/phpstan/phpstan/src/Rules/Arrays/IterableInForeachRule.php:43:					$iteratedExpressionType->describe()
vendor/phpstan/phpstan/src/Rules/ClassCaseSensitivityCheck.php:16:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/ClassCaseSensitivityCheck.php:27:			if (!$this->broker->hasClass($className)) {
vendor/phpstan/phpstan/src/Rules/ClassCaseSensitivityCheck.php:30:			$classReflection = $this->broker->getClass($className);
vendor/phpstan/phpstan/src/Rules/ClassCaseSensitivityCheck.php:31:			$realClassName = $classReflection->getName();
vendor/phpstan/phpstan/src/Rules/ClassCaseSensitivityCheck.php:41:				$this->getTypeName($classReflection),
vendor/phpstan/phpstan/src/Rules/ClassCaseSensitivityCheck.php:52:		if ($classReflection->isInterface()) {
vendor/phpstan/phpstan/src/Rules/ClassCaseSensitivityCheck.php:54:		} elseif ($classReflection->isTrait()) {
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:35:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:36:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:37:		$this->checkClassCaseSensitivity = $checkClassCaseSensitivity;
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:52:		$propertyReflection = $scope->getClassReflection()->getNativeProperty($node->name);
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:53:		$propertyType = $propertyReflection->getType();
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:56:		foreach ($propertyType->getReferencedClasses() as $referencedClass) {
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:57:			if ($this->broker->hasClass($referencedClass)) {
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:63:				$propertyReflection->getDeclaringClass()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:64:				$node->name,
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:69:		if ($this->checkClassCaseSensitivity) {
vendor/phpstan/phpstan/src/Rules/Properties/ExistingClassesInPropertiesRule.php:72:				$this->classCaseSensitivityCheck->checkClassNames($propertyType->getReferencedClasses())
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:31:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:32:		$this->propertyDescriptor = $propertyDescriptor;
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:33:		$this->propertyReflectionFinder = $propertyReflectionFinder;
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:34:		$this->checkThisOnly = $checkThisOnly;
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:57:			!($node->var instanceof Node\Expr\PropertyFetch)
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:58:			&& !($node->var instanceof Node\Expr\StaticPropertyFetch)
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:64:			$node->var instanceof Node\Expr\PropertyFetch
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:65:			&& $this->checkThisOnly
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:66:			&& !$this->ruleLevelHelper->isThis($node->var->var)
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:72:		$propertyFetch = $node->var;
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:73:		$propertyReflection = $this->propertyReflectionFinder->findPropertyReflectionFromNode($propertyFetch, $scope);
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:78:		if (!$scope->canAccessProperty($propertyReflection)) {
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:82:		if (!$propertyReflection->isWritable()) {
vendor/phpstan/phpstan/src/Rules/Properties/WritingToReadOnlyPropertiesRule.php:83:			$propertyDescription = $this->propertyDescriptor->describeProperty($propertyReflection, $propertyFetch);
vendor/phpstan/phpstan/src/Rules/Properties/PropertyDescriptor.php:18:			return sprintf('Property %s::$%s', $property->getDeclaringClass()->getDisplayName(), $propertyFetch->name);
vendor/phpstan/phpstan/src/Rules/Properties/PropertyDescriptor.php:20:			return sprintf('Static property %s::$%s', $property->getDeclaringClass()->getDisplayName(), $propertyFetch->name);
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:31:		$this->propertyDescriptor = $propertyDescriptor;
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:32:		$this->propertyReflectionFinder = $propertyReflectionFinder;
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:33:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:34:		$this->checkThisOnly = $checkThisOnly;
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:58:			&& $this->checkThisOnly
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:59:			&& !$this->ruleLevelHelper->isThis($node->var)
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:64:		if ($scope->isInExpressionAssign($node)) {
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:68:		$propertyReflection = $this->propertyReflectionFinder->findPropertyReflectionFromNode($node, $scope);
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:72:		if (!$scope->canAccessProperty($propertyReflection)) {
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:76:		if (!$propertyReflection->isReadable()) {
vendor/phpstan/phpstan/src/Rules/Properties/ReadingWriteOnlyPropertiesRule.php:77:			$propertyDescription = $this->propertyDescriptor->describeProperty($propertyReflection, $node);
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:41:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:42:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:43:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:58:		if (!is_string($node->name)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:62:		$name = $node->name;
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:64:		if ($node->class instanceof Name) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:65:			$class = (string) $node->class;
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:67:				if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:76:				$className = $scope->getClassReflection()->getName();
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:78:				if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:87:				if ($scope->getClassReflection()->getParentClass() === false) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:91:							$scope->getClassReflection()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:92:							$scope->getFunctionName(),
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:94:							$scope->getClassReflection()->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:99:				if ($scope->getFunctionName() === null) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:103:				$currentMethodReflection = $scope->getClassReflection()->getNativeMethod($scope->getFunctionName());
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:104:				if (!$currentMethodReflection->isStatic()) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:109:				$className = $scope->getClassReflection()->getParentClass()->getName();
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:111:				if (!$this->broker->hasClass($class)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:120:					$messages = $this->classCaseSensitivityCheck->checkClassNames([$class]);
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:122:				$className = $this->broker->getClass($class)->getName();
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:127:			$classTypeResult = $this->ruleLevelHelper->findTypeToCheck(
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:129:				$node->class,
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:132:			$classType = $classTypeResult->getType();
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:134:				return $classTypeResult->getUnknownClassErrors();
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:145:		if (!$classType->canAccessProperties()) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:147:				sprintf('Cannot access static property $%s on %s.', $name, $typeForDescribe->describe()),
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:151:		if (!$classType->hasProperty($name)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:152:			if ($scope->isSpecified($node)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:159:					$typeForDescribe->describe(),
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:165:		$property = $classType->getProperty($name, $scope);
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:166:		if (!$property->isStatic()) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:170:					$property->getDeclaringClass()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:176:		if (!$scope->canAccessProperty($property)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:180:					$property->isPrivate() ? 'private' : 'protected',
vendor/phpstan/phpstan/src/Rules/Properties/AccessStaticPropertiesRule.php:182:					$property->getDeclaringClass()->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:27:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:28:		$this->propertyDescriptor = $propertyDescriptor;
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:29:		$this->propertyReflectionFinder = $propertyReflectionFinder;
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:52:			!($node->var instanceof Node\Expr\PropertyFetch)
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:53:			&& !($node->var instanceof Node\Expr\StaticPropertyFetch)
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:59:		$propertyFetch = $node->var;
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:60:		$propertyReflection = $this->propertyReflectionFinder->findPropertyReflectionFromNode($propertyFetch, $scope);
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:65:		$propertyType = $propertyReflection->getType();
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:68:			$assignedValueType = $scope->getType($node->expr);
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:70:			$assignedValueType = $scope->getType($node);
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:72:		if (!$this->ruleLevelHelper->accepts($propertyType, $assignedValueType)) {
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:73:			$propertyDescription = $this->propertyDescriptor->describeProperty($propertyReflection, $propertyFetch);
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:82:					$propertyType->describe(),
vendor/phpstan/phpstan/src/Rules/Properties/TypesAssignedToPropertiesRule.php:83:					$assignedValueType->describe()
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:29:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:30:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:45:		if (!is_string($node->name)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:49:		$name = $node->name;
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:50:		$typeResult = $this->ruleLevelHelper->findTypeToCheck(
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:52:			$node->var,
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:55:		$type = $typeResult->getType();
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:57:			return $typeResult->getUnknownClassErrors();
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:59:		if (!$type->canAccessProperties()) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:61:				sprintf('Cannot access property $%s on %s.', $name, $type->describe()),
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:65:		if (!$type->hasProperty($name)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:66:			if ($scope->isSpecified($node)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:70:			if (count($typeResult->getReferencedClasses()) === 1) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:71:				$referencedClass = $typeResult->getReferencedClasses()[0];
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:72:				$propertyClassReflection = $this->broker->getClass($referencedClass);
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:73:				$parentClassReflection = $propertyClassReflection->getParentClass();
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:75:					if ($parentClassReflection->hasProperty($name)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:80:								$parentClassReflection->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:85:					$parentClassReflection = $parentClassReflection->getParentClass();
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:92:					$type->describe(),
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:98:		$propertyReflection = $type->getProperty($name, $scope);
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:99:		if (!$scope->canAccessProperty($propertyReflection)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:103:					$propertyReflection->isPrivate() ? 'private' : 'protected',
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesRule.php:104:					$type->describe(),
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesOnPossiblyNullRule.php:29:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesOnPossiblyNullRule.php:30:		$this->checkThisOnly = $checkThisOnly;
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesOnPossiblyNullRule.php:45:		if (!is_string($node->name)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesOnPossiblyNullRule.php:49:		if ($this->checkThisOnly && !$this->ruleLevelHelper->isThis($node->var)) {
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesOnPossiblyNullRule.php:53:		$type = $scope->getType($node->var);
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesOnPossiblyNullRule.php:62:					$node->name,
vendor/phpstan/phpstan/src/Rules/Properties/AccessPropertiesOnPossiblyNullRule.php:63:					$type->describe()
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:18:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:33:		$classReflection = $scope->getClassReflection();
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:36:		foreach ($node->props as $property) {
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:37:			if ($property->default === null) {
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:41:			if ($property->default instanceof Node\Expr\ConstFetch && (string) $property->default->name === 'null') {
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:45:			$propertyReflection = $classReflection->getNativeProperty($property->name);
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:46:			$propertyType = $propertyReflection->getType();
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:47:			$defaultValueType = $scope->getType($property->default);
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:48:			if ($this->ruleLevelHelper->accepts($propertyType, $defaultValueType)) {
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:54:				$node->isStatic() ? 'Static property' : 'Property',
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:55:				$classReflection->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:56:				$property->name,
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:57:				$propertyType->describe(),
vendor/phpstan/phpstan/src/Rules/Properties/DefaultValueTypesAssignedToPropertiesRule.php:58:				$defaultValueType->describe()
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:20:			if (!is_string($propertyFetch->name)) {
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:23:			$propertyHolderType = $scope->getType($propertyFetch->var);
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:24:			return $this->findPropertyReflection($propertyHolderType, $propertyFetch->name, $scope);
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:26:			if (!is_string($propertyFetch->name)) {
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:29:			if ($propertyFetch->class instanceof \PhpParser\Node\Name) {
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:30:				$propertyHolderType = new ObjectType($scope->resolveName($propertyFetch->class));
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:32:				$propertyHolderType = $scope->getType($propertyFetch->class);
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:35:			return $this->findPropertyReflection($propertyHolderType, $propertyFetch->name, $scope);
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:49:		if (!$propertyHolderType->hasProperty($propertyName)) {
vendor/phpstan/phpstan/src/Rules/Properties/PropertyReflectionFinder.php:53:		return $propertyHolderType->getProperty($propertyName, $scope);
vendor/phpstan/phpstan/src/Rules/Variables/ThisVariableRule.php:25:		if (!is_string($node->name) || $node->name !== 'this') {
vendor/phpstan/phpstan/src/Rules/Variables/ThisVariableRule.php:29:		if ($scope->isInClosureBind()) {
vendor/phpstan/phpstan/src/Rules/Variables/ThisVariableRule.php:33:		if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Variables/ThisVariableRule.php:39:		$function = $scope->getFunction();
vendor/phpstan/phpstan/src/Rules/Variables/ThisVariableRule.php:44:		if ($function->isStatic()) {
vendor/phpstan/phpstan/src/Rules/Variables/ThisVariableRule.php:48:					$scope->getClassReflection()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Variables/ThisVariableRule.php:49:					$function->getName()
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:19:		$this->checkNullables = $checkNullables;
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:34:		$type = $scope->getType($node->expr);
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:36:		if (!$this->checkNullables && !$type instanceof NullType) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:40:		if ($type->isClonable()) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:44:		if ($node->expr instanceof Variable) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:47:					'Cannot clone non-object variable $%s of type %s.',
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:48:					$node->expr->name,
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:49:					$type->describe()
vendor/phpstan/phpstan/src/Rules/Variables/VariableCloningRule.php:55:			sprintf('Cannot clone %s.', $type->describe()),
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableInAnonymousFunctionUseRule.php:21:		$this->checkMaybeUndefinedVariables = $checkMaybeUndefinedVariables;
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableInAnonymousFunctionUseRule.php:36:		if ($node->byRef) {
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableInAnonymousFunctionUseRule.php:40:		if ($scope->hasVariableType($node->var)->no()) {
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableInAnonymousFunctionUseRule.php:42:				sprintf('Undefined variable: $%s', $node->var),
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableInAnonymousFunctionUseRule.php:45:			$this->checkMaybeUndefinedVariables
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableInAnonymousFunctionUseRule.php:46:			&& !$scope->hasVariableType($node->var)->yes()
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableInAnonymousFunctionUseRule.php:49:				sprintf('Variable $%s might not be defined.', $node->var),
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:27:		$this->cliArgumentsVariablesRegistered = $cliArgumentsVariablesRegistered;
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:28:		$this->checkMaybeUndefinedVariables = $checkMaybeUndefinedVariables;
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:58:		if (!is_string($node->name)) {
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:62:		if (self::isGlobalVariable($node->name)) {
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:66:		if ($this->cliArgumentsVariablesRegistered && in_array($node->name, [
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:70:			$isInMain = !$scope->isInClass() && !$scope->isInAnonymousFunction() && $scope->getFunction() === null;
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:76:		if ($scope->isInExpressionAssign($node)) {
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:80:		if ($scope->hasVariableType($node->name)->no()) {
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:82:				sprintf('Undefined variable: $%s', $node->name),
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:85:			$this->checkMaybeUndefinedVariables
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:86:			&& !$scope->hasVariableType($node->name)->yes()
vendor/phpstan/phpstan/src/Rules/Variables/DefinedVariableRule.php:89:				sprintf('Variable $%s might not be defined.', $node->name),
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:25:		foreach ($node->vars as $var) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:31:				$var = $var->var;
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:37:				&& $var->class instanceof Node\Expr
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:39:				$var = $var->class;
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:43:			if (!$var instanceof Node\Expr\Variable || !is_string($var->name)) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:47:			if (DefinedVariableRule::isGlobalVariable($var->name)) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:51:			$certainty = $scope->hasVariableType($var->name);
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:52:			if ($certainty->no()) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:54:					$scope->getFunction() !== null
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:55:					|| $scope->isInAnonymousFunction()
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:57:					$messages[] = sprintf('Variable $%s in isset() is never defined.', $var->name);
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:59:			} elseif ($certainty->yes() && !$isSubNode) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:60:				$variableType = $scope->getVariableType($var->name);
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:61:				if (!$variableType->accepts(new NullType())) {
vendor/phpstan/phpstan/src/Rules/Variables/VariableCertaintyInIssetRule.php:62:					$messages[] = sprintf('Variable $%s in isset() always exists and is not nullable.', $var->name);
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:20:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:35:		if (isset($node->types)) {
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:36:			$classes = $node->types;
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:37:		} elseif (isset($node->type)) {
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:38:			$classes = [$node->type];
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:45:			if (!$this->broker->hasClass($class)) {
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:50:			$classReflection = $this->broker->getClass($class);
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:51:			if (!$classReflection->isInterface() && !$classReflection->getNativeReflection()->implementsInterface(\Throwable::class)) {
vendor/phpstan/phpstan/src/Rules/Exceptions/CaughtExceptionExistenceRule.php:52:				$errors[] = sprintf('Caught class %s is not an exception.', $classReflection->getDisplayName());
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:19:		$this->checkAlwaysTrueInstanceof = $checkAlwaysTrueInstanceof;
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:34:		if ($node->class instanceof Node\Name) {
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:35:			$className = $scope->resolveName($node->class);
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:38:			$type = $scope->getType($node->class);
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:41:		$expressionType = $scope->getType($node->expr);
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:42:		$isExpressionObject = (new ObjectWithoutClassType())->isSuperTypeOf($expressionType);
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:43:		if (!$isExpressionObject->no() && $type instanceof StringType) {
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:47:		$isSuperType = $type->isSuperTypeOf($expressionType)
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:48:			->and($isExpressionObject);
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:50:		if ($isSuperType->no()) {
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:54:					$expressionType->describe(),
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:55:					$type->describe()
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:58:		} elseif ($isSuperType->yes() && $this->checkAlwaysTrueInstanceof) {
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:62:					$expressionType->describe(),
vendor/phpstan/phpstan/src/Rules/Classes/ImpossibleInstanceOfRule.php:63:					$type->describe()
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassesInClassImplementsRule.php:19:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassesInClassImplementsRule.php:34:		return $this->classCaseSensitivityCheck->checkClassNames(
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassesInClassImplementsRule.php:37:			}, $node->implements)
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInInstanceOfRule.php:35:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInInstanceOfRule.php:36:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInInstanceOfRule.php:37:		$this->checkClassCaseSensitivity = $checkClassCaseSensitivity;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInInstanceOfRule.php:52:		$class = $node->class;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInInstanceOfRule.php:65:			if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInInstanceOfRule.php:74:		if (!$this->broker->hasClass($name)) {
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInInstanceOfRule.php:78:		} elseif ($this->checkClassCaseSensitivity) {
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInInstanceOfRule.php:79:			return $this->classCaseSensitivityCheck->checkClassNames([$name]);
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:36:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:37:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:38:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:53:		if (!($node->class instanceof \PhpParser\Node\Name)) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:57:		$class = (string) $node->class;
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:60:			if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:67:			if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:72:			$classReflection = $scope->getClassReflection();
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:74:			if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:79:			if ($scope->getClassReflection()->getParentClass() === false) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:83:						$scope->getClassReflection()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:84:						$scope->getFunctionName(),
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:85:						$scope->getClassReflection()->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:89:			$classReflection = $scope->getClassReflection()->getParentClass();
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:91:			if (!$this->broker->hasClass($class)) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:96:				$messages = $this->classCaseSensitivityCheck->checkClassNames([$class]);
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:99:			$classReflection = $this->broker->getClass($class);
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:102:		if ($classReflection->isInterface()) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:104:				sprintf('Cannot instantiate interface %s.', $classReflection->getDisplayName()),
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:108:		if ($classReflection->isAbstract()) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:110:				sprintf('Instantiated class %s is abstract.', $classReflection->getDisplayName()),
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:114:		if (!$classReflection->hasNativeMethod('__construct') && !$classReflection->hasNativeMethod($class)) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:115:			if (count($node->args) > 0) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:119:						$classReflection->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:127:		$constructorReflection = $classReflection->hasNativeMethod('__construct') ? $classReflection->getNativeMethod('__construct') : $classReflection->getNativeMethod($class);
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:128:		if (!$scope->canCallMethod($constructorReflection)) {
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:131:				$classReflection->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:132:				$constructorReflection->isPrivate() ? 'private' : 'protected',
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:133:				$constructorReflection->getDeclaringClass()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:134:				$constructorReflection->getName()
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:138:		return array_merge($messages, $this->check->check(
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:143:				'Class ' . $classReflection->getDisplayName() . ' constructor invoked with %d parameter, %d required.',
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:144:				'Class ' . $classReflection->getDisplayName() . ' constructor invoked with %d parameters, %d required.',
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:145:				'Class ' . $classReflection->getDisplayName() . ' constructor invoked with %d parameter, at least %d required.',
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:146:				'Class ' . $classReflection->getDisplayName() . ' constructor invoked with %d parameters, at least %d required.',
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:147:				'Class ' . $classReflection->getDisplayName() . ' constructor invoked with %d parameter, %d-%d required.',
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:148:				'Class ' . $classReflection->getDisplayName() . ' constructor invoked with %d parameters, %d-%d required.',
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:149:				'Parameter #%d %s of class ' . $classReflection->getDisplayName() . ' constructor expects %s, %s given.',
vendor/phpstan/phpstan/src/Rules/Classes/InstantiationRule.php:151:				'Parameter #%d %s of class ' . $classReflection->getDisplayName() . ' constructor is passed by reference, so it expects variables only',
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInClassExtendsRule.php:19:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInClassExtendsRule.php:34:		if ($node->extends === null) {
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInClassExtendsRule.php:37:		return $this->classCaseSensitivityCheck->checkClassNames([(string) $node->extends]);
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassesInInterfaceExtendsRule.php:19:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassesInInterfaceExtendsRule.php:34:		return $this->classCaseSensitivityCheck->checkClassNames(
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassesInInterfaceExtendsRule.php:37:			}, $node->extends)
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:40:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:41:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:42:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:57:		$constantName = $node->name;
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:62:		$class = $node->class;
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:67:				if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:73:				$className = $scope->getClassReflection()->getName();
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:75:				if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:80:				$currentClassReflection = $scope->getClassReflection();
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:81:				if ($currentClassReflection->getParentClass() === false) {
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:86:							$currentClassReflection->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:90:				$className = $currentClassReflection->getParentClass()->getName();
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:92:				if (!$this->broker->hasClass($className)) {
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:103:					$messages = $this->classCaseSensitivityCheck->checkClassNames([$className]);
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:106:				$className = $this->broker->getClass($className)->getName();
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:111:			$classTypeResult = $this->ruleLevelHelper->findTypeToCheck(
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:116:			$classType = $classTypeResult->getType();
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:118:				return $classTypeResult->getUnknownClassErrors();
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:129:		if (!$classType->canAccessConstants()) {
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:131:				sprintf('Cannot access constant %s on %s.', $constantName, $typeForDescribe->describe()),
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:139:		if (!$classType->hasConstant($constantName)) {
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:143:					$typeForDescribe->describe(),
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:149:		$constantReflection = $classType->getConstant($constantName);
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:150:		if (!$scope->canAccessConstant($constantReflection)) {
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:154:					$constantReflection->isPrivate() ? 'private' : 'protected',
vendor/phpstan/phpstan/src/Rules/Classes/ClassConstantRule.php:156:					$constantReflection->getDeclaringClass()->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:25:		if (strpos($scope->getAnalysedContextFile(), '(in context of ') !== false) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:29:		if ($node->name !== '__construct') {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:33:		$classReflection = $scope->getClassReflection()->getNativeReflection();
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:34:		if ($classReflection->isInterface() || $classReflection->isAnonymous()) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:38:		if ($this->callsParentConstruct($node)) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:39:			if ($classReflection->getParentClass() === false) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:43:						$classReflection->getName()
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:48:			if ($this->getParentConstructorClass($classReflection) === false) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:52:						$classReflection->getName()
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:57:			$parentClass = $this->getParentConstructorClass($classReflection);
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:62:						$classReflection->getName(),
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:63:						$parentClass->getName()
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:74:		if (!isset($parserNode->stmts)) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:78:		foreach ($parserNode->stmts as $statement) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:79:			$statement = $this->ignoreErrorSuppression($statement);
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:82:					$statement->class instanceof Name
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:83:					&& ((string) $statement->class === 'parent')
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:84:					&& $statement->name === '__construct'
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:89:				if ($this->callsParentConstruct($statement)) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:104:		while ($classReflection->getParentClass() !== false) {
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:105:			$constructor = $classReflection->getParentClass()->hasMethod('__construct') ? $classReflection->getParentClass()->getMethod('__construct') : null;
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:106:			$constructorWithClassName = $classReflection->getParentClass()->hasMethod($classReflection->getParentClass()->getName()) ? $classReflection->getParentClass()->getMethod($classReflection->getParentClass()->getName()) : null;
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:110:					&& $constructor->getDeclaringClass()->getName() === $classReflection->getParentClass()->getName()
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:111:					&& !$constructor->isAbstract()
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:114:					&& $constructorWithClassName->getDeclaringClass()->getName() === $classReflection->getParentClass()->getName()
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:115:					&& !$constructorWithClassName->isAbstract()
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:118:				return $classReflection->getParentClass();
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:121:			$classReflection = $classReflection->getParentClass();
vendor/phpstan/phpstan/src/Rules/Classes/RequireParentConstructCallRule.php:131:			return $statement->expr;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInTraitUseRule.php:19:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInTraitUseRule.php:34:		return $this->classCaseSensitivityCheck->checkClassNames(
vendor/phpstan/phpstan/src/Rules/Classes/ExistingClassInTraitUseRule.php:37:			}, $node->traits)
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:19:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:34:		if ($node->name !== '__construct' || $node->stmts === null) {
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:38:		if (count($node->params) === 0) {
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:42:		$message = sprintf('Constructor of class %s has an unused parameter $%%s.', $scope->getClassReflection()->getDisplayName());
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:43:		if ($scope->getClassReflection()->isAnonymous()) {
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:47:		return $this->check->getUnusedParameters(
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:49:				return $parameter->name;
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:50:			}, $node->params),
vendor/phpstan/phpstan/src/Rules/Classes/UnusedConstructorParametersRule.php:51:			$node->stmts,
vendor/phpstan/phpstan/src/Rules/FoundTypeResult.php:30:		$this->type = $type;
vendor/phpstan/phpstan/src/Rules/FoundTypeResult.php:31:		$this->referencedClasses = $referencedClasses;
vendor/phpstan/phpstan/src/Rules/FoundTypeResult.php:32:		$this->unknownClassErrors = $unknownClassErrors;
vendor/phpstan/phpstan/src/Rules/FoundTypeResult.php:37:		return $this->type;
vendor/phpstan/phpstan/src/Rules/FoundTypeResult.php:45:		return $this->referencedClasses;
vendor/phpstan/phpstan/src/Rules/FoundTypeResult.php:53:		return $this->unknownClassErrors;
vendor/phpstan/phpstan/src/Rules/Registry.php:24:			$this->rules[$rule->getNodeType()][] = $rule;
vendor/phpstan/phpstan/src/Rules/Registry.php:34:		if (!isset($this->cache[$nodeType])) {
vendor/phpstan/phpstan/src/Rules/Registry.php:39:				foreach ($this->rules[$nodeType] ?? [] as $rule) {
vendor/phpstan/phpstan/src/Rules/Registry.php:44:			$this->cache[$nodeType] = array_values($rules);
vendor/phpstan/phpstan/src/Rules/Registry.php:47:		return $this->cache[$nodeType];
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:28:		$leftType = $scope->getType($node->left);
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:29:		$rightType = $scope->getType($node->right);
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:33:				$node->left instanceof Node\Expr\PropertyFetch
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:34:				|| $node->left instanceof Node\Expr\StaticPropertyFetch
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:43:				$node->right instanceof Node\Expr\PropertyFetch
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:44:				|| $node->right instanceof Node\Expr\StaticPropertyFetch
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:51:		if ($leftType->isSuperTypeOf($rightType)->no()) {
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:56:					$leftType->describe(),
vendor/phpstan/phpstan/src/Rules/Comparison/StrictComparisonOfDifferentTypesRule.php:57:					$rightType->describe(),
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:23:		$this->typeSpecifier = $typeSpecifier;
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:24:		$this->checkAlwaysTrueCheckTypeFunctionCall = $checkAlwaysTrueCheckTypeFunctionCall;
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:39:		if (!$node->name instanceof Node\Name) {
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:43:		$sureTypes = $this->typeSpecifier->specifyTypesInCondition($scope, $node)->getSureTypes();
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:49:		$argumentType = $scope->getType($sureType[0]);
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:54:		$isSuperType = $resultType->isSuperTypeOf($argumentType);
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:55:		$functionName = (string) $node->name;
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:60:		if ($isSuperType->no()) {
vendor/phpstan/phpstan/src/Rules/Comparison/ImpossibleCheckTypeFunctionCallRule.php:65:		} elseif ($isSuperType->yes() && $this->checkAlwaysTrueCheckTypeFunctionCall) {
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:48:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:49:		$this->checkNullables = $checkNullables;
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:50:		$this->checkThisOnly = $checkThisOnly;
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:51:		$this->checkUnionTypes = $checkUnionTypes;
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:60:		if (!is_string($expression->name)) {
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:64:		return $expression->name === 'this';
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:70:			!$this->checkNullables
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:77:		return $acceptingType->accepts($acceptedType);
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:86:		if ($this->checkThisOnly && !$this->isThis($var)) {
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:89:		$type = $scope->getType($var);
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:97:			$type = $type->resolveStatic($type->getBaseClass());
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:104:		$referencedClasses = $type->getReferencedClasses();
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:106:			if (!$this->broker->hasClass($referencedClass)) {
vendor/phpstan/phpstan/src/Rules/RuleLevelHelper.php:115:		if (!$this->checkUnionTypes && $type instanceof UnionType) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:28:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:29:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:44:		if ($node->type === Node\Stmt\Use_::TYPE_UNKNOWN) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:48:		foreach ($node->uses as $use) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:49:			if ($use->type !== Node\Stmt\Use_::TYPE_UNKNOWN) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:54:		if ($node->type === Node\Stmt\Use_::TYPE_CONSTANT) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:55:			return $this->checkConstants($node->uses);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:58:		if ($node->type === Node\Stmt\Use_::TYPE_FUNCTION) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:59:			return $this->checkFunctions($node->uses);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:62:		return $this->checkClasses($node->uses);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:73:			if (!$this->broker->hasConstant($use->name)) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:74:				$messages[] = sprintf('Used constant %s not found.', (string) $use->name);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:89:			if (!$this->broker->hasFunction($use->name)) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:90:				$messages[] = sprintf('Used function %s not found.', (string) $use->name);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:92:				$functionReflection = $this->broker->getFunction($use->name);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:93:				$realName = $functionReflection->getName();
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:94:				$usedName = (string) $use->name;
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:114:		return $this->classCaseSensitivityCheck->checkClassNames(
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInUseRule.php:116:				return (string) $use->name;
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:29:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:30:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:46:		foreach ($node->uses as $use) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:50:			$name = Node\Name::concat($node->prefix, $use->name);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:52:				$node->type === Use_::TYPE_CONSTANT
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:53:				|| $use->type === Use_::TYPE_CONSTANT
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:55:				$message = $this->checkConstant($name);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:57:				$node->type === Use_::TYPE_FUNCTION
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:58:				|| $use->type === Use_::TYPE_FUNCTION
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:60:				$message = $this->checkFunction($name);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:61:			} elseif ($use->type === Use_::TYPE_NORMAL) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:62:				$message = $this->checkClass($name);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:81:		if (!$this->broker->hasConstant($name)) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:94:		if (!$this->broker->hasFunction($name)) {
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:98:		$functionReflection = $this->broker->getFunction($name);
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:99:		$realName = $functionReflection->getName();
vendor/phpstan/phpstan/src/Rules/Namespaces/ExistingNamesInGroupUseRule.php:118:		$messages = $this->classCaseSensitivityCheck->checkClassNames([(string) $name]);
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:33:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:34:		$this->checkArgumentTypes = $checkArgumentTypes;
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:35:		$this->checkArgumentsPassedByReference = $checkArgumentsPassedByReference;
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:49:			&& in_array($function->getName(), [
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:58:			&& $function->getDeclaringClass()->getName() === 'DatePeriod'
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:59:			&& $function->getName() === '__construct'
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:65:			&& $function->getDeclaringClass()->getName() === 'mysqli'
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:66:			&& $function->getName() === 'query'
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:73:			foreach ($function->getParameters() as $parameter) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:74:				if (!$parameter->isOptional()) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:81:			if ($function->isVariadic()) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:82:				$functionParametersMaxCount = -1;
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:87:		$invokedParametersCount = count($funcCall->args);
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:88:		foreach ($funcCall->args as $arg) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:89:			if ($arg->unpack) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:102:			} elseif ($functionParametersMaxCount === -1 && $invokedParametersCount < $functionParametersMinCount) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:108:			} elseif ($functionParametersMaxCount !== -1) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:119:			$function->getReturnType() instanceof VoidType
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:120:			&& !$scope->isInFirstLevelStatement()
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:126:		if (!$this->checkArgumentTypes && !$this->checkArgumentsPassedByReference) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:130:		$parameters = $function->getParameters();
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:131:		foreach ($funcCall->args as $i => $argument) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:133:				if (!$function->isVariadic() || count($parameters) === 0) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:137:				$parameter = $parameters[count($parameters) - 1];
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:138:				$parameterType = $parameter->getType();
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:140:					if (!$argument->unpack) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:141:						$parameterType = $parameterType->getItemType();
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:148:				$parameterType = $parameter->getType();
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:149:				if ($parameter->isVariadic()) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:150:					if ($parameterType instanceof ArrayType && !$argument->unpack) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:151:						$parameterType = $parameterType->getItemType();
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:153:				} elseif ($argument->unpack) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:158:			$argumentValueType = $scope->getType($argument->value);
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:160:			if ($parameterType->isIterable()->yes() && $parameter->isVariadic()) {
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:161:				$secondAccepts = $this->ruleLevelHelper->accepts(
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:164:						$parameterType->getIterableValueType()
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:171:				$this->checkArgumentTypes
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:172:				&& !$this->ruleLevelHelper->accepts($parameterType, $argumentValueType)
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:176:					|| !$argumentValueType->hasMethod('__toString')
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:182:					sprintf('%s$%s', $parameter->isVariadic() ? '...' : '', $parameter->getName()),
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:183:					$parameterType->describe(),
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:184:					$argumentValueType->describe()
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:189:				$this->checkArgumentsPassedByReference
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:190:				&& $parameter->isPassedByReference()
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:191:				&& !$argument->value instanceof \PhpParser\Node\Expr\Variable
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:192:				&& !$argument->value instanceof \PhpParser\Node\Expr\ArrayDimFetch
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:193:				&& !$argument->value instanceof \PhpParser\Node\Expr\PropertyFetch
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:194:				&& !$argument->value instanceof \PhpParser\Node\Expr\StaticPropertyFetch
vendor/phpstan/phpstan/src/Rules/FunctionCallParametersCheck.php:199:					sprintf('%s$%s', $parameter->isVariadic() ? '...' : '', $parameter->getName())
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:23:		$this->phpDocLexer = $phpDocLexer;
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:24:		$this->phpDocParser = $phpDocParser;
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:50:		$docComment = $node->getDocComment();
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:55:		$phpDocString = $docComment->getText();
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:56:		$tokens = new TokenIterator($this->phpDocLexer->tokenize($phpDocString));
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:57:		$phpDocNode = $this->phpDocParser->parse($tokens);
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:60:		foreach ($phpDocNode->getTags() as $phpDocTag) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:61:			if ($phpDocTag->value instanceof InvalidTagValueNode) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:64:					$phpDocTag->name,
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:65:					$phpDocTag->value->value,
vendor/phpstan/phpstan/src/Rules/PhpDoc/InvalidPhpDocTagValueRule.php:66:					$phpDocTag->value->exception->getMessage()
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:20:		$this->fileTypeMapper = $fileTypeMapper;
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:35:		$docComment = $node->getDocComment();
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:40:		$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc(
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:41:			$scope->getFile(),
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:42:			$scope->isInClass() ? $scope->getClassReflection()->getName() : null,
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:43:			$docComment->getText()
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:45:		$nativeParameterTypes = $this->getNativeParameterTypes($node, $scope);
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:46:		$nativeReturnType = $this->getNativeReturnType($node, $scope);
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:50:		foreach ($resolvedPhpDoc->getParamTags() as $parameterName => $phpDocParamTag) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:51:			$phpDocParamType = $phpDocParamTag->getType();
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:66:				$isParamSuperType = $nativeParamType->isSuperTypeOf($phpDocParamType);
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:69:					$phpDocParamTag->isVariadic()
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:71:					&& $nativeParamType->getItemType() instanceof ArrayType
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:76:				if ($isParamSuperType->no()) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:80:						$phpDocParamType->describe(),
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:81:						$nativeParamType->describe()
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:84:				} elseif ($isParamSuperType->maybe()) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:88:						$phpDocParamType->describe(),
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:89:						$nativeParamType->describe()
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:95:		if ($resolvedPhpDoc->getReturnTag() !== null) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:96:			$phpDocReturnType = $resolvedPhpDoc->getReturnTag()->getType();
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:102:				$isReturnSuperType = $nativeReturnType->isSuperTypeOf($phpDocReturnType);
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:103:				if ($isReturnSuperType->no()) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:106:						$phpDocReturnType->describe(),
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:107:						$nativeReturnType->describe()
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:110:				} elseif ($isReturnSuperType->maybe()) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:113:						$phpDocReturnType->describe(),
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:114:						$nativeReturnType->describe()
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:131:		foreach ($node->getParams() as $parameter) {
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:132:			$isNullable = $scope->isParameterValueNullable($parameter);
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:133:			$nativeParameterTypes[$parameter->name] = $scope->getFunctionType(
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:134:				$parameter->type,
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:136:				$parameter->variadic
vendor/phpstan/phpstan/src/Rules/PhpDoc/IncompatiblePhpDocTypeRule.php:145:		return $scope->getFunctionType($node->getReturnType(), false, false);
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:27:		$this->printer = $printer;
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:28:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:67:					$returnType->describe()
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:72:		$returnValueType = $scope->getType($returnValue);
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:82:				&& is_string($returnValue->name)
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:83:				&& $returnValue->name === 'this'
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:92:					$this->printer->prettyPrintExpr($returnValue)
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:101:					$returnValueType->describe()
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:106:		if (!$this->ruleLevelHelper->accepts($returnType, $returnValueType) && (!$isAnonymousFunction || $returnValueType->isDocumentableNatively())) {
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:110:					$returnType->describe(),
vendor/phpstan/phpstan/src/Rules/FunctionReturnTypeCheck.php:111:					$returnValueType->describe()
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsOnPossiblyNullRule.php:29:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsOnPossiblyNullRule.php:30:		$this->checkThisOnly = $checkThisOnly;
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsOnPossiblyNullRule.php:45:		if (!is_string($node->name)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsOnPossiblyNullRule.php:49:		if ($this->checkThisOnly && !$this->ruleLevelHelper->isThis($node->var)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsOnPossiblyNullRule.php:53:		$type = $scope->getType($node->var);
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsOnPossiblyNullRule.php:62:					$node->name,
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsOnPossiblyNullRule.php:63:					$type->describe()
vendor/phpstan/phpstan/src/Rules/Methods/ExistingClassesInTypehintsRule.php:18:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Methods/ExistingClassesInTypehintsRule.php:33:		return $this->check->checkFunction(
vendor/phpstan/phpstan/src/Rules/Methods/ExistingClassesInTypehintsRule.php:38:				$scope->getClassReflection()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Methods/ExistingClassesInTypehintsRule.php:39:				$node->name
vendor/phpstan/phpstan/src/Rules/Methods/ExistingClassesInTypehintsRule.php:43:				$scope->getClassReflection()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Methods/ExistingClassesInTypehintsRule.php:44:				$node->name
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:19:		$this->returnTypeCheck = $returnTypeCheck;
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:34:		if ($scope->getFunction() === null) {
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:38:		if ($scope->isInAnonymousFunction()) {
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:42:		$method = $scope->getFunction();
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:48:		if ($method->getDeclaringClass()->getNativeReflection()->hasMethod($method->getName())) {
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:49:			$reflection = $method->getDeclaringClass()->getNativeReflection()->getMethod($method->getName());
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:52:		return $this->returnTypeCheck->checkReturnType(
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:54:			$method->getReturnType(),
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:55:			$node->expr,
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:58:				$method->getDeclaringClass()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:59:				$method->getName()
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:63:				$method->getDeclaringClass()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:64:				$method->getName()
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:68:				$method->getDeclaringClass()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:69:				$method->getName()
vendor/phpstan/phpstan/src/Rules/Methods/ReturnTypeRule.php:71:			$reflection !== null && $reflection->isGenerator(),
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:50:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:51:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:52:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:53:		$this->classCaseSensitivityCheck = $classCaseSensitivityCheck;
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:68:		$methodName = $node->name;
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:73:		$class = $node->class;
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:78:				if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:87:				$className = $scope->getClassReflection()->getName();
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:89:				if (!$scope->isInClass()) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:98:				$currentClassReflection = $scope->getClassReflection();
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:99:				if ($currentClassReflection->getParentClass() === false) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:103:							$scope->getClassReflection()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:104:							$scope->getFunctionName(),
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:106:							$scope->getClassReflection()->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:111:				if ($scope->getFunctionName() === null) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:115:				$className = $currentClassReflection->getParentClass()->getName();
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:117:				if (!$this->broker->hasClass($className)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:122:					$errors = $this->classCaseSensitivityCheck->checkClassNames([$className]);
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:125:				$className = $this->broker->getClass($className)->getName();
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:130:			$classTypeResult = $this->ruleLevelHelper->findTypeToCheck(
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:135:			$classType = $classTypeResult->getType();
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:137:				return $classTypeResult->getUnknownClassErrors();
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:148:		if (!$classType->canCallMethods()) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:150:				sprintf('Cannot call static method %s() on %s.', $methodName, $typeForDescribe->describe()),
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:154:		if (!$classType->hasMethod($methodName)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:158:					$typeForDescribe->describe(),
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:164:		$method = $classType->getMethod($methodName, $scope);
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:165:		if (!$method->isStatic()) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:166:			$function = $scope->getFunction();
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:169:				|| $function->isStatic()
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:170:				|| !$scope->isInClass()
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:173:					&& $scope->getClassReflection()->getName() !== $classType->getClassName()
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:174:					&& !$scope->getClassReflection()->isSubclassOf($classType->getClassName())
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:180:						$method->getDeclaringClass()->getDisplayName(),
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:181:						$method->getName()
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:187:		if (!$scope->canCallMethod($method)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:191:					$method->isPrivate() ? 'private' : 'protected',
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:192:					$method->isStatic() ? 'static method' : 'method',
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:193:					$method->getName(),
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:194:					$method->getDeclaringClass()->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:201:			$method->isStatic() ? 'static method' : 'method',
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:202:			$method->getDeclaringClass()->getDisplayName() . '::' . $method->getName() . '()'
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:206:			$method->isStatic() ? 'Static method' : 'Method',
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:207:			$method->getDeclaringClass()->getDisplayName() . '::' . $method->getName() . '()'
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:210:		$errors = array_merge($errors, $this->check->check(
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:219:				$displayMethodName . ' invoked with %d parameter, %d-%d required.',
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:220:				$displayMethodName . ' invoked with %d parameters, %d-%d required.',
vendor/phpstan/phpstan/src/Rules/Methods/CallStaticMethodsRule.php:227:		if ($method->getName() !== $methodName) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:37:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:38:		$this->check = $check;
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:39:		$this->ruleLevelHelper = $ruleLevelHelper;
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:54:		if (!is_string($node->name)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:58:		$name = $node->name;
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:59:		$typeResult = $this->ruleLevelHelper->findTypeToCheck(
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:61:			$node->var,
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:64:		$type = $typeResult->getType();
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:66:			return $typeResult->getUnknownClassErrors();
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:68:		if (!$type->canCallMethods()) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:70:				sprintf('Cannot call method %s() on %s.', $name, $type->describe()),
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:74:		if (!$type->hasMethod($name)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:75:			if (count($typeResult->getReferencedClasses()) === 1) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:76:				$referencedClass = $typeResult->getReferencedClasses()[0];
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:77:				$methodClassReflection = $this->broker->getClass($referencedClass);
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:78:				$parentClassReflection = $methodClassReflection->getParentClass();
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:80:					if ($parentClassReflection->hasMethod($name)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:84:								$parentClassReflection->getMethod($name, $scope)->getName(),
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:85:								$parentClassReflection->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:90:					$parentClassReflection = $parentClassReflection->getParentClass();
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:97:					$type->describe(),
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:103:		$methodReflection = $type->getMethod($name, $scope);
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:104:		$messagesMethodName = $methodReflection->getDeclaringClass()->getDisplayName() . '::' . $methodReflection->getName() . '()';
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:106:		if (!$scope->canCallMethod($methodReflection)) {
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:109:				$methodReflection->isPrivate() ? 'private' : 'protected',
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:110:				$methodReflection->getName(),
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:111:				$methodReflection->getDeclaringClass()->getDisplayName()
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:115:		$errors = array_merge($errors, $this->check->check(
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:124:				'Method ' . $messagesMethodName . ' invoked with %d parameter, %d-%d required.',
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:125:				'Method ' . $messagesMethodName . ' invoked with %d parameters, %d-%d required.',
vendor/phpstan/phpstan/src/Rules/Methods/CallMethodsRule.php:132:		if (strtolower($methodReflection->getName()) === strtolower($name) && $methodReflection->getName() !== $name) {
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:23:		foreach ($this->getUsedVariables($statements) as $variableName) {
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:44:			if ($node instanceof Node\Expr\Variable && is_string($node->name) && $node->name !== 'this') {
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:45:				return [$node->name];
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:48:				return [$node->var];
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:52:				&& $node->name instanceof Node\Name
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:53:				&& (string) $node->name === 'compact'
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:55:				foreach ($node->args as $arg) {
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:56:					if ($arg->value instanceof Node\Scalar\String_) {
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:57:						$variableNames[] = $arg->value->value;
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:61:			foreach ($node->getSubNodeNames() as $subNodeName) {
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:65:				$subNode = $node->{$subNodeName};
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:66:				$variableNames = array_merge($variableNames, $this->getUsedVariables($subNode));
vendor/phpstan/phpstan/src/Rules/UnusedFunctionParametersCheck.php:70:				$variableNames = array_merge($variableNames, $this->getUsedVariables($subNode));
vendor/phpstan/phpstan/src/Rules/Cast/UselessCastRule.php:31:		$expressionType = $scope->getType($node->expr);
vendor/phpstan/phpstan/src/Rules/Cast/UselessCastRule.php:36:		$castType = $scope->getType($node);
vendor/phpstan/phpstan/src/Rules/Cast/UselessCastRule.php:37:		if ($castType instanceof FloatType && $node->expr instanceof Node\Expr\BinaryOp\Div) {
vendor/phpstan/phpstan/src/Rules/Cast/UselessCastRule.php:45:					$castType->describe(),
vendor/phpstan/phpstan/src/Rules/Cast/UselessCastRule.php:46:					$expressionType->describe()
vendor/phpstan/phpstan/src/Rules/RegistryFactory.php:15:		$this->container = $container;
vendor/phpstan/phpstan/src/Rules/RegistryFactory.php:22:				return $this->container->getService($serviceName);
vendor/phpstan/phpstan/src/Rules/RegistryFactory.php:27:			$tagToService($this->container->findByTag(self::RULE_TAG))
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:29:		$this->currentWorkingDirectory = $currentWorkingDirectory;
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:31:		$this->rootDirectory = $fileHelper->normalizePath(__DIR__ . '/../..');
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:32:		$this->configDirectory = $this->rootDirectory . '/conf';
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:41:		$configurator->defaultExtensions = [
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:45:		$configurator->setDebugMode(true);
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:46:		$configurator->setTempDirectory($tempDirectory);
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:47:		$configurator->addParameters([
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:48:			'rootDir' => $this->rootDirectory,
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:49:			'currentWorkingDirectory' => $this->currentWorkingDirectory,
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:53:		$configurator->addConfig($this->configDirectory . '/config.neon');
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:55:			$configurator->addConfig($additionalConfigFile);
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:58:		return $configurator->createContainer();
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:63:		return $this->currentWorkingDirectory;
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:68:		return $this->rootDirectory;
vendor/phpstan/phpstan/src/DependencyInjection/ContainerFactory.php:73:		return $this->configDirectory;
vendor/phpstan/phpstan/src/Analyser/LookForAssignsSettings.php:27:		$this->respectEarlyTermination = $respectEarlyTermination;
vendor/phpstan/phpstan/src/Analyser/LookForAssignsSettings.php:60:		return $this->isRespected($earlyTerminationStatement);
vendor/phpstan/phpstan/src/Analyser/LookForAssignsSettings.php:68:			return ($this->respectEarlyTermination & self::EARLY_TERMINATION_BREAK) === self::EARLY_TERMINATION_BREAK;
vendor/phpstan/phpstan/src/Analyser/LookForAssignsSettings.php:74:			return ($this->respectEarlyTermination & self::EARLY_TERMINATION_CONTINUE) === self::EARLY_TERMINATION_CONTINUE;
vendor/phpstan/phpstan/src/Analyser/LookForAssignsSettings.php:77:		return ($this->respectEarlyTermination & self::EARLY_TERMINATION_STOP) === self::EARLY_TERMINATION_STOP;
vendor/phpstan/phpstan/src/Analyser/LookForAssignsSettings.php:86:		if ($this->shouldSkipBranch($earlyTerminationStatement)) {
vendor/phpstan/phpstan/src/Analyser/LookForAssignsSettings.php:92:			|| ($this->respectEarlyTermination & self::EARLY_TERMINATION_STOP) === 0;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:90:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:91:		$this->parser = $parser;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:92:		$this->registry = $registry;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:93:		$this->nodeScopeResolver = $nodeScopeResolver;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:94:		$this->printer = $printer;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:95:		$this->typeSpecifier = $typeSpecifier;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:96:		$this->ignoreErrors = $ignoreErrors;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:97:		$this->bootstrapFile = $bootstrapFile !== null ? $fileHelper->normalizePath($bootstrapFile) : null;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:98:		$this->reportUnmatchedIgnoredErrors = $reportUnmatchedIgnoredErrors;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:99:		$this->internalErrorsCountLimit = $internalErrorsCountLimit;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:120:		if ($this->bootstrapFile !== null) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:121:			if (!is_file($this->bootstrapFile)) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:123:					sprintf('Bootstrap file %s does not exist.', $this->bootstrapFile),
vendor/phpstan/phpstan/src/Analyser/Analyser.php:127:				require_once $this->bootstrapFile;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:129:				return [$e->getMessage()];
vendor/phpstan/phpstan/src/Analyser/Analyser.php:133:		foreach ($this->ignoreErrors as $ignoreError) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:137:				$errors[] = $e->getMessage();
vendor/phpstan/phpstan/src/Analyser/Analyser.php:145:		$this->nodeScopeResolver->setAnalysedFiles($files);
vendor/phpstan/phpstan/src/Analyser/Analyser.php:154:				$this->nodeScopeResolver->processNodes(
vendor/phpstan/phpstan/src/Analyser/Analyser.php:155:					$this->parser->parseFile($file),
vendor/phpstan/phpstan/src/Analyser/Analyser.php:156:					new Scope($this->broker, $this->printer, $this->typeSpecifier, $file),
vendor/phpstan/phpstan/src/Analyser/Analyser.php:158:						foreach ($this->registry->getRules(get_class($node)) as $rule) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:159:							$ruleErrors = $this->createErrors(
vendor/phpstan/phpstan/src/Analyser/Analyser.php:161:								$scope->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Analyser.php:162:								$rule->processNode($node, $scope)
vendor/phpstan/phpstan/src/Analyser/Analyser.php:174:				$errors[] = new Error($e->getMessage(), $file, $e->getStartLine() !== -1 ? $e->getStartLine() : null, false);
vendor/phpstan/phpstan/src/Analyser/Analyser.php:176:				$errors[] = new Error($e->getMessage(), $file, null, false);
vendor/phpstan/phpstan/src/Analyser/Analyser.php:182:				$internalErrorMessage = sprintf('Internal error: %s', $t->getMessage());
vendor/phpstan/phpstan/src/Analyser/Analyser.php:184:					'%sRun PHPStan with --debug option and post the stack trace to:%s%s',
vendor/phpstan/phpstan/src/Analyser/Analyser.php:190:				if ($internalErrorsCount >= $this->internalErrorsCountLimit) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:197:		$unmatchedIgnoredErrors = $this->ignoreErrors;
vendor/phpstan/phpstan/src/Analyser/Analyser.php:200:			foreach ($this->ignoreErrors as $i => $ignore) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:201:				if (\Nette\Utils\Strings::match($error->getMessage(), $ignore) !== null) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:203:					if (!$error->canBeIgnored()) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:206:							$error->getMessage()
vendor/phpstan/phpstan/src/Analyser/Analyser.php:219:		if (!$onlyFiles && $this->reportUnmatchedIgnoredErrors && !$reachedInternalErrorsCountLimit) {
vendor/phpstan/phpstan/src/Analyser/Analyser.php:229:			$errors[] = sprintf('Reached internal errors count limit of %d, exiting...', $this->internalErrorsCountLimit);
vendor/phpstan/phpstan/src/Analyser/Analyser.php:245:			$errors[] = new Error($message, $file, $node->getLine());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:113:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:114:		$this->parser = $parser;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:115:		$this->printer = $printer;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:116:		$this->fileTypeMapper = $fileTypeMapper;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:117:		$this->fileHelper = $fileHelper;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:118:		$this->polluteScopeWithLoopInitialAssignments = $polluteScopeWithLoopInitialAssignments;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:119:		$this->polluteCatchScopeWithTryAssignments = $polluteCatchScopeWithTryAssignments;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:120:		$this->earlyTerminatingMethodCalls = $earlyTerminatingMethodCalls;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:128:		$this->analysedFiles = array_fill_keys($files, true);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:150:			if ($scope->getInFunctionCall() !== null && $node instanceof Arg) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:151:				$functionCall = $scope->getInFunctionCall();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:152:				$value = $node->value;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:154:				$parametersAcceptor = $this->findParametersAcceptorInFunctionCall($functionCall, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:157:					$parameters = $parametersAcceptor->getParameters();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:160:						$assignByReference = $parameters[$i]->isPassedByReference();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:161:					} elseif (count($parameters) > 0 && $parametersAcceptor->isVariadic()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:162:						$lastParameter = $parameters[count($parameters) - 1];
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:163:						$assignByReference = $lastParameter->isPassedByReference();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:165:					if ($assignByReference && $value instanceof Variable && is_string($value->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:166:						$scope = $scope->assignVariable($value->name, new MixedType(), TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:176:			$this->processNode($node, $nodeScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:177:			$scope = $this->lookForAssigns($scope, $node, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:180:				if ($this->findEarlyTermination($node->stmts, $scope) !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:181:					$scope = $scope->filterByFalseyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:182:					$this->processNode($node->cond, $scope, function (Node $node, Scope $inScope) use (&$scope) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:183:						$this->specifyFetchedPropertyForInnerScope($node, $inScope, true, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:187:				foreach ($node->declares as $declare) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:189:						$declare->key === 'strict_types'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:190:						&& $declare->value instanceof Node\Scalar\LNumber
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:191:						&& $declare->value->value === 1
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:193:						$scope = $scope->enterDeclareStrictTypes();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:199:				&& $node->name instanceof Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:200:				&& (string) $node->name === 'assert'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:201:				&& isset($node->args[0])
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:203:				$scope = $scope->filterByTruthyValue($node->args[0]->value);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:211:			return $scope->specifyFetchedPropertyFromIsset($expr);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:214:			&& $expr->class instanceof Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:215:			&& (string) $expr->class === 'static'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:217:			return $scope->specifyFetchedStaticPropertyFromIsset($expr);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:225:		if ($inEarlyTermination === $inScope->isNegated()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:227:				foreach ($node->vars as $var) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:228:					$scope = $this->specifyProperty($scope, $var);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:232:				&& $node->name instanceof Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:233:				&& $this->broker->resolveFunctionName($node->name, $scope) === 'property_exists'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:234:				&& count($node->args) === 2
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:235:				&& $node->args[1]->value instanceof  Node\Scalar\String_
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:237:				$scope = $scope->specifyFetchedPropertyFromIsset(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:238:					new PropertyFetch($node->args[0]->value, $node->args[1]->value->value)
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:243:				$scope = $this->specifyProperty($scope, $node->expr);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:244:				$scope = $this->assignVariable($scope, $node->expr, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:252:			foreach ($node->items as $item) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:256:				$scope = $this->lookForArrayDestructuringArray($scope, $item->value);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:258:		} elseif ($node instanceof Variable && is_string($node->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:259:			$scope = $scope->assignVariable($node->name, new MixedType(), TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:260:		} elseif ($node instanceof ArrayDimFetch && $node->var instanceof Variable && is_string($node->var->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:261:			$scope = $scope->assignVariable(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:262:				$node->var->name,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:267:			foreach ($node->items as $item) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:273:				$itemValue = $itemValue->value;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:274:				if ($itemValue instanceof Variable && is_string($itemValue->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:275:					$scope = $scope->assignVariable($itemValue->name, new MixedType(), TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:277:					$scope = $this->lookForArrayDestructuringArray($scope, $itemValue);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:287:		if ($node->keyVar !== null && $node->keyVar instanceof Variable && is_string($node->keyVar->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:288:			$scope = $scope->assignVariable($node->keyVar->name, new MixedType(), TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:291:		if ($node->valueVar instanceof Variable && is_string($node->valueVar->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:292:			$scope = $scope->enterForeach(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:293:				$node->expr,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:294:				$node->valueVar->name,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:295:				$node->keyVar !== null
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:296:				&& $node->keyVar instanceof Variable
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:297:				&& is_string($node->keyVar->name)
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:298:					? $node->keyVar->name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:303:				$scope = $this->processVarAnnotation($scope, $node->valueVar->name, $comment, true);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:307:		if ($node->valueVar instanceof List_ || $node->valueVar instanceof Array_) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:308:			$scope = $this->lookForArrayDestructuringArray($scope, $node->valueVar);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:311:		return $this->lookForAssigns($scope, $node->valueVar, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:327:			if (isset($node->namespacedName)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:328:				$scope = $scope->enterClass($this->broker->getClass((string) $node->namespacedName));
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:329:			} elseif ($this->anonymousClassReflection !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:330:				$scope = $scope->enterAnonymousClass($this->anonymousClassReflection);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:335:			$this->processTraitUse($node, $scope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:337:			$scope = $this->enterFunction($scope, $node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:339:			$scope = $this->enterClassMethod($scope, $node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:341:			$scope = $scope->enterNamespace((string) $node->name);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:344:			&& $node->class instanceof \PhpParser\Node\Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:345:			&& is_string($node->name)
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:346:			&& (string) $node->class === 'Closure'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:347:			&& $node->name === 'bind'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:350:			if (isset($node->args[1])) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:351:				$argValue = $node->args[1]->value;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:352:				if ($argValue instanceof Expr\ConstFetch && ((string) $argValue->name === 'null')) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:355:					$thisType = $scope->getType($argValue);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:359:			if (isset($node->args[2])) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:360:				$argValue = $node->args[2]->value;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:361:				$argValueType = $scope->getType($argValue);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:362:				if (count($argValueType->getReferencedClasses()) === 1) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:363:					$scopeClass = $argValueType->getReferencedClasses()[0];
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:366:					&& strtolower($argValue->name) === 'class'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:367:					&& $argValue->class instanceof Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:369:					$scopeClass = $scope->resolveName($argValue->class);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:371:					$scopeClass = $argValue->value;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:374:			$closureBindScope = $scope->enterClosureBind($thisType, $scopeClass);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:376:			$scope = $scope->exitFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:377:			$this->processNode($node->expr, $scope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:378:			$scope = $this->lookForAssigns($scope, $node->expr, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:379:			$scope = $this->enterForeach($scope, $node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:380:			if ($node->keyVar !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:381:				$this->processNode($node->keyVar, $scope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:384:			$this->processNode($node->valueVar, $scope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:386:			$scope = $this->lookForAssignsInBranches($scope, [
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:387:				new StatementList($scope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:390:			$scope = $this->enterForeach($scope, $node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:392:			$this->processNodes($node->stmts, $scope->enterFirstLevelStatements(), $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:396:			$this->processNodes($node->init, $scope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:398:			foreach ($node->init as $initExpr) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:399:				$scope = $this->lookForAssigns($scope, $initExpr, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:401:			$scopeLoopMightHaveRun = $this->lookForAssignsInBranches($scope, [
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:402:				new StatementList($scope, $node->cond),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:403:				new StatementList($scope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:404:				new StatementList($scope, $node->loop),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:408:			$this->processNodes($node->cond, $scopeLoopMightHaveRun, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:410:			foreach ($node->cond as $condExpr) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:411:				$scope = $scope->filterByTruthyValue($condExpr);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:414:			$scopeLoopDefinitelyRan = $this->lookForAssignsInBranches($scope, [
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:415:				new StatementList($scope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:418:			$this->processNodes($node->loop, $scopeLoopDefinitelyRan, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:420:			foreach ($node->cond as $condExpr) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:421:				$scopeLoopMightHaveRun = $scopeLoopMightHaveRun->filterByTruthyValue($condExpr);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:423:			$this->processNodes($node->stmts, $scopeLoopMightHaveRun, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:427:			$bodyScope = $scope->filterByTruthyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:428:			$condScope = $this->lookForAssignsInBranches($scope, [
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:429:				new StatementList($bodyScope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:432:			$this->processNode($node->cond, $condScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:434:			$bodyScope = $this->lookForAssignsInBranches($bodyScope, [
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:435:				new StatementList($bodyScope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:438:			$bodyScope = $this->lookForAssigns($bodyScope, $node->cond, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:439:			$bodyScope = $bodyScope->filterByTruthyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:440:			$this->processNodes($node->stmts, $bodyScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:443:			$scope = $scope->enterCatch(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:444:				$node->types,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:445:				$node->var
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:448:			$scope = $scope->exitFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:449:			foreach ($node->items as $item) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:453:				$this->processNode($item, $scope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:454:				if ($item->key !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:455:					$scope = $this->lookForAssigns($scope, $item->key, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:457:				$scope = $this->lookForAssigns($scope, $item->value, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:462:			$this->processNode($node->cond, $scope->exitFirstLevelStatements(), $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:463:			$scope = $this->lookForAssigns(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:465:				$node->cond,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:469:			$scope = $scope->filterByTruthyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:472:				$this->specifyFetchedPropertyForInnerScope($node, $inScope, false, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:474:			$this->processNode($node->cond, $scope, $specifyFetchedProperty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:475:			$this->processNodes($node->stmts, $scope->enterFirstLevelStatements(), $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:477:			$elseifScope = $ifScope->filterByFalseyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:478:			foreach ($node->elseifs as $elseif) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:479:				$this->processNode($elseif, $scope, $nodeCallback, true);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:481:				$this->processNode($elseif->cond, $scope->exitFirstLevelStatements(), $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:482:				$scope = $this->lookForAssigns(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:484:					$elseif->cond,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:487:				$scope = $scope->filterByTruthyValue($elseif->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:488:				$this->processNode($elseif->cond, $scope, $specifyFetchedProperty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:489:				$this->processNodes($elseif->stmts, $scope->enterFirstLevelStatements(), $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:490:				$elseifScope = $this->lookForAssigns(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:492:					$elseif->cond,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:494:				)->filterByFalseyValue($elseif->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:496:			if ($node->else !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:497:				$this->processNode($node->else, $elseifScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:502:			$scope = $scope->exitFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:503:			$this->processNode($node->cond, $scope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:504:			$scope = $this->lookForAssigns(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:506:				$node->cond,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:510:			$switchConditionIsTrue = $node->cond instanceof Expr\ConstFetch && strtolower((string) $node->cond->name) === 'true';
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:513:				$node->cond instanceof FuncCall
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:514:				&& $node->cond->name instanceof Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:515:				&& strtolower((string) $node->cond->name) === 'get_class'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:516:				&& isset($node->cond->args[0])
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:518:				$switchConditionGetClassExpression = $node->cond->args[0]->value;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:520:			foreach ($node->cases as $caseNode) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:521:				$this->processNode($caseNode, $scope, $nodeCallback, true);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:522:				if ($caseNode->cond !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:523:					$this->processNode($caseNode->cond, $switchScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:524:					$switchScope = $this->lookForAssigns(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:526:						$caseNode->cond,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:529:					$scope = $this->lookForAssigns(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:531:						$caseNode->cond,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:537:						$caseScope = $caseScope->filterByTruthyValue($caseNode->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:540:						&& $caseNode->cond instanceof Expr\ClassConstFetch
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:541:						&& $caseNode->cond->class instanceof Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:542:						&& strtolower($caseNode->cond->name) === 'class'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:544:						$caseScope = $caseScope->specifyExpressionType(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:546:							new ObjectType($scope->resolveName($caseNode->cond->class))
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:552:				$this->processNodes(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:553:					$caseNode->stmts,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:554:					$caseScope->enterFirstLevelStatements(),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:557:				if ($this->findEarlyTermination($caseNode->stmts, $switchScope) === null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:558:					foreach ($caseNode->stmts as $statement) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:559:						$switchScope = $this->lookForAssigns($switchScope, $statement, TrinaryLogic::createMaybe());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:568:			$this->processNodes($node->stmts, $scope->enterFirstLevelStatements(), $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:571:			$tryAssignmentsCertainty = $this->polluteCatchScopeWithTryAssignments ? TrinaryLogic::createYes() : TrinaryLogic::createMaybe();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:572:			foreach ($node->stmts as $statement) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:573:				$scope = $this->lookForAssigns($scope, $statement, $tryAssignmentsCertainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:576:			if ($node->finally !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:577:				$statements[] = new StatementList($scopeForLookForAssignsInBranches, $node->stmts);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:581:			foreach ($node->catches as $catch) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:582:				$this->processNode($catch, $scope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:583:				if ($node->finally !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:584:					$statements[] = new StatementList($scope->enterCatch(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:585:						$catch->types,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:586:						$catch->var
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:587:					), $catch->stmts);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:591:			if ($node->finally !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:592:				$finallyScope = $this->lookForAssignsInBranches($scopeForLookForAssignsInBranches, $statements, LookForAssignsSettings::insideFinally());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:594:				$this->processNode($node->finally, $finallyScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:599:			$scope = $scope->enterFunctionCall($node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:601:			$scope = $scope->enterFunctionCall($node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:604:				$scope->getType($node->var)->describe() === \Closure::class
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:605:				&& $node->name === 'call'
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:606:				&& isset($node->args[0])
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:608:				$closureCallScope = $scope->enterClosureBind($scope->getType($node->args[0]->value), 'static');
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:610:			$scope = $scope->enterFunctionCall($node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:611:		} elseif ($node instanceof New_ && $node->class instanceof Class_) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:616:			$classNode = $node->class;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:617:			$classNode->name = $uniqidClass;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:618:			eval($this->printer->prettyPrint([$classNode]));
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:622:			$this->anonymousClassReflection = $this->broker->getClassFromReflection(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:624:				sprintf('class@anonymous%s:%s', $scope->getFile(), $node->getLine()),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:628:			$scope = $scope->enterNegation();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:630:			foreach ($node->vars as $unsetVar) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:635:					$unsetVar = $unsetVar->var;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:640:					&& $unsetVar->class instanceof Expr
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:642:					$unsetVar = $unsetVar->class;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:644:				$scope = $scope->enterExpressionAssign($unsetVar);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:647:			foreach ($node->vars as $var) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:648:				$scope = $scope->enterExpressionAssign($var);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:653:		foreach ($node->getSubNodeNames() as $subNodeName) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:655:			$subNode = $node->{$subNodeName};
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:663:					$scope = $scope->enterFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:665:					$scope = $scope->exitFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:669:					foreach ($node->vars as $issetVar) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:670:						$scope = $this->specifyProperty($scope, $issetVar);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:675:					$scope = $this->lookForAssigns($scope, $node->var, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:682:					$scope = $scope->enterAnonymousFunction($node->params, $node->uses, $node->returnType);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:686:					$scope = $this->lookForAssignsInBranches($scope, [
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:687:						new StatementList($scope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:688:						new StatementList($scope, [$node->cond], true),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:695:						$scope = $this->ensureNonNullability($scope, $issetVar);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:699:				$this->processNodes($subNode, $scope, $nodeCallback, $argClosureBindScope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:702:					$scope = $this->ensureNonNullability($scope, $subNode);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:708:					$scope = $scope->filterByTruthyValue($node->left);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:713:					$scope = $scope->filterByFalseyValue($node->left);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:717:					$scope = $this->lookForEnterVariableAssign($scope, $node->var);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:721:					$scope = $this->lookForAssigns($scope, $node->left, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:725:					$scope = $this->specifyProperty($scope, $node->expr);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:726:					$scope = $this->lookForEnterVariableAssign($scope, $node->expr);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:732:					&& $node->key !== null
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:734:					$scope = $this->lookForAssigns($scope, $node->key, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:741:					$scope = $this->lookForAssigns($scope, $node->cond, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:743:						$scope = $scope->filterByTruthyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:744:						$this->processNode($node->cond, $scope, function (Node $node, Scope $inScope) use (&$scope) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:745:							$this->specifyFetchedPropertyForInnerScope($node, $inScope, false, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:748:						$scope = $scope->filterByFalseyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:749:						$this->processNode($node->cond, $scope, function (Node $node, Scope $inScope) use (&$scope) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:750:							$this->specifyFetchedPropertyForInnerScope($node, $inScope, true, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:756:					foreach ($node->stmts as $statement) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:757:						$scope = $this->lookForAssigns($scope, $statement, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:761:				$nodeScope = $scope->exitFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:762:				if ($scope->isInFirstLevelStatement()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:764:						$nodeScope = $scope->enterFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:769:						$nodeScope = $scope->enterFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:774:					$nodeScope = $closureCallScope->exitFirstLevelStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:777:				$this->processNode($subNode, $nodeScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:784:		$scope = $this->assignVariable($scope, $node, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:790:			$nodeToSpecify = $nodeToSpecify->var;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:791:			$scope = $scope->specifyExpressionType(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:793:				TypeCombinator::removeNull($scope->getType($nodeToSpecify))
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:803:			$scope = $scope->enterExpressionAssign($node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:806:				$node = $node->var;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:810:				$scope = $scope->enterExpressionAssign($node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:813:			foreach ($node->items as $listItem) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:819:					$listItemValue = $listItemValue->value;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:821:				$scope = $this->lookForEnterVariableAssign($scope, $listItemValue);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:824:			$scope = $scope->enterExpressionAssign($node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:841:			$scope = $scope->assignVariable(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:842:				$node->name,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:843:				$node->default !== null ? $scope->getType($node->default) : new MixedType(),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:847:			foreach ($node->vars as $var) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:848:				$scope = $this->lookForAssigns($scope, $var, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:851:			$scope = $this->lookForAssigns($scope, $node->cond, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:853:				$scope->filterByTruthyValue($node->cond),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:854:				array_merge([$node->cond], $node->stmts)
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:857:			$elseIfScope = $scope->filterByFalseyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:859:			foreach ($node->elseifs as $elseIf) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:860:				$elseIfStatements[] = new StatementList($elseIfScope, array_merge([$elseIf->cond], $elseIf->stmts));
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:861:				$elseIfScope = $elseIfScope->filterByFalseyValue($elseIf->cond);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:866:				new StatementList($elseIfScope, $node->else !== null ? $node->else->stmts : []),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:870:			$scope = $this->lookForAssignsInBranches($scope, $statements, $lookForAssignsSettings);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:873:				new StatementList($scope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:875:			foreach ($node->catches as $catch) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:876:				$statements[] = new StatementList($scope->enterCatch(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:877:					$catch->types,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:878:					$catch->var
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:879:				), array_merge([new Node\Stmt\Nop()], $catch->stmts));
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:882:			$scope = $this->lookForAssignsInBranches($scope, $statements, $lookForAssignsSettings);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:883:			if ($node->finally !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:884:				foreach ($node->finally->stmts as $statement) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:885:					$scope = $this->lookForAssigns($scope, $statement, $certainty, $lookForAssignsSettings);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:890:				$scope = $this->lookForAssigns($scope, $node->var, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:892:			foreach ($node->args as $argument) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:893:				$scope = $this->lookForAssigns($scope, $argument, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:896:			$parametersAcceptor = $this->findParametersAcceptorInFunctionCall($node, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:899:				$parameters = $parametersAcceptor->getParameters();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:900:				foreach ($node->args as $i => $arg) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:903:						$assignByReference = $parameters[$i]->isPassedByReference();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:904:					} elseif (count($parameters) > 0 && $parametersAcceptor->isVariadic()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:905:						$lastParameter = $parameters[count($parameters) - 1];
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:906:						$assignByReference = $lastParameter->isPassedByReference();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:913:					$arg = $node->args[$i]->value;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:914:					if ($arg instanceof Variable && is_string($arg->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:915:						$scope = $scope->assignVariable($arg->name, new MixedType(), $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:921:				&& $node->name instanceof Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:922:				&& in_array((string) $node->name, [
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:927:				$scope = $scope->assignVariable('http_response_header', new ArrayType(new IntegerType(), new StringType(), false), $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:930:			$scope = $this->lookForAssigns($scope, $node->left, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:931:			$scope = $this->lookForAssigns($scope, $node->right, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:933:			$scope = $this->lookForAssigns($scope, $node->value, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:935:			$scope = $this->lookForAssigns($scope, $node->expr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:937:			$scope = $this->lookForAssigns($scope, $node->cond, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:939:			if ($node->if !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:941:					$scope->filterByTruthyValue($node->cond),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:942:					[$node->if]
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:946:					$scope->filterByTruthyValue($node->cond),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:947:					[$node->cond]
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:952:				$scope->filterByFalseyValue($node->cond),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:953:				[$node->else]
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:955:			$scope = $this->lookForAssignsInBranches($scope, $statements, $lookForAssignsSettings);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:957:			foreach ($node->items as $item) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:961:				if ($item->key !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:962:					$scope = $this->lookForAssigns($scope, $item->key, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:964:				$scope = $this->lookForAssigns($scope, $item->value, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:967:			foreach ($node->args as $arg) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:968:				$scope = $this->lookForAssigns($scope, $arg, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:971:			$scope = $this->lookForAssignsInBranches($scope, [
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:972:				new StatementList($scope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:974:			$scope = $this->lookForAssigns($scope, $node->cond, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:979:			foreach ($node->cases as $case) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:980:				if ($case->cond === null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:984:				foreach ($case->stmts as $statement) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:986:					if ($this->findStatementEarlyTermination($statement, $scope) !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1002:			$scope = $this->lookForAssignsInBranches($scope, $statementLists, LookForAssignsSettings::afterLoop());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1004:			$scope = $this->lookForAssigns($scope, $node->expr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1006:			$forAssignmentsCertainty = $this->polluteScopeWithLoopInitialAssignments ? TrinaryLogic::createYes() : TrinaryLogic::createMaybe();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1007:			foreach ($node->init as $initExpr) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1008:				$scope = $this->lookForAssigns($scope, $initExpr, $forAssignmentsCertainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1011:			foreach ($node->cond as $condExpr) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1012:				$scope = $this->lookForAssigns($scope, $condExpr, $forAssignmentsCertainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1016:				new StatementList($scope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1019:			$scope = $this->lookForAssignsInBranches($scope, $statements, LookForAssignsSettings::afterLoop());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1020:			foreach ($node->loop as $loopExpr) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1021:				$scope = $this->lookForAssigns($scope, $loopExpr, TrinaryLogic::createMaybe());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1024:			$whileAssignmentsCertainty = $this->polluteScopeWithLoopInitialAssignments ? TrinaryLogic::createYes() : TrinaryLogic::createMaybe();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1025:			$scope = $this->lookForAssigns($scope, $node->cond, $whileAssignmentsCertainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1028:				new StatementList($scope, $node->stmts),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1031:			$scope = $this->lookForAssignsInBranches($scope, $statements, LookForAssignsSettings::afterLoop());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1033:			$scope = $this->lookForAssigns($scope, $node->expr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1035:			foreach ($node->vars as $var) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1036:				if ($var instanceof Variable && is_string($var->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1037:					$scope = $scope->unsetVariable($var->name);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1041:			foreach ($node->exprs as $echoedExpr) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1042:				$scope = $this->lookForAssigns($scope, $echoedExpr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1045:			$scope = $this->lookForAssigns($scope, $node->expr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1047:			$scope = $this->lookForAssigns($scope, $node->expr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1049:			$scope = $this->enterForeach($scope, $node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1053:					$node->stmts
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1057:			$scope = $this->lookForAssignsInBranches($initialScope, $statements, LookForAssignsSettings::afterLoop());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1059:			foreach ($node->vars as $var) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1060:				$scope = $this->lookForAssigns($scope, $var, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1063:			$scope = $this->lookForAssigns($scope, $node->expr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1064:		} elseif ($node instanceof ArrayDimFetch && $node->dim !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1065:			$scope = $this->lookForAssigns($scope, $node->dim, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1067:			foreach ($node->uses as $closureUse) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1068:				if (!$closureUse->byRef || $scope->hasVariableType($closureUse->var)->yes()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1072:				$scope = $scope->assignVariable($closureUse->var, new MixedType(), $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1075:			$scope = $this->lookForAssigns($scope, $node->expr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1077:			$scope = $this->lookForAssigns($scope, $node->expr, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1080:		$scope = $this->updateScopeForVariableAssign($scope, $node, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1089:				$vars = [$node->var];
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1091:				$vars = $node->vars;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1099:					$type = $scope->getType($node->expr);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1102:						$node->var instanceof Variable
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1103:						&& is_string($node->var->name)
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1104:						&& !$scope->hasVariableType($node->var->name)->yes()
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1108:					$type = $scope->getType($node);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1112:					&& is_string($var->name)
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1113:					&& $scope->hasVariableType($var->name)->no()
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1115:					$this->assignVariable($scope, $var, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1117:				$scope = $this->assignVariable($scope, $var, $certainty, $type);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1121:				if ($node->var instanceof Array_ || $node->var instanceof List_) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1122:					$scope = $this->lookForArrayDestructuringArray($scope, $node->var);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1127:				$scope = $this->lookForAssigns($scope, $node->expr, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1131:				if ($node->var instanceof Variable && is_string($node->var->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1134:						$scope = $this->processVarAnnotation($scope, $node->var->name, $comment, false);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1145:		$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1146:			$scope->getFile(),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1147:			$scope->isInClass() ? $scope->getClassReflection()->getName() : null,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1150:		$varTags = $resolvedPhpDoc->getVarTags();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1153:			$variableType = $varTags[$variableName]->getType();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1154:			return $scope->assignVariable($variableName, $variableType, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1157:			$variableType = $varTags[0]->getType();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1158:			return $scope->assignVariable($variableName, $variableType, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1172:		if ($var instanceof Variable && is_string($var->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1173:			$scope = $scope->assignVariable($var->name, $subNodeType !== null ? $subNodeType : new MixedType(), $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1177:				$var = $var->var;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1181:			if (isset($var->dim)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1182:				$scope = $this->lookForAssigns($scope, $var->dim, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1185:			if ($var instanceof Variable && is_string($var->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1186:				if ($scope->hasVariableType($var->name)->yes()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1187:					$arrayDimFetchVariableType = $scope->getVariableType($var->name);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1200:				if ($scope->hasVariableType($var->name)->yes()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1206:							$scope->getVariableType($var->name),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1212:				$scope = $scope->assignVariable($var->name, $arrayType, $certainty);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1215:			$scope = $scope->specifyExpressionType($var, $subNodeType);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1217:			$scope = $scope->specifyExpressionType($var, $subNodeType);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1219:			$scope = $this->lookForAssigns($scope, $var, TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1240:			$statements = $statementList->getStatements();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1241:			$branchScope = $statementList->getScope();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1242:			$branchScopeWithInitialScopeRemoved = $branchScope->removeVariables($initialScope, true);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1246:				$branchScope = $this->lookForAssigns($branchScope, $statement, TrinaryLogic::createYes(), $lookForAssignsSettings);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1247:				$branchScopeWithInitialScopeRemoved = $branchScope->removeVariables($initialScope, false);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1248:				$earlyTerminationStatement = $this->findStatementEarlyTermination($statement, $branchScope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1250:					if ($lookForAssignsSettings->shouldSkipBranch($earlyTerminationStatement)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1257:			if ($lookForAssignsSettings->shouldIntersectVariables($earlyTerminationStatement)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1259:					$intersectedScope = $initialScope->createIntersectedScope($branchScopeWithInitialScopeRemoved);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1261:					$intersectedScope = $intersectedScope->intersectVariables($branchScopeWithInitialScopeRemoved);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1264:				if ($statementList->shouldFilterByTruthyValue()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1267:						$intersectedScope = $intersectedScope->filterByTruthyValue($statement);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1274:			$scope = $initialScope->mergeWithIntersectedScope($intersectedScope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1290:			$statement = $this->findStatementEarlyTermination($statement, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1314:		} elseif ($statement instanceof MethodCall && count($this->earlyTerminatingMethodCalls) > 0) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1315:			if (!is_string($statement->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1319:			$methodCalledOnType = $scope->getType($statement->var);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1320:			foreach ($methodCalledOnType->getReferencedClasses() as $referencedClass) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1321:				if (!$this->broker->hasClass($referencedClass)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1325:				$classReflection = $this->broker->getClass($referencedClass);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1326:				foreach (array_merge([$referencedClass], $classReflection->getParentClassesNames()) as $className) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1327:					if (!isset($this->earlyTerminatingMethodCalls[$className])) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1331:					if (in_array($statement->name, $this->earlyTerminatingMethodCalls[$className], true)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1339:			if ($statement->else === null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1343:			if ($this->findEarlyTermination($statement->stmts, $scope) === null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1347:			foreach ($statement->elseifs as $elseIfStatement) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1348:				if ($this->findEarlyTermination($elseIfStatement->stmts, $scope) === null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1353:			if ($this->findEarlyTermination($statement->else->stmts, $scope) === null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1370:		if ($functionCall instanceof FuncCall && $functionCall->name instanceof Name) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1371:			if ($this->broker->hasFunction($functionCall->name, $scope)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1372:				return $this->broker->getFunction($functionCall->name, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1374:		} elseif ($functionCall instanceof MethodCall && is_string($functionCall->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1375:			$type = $scope->getType($functionCall->var);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1376:			$methodName = $functionCall->name;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1377:			if ($type->hasMethod($methodName)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1378:				return $type->getMethod($methodName, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1382:			&& $functionCall->class instanceof Name
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1383:			&& is_string($functionCall->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1384:			$className = $scope->resolveName($functionCall->class);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1385:			if ($this->broker->hasClass($className)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1386:				$classReflection = $this->broker->getClass($className);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1387:				if ($classReflection->hasMethod($functionCall->name)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1388:					return $classReflection->getMethod($functionCall->name, $scope);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1398:		foreach ($node->traits as $trait) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1400:			if (!$this->broker->hasClass($traitName)) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1403:			$traitReflection = $this->broker->getClass($traitName);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1404:			$traitFileName = $traitReflection->getFileName();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1408:			$fileName = $this->fileHelper->normalizePath($traitFileName);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1409:			if (!isset($this->analysedFiles[$fileName])) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1412:			$parserNodes = $this->parser->parseFile($fileName);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1413:			$className = sprintf('class %s', $classScope->getClassReflection()->getDisplayName());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1414:			if ($classScope->getClassReflection()->isAnonymous()) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1417:			$classScope = $classScope->changeAnalysedContextFile(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1425:			$this->processNodesForTraitUse($parserNodes, $traitName, $classScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1438:			if ($node instanceof Node\Stmt\Trait_ && $traitName === (string) $node->namespacedName) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1439:				$this->processNodes($node->stmts, $classScope->enterFirstLevelStatements(), $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1445:			foreach ($node->getSubNodeNames() as $subNodeName) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1446:				$subNode = $node->{$subNodeName};
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1447:				$this->processNodesForTraitUse($subNode, $traitName, $classScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1451:				$this->processNodesForTraitUse($subNode, $traitName, $classScope, $nodeCallback);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1458:		list($phpDocParameterTypes, $phpDocReturnType) = $this->getPhpDocs($scope, $classMethod);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1460:		return $scope->enterClassMethod(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1471:		if ($functionLike->getDocComment() !== null) {
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1472:			$docComment = $functionLike->getDocComment()->getText();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1473:			$file = $scope->getFile();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1474:			$class = $scope->isInClass() ? $scope->getClassReflection()->getName() : null;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1477:					$this->broker,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1479:					$scope->getClassReflection()->getName(),
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1480:					$functionLike->name,
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1483:				$docComment = $phpDocBlock->getDocComment();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1484:				$file = $phpDocBlock->getFile();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1485:				$class = $phpDocBlock->getClass();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1488:			$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc(
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1494:				return $tag->getType();
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1495:			}, $resolvedPhpDoc->getParamTags());
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1496:			$phpDocReturnType = $resolvedPhpDoc->getReturnTag() !== null ? $resolvedPhpDoc->getReturnTag()->getType() : null;
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1504:		list($phpDocParameterTypes, $phpDocReturnType) = $this->getPhpDocs($scope, $function);
vendor/phpstan/phpstan/src/Analyser/NodeScopeResolver.php:1506:		return $scope->enterFunction(
vendor/phpstan/phpstan/src/Analyser/Scope.php:190:		$this->broker = $broker;
vendor/phpstan/phpstan/src/Analyser/Scope.php:191:		$this->printer = $printer;
vendor/phpstan/phpstan/src/Analyser/Scope.php:192:		$this->typeSpecifier = $typeSpecifier;
vendor/phpstan/phpstan/src/Analyser/Scope.php:193:		$this->file = $file;
vendor/phpstan/phpstan/src/Analyser/Scope.php:194:		$this->analysedContextFile = $analysedContextFile !== null ? $analysedContextFile : $file;
vendor/phpstan/phpstan/src/Analyser/Scope.php:195:		$this->declareStrictTypes = $declareStrictTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:196:		$this->classReflection = $classReflection;
vendor/phpstan/phpstan/src/Analyser/Scope.php:197:		$this->function = $function;
vendor/phpstan/phpstan/src/Analyser/Scope.php:198:		$this->namespace = $namespace;
vendor/phpstan/phpstan/src/Analyser/Scope.php:199:		$this->variableTypes = $variablesTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:200:		$this->moreSpecificTypes = $moreSpecificTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:201:		$this->inClosureBindScopeClass = $inClosureBindScopeClass;
vendor/phpstan/phpstan/src/Analyser/Scope.php:202:		$this->inAnonymousFunctionReturnType = $inAnonymousFunctionReturnType;
vendor/phpstan/phpstan/src/Analyser/Scope.php:203:		$this->inFunctionCall = $inFunctionCall;
vendor/phpstan/phpstan/src/Analyser/Scope.php:204:		$this->negated = $negated;
vendor/phpstan/phpstan/src/Analyser/Scope.php:205:		$this->inFirstLevelStatement = $inFirstLevelStatement;
vendor/phpstan/phpstan/src/Analyser/Scope.php:206:		$this->currentlyAssignedExpressions = $currentlyAssignedExpressions;
vendor/phpstan/phpstan/src/Analyser/Scope.php:211:		return $this->file;
vendor/phpstan/phpstan/src/Analyser/Scope.php:216:		return $this->analysedContextFile;
vendor/phpstan/phpstan/src/Analyser/Scope.php:221:		return $this->declareStrictTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:227:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:228:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:229:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:230:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:231:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:238:		return $this->classReflection !== null;
vendor/phpstan/phpstan/src/Analyser/Scope.php:244:		$classReflection = $this->classReflection;
vendor/phpstan/phpstan/src/Analyser/Scope.php:253:		return $this->function;
vendor/phpstan/phpstan/src/Analyser/Scope.php:261:		return $this->function !== null ? $this->function->getName() : null;
vendor/phpstan/phpstan/src/Analyser/Scope.php:269:		return $this->namespace;
vendor/phpstan/phpstan/src/Analyser/Scope.php:277:		return $this->variableTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:282:		if (!isset($this->variableTypes[$variableName])) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:286:		return $this->variableTypes[$variableName]->getCertainty();
vendor/phpstan/phpstan/src/Analyser/Scope.php:291:		if ($this->hasVariableType($variableName)->no()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:295:		return $this->variableTypes[$variableName]->getType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:300:		return $this->inAnonymousFunctionReturnType !== null;
vendor/phpstan/phpstan/src/Analyser/Scope.php:308:		return $this->inAnonymousFunctionReturnType;
vendor/phpstan/phpstan/src/Analyser/Scope.php:316:		return $this->inFunctionCall;
vendor/phpstan/phpstan/src/Analyser/Scope.php:321:		$key = $this->printer->prettyPrintExpr($node);
vendor/phpstan/phpstan/src/Analyser/Scope.php:322:		if (!array_key_exists($key, $this->resolvedTypes)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:323:			$this->resolvedTypes[$key] = $this->resolveType($node);
vendor/phpstan/phpstan/src/Analyser/Scope.php:325:		return $this->resolvedTypes[$key];
vendor/phpstan/phpstan/src/Analyser/Scope.php:358:			return $this->getType($node->expr);
vendor/phpstan/phpstan/src/Analyser/Scope.php:374:			$conditionScope = $this->filterByTruthyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/Scope.php:375:			$negatedConditionScope = $this->filterByFalseyValue($node->cond);
vendor/phpstan/phpstan/src/Analyser/Scope.php:376:			$elseType = $negatedConditionScope->getType($node->else);
vendor/phpstan/phpstan/src/Analyser/Scope.php:377:			if ($node->if === null) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:378:				return TypeCombinator::union($conditionScope->getType($node->cond), $elseType);
vendor/phpstan/phpstan/src/Analyser/Scope.php:381:			return TypeCombinator::union($conditionScope->getType($node->if), $elseType);
vendor/phpstan/phpstan/src/Analyser/Scope.php:386:				TypeCombinator::removeNull($this->getType($node->left)),
vendor/phpstan/phpstan/src/Analyser/Scope.php:387:				$this->getType($node->right)
vendor/phpstan/phpstan/src/Analyser/Scope.php:392:			return $this->getType($node->expr);
vendor/phpstan/phpstan/src/Analyser/Scope.php:416:				$left = $node->var;
vendor/phpstan/phpstan/src/Analyser/Scope.php:417:				$right = $node->expr;
vendor/phpstan/phpstan/src/Analyser/Scope.php:419:				$left = $node->left;
vendor/phpstan/phpstan/src/Analyser/Scope.php:420:				$right = $node->right;
vendor/phpstan/phpstan/src/Analyser/Scope.php:425:			$leftType = $this->getType($left);
vendor/phpstan/phpstan/src/Analyser/Scope.php:426:			$rightType = $this->getType($right);
vendor/phpstan/phpstan/src/Analyser/Scope.php:459:					TypeCombinator::union($leftType->getIterableKeyType(), $rightType->getIterableKeyType()),
vendor/phpstan/phpstan/src/Analyser/Scope.php:460:					TypeCombinator::union($leftType->getItemType(), $rightType->getItemType()),
vendor/phpstan/phpstan/src/Analyser/Scope.php:461:					$leftType->isItemTypeInferredFromLiteralArray() || $rightType->isItemTypeInferredFromLiteralArray()
vendor/phpstan/phpstan/src/Analyser/Scope.php:469:			$constName = strtolower((string) $node->name);
vendor/phpstan/phpstan/src/Analyser/Scope.php:478:			if ($this->broker->hasConstant($node->name, $this)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:479:				$typeFromValue = $this->getTypeFromValue(
vendor/phpstan/phpstan/src/Analyser/Scope.php:480:					constant($this->broker->resolveConstantName($node->name, $this))
vendor/phpstan/phpstan/src/Analyser/Scope.php:493:			if ($node->class instanceof Name) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:495:					count($node->class->parts) === 1
vendor/phpstan/phpstan/src/Analyser/Scope.php:497:					if ($node->class->parts[0] === 'static') {
vendor/phpstan/phpstan/src/Analyser/Scope.php:498:						return new StaticType($this->getClassReflection()->getName());
vendor/phpstan/phpstan/src/Analyser/Scope.php:499:					} elseif ($node->class->parts[0] === 'self') {
vendor/phpstan/phpstan/src/Analyser/Scope.php:500:						return new ObjectType($this->getClassReflection()->getName());
vendor/phpstan/phpstan/src/Analyser/Scope.php:504:				return new ObjectType((string) $node->class);
vendor/phpstan/phpstan/src/Analyser/Scope.php:509:					return $this->getType($item->value);
vendor/phpstan/phpstan/src/Analyser/Scope.php:511:				$node->items
vendor/phpstan/phpstan/src/Analyser/Scope.php:517:					($itemTypes[0]->accepts(new StringType()) || count($itemTypes[0]->getReferencedClasses()) > 0)
vendor/phpstan/phpstan/src/Analyser/Scope.php:518:					&& $itemTypes[1]->accepts(new StringType())
vendor/phpstan/phpstan/src/Analyser/Scope.php:526:			foreach ($node->items as $arrayItem) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:527:				$itemKey = $arrayItem->key;
vendor/phpstan/phpstan/src/Analyser/Scope.php:540:						$constName = strtolower((string) $itemKey->name);
vendor/phpstan/phpstan/src/Analyser/Scope.php:547:						} elseif ($this->broker->hasConstant($itemKey->name, $this)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:548:							$value = constant($this->broker->resolveConstantName($itemKey->name, $this));
vendor/phpstan/phpstan/src/Analyser/Scope.php:556:						$arrayWithKeys[$itemKey->value] = 'foo';
vendor/phpstan/phpstan/src/Analyser/Scope.php:559:					$keyExpressionTypes[] = $this->getType($itemKey);
vendor/phpstan/phpstan/src/Analyser/Scope.php:564:				return $this->getTypeFromValue($value);
vendor/phpstan/phpstan/src/Analyser/Scope.php:568:				$this->getCombinedType(array_merge($scalarKeysTypes, $keyExpressionTypes)),
vendor/phpstan/phpstan/src/Analyser/Scope.php:569:				$this->getCombinedType($itemTypes),
vendor/phpstan/phpstan/src/Analyser/Scope.php:591:		} elseif ($node instanceof Node\Expr\ClassConstFetch && is_string($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:592:			if ($node->class instanceof Name) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:593:				$constantClass = (string) $node->class;
vendor/phpstan/phpstan/src/Analyser/Scope.php:599:					$resolvedName = $this->resolveName($node->class);
vendor/phpstan/phpstan/src/Analyser/Scope.php:603:				$constantClassType = $this->getType($node->class);
vendor/phpstan/phpstan/src/Analyser/Scope.php:606:			$constantName = $node->name;
vendor/phpstan/phpstan/src/Analyser/Scope.php:610:			if ($constantClassType->hasConstant($constantName)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:611:				$constant = $constantClassType->getConstant($constantName);
vendor/phpstan/phpstan/src/Analyser/Scope.php:612:				$typeFromValue = $this->getTypeFromValue($constant->getValue());
vendor/phpstan/phpstan/src/Analyser/Scope.php:619:		$exprString = $this->printer->prettyPrintExpr($node);
vendor/phpstan/phpstan/src/Analyser/Scope.php:620:		if (isset($this->moreSpecificTypes[$exprString])) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:621:			return $this->moreSpecificTypes[$exprString];
vendor/phpstan/phpstan/src/Analyser/Scope.php:624:		if ($node instanceof Variable && is_string($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:625:			if ($this->hasVariableType($node->name)->no()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:629:			return $this->getVariableType($node->name);
vendor/phpstan/phpstan/src/Analyser/Scope.php:632:		if ($node instanceof Expr\ArrayDimFetch && $node->dim !== null) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:633:			$arrayType = $this->getType($node->var);
vendor/phpstan/phpstan/src/Analyser/Scope.php:635:				return $arrayType->getItemType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:639:		if ($node instanceof MethodCall && is_string($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:640:			$methodCalledOnType = $this->getType($node->var);
vendor/phpstan/phpstan/src/Analyser/Scope.php:641:			$referencedClasses = $methodCalledOnType->getReferencedClasses();
vendor/phpstan/phpstan/src/Analyser/Scope.php:644:				&& $this->broker->hasClass($referencedClasses[0])
vendor/phpstan/phpstan/src/Analyser/Scope.php:646:				$methodClassReflection = $this->broker->getClass($referencedClasses[0]);
vendor/phpstan/phpstan/src/Analyser/Scope.php:647:				if (!$methodClassReflection->hasMethod($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:651:				$methodReflection = $methodClassReflection->getMethod($node->name, $this);
vendor/phpstan/phpstan/src/Analyser/Scope.php:652:				foreach ($this->broker->getDynamicMethodReturnTypeExtensionsForClass($methodClassReflection->getName()) as $dynamicMethodReturnTypeExtension) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:653:					if (!$dynamicMethodReturnTypeExtension->isMethodSupported($methodReflection)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:657:					return $dynamicMethodReturnTypeExtension->getTypeFromMethodCall($methodReflection, $node, $this);
vendor/phpstan/phpstan/src/Analyser/Scope.php:661:			if (!$methodCalledOnType->hasMethod($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:664:			$methodReflection = $methodCalledOnType->getMethod($node->name, $this);
vendor/phpstan/phpstan/src/Analyser/Scope.php:666:			$calledOnThis = $node->var instanceof Variable && is_string($node->var->name) && $node->var->name === 'this';
vendor/phpstan/phpstan/src/Analyser/Scope.php:667:			$methodReturnType = $methodReflection->getReturnType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:670:					if ($this->isInClass()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:671:						return $methodReturnType->changeBaseClass($this->getClassReflection()->getName());
vendor/phpstan/phpstan/src/Analyser/Scope.php:674:					return $methodReturnType->resolveStatic($referencedClasses[0]);
vendor/phpstan/phpstan/src/Analyser/Scope.php:678:			return $methodReflection->getReturnType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:681:		if ($node instanceof Expr\StaticCall && is_string($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:682:			if ($node->class instanceof Name) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:683:				$calleeType = new ObjectType($this->resolveName($node->class));
vendor/phpstan/phpstan/src/Analyser/Scope.php:685:				$calleeType = $this->getType($node->class);
vendor/phpstan/phpstan/src/Analyser/Scope.php:688:			if (!$calleeType->hasMethod($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:691:			$staticMethodReflection = $calleeType->getMethod($node->name, $this);
vendor/phpstan/phpstan/src/Analyser/Scope.php:692:			$referencedClasses = $calleeType->getReferencedClasses();
vendor/phpstan/phpstan/src/Analyser/Scope.php:694:				count($calleeType->getReferencedClasses()) === 1
vendor/phpstan/phpstan/src/Analyser/Scope.php:695:				&& $this->broker->hasClass($referencedClasses[0])
vendor/phpstan/phpstan/src/Analyser/Scope.php:697:				$staticMethodClassReflection = $this->broker->getClass($referencedClasses[0]);
vendor/phpstan/phpstan/src/Analyser/Scope.php:698:				foreach ($this->broker->getDynamicStaticMethodReturnTypeExtensionsForClass($staticMethodClassReflection->getName()) as $dynamicStaticMethodReturnTypeExtension) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:699:					if (!$dynamicStaticMethodReturnTypeExtension->isStaticMethodSupported($staticMethodReflection)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:703:					return $dynamicStaticMethodReturnTypeExtension->getTypeFromStaticMethodCall($staticMethodReflection, $node, $this);
vendor/phpstan/phpstan/src/Analyser/Scope.php:706:			if ($staticMethodReflection->getReturnType() instanceof StaticResolvableType) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:707:				if ($node->class instanceof Name) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:708:					$nodeClassString = strtolower((string) $node->class);
vendor/phpstan/phpstan/src/Analyser/Scope.php:713:					], true) && $this->isInClass()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:714:						return $staticMethodReflection->getReturnType()->changeBaseClass($this->getClassReflection()->getName());
vendor/phpstan/phpstan/src/Analyser/Scope.php:718:					return $staticMethodReflection->getReturnType()->resolveStatic($referencedClasses[0]);
vendor/phpstan/phpstan/src/Analyser/Scope.php:721:			return $staticMethodReflection->getReturnType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:724:		if ($node instanceof PropertyFetch && is_string($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:725:			$propertyFetchedOnType = $this->getType($node->var);
vendor/phpstan/phpstan/src/Analyser/Scope.php:726:			if (!$propertyFetchedOnType->hasProperty($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:730:			return $propertyFetchedOnType->getProperty($node->name, $this)->getType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:733:		if ($node instanceof Expr\StaticPropertyFetch && is_string($node->name) && $node->class instanceof Name) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:734:			$staticPropertyHolderClass = $this->resolveName($node->class);
vendor/phpstan/phpstan/src/Analyser/Scope.php:735:			if ($this->broker->hasClass($staticPropertyHolderClass)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:736:				$staticPropertyClassReflection = $this->broker->getClass(
vendor/phpstan/phpstan/src/Analyser/Scope.php:739:				if (!$staticPropertyClassReflection->hasProperty($node->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:743:				return $staticPropertyClassReflection->getProperty($node->name, $this)->getType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:747:		if ($node instanceof FuncCall && $node->name instanceof Name) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:748:			if (!$this->broker->hasFunction($node->name, $this)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:752:			$functionReflection = $this->broker->getFunction($node->name, $this);
vendor/phpstan/phpstan/src/Analyser/Scope.php:754:			foreach ($this->broker->getDynamicFunctionReturnTypeExtensions() as $dynamicFunctionReturnTypeExtension) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:755:				if (!$dynamicFunctionReturnTypeExtension->isFunctionSupported($functionReflection)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:759:				return $dynamicFunctionReturnTypeExtension->getTypeFromFunctionCall($functionReflection, $node, $this);
vendor/phpstan/phpstan/src/Analyser/Scope.php:762:			return $functionReflection->getReturnType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:771:		if ($this->isInClass()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:776:				return $this->getClassReflection()->getName();
vendor/phpstan/phpstan/src/Analyser/Scope.php:778:				$currentClassReflection = $this->getClassReflection();
vendor/phpstan/phpstan/src/Analyser/Scope.php:779:				if ($currentClassReflection->getParentClass() !== false) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:780:					return $currentClassReflection->getParentClass()->getName();
vendor/phpstan/phpstan/src/Analyser/Scope.php:806:				$this->getCombinedType(
vendor/phpstan/phpstan/src/Analyser/Scope.php:808:						return $this->getTypeFromValue($value);
vendor/phpstan/phpstan/src/Analyser/Scope.php:811:				$this->getCombinedType(
vendor/phpstan/phpstan/src/Analyser/Scope.php:813:						return $this->getTypeFromValue($value);
vendor/phpstan/phpstan/src/Analyser/Scope.php:838:		$exprString = $this->printer->prettyPrintExpr($node);
vendor/phpstan/phpstan/src/Analyser/Scope.php:840:		return isset($this->moreSpecificTypes[$exprString]);
vendor/phpstan/phpstan/src/Analyser/Scope.php:846:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:847:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:848:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:849:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:850:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:851:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:854:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:856:				'this' => VariableTypeHolder::createYes(new ThisType($classReflection->getName())),
vendor/phpstan/phpstan/src/Analyser/Scope.php:864:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:865:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:866:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:867:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:869:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:870:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:871:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:872:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:873:			$this->getVariableTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:874:			$this->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:875:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:876:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:877:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:878:			$this->isNegated()
vendor/phpstan/phpstan/src/Analyser/Scope.php:888:		return $this->enterFunctionLike(
vendor/phpstan/phpstan/src/Analyser/Scope.php:890:				$this->getClassReflection(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:892:				$this->getRealParameterTypes($classMethod),
vendor/phpstan/phpstan/src/Analyser/Scope.php:894:				$classMethod->returnType !== null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:895:				$this->getFunctionType($classMethod->returnType, $classMethod->returnType === null, false),
vendor/phpstan/phpstan/src/Analyser/Scope.php:904:		foreach ($functionLike->getParams() as $parameter) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:905:			$realParameterTypes[$parameter->name] = $this->getFunctionType(
vendor/phpstan/phpstan/src/Analyser/Scope.php:906:				$parameter->type,
vendor/phpstan/phpstan/src/Analyser/Scope.php:907:				$this->isParameterValueNullable($parameter),
vendor/phpstan/phpstan/src/Analyser/Scope.php:908:				$parameter->variadic
vendor/phpstan/phpstan/src/Analyser/Scope.php:921:		return $this->enterFunctionLike(
vendor/phpstan/phpstan/src/Analyser/Scope.php:924:				$this->getRealParameterTypes($function),
vendor/phpstan/phpstan/src/Analyser/Scope.php:926:				$function->returnType !== null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:927:				$this->getFunctionType($function->returnType, $function->returnType === null, false),
vendor/phpstan/phpstan/src/Analyser/Scope.php:935:		$variableTypes = $this->getVariableTypes();
vendor/phpstan/phpstan/src/Analyser/Scope.php:936:		foreach ($functionReflection->getParameters() as $parameter) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:937:			$variableTypes[$parameter->getName()] = VariableTypeHolder::createYes($parameter->getType());
vendor/phpstan/phpstan/src/Analyser/Scope.php:941:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:942:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:943:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:944:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:945:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:946:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:947:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:949:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:960:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:961:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:962:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:963:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:964:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:965:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:974:		$variableTypes = $this->getVariableTypes();
vendor/phpstan/phpstan/src/Analyser/Scope.php:982:		if ($scopeClass === 'static' && $this->isInClass()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:983:			$scopeClass = $this->getClassReflection()->getName();
vendor/phpstan/phpstan/src/Analyser/Scope.php:987:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:988:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:989:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:990:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:991:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:992:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:993:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:994:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:995:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:997:			$this->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:999:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1000:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1001:			$this->isNegated()
vendor/phpstan/phpstan/src/Analyser/Scope.php:1007:		return $this->inClosureBindScopeClass !== null;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1012:		return $this->enterClass($anonymousClass);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1029:			$isNullable = $this->isParameterValueNullable($parameter);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1031:			$variableTypes[$parameter->name] = VariableTypeHolder::createYes(
vendor/phpstan/phpstan/src/Analyser/Scope.php:1032:				$this->getFunctionType($parameter->type, $isNullable, $parameter->variadic)
vendor/phpstan/phpstan/src/Analyser/Scope.php:1037:			if (!$this->hasVariableType($use->var)->yes()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1038:				if ($use->byRef) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1039:					$variableTypes[$use->var] = VariableTypeHolder::createYes(new MixedType());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1043:			$variableTypes[$use->var] = VariableTypeHolder::createYes($this->getVariableType($use->var));
vendor/phpstan/phpstan/src/Analyser/Scope.php:1046:		if ($this->hasVariableType('this')->yes()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1047:			$variableTypes['this'] = VariableTypeHolder::createYes($this->getVariableType('this'));
vendor/phpstan/phpstan/src/Analyser/Scope.php:1050:		$returnType = $this->getFunctionType($returnTypehint, $returnTypehint === null, false);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1053:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1054:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1055:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1056:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1057:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1058:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1059:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1060:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1061:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1064:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1066:			$this->getInFunctionCall()
vendor/phpstan/phpstan/src/Analyser/Scope.php:1072:		if ($parameter->default instanceof ConstFetch) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1073:			return strtolower((string) $parameter->default->name) === 'null';
vendor/phpstan/phpstan/src/Analyser/Scope.php:1089:				$this->getFunctionType($type, false, $isVariadic)
vendor/phpstan/phpstan/src/Analyser/Scope.php:1093:			return new ArrayType(new IntegerType(), $this->getFunctionType(
vendor/phpstan/phpstan/src/Analyser/Scope.php:1116:				$className = $this->getClassReflection()->getName();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1120:				if ($this->isInClass() && $this->getClassReflection()->getParentClass() !== false) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1121:					return new ObjectType($this->getClassReflection()->getParentClass()->getName());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1134:			return $this->getFunctionType($type->type, true, $isVariadic);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1142:		$iterateeType = $this->getType($iteratee);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1143:		$scope = $this->assignVariable($valueName, $iterateeType->getIterableValueType(), TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1146:			$scope = $scope->assignVariable($keyName, $iterateeType->getIterableKeyType(), TrinaryLogic::createYes());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1163:		return $this->assignVariable(
vendor/phpstan/phpstan/src/Analyser/Scope.php:1177:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1178:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1179:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1180:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1181:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1182:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1183:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1184:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1185:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1186:			$this->getVariableTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1187:			$this->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1188:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1189:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1191:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1192:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1198:		$currentlyAssignedExpressions = $this->currentlyAssignedExpressions;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1199:		$currentlyAssignedExpressions[] = $this->printer->prettyPrintExpr($expr);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1202:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1203:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1204:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1205:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1206:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1207:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1208:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1209:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1210:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1211:			$this->getVariableTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1212:			$this->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1213:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1214:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1215:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1216:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1217:			$this->isInFirstLevelStatement(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1224:		$exprString = $this->printer->prettyPrintExpr($expr);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1225:		return in_array($exprString, $this->currentlyAssignedExpressions, true);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1234:		if ($certainty->no()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1238:		$existingCertainty = $this->hasVariableType($variableName);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1239:		if (!$existingCertainty->no()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1240:			$certainty = $certainty->or($existingCertainty);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1243:		$variableTypes = $this->getVariableTypes();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1246:		$exprString = $this->printer->prettyPrintExpr(new Variable($variableName));
vendor/phpstan/phpstan/src/Analyser/Scope.php:1247:		$moreSpecificTypes = $this->moreSpecificTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1253:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1254:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1255:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1256:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1257:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1258:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1259:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1260:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1261:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1264:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1265:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1266:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1267:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1268:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1274:		if ($this->hasVariableType($variableName)->no()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1277:		$variableTypes = $this->getVariableTypes();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1281:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1282:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1283:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1284:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1285:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1286:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1287:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1288:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1289:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1291:			$this->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1292:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1293:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1294:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1295:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1296:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1302:		$ourVariableTypeHolders = $this->getVariableTypes();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1303:		$theirVariableTypeHolders = $otherScope->getVariableTypes();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1307:				$intersectedVariableTypeHolders[$name] = $ourVariableTypeHolders[$name]->and($variableTypeHolder);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1309:				$intersectedVariableTypeHolders[$name] = VariableTypeHolder::createMaybe($variableTypeHolder->getType());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1315:			if ($otherScope->isSpecified($variableNode)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1318:						$otherScope->getType($variableNode),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1319:						$variableTypeHolder->getType()
vendor/phpstan/phpstan/src/Analyser/Scope.php:1328:			$intersectedVariableTypeHolders[$name] = VariableTypeHolder::createMaybe($variableTypeHolder->getType());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1331:		$theirSpecifiedTypes = $otherScope->moreSpecificTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1333:		foreach ($this->moreSpecificTypes as $exprString => $specificType) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1345:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1346:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1347:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1348:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1349:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1350:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1351:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1352:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1353:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1356:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1357:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1358:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1359:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1360:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1367:		foreach ($otherScope->getVariableTypes() as $name => $variableTypeHolder) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1372:		foreach ($otherScope->moreSpecificTypes as $exprString => $specificType) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1377:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1378:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1379:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1380:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1381:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1382:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1383:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1384:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1385:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1388:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1389:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1390:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1391:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1392:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1398:		$variableTypeHolders = $this->variableTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1399:		$specifiedTypes = $this->moreSpecificTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1400:		foreach ($intersectedScope->getVariableTypes() as $name => $theirVariableTypeHolder) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1402:				$type = $theirVariableTypeHolder->getType();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1403:				if ($theirVariableTypeHolder->getCertainty()->maybe()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1404:					$type = TypeCombinator::union($type, $variableTypeHolders[$name]->getType());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1408:					$theirVariableTypeHolder->getCertainty()->or($variableTypeHolders[$name]->getCertainty())
vendor/phpstan/phpstan/src/Analyser/Scope.php:1412:			$variableTypeHolders[$name] = $theirVariableTypeHolder->addMaybe();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1414:			$exprString = $this->printer->prettyPrintExpr(new Variable($name));
vendor/phpstan/phpstan/src/Analyser/Scope.php:1418:		foreach ($intersectedScope->moreSpecificTypes as $exprString => $specificType) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1419:			if (preg_match('#^\$([a-zA-Z_][a-zA-Z0-9_]*)$#', $exprString, $matches) === 1) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1428:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1429:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1430:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1431:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1432:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1433:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1434:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1435:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1436:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1439:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1440:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1441:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1442:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1443:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1449:		$ourVariableTypeHolders = $this->getVariableTypes();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1450:		foreach ($otherScope->getVariableTypes() as $name => $theirVariableTypeHolder) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1454:					&& $ourVariableTypeHolders[$name]->getCertainty()->equals($theirVariableTypeHolder->getCertainty())
vendor/phpstan/phpstan/src/Analyser/Scope.php:1461:					&& $theirVariableTypeHolder->getType()->describe() === $ourVariableTypeHolders[$name]->getType()->describe()
vendor/phpstan/phpstan/src/Analyser/Scope.php:1462:					&& $ourVariableTypeHolders[$name]->getCertainty()->equals($theirVariableTypeHolder->getCertainty())
vendor/phpstan/phpstan/src/Analyser/Scope.php:1469:		$moreSpecificTypes = $this->moreSpecificTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1470:		foreach ($otherScope->moreSpecificTypes as $exprString => $specifiedType) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1471:			if (isset($moreSpecificTypes[$exprString]) && $specifiedType->describe() === $moreSpecificTypes[$exprString]->describe()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1477:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1478:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1479:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1480:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1481:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1482:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1483:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1484:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1485:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1488:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1489:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1490:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1491:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1492:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1498:		$exprString = $this->printer->prettyPrintExpr($expr);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1500:		$scope = $this->addMoreSpecificTypes([
vendor/phpstan/phpstan/src/Analyser/Scope.php:1504:		if ($expr instanceof Variable && is_string($expr->name)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1505:			$variableName = $expr->name;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1507:			$variableTypes = $scope->getVariableTypes();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1511:				$scope->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1512:				$scope->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1513:				$scope->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1514:				$scope->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1515:				$scope->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1516:				$scope->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1517:				$scope->isInClass() ? $scope->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1518:				$scope->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1519:				$scope->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1521:				$scope->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1522:				$scope->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1523:				$scope->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1524:				$scope->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1525:				$scope->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1526:				$scope->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1535:		$exprString = $this->printer->prettyPrintExpr($expr);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1536:		$moreSpecificTypes = $this->moreSpecificTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1540:				$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1541:				$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1542:				$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1543:				$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1544:				$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1545:				$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1546:				$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1547:				$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1548:				$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1549:				$this->getVariableTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1551:				$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1552:				$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1553:				$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1554:				$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1555:				$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1564:		return $this->specifyExpressionType(
vendor/phpstan/phpstan/src/Analyser/Scope.php:1566:			TypeCombinator::remove($this->getType($expr), $type)
vendor/phpstan/phpstan/src/Analyser/Scope.php:1572:		$specifiedTypes = $this->typeSpecifier->specifyTypesInCondition($this, $expr, TypeSpecifier::CONTEXT_TRUTHY);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1573:		return $this->filterBySpecifiedTypes($specifiedTypes);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1578:		$specifiedTypes = $this->typeSpecifier->specifyTypesInCondition($this, $expr, TypeSpecifier::CONTEXT_FALSEY);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1579:		return $this->filterBySpecifiedTypes($specifiedTypes);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1585:		foreach ($specifiedTypes->getSureTypes() as list($expr, $type)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1586:			$type = TypeCombinator::intersect($type, $this->getType($expr));
vendor/phpstan/phpstan/src/Analyser/Scope.php:1587:			$scope = $scope->specifyExpressionType($expr, $type);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1589:		foreach ($specifiedTypes->getSureNotTypes() as list($expr, $type)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1590:			$scope = $scope->removeTypeFromExpression($expr, $type);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1597:		$exprString = $this->printer->prettyPrintExpr($expr);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1599:		return $this->addMoreSpecificTypes([
vendor/phpstan/phpstan/src/Analyser/Scope.php:1606:		$exprString = $this->printer->prettyPrintExpr($expr);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1608:		return $this->addMoreSpecificTypes([
vendor/phpstan/phpstan/src/Analyser/Scope.php:1616:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1617:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1618:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1619:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1620:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1621:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1622:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1623:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1624:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1625:			$this->getVariableTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1626:			$this->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1627:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1628:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1629:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1630:			!$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1631:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1638:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1639:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1640:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1641:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1642:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1643:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1644:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1645:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1646:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1647:			$this->getVariableTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1648:			$this->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1649:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1650:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1651:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1652:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1654:			$this->currentlyAssignedExpressions
vendor/phpstan/phpstan/src/Analyser/Scope.php:1661:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1662:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1663:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1664:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1665:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1666:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1667:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1668:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1669:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1670:			$this->getVariableTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1671:			$this->moreSpecificTypes,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1672:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1673:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1674:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1675:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1677:			$this->currentlyAssignedExpressions
vendor/phpstan/phpstan/src/Analyser/Scope.php:1683:		return $this->inFirstLevelStatement;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1688:		return $this->negated;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1693:		$moreSpecificTypes = $this->moreSpecificTypes;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1699:			$this->broker,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1700:			$this->printer,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1701:			$this->typeSpecifier,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1702:			$this->getFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1703:			$this->getAnalysedContextFile(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1704:			$this->isDeclareStrictTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1705:			$this->isInClass() ? $this->getClassReflection() : null,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1706:			$this->getFunction(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1707:			$this->getNamespace(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1708:			$this->getVariableTypes(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1710:			$this->inClosureBindScopeClass,
vendor/phpstan/phpstan/src/Analyser/Scope.php:1711:			$this->getAnonymousFunctionReturnType(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1712:			$this->getInFunctionCall(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1713:			$this->isNegated(),
vendor/phpstan/phpstan/src/Analyser/Scope.php:1714:			$this->inFirstLevelStatement
vendor/phpstan/phpstan/src/Analyser/Scope.php:1720:		return $this->canAccessClassMember($propertyReflection);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1725:		if ($this->canAccessClassMember($methodReflection)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1729:		return $this->canAccessClassMember($methodReflection->getPrototype());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1734:		return $this->canAccessClassMember($constantReflection);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1739:		if ($classMemberReflection->isPublic()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1743:		if ($this->inClosureBindScopeClass !== null && $this->broker->hasClass($this->inClosureBindScopeClass)) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1744:			$currentClassReflection = $this->broker->getClass($this->inClosureBindScopeClass);
vendor/phpstan/phpstan/src/Analyser/Scope.php:1745:		} elseif ($this->isInClass()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1746:			$currentClassReflection = $this->getClassReflection();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1751:		$classReflectionName = $classMemberReflection->getDeclaringClass()->getName();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1752:		if ($classMemberReflection->isPrivate()) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1753:			return $currentClassReflection->getName() === $classReflectionName;
vendor/phpstan/phpstan/src/Analyser/Scope.php:1759:			$currentClassReflection->getName() === $classReflectionName
vendor/phpstan/phpstan/src/Analyser/Scope.php:1760:			|| $currentClassReflection->isSubclassOf($classReflectionName)
vendor/phpstan/phpstan/src/Analyser/Scope.php:1765:		return $classMemberReflection->getDeclaringClass()->isSubclassOf($currentClassReflection->getName());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1774:		foreach ($this->getVariableTypes() as $name => $variableTypeHolder) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1775:			$key = sprintf('$%s (%s)', $name, $variableTypeHolder->getCertainty()->describe());
vendor/phpstan/phpstan/src/Analyser/Scope.php:1776:			$descriptions[$key] = $variableTypeHolder->getType()->describe();
vendor/phpstan/phpstan/src/Analyser/Scope.php:1778:		foreach ($this->moreSpecificTypes as $exprString => $type) {
vendor/phpstan/phpstan/src/Analyser/Scope.php:1781:				$key .= '-specified';
vendor/phpstan/phpstan/src/Analyser/Scope.php:1783:			$descriptions[$key] = $type->describe();
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:24:		if ($certainty->no()) {
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:27:		$this->type = $type;
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:28:		$this->certainty = $certainty;
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:44:			TypeCombinator::union($this->getType(), $other->getType()),
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:45:			$this->getCertainty()->and($other->getCertainty())
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:52:			$this->getType(),
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:53:			$this->getCertainty()->addMaybe()
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:59:		return $this->type;
vendor/phpstan/phpstan/src/Analyser/VariableTypeHolder.php:64:		return $this->certainty;
vendor/phpstan/phpstan/src/Analyser/NameScope.php:25:		$this->namespace = $namespace;
vendor/phpstan/phpstan/src/Analyser/NameScope.php:26:		$this->uses = $uses;
vendor/phpstan/phpstan/src/Analyser/NameScope.php:27:		$this->className = $className;
vendor/phpstan/phpstan/src/Analyser/NameScope.php:35:		return $this->className;
vendor/phpstan/phpstan/src/Analyser/NameScope.php:46:		if (isset($this->uses[$firstNamePart])) {
vendor/phpstan/phpstan/src/Analyser/NameScope.php:48:				return $this->uses[$firstNamePart];
vendor/phpstan/phpstan/src/Analyser/NameScope.php:51:			return sprintf('%s\\%s', $this->uses[$firstNamePart], implode('\\', $nameParts));
vendor/phpstan/phpstan/src/Analyser/NameScope.php:54:		if ($this->namespace !== null) {
vendor/phpstan/phpstan/src/Analyser/NameScope.php:55:			return sprintf('%s\\%s', $this->namespace, $name);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:55:		$this->printer = $printer;
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:61:			if ($expr->class instanceof Name) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:62:				$className = (string) $expr->class;
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:63:				if ($className === 'self' && $scope->isInClass()) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:64:					$type = new ObjectType($scope->getClassReflection()->getName());
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:65:				} elseif ($className === 'static' && $scope->isInClass()) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:66:					$type = new StaticType($scope->getClassReflection()->getName());
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:70:				return $this->create($expr->expr, $type, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:72:				return $this->create($expr->expr, new ObjectWithoutClassType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:75:			$expressions = $this->findTypeExpressionsFromBinaryOperation($expr);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:77:				$constantName = strtolower((string) $expressions[1]->name);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:79:					$types = $this->create($expressions[0], new FalseBooleanType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:80:					return $types->unionWith($this->specifyTypesInCondition(
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:86:					$types = $this->create($expressions[0], new TrueBooleanType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:87:					return $types->unionWith($this->specifyTypesInCondition(
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:93:					return $this->create($expressions[0], new NullType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:96:				$type = TypeCombinator::intersect($scope->getType($expr->right), $scope->getType($expr->left));
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:97:				$leftTypes = $this->create($expr->left, $type, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:98:				$rightTypes = $this->create($expr->right, $type, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:99:				return $leftTypes->unionWith($rightTypes);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:102:			return $this->specifyTypesInCondition(
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:104:				new Node\Expr\BooleanNot(new Node\Expr\BinaryOp\Identical($expr->left, $expr->right)),
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:108:			$expressions = $this->findTypeExpressionsFromBinaryOperation($expr);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:110:				$constantName = strtolower((string) $expressions[1]->name);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:112:					return $this->specifyTypesInCondition(
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:118:					return $this->specifyTypesInCondition(
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:126:			return $this->specifyTypesInCondition(
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:128:				new Node\Expr\BooleanNot(new Node\Expr\BinaryOp\Equal($expr->left, $expr->right)),
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:133:			&& $expr->name instanceof Name
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:134:			&& isset($expr->args[0])
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:136:			$functionName = strtolower((string) $expr->name);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:137:			$innerExpr = $expr->args[0]->value;
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:142:					return $this->create($innerExpr, new IntegerType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:146:					return $this->create($innerExpr, new FloatType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:148:					return $this->create($innerExpr, new NullType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:150:					return $this->create($innerExpr, new ArrayType(new MixedType(), new MixedType(), false, TrinaryLogic::createMaybe()), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:152:					return $this->create($innerExpr, new TrueOrFalseBooleanType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:154:					return $this->create($innerExpr, new CallableType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:156:					return $this->create($innerExpr, new ResourceType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:158:					return $this->create($innerExpr, new IterableIterableType(new MixedType(), new MixedType()), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:160:					return $this->create($innerExpr, new StringType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:162:					return $this->create($innerExpr, new ObjectWithoutClassType(), $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:164:					return $this->create($innerExpr, new UnionType([
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:170:					if (isset($expr->args[1])) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:171:						$classNameArgExpr = $expr->args[1]->value;
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:173:							$objectType = new ObjectType($classNameArgExpr->value);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:174:							$types = $this->create($innerExpr, $objectType, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:177:							&& $classNameArgExpr->class instanceof Name
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:178:							&& is_string($classNameArgExpr->name)
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:179:							&& strtolower($classNameArgExpr->name) === 'class'
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:181:							$className = $scope->resolveName($classNameArgExpr->class);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:182:							if (strtolower($classNameArgExpr->class->toString()) === 'static') {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:187:							$types = $this->create($innerExpr, $objectType, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:190:							$types = $this->create($innerExpr, $objectType, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:195:						if (isset($expr->args[2]) && ($context & self::CONTEXT_TRUE)) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:196:							if (!$scope->getType($expr->args[2]->value)->isSuperTypeOf(new TrueBooleanType())->no()) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:197:								$types = $types->intersectWith($this->create($innerExpr, new StringType(), $context));
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:205:			$leftTypes = $this->specifyTypesInCondition($scope, $expr->left, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:206:			$rightTypes = $this->specifyTypesInCondition($scope, $expr->right, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:207:			return ($context & self::CONTEXT_TRUE) ? $leftTypes->unionWith($rightTypes) : $leftTypes->intersectWith($rightTypes);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:209:			$leftTypes = $this->specifyTypesInCondition($scope, $expr->left, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:210:			$rightTypes = $this->specifyTypesInCondition($scope, $expr->right, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:211:			return ($context & self::CONTEXT_TRUE) ? $leftTypes->intersectWith($rightTypes) : $leftTypes->unionWith($rightTypes);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:213:			return $this->specifyTypesInCondition($scope, $expr->expr, ~$context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:215:			return $this->specifyTypesInCondition($scope, $expr->var, $context);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:218:			&& count($expr->vars) > 0
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:222:			foreach ($expr->vars as $var) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:229:					$var = $var->var;
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:235:					&& $var->class instanceof Expr
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:237:					$var = $var->class;
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:244:				$type = $this->create($var, new NullType(), self::CONTEXT_FALSE);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:248:					$types = $types->unionWith($type);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:254:			return $this->create($expr, $type, self::CONTEXT_FALSE);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:257:			return $this->create($expr, $type, self::CONTEXT_FALSE);
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:269:		if ($binaryOperation->left instanceof ConstFetch) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:270:			return [$binaryOperation->right, $binaryOperation->left];
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:271:		} elseif ($binaryOperation->right instanceof ConstFetch) {
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:272:			return [$binaryOperation->left, $binaryOperation->right];
vendor/phpstan/phpstan/src/Analyser/TypeSpecifier.php:291:			$exprString = $this->printer->prettyPrintExpr($expr);
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:26:		$this->sureTypes = $sureTypes;
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:27:		$this->sureNotTypes = $sureNotTypes;
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:35:		return $this->sureTypes;
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:43:		return $this->sureNotTypes;
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:51:		foreach ($this->sureTypes as $exprString => list($exprNode, $type)) {
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:52:			if (isset($other->sureTypes[$exprString])) {
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:55:					TypeCombinator::union($type, $other->sureTypes[$exprString][1]),
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:60:		foreach ($this->sureNotTypes as $exprString => list($exprNode, $type)) {
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:61:			if (isset($other->sureNotTypes[$exprString])) {
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:64:					TypeCombinator::intersect($type, $other->sureNotTypes[$exprString][1]),
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:75:		$sureTypeUnion = $this->sureTypes + $other->sureTypes;
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:76:		$sureNotTypeUnion = $this->sureNotTypes + $other->sureNotTypes;
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:78:		foreach ($this->sureTypes as $exprString => list($exprNode, $type)) {
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:79:			if (isset($other->sureTypes[$exprString])) {
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:82:					TypeCombinator::intersect($type, $other->sureTypes[$exprString][1]),
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:87:		foreach ($this->sureNotTypes as $exprString => list($exprNode, $type)) {
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:88:			if (isset($other->sureNotTypes[$exprString])) {
vendor/phpstan/phpstan/src/Analyser/SpecifiedTypes.php:91:					TypeCombinator::union($type, $other->sureNotTypes[$exprString][1]),
vendor/phpstan/phpstan/src/Analyser/UndefinedVariableException.php:17:		$this->scope = $scope;
vendor/phpstan/phpstan/src/Analyser/UndefinedVariableException.php:18:		$this->variableName = $variableName;
vendor/phpstan/phpstan/src/Analyser/UndefinedVariableException.php:23:		return $this->scope;
vendor/phpstan/phpstan/src/Analyser/UndefinedVariableException.php:28:		return $this->variableName;
vendor/phpstan/phpstan/src/Analyser/StatementList.php:23:		$this->scope = $scope;
vendor/phpstan/phpstan/src/Analyser/StatementList.php:24:		$this->statements = $statements;
vendor/phpstan/phpstan/src/Analyser/StatementList.php:25:		$this->filterByTruthyValue = $filterByTruthyValue;
vendor/phpstan/phpstan/src/Analyser/StatementList.php:30:		return $this->scope;
vendor/phpstan/phpstan/src/Analyser/StatementList.php:38:		return $this->statements;
vendor/phpstan/phpstan/src/Analyser/StatementList.php:43:		return $this->filterByTruthyValue;
vendor/phpstan/phpstan/src/Analyser/Error.php:30:		$this->message = $message;
vendor/phpstan/phpstan/src/Analyser/Error.php:31:		$this->file = $file;
vendor/phpstan/phpstan/src/Analyser/Error.php:32:		$this->line = $line;
vendor/phpstan/phpstan/src/Analyser/Error.php:33:		$this->canBeIgnored = $canBeIgnored;
vendor/phpstan/phpstan/src/Analyser/Error.php:38:		return $this->message;
vendor/phpstan/phpstan/src/Analyser/Error.php:43:		return $this->file;
vendor/phpstan/phpstan/src/Analyser/Error.php:51:		return $this->line;
vendor/phpstan/phpstan/src/Analyser/Error.php:56:		return $this->canBeIgnored;
vendor/phpstan/phpstan/src/Command/ErrorFormatter/RawErrorFormatter.php:15:		if (!$analysisResult->hasErrors()) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/RawErrorFormatter.php:19:		foreach ($analysisResult->getNotFileSpecificErrors() as $notFileSpecificError) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/RawErrorFormatter.php:20:			$style->writeln(sprintf('?:?:%s', $notFileSpecificError));
vendor/phpstan/phpstan/src/Command/ErrorFormatter/RawErrorFormatter.php:23:		foreach ($analysisResult->getFileSpecificErrors() as $fileSpecificError) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/RawErrorFormatter.php:24:			$style->writeln(
vendor/phpstan/phpstan/src/Command/ErrorFormatter/RawErrorFormatter.php:27:					$fileSpecificError->getFile(),
vendor/phpstan/phpstan/src/Command/ErrorFormatter/RawErrorFormatter.php:28:					$fileSpecificError->getLine() !== null ? $fileSpecificError->getLine() : '?',
vendor/phpstan/phpstan/src/Command/ErrorFormatter/RawErrorFormatter.php:29:					$fileSpecificError->getMessage()
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:24:		if (!$analysisResult->hasErrors()) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:31:		foreach ($analysisResult->getFileSpecificErrors() as $fileSpecificError) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:32:			$out .= '<file name="' . $this->escape($fileSpecificError->getFile()) . '">' . "\n";
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:35:			$out .= ' line="' . $this->escape((string) $fileSpecificError->getLine()) . '"';
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:38:			$out .= ' message="' . $this->escape($fileSpecificError->getMessage()) . '"';
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:43:		$style->write('<?xml version="1.0" encoding="UTF-8"?>' . "\n");
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:44:		$style->write('<checkstyle>' . "\n");
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:46:			$style->write($out);
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:48:		$style->write('</checkstyle>' . "\n");
vendor/phpstan/phpstan/src/Command/ErrorFormatter/CheckstyleErrorFormatter.php:61:		return htmlspecialchars($string, ENT_XML1 | ENT_COMPAT, 'UTF-8');
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:16:		if (!$analysisResult->hasErrors()) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:17:			$style->success('No errors');
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:18:			if ($analysisResult->isDefaultLevelUsed()) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:19:				$style->note(sprintf(
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:20:					'PHPStan is performing only the most basic checks. You can pass a higher rule level through the --%s option (the default and current level is %d) to analyse code more thoroughly.',
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:28:		$currentDirectory = $analysisResult->getCurrentDirectory();
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:39:		foreach ($analysisResult->getFileSpecificErrors() as $fileSpecificError) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:40:			if (!isset($fileErrors[$fileSpecificError->getFile()])) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:41:				$fileErrors[$fileSpecificError->getFile()] = [];
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:44:			$fileErrors[$fileSpecificError->getFile()][] = $fileSpecificError;
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:51:					(string) $error->getLine(),
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:52:					$error->getMessage(),
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:56:			$style->table(['Line', $cropFilename($file)], $rows);
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:59:		if (count($analysisResult->getNotFileSpecificErrors()) > 0) {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:60:			$style->table(['Error'], array_map(function (string $error): array {
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:62:			}, $analysisResult->getNotFileSpecificErrors()));
vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php:65:		$style->error(sprintf($analysisResult->getTotalErrorsCount() === 1 ? 'Found %d error' : 'Found %d errors', $analysisResult->getTotalErrorsCount()));
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:41:		$this->fileSpecificErrors = $fileSpecificErrors;
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:42:		$this->notFileSpecificErrors = $notFileSpecificErrors;
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:43:		$this->defaultLevelUsed = $defaultLevelUsed;
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:44:		$this->currentDirectory = $currentDirectory;
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:49:		return $this->getTotalErrorsCount() > 0;
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:54:		return count($this->fileSpecificErrors) + count($this->notFileSpecificErrors);
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:62:		return $this->fileSpecificErrors;
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:70:		return $this->notFileSpecificErrors;
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:75:		return $this->defaultLevelUsed;
vendor/phpstan/phpstan/src/Command/AnalysisResult.php:80:		return $this->currentDirectory;
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:45:		$this->analyser = $analyser;
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:46:		$this->memoryLimitFile = $memoryLimitFile;
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:47:		$this->fileExtensions = $fileExtensions;
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:48:		$this->fileHelper = $fileHelper;
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:49:		$this->fileExcluder = $fileExcluder;
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:71:		$this->updateMemoryLimitFile();
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:74:			return $this->fileHelper->absolutizePath($path);
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:82:				$files[] = $this->fileHelper->normalizePath($path);
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:85:				$finder->followLinks();
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:86:				foreach ($finder->files()->name('*.{' . implode(',', $this->fileExtensions) . '}')->in($path) as $fileInfo) {
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:87:					$files[] = $this->fileHelper->normalizePath($fileInfo->getPathname());
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:94:			return !$this->fileExcluder->isExcludedFromAnalysing($file);
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:97:		$this->updateMemoryLimitFile();
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:105:					$style->progressStart(count($files));
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:108:				$style->progressAdvance();
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:110:					$this->updateMemoryLimitFile();
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:116:				$style->writeln($file);
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:121:		$errors = array_merge($errors, $this->analyser->analyse(
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:130:			$style->progressFinish();
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:145:		return $errorFormatter->formatErrors(
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:150:				$this->fileHelper->normalizePath(dirname($paths[0]))
vendor/phpstan/phpstan/src/Command/AnalyseApplication.php:160:		file_put_contents($this->memoryLimitFile, sprintf('%d MB', $megabytes));
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:12:	const OPTION_NO_PROGRESS = 'no-progress';
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:26:		$this->showProgress = $input->hasOption(self::OPTION_NO_PROGRESS) && !((bool) $input->getOption(self::OPTION_NO_PROGRESS));
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:27:		$this->output = $output;
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:32:		$terminalWidth = (new \Symfony\Component\Console\Terminal())->getWidth();
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:47:							$terminalWidth - $maxHeaderWidth - 5,
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:67:		$this->progressBar = parent::createProgressBar($max);
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:68:		return $this->progressBar;
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:77:		if (!$this->showProgress) {
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:89:		if (!$this->showProgress) {
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:92:		if ($this->output->isDecorated() && $step > 0) {
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:93:			$stepTime = (time() - $this->progressBar->getStartTime()) / $step;
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:95:				$this->progressBar->setRedrawFrequency(1 / $stepTime);
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:97:				$this->progressBar->setRedrawFrequency(1);
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:101:		$this->progressBar->setProgress($this->progressBar->getProgress() + $step);
vendor/phpstan/phpstan/src/Command/ErrorsConsoleStyle.php:106:		if (!$this->showProgress) {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:29:		$this->setName(self::NAME)
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:30:			->setDescription('Analyses source code')
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:31:			->setDefinition([
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:34:				new InputOption(self::OPTION_LEVEL, 'l', InputOption::VALUE_REQUIRED, 'Level of rule options - the higher the stricter'),
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:36:				new InputOption('debug', null, InputOption::VALUE_NONE, 'Show debug information - which file is analysed, do not catch internal errors'),
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:37:				new InputOption('autoload-file', 'a', InputOption::VALUE_REQUIRED, 'Project\'s additional autoload file path'),
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:39:				new InputOption('memory-limit', null, InputOption::VALUE_REQUIRED, 'Memory limit for analysis'),
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:53:		$memoryLimit = $input->getOption('memory-limit');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:55:			if (!preg_match('#^-?\d+[kMG]?$#i', $memoryLimit)) {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:56:				$consoleStyle->error(sprintf('Invalid memory limit format "%s".', $memoryLimit));
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:60:				$consoleStyle->error(sprintf('Memory limit "%s" cannot be set.', $memoryLimit));
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:68:		$autoloadFile = $input->getOption('autoload-file');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:70:			$autoloadFile = $fileHelper->normalizePath($autoloadFile);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:76:		$projectConfigFile = $input->getOption('configuration');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:77:		$levelOption = $input->getOption(self::OPTION_LEVEL);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:88:			$levelConfigFile = sprintf('%s/config.level%s.neon', $containerFactory->getConfigDirectory(), $levelOption);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:90:				$output->writeln(sprintf('Level config file %s was not found.', $levelConfigFile));
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:99:				$output->writeln(sprintf('Project config file at path %s does not exist.', $projectConfigFile));
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:106:			$projectConfig = $loader->load($projectConfigFile, null);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:109:					'rootDir' => $containerFactory->getRootDirectory(),
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:110:					'currentWorkingDirectory' => $containerFactory->getCurrentWorkingDirectory(),
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:118:				$consoleStyle->error(sprintf('Cannot create a temp directory %s', $tmpDir));
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:123:		$container = $containerFactory->create($tmpDir, $additionalConfigFiles);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:124:		$memoryLimitFile = $container->parameters['memoryLimitFile'];
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:126:			$consoleStyle->note(sprintf(
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:127:				"PHPStan crashed in the previous run probably because of excessive memory consumption.\nIt consumed around %s of memory.\n\nTo avoid this issue, allow to use more memory with the --memory-limit option.",
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:133:			$consoleStyle->note(
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:134:				'You\'re running PHP >= 7.1, but you still have PHP-Parser version 2.x. This will lead to parse errors in case you use PHP 7.1 syntax like nullable parameters, iterable and void typehints, union exception types, or class constant visibility. Update to PHP-Parser 3.x to dismiss this message.'
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:137:		$errorFormat = $input->getOption('errorFormat');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:139:		if (!$container->hasService($errorFormatterServiceName)) {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:140:			$consoleStyle->error(sprintf(
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:145:				}, $container->findByType(ErrorFormatter::class)))
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:150:		$errorFormatter = $container->getService($errorFormatterServiceName);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:151:		$this->setUpSignalHandler($consoleStyle, $memoryLimitFile);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:152:		if (!isset($container->parameters['customRulesetUsed'])) {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:153:			$output->writeln('');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:154:			$output->writeln('<comment>No rules detected</comment>');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:155:			$output->writeln('');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:156:			$output->writeln('You have the following choices:');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:157:			$output->writeln('');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:158:			$output->writeln('* while running the analyse option, use the <info>--level</info> option to adjust your rule level - the higher the stricter');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:159:			$output->writeln('');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:160:			$output->writeln(sprintf('* create your own <info>custom ruleset</info> by selecting which rules you want to check by copying the service definitions from the built-in config level files in <options=bold>%s</>.', $fileHelper->normalizePath(__DIR__ . '/../../conf')));
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:161:			$output->writeln('  * in this case, don\'t forget to define parameter <options=bold>customRulesetUsed</> in your config file.');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:162:			$output->writeln('');
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:164:		} elseif ($container->parameters['customRulesetUsed']) {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:168:		foreach ($container->parameters['autoload_files'] as $autoloadFile) {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:169:			require_once $fileHelper->normalizePath($autoloadFile);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:172:		if (count($container->parameters['autoload_directories']) > 0) {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:174:			$robotLoader->acceptFiles = array_map(function (string $extension): string {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:176:			}, $container->parameters['fileExtensions']);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:178:			$robotLoader->setTempDirectory($tmpDir);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:179:			foreach ($container->parameters['autoload_directories'] as $directory) {
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:180:				$robotLoader->addDirectory($fileHelper->normalizePath($directory));
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:183:			$robotLoader->register();
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:186:		TypeCombinator::setUnionTypesEnabled($container->parameters['checkUnionTypes']);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:189:		$application = $container->getByType(AnalyseApplication::class);
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:190:		return $this->handleReturn(
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:191:			$application->analyse(
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:192:				$input->getArgument('paths'),
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:196:				$input->getOption('debug')
vendor/phpstan/phpstan/src/Command/AnalyseCommand.php:215:				$consoleStyle->newLine();
vendor/phpstan/phpstan/src/Broker/FunctionNotFoundException.php:13:		parent::__construct(sprintf('Function %s not found while trying to analyse it - autoloading is probably not configured properly.', $functionName));
vendor/phpstan/phpstan/src/Broker/FunctionNotFoundException.php:14:		$this->functionName = $functionName;
vendor/phpstan/phpstan/src/Broker/FunctionNotFoundException.php:19:		return $this->functionName;
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:26:		$this->container = $container;
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:33:				return $this->container->getService($serviceName);
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:37:		$phpClassReflectionExtension = $this->container->getByType(PhpClassReflectionExtension::class);
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:38:		$annotationsMethodsClassReflectionExtension = $this->container->getByType(AnnotationsMethodsClassReflectionExtension::class);
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:39:		$annotationsPropertiesClassReflectionExtension = $this->container->getByType(AnnotationsPropertiesClassReflectionExtension::class);
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:40:		$phpDefectClassReflectionExtension = $this->container->getByType(PhpDefectClassReflectionExtension::class);
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:43:			array_merge([$phpClassReflectionExtension, $phpDefectClassReflectionExtension], $tagToService($this->container->findByTag(self::PROPERTIES_CLASS_REFLECTION_EXTENSION_TAG)), [$annotationsPropertiesClassReflectionExtension]),
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:44:			array_merge([$phpClassReflectionExtension], $tagToService($this->container->findByTag(self::METHODS_CLASS_REFLECTION_EXTENSION_TAG)), [$annotationsMethodsClassReflectionExtension]),
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:45:			$tagToService($this->container->findByTag(self::DYNAMIC_METHOD_RETURN_TYPE_EXTENSION_TAG)),
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:46:			$tagToService($this->container->findByTag(self::DYNAMIC_STATIC_METHOD_RETURN_TYPE_EXTENSION_TAG)),
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:47:			$tagToService($this->container->findByTag(self::DYNAMIC_FUNCTION_RETURN_TYPE_EXTENSION_TAG)),
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:48:			$this->container->getByType(FunctionReflectionFactory::class),
vendor/phpstan/phpstan/src/Broker/BrokerFactory.php:49:			$this->container->getByType(FileTypeMapper::class)
vendor/phpstan/phpstan/src/Broker/ClassAutoloadingException.php:20:				$previous->getMessage(),
vendor/phpstan/phpstan/src/Broker/ClassAutoloadingException.php:30:		$this->className = $functionName;
vendor/phpstan/phpstan/src/Broker/ClassAutoloadingException.php:35:		return $this->className;
vendor/phpstan/phpstan/src/Broker/Broker.php:75:		$this->propertiesClassReflectionExtensions = $propertiesClassReflectionExtensions;
vendor/phpstan/phpstan/src/Broker/Broker.php:76:		$this->methodsClassReflectionExtensions = $methodsClassReflectionExtensions;
vendor/phpstan/phpstan/src/Broker/Broker.php:79:				$extension->setBroker($this);
vendor/phpstan/phpstan/src/Broker/Broker.php:83:		$this->dynamicMethodReturnTypeExtensions = $dynamicMethodReturnTypeExtensions;
vendor/phpstan/phpstan/src/Broker/Broker.php:84:		$this->dynamicStaticMethodReturnTypeExtensions = $dynamicStaticMethodReturnTypeExtensions;
vendor/phpstan/phpstan/src/Broker/Broker.php:87:			$this->dynamicFunctionReturnTypeExtensions[] = $functionReturnTypeExtension;
vendor/phpstan/phpstan/src/Broker/Broker.php:90:		$this->functionReflectionFactory = $functionReflectionFactory;
vendor/phpstan/phpstan/src/Broker/Broker.php:91:		$this->fileTypeMapper = $fileTypeMapper;
vendor/phpstan/phpstan/src/Broker/Broker.php:110:		if ($this->dynamicMethodReturnTypeExtensionsByClass === null) {
vendor/phpstan/phpstan/src/Broker/Broker.php:112:			foreach ($this->dynamicMethodReturnTypeExtensions as $extension) {
vendor/phpstan/phpstan/src/Broker/Broker.php:113:				$byClass[$extension->getClass()][] = $extension;
vendor/phpstan/phpstan/src/Broker/Broker.php:116:			$this->dynamicMethodReturnTypeExtensionsByClass = $byClass;
vendor/phpstan/phpstan/src/Broker/Broker.php:118:		return $this->getDynamicExtensionsForType($this->dynamicMethodReturnTypeExtensionsByClass, $className);
vendor/phpstan/phpstan/src/Broker/Broker.php:127:		if ($this->dynamicStaticMethodReturnTypeExtensionsByClass === null) {
vendor/phpstan/phpstan/src/Broker/Broker.php:129:			foreach ($this->dynamicStaticMethodReturnTypeExtensions as $extension) {
vendor/phpstan/phpstan/src/Broker/Broker.php:130:				$byClass[$extension->getClass()][] = $extension;
vendor/phpstan/phpstan/src/Broker/Broker.php:133:			$this->dynamicStaticMethodReturnTypeExtensionsByClass = $byClass;
vendor/phpstan/phpstan/src/Broker/Broker.php:135:		return $this->getDynamicExtensionsForType($this->dynamicStaticMethodReturnTypeExtensionsByClass, $className);
vendor/phpstan/phpstan/src/Broker/Broker.php:143:		return $this->dynamicFunctionReturnTypeExtensions;
vendor/phpstan/phpstan/src/Broker/Broker.php:154:		$class = $this->getClass($className);
vendor/phpstan/phpstan/src/Broker/Broker.php:155:		foreach (array_merge([$className], $class->getParentClassesNames(), $class->getNativeReflection()->getInterfaceNames()) as $extensionClassName) {
vendor/phpstan/phpstan/src/Broker/Broker.php:168:		if (!$this->hasClass($className)) {
vendor/phpstan/phpstan/src/Broker/Broker.php:172:		if (!isset($this->classReflections[$className])) {
vendor/phpstan/phpstan/src/Broker/Broker.php:174:			$classReflection = $this->getClassFromReflection(
vendor/phpstan/phpstan/src/Broker/Broker.php:176:				$reflectionClass->getName(),
vendor/phpstan/phpstan/src/Broker/Broker.php:177:				$reflectionClass->isAnonymous()
vendor/phpstan/phpstan/src/Broker/Broker.php:179:			$this->classReflections[$className] = $classReflection;
vendor/phpstan/phpstan/src/Broker/Broker.php:180:			if ($className !== $reflectionClass->getName()) {
vendor/phpstan/phpstan/src/Broker/Broker.php:182:				$this->classReflections[$reflectionClass->getName()] = $classReflection;
vendor/phpstan/phpstan/src/Broker/Broker.php:186:		return $this->classReflections[$className];
vendor/phpstan/phpstan/src/Broker/Broker.php:191:		$className = $reflectionClass->getName();
vendor/phpstan/phpstan/src/Broker/Broker.php:192:		if (!isset($this->classReflections[$className])) {
vendor/phpstan/phpstan/src/Broker/Broker.php:195:				$this->propertiesClassReflectionExtensions,
vendor/phpstan/phpstan/src/Broker/Broker.php:196:				$this->methodsClassReflectionExtensions,
vendor/phpstan/phpstan/src/Broker/Broker.php:201:			$this->classReflections[$className] = $classReflection;
vendor/phpstan/phpstan/src/Broker/Broker.php:204:		return $this->classReflections[$className];
vendor/phpstan/phpstan/src/Broker/Broker.php:209:		if (isset($this->hasClassCache[$className])) {
vendor/phpstan/phpstan/src/Broker/Broker.php:210:			return $this->hasClassCache[$className];
vendor/phpstan/phpstan/src/Broker/Broker.php:214:			if ($autoloadedClassName !== $className && !$this->isExistsCheckCall()) {
vendor/phpstan/phpstan/src/Broker/Broker.php:220:			return $this->hasClassCache[$className] = class_exists($className) || interface_exists($className) || trait_exists($className);
vendor/phpstan/phpstan/src/Broker/Broker.php:235:		$functionName = $this->resolveFunctionName($nameNode, $scope);
vendor/phpstan/phpstan/src/Broker/Broker.php:241:		if (!isset($this->functionReflections[$lowerCasedFunctionName])) {
vendor/phpstan/phpstan/src/Broker/Broker.php:245:			if ($reflectionFunction->getFileName() !== false && $reflectionFunction->getDocComment() !== false) {
vendor/phpstan/phpstan/src/Broker/Broker.php:246:				$fileName = $reflectionFunction->getFileName();
vendor/phpstan/phpstan/src/Broker/Broker.php:247:				$docComment = $reflectionFunction->getDocComment();
vendor/phpstan/phpstan/src/Broker/Broker.php:248:				$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc($fileName, null, $docComment);
vendor/phpstan/phpstan/src/Broker/Broker.php:249:				$phpDocParameterTags = $resolvedPhpDoc->getParamTags();
vendor/phpstan/phpstan/src/Broker/Broker.php:250:				$phpDocReturnTag = $resolvedPhpDoc->getReturnTag();
vendor/phpstan/phpstan/src/Broker/Broker.php:252:			$this->functionReflections[$lowerCasedFunctionName] = $this->functionReflectionFactory->create(
vendor/phpstan/phpstan/src/Broker/Broker.php:255:					return $paramTag->getType();
vendor/phpstan/phpstan/src/Broker/Broker.php:257:				$phpDocReturnTag !== null ? $phpDocReturnTag->getType() : null
vendor/phpstan/phpstan/src/Broker/Broker.php:261:		return $this->functionReflections[$lowerCasedFunctionName];
vendor/phpstan/phpstan/src/Broker/Broker.php:266:		return $this->resolveFunctionName($nameNode, $scope) !== null;
vendor/phpstan/phpstan/src/Broker/Broker.php:276:		return $this->resolveName($nameNode, function (string $name): bool {
vendor/phpstan/phpstan/src/Broker/Broker.php:283:		return $this->resolveConstantName($nameNode, $scope) !== null;
vendor/phpstan/phpstan/src/Broker/Broker.php:293:		return $this->resolveName($nameNode, function (string $name): bool {
vendor/phpstan/phpstan/src/Broker/Broker.php:311:		if ($scope !== null && $scope->getNamespace() !== null && !$nameNode->isFullyQualified()) {
vendor/phpstan/phpstan/src/Broker/Broker.php:312:			$namespacedName = sprintf('%s\\%s', $scope->getNamespace(), $name);
vendor/phpstan/phpstan/src/Broker/ClassNotFoundException.php:13:		parent::__construct(sprintf('Class %s was not found while trying to analyse it - autoloading is probably not configured properly.', $functionName));
vendor/phpstan/phpstan/src/Broker/ClassNotFoundException.php:14:		$this->className = $functionName;
vendor/phpstan/phpstan/src/Broker/ClassNotFoundException.php:19:		return $this->className;
vendor/phpstan/phpstan/src/TrinaryLogic.php:6: * @see https://en.wikipedia.org/wiki/Three-valued_logic
vendor/phpstan/phpstan/src/TrinaryLogic.php:13:	const NO = -1;
vendor/phpstan/phpstan/src/TrinaryLogic.php:22:		$this->value = $value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:42:		return $this->value === self::YES;
vendor/phpstan/phpstan/src/TrinaryLogic.php:47:		return $this->value === self::MAYBE;
vendor/phpstan/phpstan/src/TrinaryLogic.php:52:		return $this->value === self::NO;
vendor/phpstan/phpstan/src/TrinaryLogic.php:58:			return $trinaryLogic->value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:60:		$operandValues[] = $this->value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:67:			return $trinaryLogic->value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:69:		$operandValues[] = $this->value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:76:			return $trinaryLogic->value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:87:			return $trinaryLogic->value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:95:		return new self(-$this->value);
vendor/phpstan/phpstan/src/TrinaryLogic.php:100:		return $this->value === $other->value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:105:		$value = $this->value;
vendor/phpstan/phpstan/src/TrinaryLogic.php:121:		return $labels[$this->value];
vendor/phpstan/phpstan/src/PhpDoc/TypeStringResolver.php:25:		$this->typeLexer = $typeLexer;
vendor/phpstan/phpstan/src/PhpDoc/TypeStringResolver.php:26:		$this->typeParser = $typeParser;
vendor/phpstan/phpstan/src/PhpDoc/TypeStringResolver.php:27:		$this->typeNodeResolver = $typeNodeResolver;
vendor/phpstan/phpstan/src/PhpDoc/TypeStringResolver.php:32:		$tokens = new TokenIterator($this->typeLexer->tokenize($typeString));
vendor/phpstan/phpstan/src/PhpDoc/TypeStringResolver.php:33:		$typeNode = $this->typeParser->parse($tokens);
vendor/phpstan/phpstan/src/PhpDoc/TypeStringResolver.php:34:		$tokens->consumeTokenType(Lexer::TOKEN_END);
vendor/phpstan/phpstan/src/PhpDoc/TypeStringResolver.php:36:		return $this->typeNodeResolver->resolve($typeNode, $nameScope ?? new NameScope(null, []));
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:26:		$this->docComment = $docComment;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:27:		$this->file = $file;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:28:		$this->class = $class;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:33:		return $this->docComment;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:38:		return $this->file;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:43:		return $this->class;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:99:			&& $broker->hasClass($class)
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:101:			$classReflection = $broker->getClass($class);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:102:			if ($classReflection->getParentClass() !== false) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:103:				$parentClassReflection = $classReflection->getParentClass();
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:117:			foreach ($classReflection->getInterfaces() as $interface) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:153:		if ($classReflection->getFileName() !== false && $classReflection->$hasMethodName($name)) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:155:			$parentReflection = $classReflection->$getMethodName($name);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:156:			if ($parentReflection->getDocComment() !== false) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:159:					$parentReflection->getDocComment(),
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:160:					$classReflection->getName(),
vendor/phpstan/phpstan/src/PhpDoc/PhpDocBlock.php:162:					$classReflection->getFileName()
vendor/phpstan/phpstan/src/PhpDoc/PhpDocStringResolver.php:24:		$this->phpDocNodeResolver = $phpDocNodeResolver;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocStringResolver.php:25:		$this->phpDocLexer = $phpDocLexer;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocStringResolver.php:26:		$this->phpDocParser = $phpDocParser;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocStringResolver.php:31:		$tokens = new TokenIterator($this->phpDocLexer->tokenize($phpDocString));
vendor/phpstan/phpstan/src/PhpDoc/PhpDocStringResolver.php:32:		$phpDocNode = $this->phpDocParser->parse($tokens);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocStringResolver.php:33:		$tokens->consumeTokenType(Lexer::TOKEN_END);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocStringResolver.php:35:		return $this->phpDocNodeResolver->resolve($phpDocNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTagParameter.php:29:		$this->type = $type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTagParameter.php:30:		$this->isPassedByReference = $isPassedByReference;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTagParameter.php:31:		$this->isOptional = $isOptional;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTagParameter.php:32:		$this->isVariadic = $isVariadic;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTagParameter.php:37:		return $this->type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTagParameter.php:42:		return $this->isPassedByReference;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTagParameter.php:47:		return $this->isOptional;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTagParameter.php:52:		return $this->isVariadic;
vendor/phpstan/phpstan/src/PhpDoc/Tag/ReturnTag.php:15:		$this->type = $type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/ReturnTag.php:20:		return $this->type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTag.php:30:		$this->returnType = $returnType;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTag.php:31:		$this->isStatic = $isStatic;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTag.php:32:		$this->parameters = $parameters;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTag.php:37:		return $this->returnType;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTag.php:42:		return $this->isStatic;
vendor/phpstan/phpstan/src/PhpDoc/Tag/MethodTag.php:50:		return $this->parameters;
vendor/phpstan/phpstan/src/PhpDoc/Tag/ParamTag.php:18:		$this->type = $type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/ParamTag.php:19:		$this->isVariadic = $isVariadic;
vendor/phpstan/phpstan/src/PhpDoc/Tag/ParamTag.php:24:		return $this->type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/ParamTag.php:29:		return $this->isVariadic;
vendor/phpstan/phpstan/src/PhpDoc/Tag/PropertyTag.php:25:		$this->type = $type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/PropertyTag.php:26:		$this->readable = $readable;
vendor/phpstan/phpstan/src/PhpDoc/Tag/PropertyTag.php:27:		$this->writable = $writable;
vendor/phpstan/phpstan/src/PhpDoc/Tag/PropertyTag.php:32:		return $this->type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/PropertyTag.php:37:		return $this->readable;
vendor/phpstan/phpstan/src/PhpDoc/Tag/PropertyTag.php:42:		return $this->writable;
vendor/phpstan/phpstan/src/PhpDoc/Tag/VarTag.php:15:		$this->type = $type;
vendor/phpstan/phpstan/src/PhpDoc/Tag/VarTag.php:20:		return $this->type;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:50:		$this->varTags = $varTags;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:51:		$this->methodTags = $methodTags;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:52:		$this->propertyTags = $propertyTags;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:53:		$this->paramTags = $paramTags;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:54:		$this->returnTag = $returnTag;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:62:		return $this->varTags;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:70:		return $this->methodTags;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:78:		return $this->propertyTags;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:86:		return $this->paramTags;
vendor/phpstan/phpstan/src/PhpDoc/ResolvedPhpDocBlock.php:94:		return $this->returnTag;
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:46:			return $this->resolveIdentifierTypeNode($typeNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:49:			return $this->resolveThisTypeNode($typeNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:52:			return $this->resolveNullableTypeNode($typeNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:55:			return $this->resolveUnionTypeNode($typeNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:58:			return $this->resolveIntersectionTypeNode($typeNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:61:			return $this->resolveArrayTypeNode($typeNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:64:			return $this->resolveGenericTypeNode($typeNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:72:		switch (strtolower($typeNode->name)) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:133:		if ($nameScope->getClassName() !== null) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:134:			switch (strtolower($typeNode->name)) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:136:					return new ObjectType($nameScope->getClassName());
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:139:					return new StaticType($nameScope->getClassName());
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:143:					if ($broker->hasClass($nameScope->getClassName())) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:144:						$classReflection = $broker->getClass($nameScope->getClassName());
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:145:						if ($classReflection->getParentClass() !== false) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:146:							return new ObjectType($classReflection->getParentClass()->getName());
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:154:		return new ObjectType($nameScope->resolveStringName($typeNode->name));
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:159:		if ($nameScope->getClassName() !== null) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:160:			return new ThisType($nameScope->getClassName());
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:168:		return TypeCombinator::addNull($this->resolve($typeNode->type, $nameScope));
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:176:		foreach ($typeNode->types as $innerTypeNode) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:178:				$iterableTypeNodes[] = $innerTypeNode->type;
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:184:		$otherTypeTypes = $this->resolveMultiple($otherTypeNodes, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:193:				if ($otherType instanceof TypeWithClassName && isset($mockClassNames[$otherType->getClassName()])) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:200:			$arrayTypeTypes = $this->resolveMultiple($iterableTypeNodes, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:205:				if ($type->isIterable()->yes() && $type->getIterableValueType()->isSuperTypeOf($arrayTypeType)->yes()) {
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:230:		$types = $this->resolveMultiple($typeNode->types, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:236:		$itemType = $this->resolve($typeNode->type, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:242:		$mainType = strtolower($typeNode->type->name);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:243:		$genericTypes = $this->resolveMultiple($typeNode->genericTypes, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/TypeNodeResolver.php:274:			$types[] = $this->resolve($typeNode, $nameScope);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:27:		$this->typeNodeResolver = $typeNodeResolver;
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:33:			$this->resolveVarTags($phpDocNode, $nameScope),
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:34:			$this->resolveMethodTags($phpDocNode, $nameScope),
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:35:			$this->resolvePropertyTags($phpDocNode, $nameScope),
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:36:			$this->resolveParamTags($phpDocNode, $nameScope),
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:37:			$this->resolveReturnTag($phpDocNode, $nameScope)
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:49:		foreach ($phpDocNode->getVarTagValues() as $tagValue) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:50:			if ($tagValue->variableName !== '') {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:51:				$variableName = substr($tagValue->variableName, 1);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:53:					? $this->typeNodeResolver->resolve($tagValue->type, $nameScope)
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:58:				$resolved[] = new VarTag($this->typeNodeResolver->resolve($tagValue->type, $nameScope));
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:74:		foreach ($phpDocNode->getPropertyTagValues() as $tagValue) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:75:			$propertyName = substr($tagValue->propertyName, 1);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:77:				? $this->typeNodeResolver->resolve($tagValue->type, $nameScope)
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:87:		foreach ($phpDocNode->getPropertyReadTagValues() as $tagValue) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:88:			$propertyName = substr($tagValue->propertyName, 1);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:90:				? $this->typeNodeResolver->resolve($tagValue->type, $nameScope)
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:100:		foreach ($phpDocNode->getPropertyWriteTagValues() as $tagValue) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:101:			$propertyName = substr($tagValue->propertyName, 1);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:103:				? $this->typeNodeResolver->resolve($tagValue->type, $nameScope)
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:125:		foreach ($phpDocNode->getMethodTagValues() as $tagValue) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:127:			foreach ($tagValue->parameters as $parameterNode) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:128:				$parameterName = substr($parameterNode->parameterName, 1);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:129:				$type = $parameterNode->type !== null ? $this->typeNodeResolver->resolve($parameterNode->type, $nameScope) : new MixedType();
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:130:				if ($parameterNode->defaultValue instanceof ConstExprNullNode) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:135:					$parameterNode->isReference,
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:136:					$parameterNode->defaultValue !== null,
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:137:					$parameterNode->isVariadic
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:141:			$resolved[$tagValue->methodName] = new MethodTag(
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:142:				$tagValue->returnType !== null ? $this->typeNodeResolver->resolve($tagValue->returnType, $nameScope) : new MixedType(),
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:143:				$tagValue->isStatic,
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:159:		foreach ($phpDocNode->getParamTagValues() as $tagValue) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:160:			$parameterName = substr($tagValue->parameterName, 1);
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:162:				? $this->typeNodeResolver->resolve($tagValue->type, $nameScope)
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:165:			if ($tagValue->isVariadic) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:169:				} elseif ($parameterType->getIterableKeyType() instanceof MixedType) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:170:					$parameterType = new ArrayType(new IntegerType(), $parameterType->getItemType());
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:176:				$tagValue->isVariadic
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:190:		foreach ($phpDocNode->getReturnTagValues() as $tagValue) {
vendor/phpstan/phpstan/src/PhpDoc/PhpDocNodeResolver.php:191:			return new ReturnTag($this->typeNodeResolver->resolve($tagValue->type, $nameScope));
vendor/phpstan/phpstan/.editorconfig:6:charset = utf-8
vendor/phpstan/phpstan/conf/config.level2.neon:2:	- config.level1.neon
vendor/phpstan/phpstan/conf/config.level2.neon:9:	-
vendor/phpstan/phpstan/conf/config.level2.neon:12:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level2.neon:14:	-
vendor/phpstan/phpstan/conf/config.level2.neon:17:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level6.neon:2:	- config.level5.neon
vendor/phpstan/phpstan/conf/config.levelmax.neon:2:	- config.level7.neon
vendor/phpstan/phpstan/conf/config.level5.neon:2:	- config.level4.neon
vendor/phpstan/phpstan/conf/config.level5.neon:9:	-
vendor/phpstan/phpstan/conf/config.level5.neon:12:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.neon:7:		- php
vendor/phpstan/phpstan/conf/config.neon:23:		- stdClass
vendor/phpstan/phpstan/conf/config.neon:24:		- SimpleXMLElement
vendor/phpstan/phpstan/conf/config.neon:29:	-
vendor/phpstan/phpstan/conf/config.neon:32:	-
vendor/phpstan/phpstan/conf/config.neon:35:	-
vendor/phpstan/phpstan/conf/config.neon:38:			- addVisitor(@PhpParser\NodeVisitor\NameResolver)
vendor/phpstan/phpstan/conf/config.neon:40:	-
vendor/phpstan/phpstan/conf/config.neon:43:	-
vendor/phpstan/phpstan/conf/config.neon:46:	-
vendor/phpstan/phpstan/conf/config.neon:49:	-
vendor/phpstan/phpstan/conf/config.neon:52:	-
vendor/phpstan/phpstan/conf/config.neon:55:	-
vendor/phpstan/phpstan/conf/config.neon:58:	-
vendor/phpstan/phpstan/conf/config.neon:61:	-
vendor/phpstan/phpstan/conf/config.neon:64:	-
vendor/phpstan/phpstan/conf/config.neon:67:	-
vendor/phpstan/phpstan/conf/config.neon:70:	-
vendor/phpstan/phpstan/conf/config.neon:73:	-
vendor/phpstan/phpstan/conf/config.neon:81:	-
vendor/phpstan/phpstan/conf/config.neon:88:	-
vendor/phpstan/phpstan/conf/config.neon:91:	-
vendor/phpstan/phpstan/conf/config.neon:96:	-
vendor/phpstan/phpstan/conf/config.neon:102:	-
vendor/phpstan/phpstan/conf/config.neon:107:	-
vendor/phpstan/phpstan/conf/config.neon:112:	-
vendor/phpstan/phpstan/conf/config.neon:117:	-
vendor/phpstan/phpstan/conf/config.neon:120:	-
vendor/phpstan/phpstan/conf/config.neon:123:	-
vendor/phpstan/phpstan/conf/config.neon:126:	-
vendor/phpstan/phpstan/conf/config.neon:129:	-
vendor/phpstan/phpstan/conf/config.neon:132:	-
vendor/phpstan/phpstan/conf/config.neon:135:	-
vendor/phpstan/phpstan/conf/config.neon:138:	-
vendor/phpstan/phpstan/conf/config.neon:141:			- phpstan.broker.propertiesClassReflectionExtension
vendor/phpstan/phpstan/conf/config.neon:145:	-
vendor/phpstan/phpstan/conf/config.neon:148:	-
vendor/phpstan/phpstan/conf/config.neon:154:	-
vendor/phpstan/phpstan/conf/config.neon:160:	-
vendor/phpstan/phpstan/conf/config.neon:163:	-
vendor/phpstan/phpstan/conf/config.neon:166:	-
vendor/phpstan/phpstan/conf/config.neon:169:	-
vendor/phpstan/phpstan/conf/config.neon:172:	-
vendor/phpstan/phpstan/conf/config.neon:179:	-
vendor/phpstan/phpstan/conf/config.neon:182:	-
vendor/phpstan/phpstan/conf/config.neon:185:	-
vendor/phpstan/phpstan/conf/config.neon:188:			- phpstan.broker.dynamicFunctionReturnTypeExtension
vendor/phpstan/phpstan/conf/config.neon:190:	-
vendor/phpstan/phpstan/conf/config.neon:193:			- phpstan.broker.dynamicFunctionReturnTypeExtension
vendor/phpstan/phpstan/conf/config.neon:195:	-
vendor/phpstan/phpstan/conf/config.neon:198:			- phpstan.broker.dynamicFunctionReturnTypeExtension
vendor/phpstan/phpstan/conf/config.neon:200:	-
vendor/phpstan/phpstan/conf/config.neon:203:			- phpstan.broker.dynamicFunctionReturnTypeExtension
vendor/phpstan/phpstan/conf/config.neon:205:	-
vendor/phpstan/phpstan/conf/config.neon:208:			- phpstan.broker.dynamicFunctionReturnTypeExtension
vendor/phpstan/phpstan/conf/config.neon:210:	-
vendor/phpstan/phpstan/conf/config.neon:213:			- phpstan.broker.dynamicFunctionReturnTypeExtension
vendor/phpstan/phpstan/conf/config.level1.neon:2:	- config.level0.neon
vendor/phpstan/phpstan/conf/config.level1.neon:8:	-
vendor/phpstan/phpstan/conf/config.level1.neon:11:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level1.neon:13:	-
vendor/phpstan/phpstan/conf/config.level1.neon:16:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:5:	-
vendor/phpstan/phpstan/conf/config.level0.neon:8:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:10:	-
vendor/phpstan/phpstan/conf/config.level0.neon:13:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:15:	-
vendor/phpstan/phpstan/conf/config.level0.neon:18:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:22:	-
vendor/phpstan/phpstan/conf/config.level0.neon:25:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:27:	-
vendor/phpstan/phpstan/conf/config.level0.neon:30:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:32:	-
vendor/phpstan/phpstan/conf/config.level0.neon:35:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:37:	-
vendor/phpstan/phpstan/conf/config.level0.neon:40:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:42:	-
vendor/phpstan/phpstan/conf/config.level0.neon:45:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:47:	-
vendor/phpstan/phpstan/conf/config.level0.neon:50:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:52:	-
vendor/phpstan/phpstan/conf/config.level0.neon:55:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:57:	-
vendor/phpstan/phpstan/conf/config.level0.neon:60:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:62:	-
vendor/phpstan/phpstan/conf/config.level0.neon:65:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:67:	-
vendor/phpstan/phpstan/conf/config.level0.neon:70:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:72:	-
vendor/phpstan/phpstan/conf/config.level0.neon:75:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:77:	-
vendor/phpstan/phpstan/conf/config.level0.neon:80:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:82:	-
vendor/phpstan/phpstan/conf/config.level0.neon:85:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:87:	-
vendor/phpstan/phpstan/conf/config.level0.neon:90:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:92:	-
vendor/phpstan/phpstan/conf/config.level0.neon:95:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:97:	-
vendor/phpstan/phpstan/conf/config.level0.neon:100:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:102:	-
vendor/phpstan/phpstan/conf/config.level0.neon:105:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:107:	-
vendor/phpstan/phpstan/conf/config.level0.neon:110:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:112:	-
vendor/phpstan/phpstan/conf/config.level0.neon:115:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:117:	-
vendor/phpstan/phpstan/conf/config.level0.neon:120:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:122:	-
vendor/phpstan/phpstan/conf/config.level0.neon:125:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:127:	-
vendor/phpstan/phpstan/conf/config.level0.neon:130:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:132:	-
vendor/phpstan/phpstan/conf/config.level0.neon:135:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:137:	-
vendor/phpstan/phpstan/conf/config.level0.neon:140:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:144:	-
vendor/phpstan/phpstan/conf/config.level0.neon:149:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:151:	-
vendor/phpstan/phpstan/conf/config.level0.neon:156:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:158:	-
vendor/phpstan/phpstan/conf/config.level0.neon:164:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:166:	-
vendor/phpstan/phpstan/conf/config.level0.neon:171:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level0.neon:173:	-
vendor/phpstan/phpstan/conf/config.level0.neon:176:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:2:	- config.level2.neon
vendor/phpstan/phpstan/conf/config.level3.neon:5:	-
vendor/phpstan/phpstan/conf/config.level3.neon:8:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:10:	-
vendor/phpstan/phpstan/conf/config.level3.neon:13:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:15:	-
vendor/phpstan/phpstan/conf/config.level3.neon:18:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:20:	-
vendor/phpstan/phpstan/conf/config.level3.neon:25:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:27:	-
vendor/phpstan/phpstan/conf/config.level3.neon:30:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:32:	-
vendor/phpstan/phpstan/conf/config.level3.neon:35:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:37:	-
vendor/phpstan/phpstan/conf/config.level3.neon:40:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:42:	-
vendor/phpstan/phpstan/conf/config.level3.neon:45:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:47:	-
vendor/phpstan/phpstan/conf/config.level3.neon:50:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level3.neon:52:	-
vendor/phpstan/phpstan/conf/config.level3.neon:57:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level4.neon:2:	- config.level3.neon
vendor/phpstan/phpstan/conf/config.level4.neon:5:	-
vendor/phpstan/phpstan/conf/config.level4.neon:8:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level4.neon:10:	-
vendor/phpstan/phpstan/conf/config.level4.neon:15:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level4.neon:17:	-
vendor/phpstan/phpstan/conf/config.level4.neon:22:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level4.neon:24:	-
vendor/phpstan/phpstan/conf/config.level4.neon:27:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level7.neon:2:	- config.level6.neon
vendor/phpstan/phpstan/conf/config.level7.neon:8:	-
vendor/phpstan/phpstan/conf/config.level7.neon:13:			- phpstan.rules.rule
vendor/phpstan/phpstan/conf/config.level7.neon:15:	-
vendor/phpstan/phpstan/conf/config.level7.neon:20:			- phpstan.rules.rule
vendor/phpstan/phpstan/.gitignore:1:/build/phpstan-generated.neon
vendor/phpstan/phpstan/.github/ISSUE_TEMPLATE.md:1:<!-- Before reporting an issue please check that you are using the latest PHPStan version! -->
vendor/phpstan/phpstan/.github/ISSUE_TEMPLATE.md:5:<!-- Please describe your problem/feature request here. -->
vendor/phpstan/phpstan/.github/ISSUE_TEMPLATE.md:10:<!-- Try to reproduce the issue you are facing using https://phpstan.org/ (click "Analyze & Store Result" to get a unique URL) -->
vendor/phpstan/phpstan/.github/ISSUE_TEMPLATE.md:15:<!-- Was the issue reported incorrectly? Or should PHPStan detect an issue with the code but doesn't? -->
vendor/phpstan/phpdoc-parser/composer.json:2:	"name": "phpstan/phpdoc-parser",
vendor/phpstan/phpdoc-parser/composer.json:5:	"minimum-stability": "dev",
vendor/phpstan/phpdoc-parser/composer.json:6:	"prefer-stable": true,
vendor/phpstan/phpdoc-parser/composer.json:10:	"require-dev": {
vendor/phpstan/phpdoc-parser/composer.json:11:		"consistence/coding-standard": "^2.0.0",
vendor/phpstan/phpdoc-parser/composer.json:12:		"jakub-onderka/php-parallel-lint": "^0.9.2",
vendor/phpstan/phpdoc-parser/composer.json:16:		"slevomat/coding-standard": "^3.3.0"
vendor/phpstan/phpdoc-parser/composer.json:19:		"psr-4": {"PHPStan\\PhpDocParser\\": ["src/"]}
vendor/phpstan/phpdoc-parser/composer.json:21:	"autoload-dev": {
vendor/phpstan/phpdoc-parser/composer.json:22:		"psr-4": {"PHPStan\\PhpDocParser\\": ["tests/PHPStan"]}
vendor/phpstan/phpdoc-parser/composer.json:25:		"branch-alias": {
vendor/phpstan/phpdoc-parser/composer.json:26:			"dev-master": "0.1-dev"
vendor/phpstan/phpdoc-parser/phpcs.xml:3:	<rule ref="vendor/consistence/coding-standard/Consistence/ruleset.xml">
vendor/phpstan/phpdoc-parser/phpcs.xml:7:	<rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml">
vendor/phpstan/phpdoc-parser/build.xml:1:<?xml version="1.0" encoding="utf-8"?>
vendor/phpstan/phpdoc-parser/build.xml:5:		composer-validate,
vendor/phpstan/phpdoc-parser/build.xml:6:		composer-install,
vendor/phpstan/phpdoc-parser/build.xml:13:	<target name="composer-validate">
vendor/phpstan/phpdoc-parser/build.xml:24:	<target name="composer-install">
vendor/phpstan/phpdoc-parser/build.xml:37:				executable="vendor/bin/parallel-lint"
vendor/phpstan/phpdoc-parser/build.xml:42:			<arg value="--exclude"/>
vendor/phpstan/phpdoc-parser/build.xml:44:			<arg value="--exclude"/>
vendor/phpstan/phpdoc-parser/build.xml:46:			<arg value="--exclude"/>
vendor/phpstan/phpdoc-parser/build.xml:60:			<arg value="--extensions=php"/>
vendor/phpstan/phpdoc-parser/build.xml:61:			<arg value="--encoding=utf-8"/>
vendor/phpstan/phpdoc-parser/build.xml:62:			<arg value="--tab-width=4"/>
vendor/phpstan/phpdoc-parser/build.xml:63:			<arg value="--ignore=tests/*/data,tests/*/traits"/>
vendor/phpstan/phpdoc-parser/build.xml:64:			<arg value="-sp"/>
vendor/phpstan/phpdoc-parser/build.xml:70:	<target name="cs-fix">
vendor/phpstan/phpdoc-parser/build.xml:77:			<arg value="--extensions=php"/>
vendor/phpstan/phpdoc-parser/build.xml:78:			<arg value="--encoding=utf-8"/>
vendor/phpstan/phpdoc-parser/build.xml:79:			<arg value="--tab-width=4"/>
vendor/phpstan/phpdoc-parser/build.xml:80:			<arg value="--ignore=tests/*/data,tests/*/traits"/>
vendor/phpstan/phpdoc-parser/build.xml:81:			<arg value="-sp"/>
vendor/phpstan/phpdoc-parser/build.xml:94:			<arg value="-c"/>
vendor/phpstan/phpdoc-parser/build.xml:108:			<arg value="--level"/>
vendor/phpstan/phpdoc-parser/.travis.yml:3:  - 7.0
vendor/phpstan/phpdoc-parser/.travis.yml:4:  - 7.1
vendor/phpstan/phpdoc-parser/.travis.yml:5:  - 7.2
vendor/phpstan/phpdoc-parser/.travis.yml:6:  - master
vendor/phpstan/phpdoc-parser/.travis.yml:9:  - dependencies=lowest
vendor/phpstan/phpdoc-parser/.travis.yml:10:  - dependencies=highest
vendor/phpstan/phpdoc-parser/.travis.yml:14:    - php: master
vendor/phpstan/phpdoc-parser/.travis.yml:16:    - php: master
vendor/phpstan/phpdoc-parser/.travis.yml:20:  - composer self-update
vendor/phpstan/phpdoc-parser/.travis.yml:21:  - if [ "$dependencies" = "lowest" ]; then composer update --prefer-lowest --no-interaction; fi;
vendor/phpstan/phpdoc-parser/.travis.yml:22:  - if [ "$dependencies" = "highest" ]; then composer update --no-interaction; fi;
vendor/phpstan/phpdoc-parser/.travis.yml:25:  - vendor/bin/phing
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:36:		$this->lexer = new Lexer();
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:37:		$this->phpDocParser = new PhpDocParser(new TypeParser(), new ConstExprParser());
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:57:		$tokens = new TokenIterator($this->lexer->tokenize($input));
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:58:		$actualPhpDocNode = $this->phpDocParser->parse($tokens);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:60:		$this->assertEquals($expectedPhpDocNode, $actualPhpDocNode, $label);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:61:		$this->assertSame((string) $expectedPhpDocNode, (string) $actualPhpDocNode);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:62:		$this->assertSame($nextTokenType, $tokens->currentTokenType());
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:959:			'OK non-static, without return type',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:976:			'OK non-static, with return type',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:993:			'OK non-static, with return static type',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1044:			'OK non-static, with return type and description',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1061:			'OK non-static, with return type and single parameter without type',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1086:			'OK non-static, with return type and single parameter with type',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1111:			'OK non-static, with return type and single parameter with type that is passed by reference',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1136:			'OK non-static, with return type and single variadic parameter with type',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1161:			'OK non-static, with return type and single variadic parameter with type that is passed by reference',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1186:			'OK non-static, with return type and single parameter with default value',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1211:			'OK non-static, with return type and single variadic parameter with type that is passed by reference and default value',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1236:			'OK non-static, with return type and multiple parameters without type',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1275:			'invalid non-static method without parentheses',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1313:			'invalid non-static method without parameter name',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1342:			'edge-case',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1423:				'multi-line with two tags',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1450:				'multi-line with two tags and text in the middle',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1479:				'multi-line with two tags, text in the middle and some empty lines',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1524:				'multi-line with just empty lines',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1535:				'multi-line with tag mentioned as part of text node',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/PhpDocParserTest.php:1554:				'multi-line with a lot of @method tags',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:29:		$this->lexer = new Lexer();
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:30:		$this->constExprParser = new ConstExprParser();
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:42:		$tokens = new TokenIterator($this->lexer->tokenize($input));
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:43:		$exprNode = $this->constExprParser->parse($tokens);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:45:		$this->assertSame((string) $expectedExpr, (string) $exprNode);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:46:		$this->assertEquals($expectedExpr, $exprNode);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:47:		$this->assertSame($nextTokenType, $tokens->currentTokenType());
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:103:				'-123',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:104:				new ConstExprIntegerNode('-123'),
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:107:				'-123.4',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:108:				new ConstExprFloatNode('-123.4'),
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:111:				'-.123',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:112:				new ConstExprFloatNode('-.123'),
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:115:				'-123.',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:116:				new ConstExprFloatNode('-123.'),
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:119:				'-123e-4',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:120:				new ConstExprFloatNode('-123e-4'),
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:123:				'-12.3e-4',
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/ConstExprParserTest.php:124:				new ConstExprFloatNode('-12.3e-4'),
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/TypeParserTest.php:27:		$this->lexer = new Lexer();
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/TypeParserTest.php:28:		$this->typeParser = new TypeParser();
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/TypeParserTest.php:40:		$tokens = new TokenIterator($this->lexer->tokenize($input));
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/TypeParserTest.php:41:		$typeNode = $this->typeParser->parse($tokens);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/TypeParserTest.php:43:		$this->assertSame((string) $expectedType, (string) $typeNode);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/TypeParserTest.php:44:		$this->assertEquals($expectedType, $typeNode);
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/TypeParserTest.php:45:		$this->assertSame($nextTokenType, $tokens->currentTokenType());
vendor/phpstan/phpdoc-parser/tests/PHPStan/Parser/TypeParserTest.php:303:				"?\t\xA009", // edge-case with \h
vendor/phpstan/phpdoc-parser/tests/phpunit.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/phpstan/phpdoc-parser/tests/phpunit.xml:2:<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:25:		$this->typeParser = $typeParser;
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:26:		$this->constantExprParser = $constantExprParser;
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:32:		$tokens->consumeTokenType(Lexer::TOKEN_OPEN_PHPDOC);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:33:		$tokens->tryConsumeTokenType(Lexer::TOKEN_PHPDOC_EOL);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:37:		if (!$tokens->isCurrentTokenType(Lexer::TOKEN_CLOSE_PHPDOC)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:38:			$children[] = $this->parseChild($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:39:			while ($tokens->tryConsumeTokenType(Lexer::TOKEN_PHPDOC_EOL) && !$tokens->isCurrentTokenType(Lexer::TOKEN_CLOSE_PHPDOC)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:40:				$children[] = $this->parseChild($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:44:		$tokens->consumeTokenType(Lexer::TOKEN_CLOSE_PHPDOC);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:52:		if ($tokens->isCurrentTokenType(Lexer::TOKEN_PHPDOC_TAG)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:53:			return $this->parseTag($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:56:			return $this->parseText($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:63:		$text = $tokens->joinUntil(Lexer::TOKEN_PHPDOC_EOL, Lexer::TOKEN_CLOSE_PHPDOC, Lexer::TOKEN_END);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:72:		$tag = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:73:		$tokens->next();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:74:		$value = $this->parseTagValue($tokens, $tag);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:83:			$tokens->pushSavePoint();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:87:					$tagValue = $this->parseParamTagValue($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:91:					$tagValue = $this->parseVarTagValue($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:95:					$tagValue = $this->parseReturnTagValue($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:99:					$tagValue = $this->parseThrowsTagValue($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:103:				case '@property-read':
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:104:				case '@property-write':
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:105:					$tagValue = $this->parsePropertyTagValue($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:109:					$tagValue = $this->parseMethodTagValue($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:113:					$tagValue = new Ast\PhpDoc\GenericTagValueNode($this->parseOptionalDescription($tokens));
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:117:			$tokens->dropSavePoint();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:120:			$tokens->rollback();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:121:			$tagValue = new Ast\PhpDoc\InvalidTagValueNode($this->parseOptionalDescription($tokens), $e);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:130:		$type = $this->typeParser->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:131:		$isVariadic = $tokens->tryConsumeTokenType(Lexer::TOKEN_VARIADIC);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:132:		$parameterName = $this->parseRequiredVariableName($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:133:		$description = $this->parseOptionalDescription($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:140:		$type = $this->typeParser->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:141:		$variableName = $this->parseOptionalVariableName($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:142:		$description = $this->parseOptionalDescription($tokens, $variableName === '');
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:149:		$type = $this->typeParser->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:150:		$description = $this->parseOptionalDescription($tokens, true);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:157:		$type = $this->typeParser->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:158:		$description = $this->parseOptionalDescription($tokens, true);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:165:		$type = $this->typeParser->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:166:		$parameterName = $this->parseRequiredVariableName($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:167:		$description = $this->parseOptionalDescription($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:174:		$isStatic = $tokens->tryConsumeTokenValue('static');
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:175:		$returnTypeOrMethodName = $this->typeParser->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:177:		if ($tokens->isCurrentTokenType(Lexer::TOKEN_IDENTIFIER)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:179:			$methodName = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:180:			$tokens->next();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:184:			$methodName = $returnTypeOrMethodName->name;
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:188:			$tokens->consumeTokenType(Lexer::TOKEN_IDENTIFIER); // will throw exception
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:193:		$tokens->consumeTokenType(Lexer::TOKEN_OPEN_PARENTHESES);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:194:		if (!$tokens->isCurrentTokenType(Lexer::TOKEN_CLOSE_PARENTHESES)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:195:			$parameters[] = $this->parseMethodTagValueParameter($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:196:			while ($tokens->tryConsumeTokenType(Lexer::TOKEN_COMMA)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:197:				$parameters[] = $this->parseMethodTagValueParameter($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:200:		$tokens->consumeTokenType(Lexer::TOKEN_CLOSE_PARENTHESES);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:202:		$description = $this->parseOptionalDescription($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:209:		switch ($tokens->currentTokenType()) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:213:				$parameterType = $this->typeParser->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:220:		$isReference = $tokens->tryConsumeTokenType(Lexer::TOKEN_REFERENCE);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:221:		$isVariadic = $tokens->tryConsumeTokenType(Lexer::TOKEN_VARIADIC);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:223:		$parameterName = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:224:		$tokens->consumeTokenType(Lexer::TOKEN_VARIABLE);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:226:		if ($tokens->tryConsumeTokenType(Lexer::TOKEN_EQUAL)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:227:			$defaultValue = $this->constantExprParser->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:239:		if ($tokens->isCurrentTokenType(Lexer::TOKEN_VARIABLE)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:240:			$parameterName = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:241:			$tokens->next();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:253:		$parameterName = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:254:		$tokens->consumeTokenType(Lexer::TOKEN_VARIABLE);
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:264:				if ($tokens->isCurrentTokenType($disallowedStartToken)) {
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:265:					$tokens->consumeTokenType(Lexer::TOKEN_OTHER); // will throw exception
vendor/phpstan/phpdoc-parser/src/Parser/PhpDocParser.php:270:		return $this->parseText($tokens)->text;
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:13:		if ($tokens->isCurrentTokenType(Lexer::TOKEN_FLOAT)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:14:			$value = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:15:			$tokens->next();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:18:		} elseif ($tokens->isCurrentTokenType(Lexer::TOKEN_INTEGER)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:19:			$value = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:20:			$tokens->next();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:23:		} elseif ($tokens->isCurrentTokenType(Lexer::TOKEN_SINGLE_QUOTED_STRING)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:24:			$value = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:25:			$tokens->next();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:28:		} elseif ($tokens->isCurrentTokenType(Lexer::TOKEN_DOUBLE_QUOTED_STRING)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:29:			$value = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:30:			$tokens->next();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:33:		} elseif ($tokens->isCurrentTokenType(Lexer::TOKEN_IDENTIFIER)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:34:			$identifier = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:35:			$tokens->next();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:45:					$tokens->consumeTokenType(Lexer::TOKEN_OPEN_PARENTHESES);
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:46:					return $this->parseArray($tokens, Lexer::TOKEN_CLOSE_PARENTHESES);
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:49:			if ($tokens->tryConsumeTokenType(Lexer::TOKEN_DOUBLE_COLON)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:50:				$classConstantName = $tokens->currentTokenValue();
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:51:				$tokens->consumeTokenType(Lexer::TOKEN_IDENTIFIER);
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:58:		} elseif ($tokens->tryConsumeTokenType(Lexer::TOKEN_OPEN_SQUARE_BRACKET)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:59:			return $this->parseArray($tokens, Lexer::TOKEN_CLOSE_SQUARE_BRACKET);
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:62:		throw new \LogicException($tokens->currentTokenValue());
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:70:		if (!$tokens->tryConsumeTokenType($endToken)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:72:				$items[] = $this->parseArrayItem($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:73:			} while ($tokens->tryConsumeTokenType(Lexer::TOKEN_COMMA) && !$tokens->isCurrentTokenType($endToken));
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:74:			$tokens->consumeTokenType($endToken);
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:83:		$expr = $this->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:85:		if ($tokens->tryConsumeTokenType(Lexer::TOKEN_DOUBLE_ARROW)) {
vendor/phpstan/phpdoc-parser/src/Parser/ConstExprParser.php:87:			$value = $this->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/ParserException.php:29:		$this->currentTokenValue = $currentTokenValue;
vendor/phpstan/phpdoc-parser/src/Parser/ParserException.php:30:		$this->currentTokenType = $currentTokenType;
vendor/phpstan/phpdoc-parser/src/Parser/ParserException.php:31:		$this->currentOffset = $currentOffset;
vendor/phpstan/phpdoc-parser/src/Parser/ParserException.php:32:		$this->expectedTokenType = $expectedTokenType;
vendor/phpstan/phpdoc-parser/src/Parser/ParserException.php:45:		return $this->currentTokenValue;
vendor/phpstan/phpdoc-parser/src/Parser/ParserException.php:51:		return $this->currentTokenType;
vendor/phpstan/phpdoc-parser/src/Parser/ParserException.php:57:		return $this->currentOffset;
vendor/phpstan/phpdoc-parser/src/Parser/ParserException.php:63:		return $this->expectedTokenType;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:21:		$this->tokens = $tokens;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:22:		$this->index = $index;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:24:		if ($this->tokens[$this->index][Lexer::TYPE_OFFSET] === Lexer::TOKEN_HORIZONTAL_WS) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:25:			$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:32:		return $this->tokens[$this->index][Lexer::VALUE_OFFSET];
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:38:		return $this->tokens[$this->index][Lexer::TYPE_OFFSET];
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:45:		for ($i = 0; $i < $this->index; $i++) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:46:			$offset += strlen($this->tokens[$i][Lexer::VALUE_OFFSET]);
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:55:		return $this->tokens[$this->index][Lexer::VALUE_OFFSET] === $tokenValue;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:61:		return $this->tokens[$this->index][Lexer::TYPE_OFFSET] === $tokenType;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:71:		if ($this->tokens[$this->index][Lexer::TYPE_OFFSET] !== $tokenType) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:72:			$this->throwError($tokenType);
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:75:		$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:77:		if (($this->tokens[$this->index][Lexer::TYPE_OFFSET] ?? -1) === Lexer::TOKEN_HORIZONTAL_WS) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:78:			$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:85:		if ($this->tokens[$this->index][Lexer::VALUE_OFFSET] !== $tokenValue) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:89:		$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:91:		if ($this->tokens[$this->index][Lexer::TYPE_OFFSET] === Lexer::TOKEN_HORIZONTAL_WS) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:92:			$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:101:		if ($this->tokens[$this->index][Lexer::TYPE_OFFSET] !== $tokenType) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:105:		$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:107:		if ($this->tokens[$this->index][Lexer::TYPE_OFFSET] === Lexer::TOKEN_HORIZONTAL_WS) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:108:			$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:117:		if ($this->tokens[$this->index - 1][Lexer::TYPE_OFFSET] === Lexer::TOKEN_HORIZONTAL_WS) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:118:			return $this->tokens[$this->index - 1][Lexer::VALUE_OFFSET];
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:128:		while (!in_array($this->tokens[$this->index][Lexer::TYPE_OFFSET], $tokenType, true)) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:129:			$s .= $this->tokens[$this->index++][Lexer::VALUE_OFFSET];
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:137:		$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:139:		if ($this->tokens[$this->index][Lexer::TYPE_OFFSET] === Lexer::TOKEN_HORIZONTAL_WS) {
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:140:			$this->index++;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:147:		$this->savePoints[] = $this->index;
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:153:		array_pop($this->savePoints);
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:159:		$this->index = array_pop($this->savePoints);
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:170:			$this->currentTokenValue(),
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:171:			$this->currentTokenType(),
vendor/phpstan/phpdoc-parser/src/Parser/TokenIterator.php:172:			$this->currentTokenOffset(),
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:13:		if ($tokens->isCurrentTokenType(Lexer::TOKEN_NULLABLE)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:14:			$type = $this->parseNullable($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:17:			$type = $this->parseAtomic($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:19:			if ($tokens->isCurrentTokenType(Lexer::TOKEN_UNION)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:20:				$type = $this->parseUnion($tokens, $type);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:22:			} elseif ($tokens->isCurrentTokenType(Lexer::TOKEN_INTERSECTION)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:23:				$type = $this->parseIntersection($tokens, $type);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:33:		if ($tokens->tryConsumeTokenType(Lexer::TOKEN_OPEN_PARENTHESES)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:34:			$type = $this->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:35:			$tokens->consumeTokenType(Lexer::TOKEN_CLOSE_PARENTHESES);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:37:			if ($tokens->isCurrentTokenType(Lexer::TOKEN_OPEN_SQUARE_BRACKET)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:38:				$type = $this->tryParseArray($tokens, $type);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:41:		} elseif ($tokens->tryConsumeTokenType(Lexer::TOKEN_THIS_VARIABLE)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:45:			$type = new Ast\Type\IdentifierTypeNode($tokens->currentTokenValue());
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:46:			$tokens->consumeTokenType(Lexer::TOKEN_IDENTIFIER);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:48:			if ($tokens->isCurrentTokenType(Lexer::TOKEN_OPEN_ANGLE_BRACKET)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:49:				$type = $this->parseGeneric($tokens, $type);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:51:			} elseif ($tokens->isCurrentTokenType(Lexer::TOKEN_OPEN_SQUARE_BRACKET)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:52:				$type = $this->tryParseArray($tokens, $type);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:64:		while ($tokens->tryConsumeTokenType(Lexer::TOKEN_UNION)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:65:			$types[] = $this->parseAtomic($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:76:		while ($tokens->tryConsumeTokenType(Lexer::TOKEN_INTERSECTION)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:77:			$types[] = $this->parseAtomic($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:86:		$tokens->consumeTokenType(Lexer::TOKEN_NULLABLE);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:88:		$type = new Ast\Type\IdentifierTypeNode($tokens->currentTokenValue());
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:89:		$tokens->consumeTokenType(Lexer::TOKEN_IDENTIFIER);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:91:		if ($tokens->isCurrentTokenType(Lexer::TOKEN_OPEN_ANGLE_BRACKET)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:92:			$type = $this->parseGeneric($tokens, $type);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:101:		$tokens->consumeTokenType(Lexer::TOKEN_OPEN_ANGLE_BRACKET);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:102:		$genericTypes[] = $this->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:104:		while ($tokens->tryConsumeTokenType(Lexer::TOKEN_COMMA)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:105:			$genericTypes[] = $this->parse($tokens);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:108:		$tokens->consumeTokenType(Lexer::TOKEN_CLOSE_ANGLE_BRACKET);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:116:			while ($tokens->isCurrentTokenType(Lexer::TOKEN_OPEN_SQUARE_BRACKET)) {
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:117:				$tokens->pushSavePoint();
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:118:				$tokens->consumeTokenType(Lexer::TOKEN_OPEN_SQUARE_BRACKET);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:119:				$tokens->consumeTokenType(Lexer::TOKEN_CLOSE_SQUARE_BRACKET);
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:120:				$tokens->dropSavePoint();
vendor/phpstan/phpdoc-parser/src/Parser/TypeParser.php:125:			$tokens->rollback();
vendor/phpstan/phpdoc-parser/src/Ast/Type/GenericTypeNode.php:16:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/Type/GenericTypeNode.php:17:		$this->genericTypes = $genericTypes;
vendor/phpstan/phpdoc-parser/src/Ast/Type/GenericTypeNode.php:23:		return $this->type . '<' . implode(', ', $this->genericTypes) . '>';
vendor/phpstan/phpdoc-parser/src/Ast/Type/UnionTypeNode.php:13:		$this->types = $types;
vendor/phpstan/phpdoc-parser/src/Ast/Type/UnionTypeNode.php:19:		return '(' . implode(' | ', $this->types) . ')';
vendor/phpstan/phpdoc-parser/src/Ast/Type/IdentifierTypeNode.php:13:		$this->name = $name;
vendor/phpstan/phpdoc-parser/src/Ast/Type/IdentifierTypeNode.php:19:		return $this->name;
vendor/phpstan/phpdoc-parser/src/Ast/Type/NullableTypeNode.php:13:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/Type/NullableTypeNode.php:19:		return '?' . $this->type;
vendor/phpstan/phpdoc-parser/src/Ast/Type/IntersectionTypeNode.php:13:		$this->types = $types;
vendor/phpstan/phpdoc-parser/src/Ast/Type/IntersectionTypeNode.php:19:		return '(' . implode(' & ', $this->types) . ')';
vendor/phpstan/phpdoc-parser/src/Ast/Type/ArrayTypeNode.php:13:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/Type/ArrayTypeNode.php:19:		return $this->type . '[]';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/GenericTagValueNode.php:13:		$this->value = $value;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/GenericTagValueNode.php:19:		return $this->value;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PropertyTagValueNode.php:21:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PropertyTagValueNode.php:22:		$this->propertyName = $propertyName;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PropertyTagValueNode.php:23:		$this->description = $description;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PropertyTagValueNode.php:29:		return trim("{$this->type} {$this->propertyName} {$this->description}");
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:29:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:30:		$this->isReference = $isReference;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:31:		$this->isVariadic = $isVariadic;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:32:		$this->parameterName = $parameterName;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:33:		$this->defaultValue = $defaultValue;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:39:		$type = $this->type ? "{$this->type} " : '';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:40:		$isReference = $this->isReference ? '&' : '';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:41:		$isVariadic = $this->isVariadic ? '...' : '';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:42:		$default = $this->defaultValue ? " = {$this->defaultValue}" : '';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueParameterNode.php:43:		return "{$type}{$isReference}{$isVariadic}{$this->parameterName}{$default}";
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/InvalidTagValueNode.php:16:		$this->value = $value;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/InvalidTagValueNode.php:17:		$this->exception = $exception;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/InvalidTagValueNode.php:23:		return $this->value;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ThrowsTagValueNode.php:18:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ThrowsTagValueNode.php:19:		$this->description = $description;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ThrowsTagValueNode.php:25:		return trim("{$this->type} {$this->description}");
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:27:		$this->isStatic = $isStatic;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:28:		$this->returnType = $returnType;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:29:		$this->methodName = $methodName;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:30:		$this->parameters = $parameters;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:31:		$this->description = $description;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:37:		$static = $this->isStatic ? 'static ' : '';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:38:		$returnType = $this->returnType ? "{$this->returnType} " : '';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:39:		$parameters = implode(', ', $this->parameters);
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:40:		$description = $this->description !== '' ? " {$this->description}" : '';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/MethodTagValueNode.php:41:		return "{$static}{$returnType}{$this->methodName}({$parameters}){$description}";
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/VarTagValueNode.php:21:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/VarTagValueNode.php:22:		$this->variableName = $variableName;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/VarTagValueNode.php:23:		$this->description = $description;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/VarTagValueNode.php:29:		return trim("$this->type " . trim("{$this->variableName} {$this->description}"));
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ReturnTagValueNode.php:18:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ReturnTagValueNode.php:19:		$this->description = $description;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ReturnTagValueNode.php:25:		return trim("{$this->type} {$this->description}");
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ParamTagValueNode.php:24:		$this->type = $type;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ParamTagValueNode.php:25:		$this->isVariadic = $isVariadic;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ParamTagValueNode.php:26:		$this->parameterName = $parameterName;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ParamTagValueNode.php:27:		$this->description = $description;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ParamTagValueNode.php:33:		$variadic = $this->isVariadic ? '...' : '';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/ParamTagValueNode.php:34:		return trim("{$this->type} {$variadic}{$this->parameterName} {$this->description}");
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocTextNode.php:13:		$this->text = $text;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocTextNode.php:19:		return $this->text;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:18:		$this->children = $children;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:27:		return array_filter($this->children, function (PhpDocChildNode $child): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:39:		return array_filter($this->getTags(), function (PhpDocTagNode $tag) use ($tagName): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:40:			return $tag->name === $tagName;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:51:			array_filter($this->getTagsByName('@var'), function (PhpDocTagNode $tag): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:52:				return $tag->value instanceof VarTagValueNode;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:65:			array_filter($this->getTagsByName('@param'), function (PhpDocTagNode $tag): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:66:				return $tag->value instanceof ParamTagValueNode;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:79:			array_filter($this->getTagsByName('@return'), function (PhpDocTagNode $tag): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:80:				return $tag->value instanceof ReturnTagValueNode;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:93:			array_filter($this->getTagsByName('@property'), function (PhpDocTagNode $tag): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:94:				return $tag->value instanceof PropertyTagValueNode;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:107:			array_filter($this->getTagsByName('@property-read'), function (PhpDocTagNode $tag): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:108:				return $tag->value instanceof PropertyTagValueNode;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:121:			array_filter($this->getTagsByName('@property-write'), function (PhpDocTagNode $tag): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:122:				return $tag->value instanceof PropertyTagValueNode;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:135:			array_filter($this->getTagsByName('@method'), function (PhpDocTagNode $tag): bool {
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:136:				return $tag->value instanceof MethodTagValueNode;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocNode.php:145:		return "/**\n * " . implode("\n * ", $this->children) . '*/';
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocTagNode.php:16:		$this->name = $name;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocTagNode.php:17:		$this->value = $value;
vendor/phpstan/phpdoc-parser/src/Ast/PhpDoc/PhpDocTagNode.php:23:		return trim("{$this->name} {$this->value}");
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstFetchNode.php:8:	/** @var string class name for class constants or empty string for non-class constants */
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstFetchNode.php:16:		$this->className = $className;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstFetchNode.php:17:		$this->name = $name;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstFetchNode.php:23:		if ($this->className === '') {
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstFetchNode.php:24:			return $this->name;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstFetchNode.php:27:			return "{$this->className}::{$this->name}";
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprArrayNode.php:16:		$this->items = $items;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprArrayNode.php:22:		return '[' . implode(', ', $this->items) . ']';
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprStringNode.php:13:		$this->value = $value;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprStringNode.php:19:		return $this->value;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprIntegerNode.php:13:		$this->value = $value;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprIntegerNode.php:19:		return $this->value;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprFloatNode.php:13:		$this->value = $value;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprFloatNode.php:19:		return $this->value;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprArrayItemNode.php:16:		$this->key = $key;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprArrayItemNode.php:17:		$this->value = $value;
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprArrayItemNode.php:23:		if ($this->key !== null) {
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprArrayItemNode.php:24:			return "{$this->key} => {$this->value}";
vendor/phpstan/phpdoc-parser/src/Ast/ConstExpr/ConstExprArrayItemNode.php:27:			return "{$this->value}";
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:83:		if ($this->regexp === null) {
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:84:			$this->initialize();
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:87:		preg_match_all($this->regexp, $s, $tokens, PREG_SET_ORDER);
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:89:		assert($this->types !== null);
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:90:		$count = count($this->types);
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:95:					$match = [$match[0], $this->types[$i - 1]];
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:131:			self::TOKEN_PHPDOC_TAG => '@[a-z-]++',
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:134:			self::TOKEN_FLOAT => '(?:-?[0-9]++\\.[0-9]*+(?:e-?[0-9]++)?)|(?:-?[0-9]*+\\.[0-9]++(?:e-?[0-9]++)?)|(?:-?[0-9]++e-?[0-9]++)',
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:135:			self::TOKEN_INTEGER => '-?[0-9]++',
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:139:			self::TOKEN_IDENTIFIER => '(?:[\\\\]?+[a-z_\\x7F-\\xFF][0-9a-z_\\x7F-\\xFF]*+)++',
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:141:			self::TOKEN_VARIABLE => '\\$[a-z_\\x7F-\\xFF][0-9a-z_\\x7F-\\xFF]*+',
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:149:		$this->regexp = '~(' . implode(')|(', $patterns) . ')~Asi';
vendor/phpstan/phpdoc-parser/src/Lexer/Lexer.php:150:		$this->types = array_keys($patterns);
vendor/phpstan/phpdoc-parser/doc/grammars/const-expr.peg:12:  = '-'? [0-9]+ '.' [0-9]* ConstantFloatExp?
vendor/phpstan/phpdoc-parser/doc/grammars/const-expr.peg:13:  / '-'? [0-9]* '.' [0-9]+ ConstantFloatExp?
vendor/phpstan/phpdoc-parser/doc/grammars/const-expr.peg:14:  / '-'? [0-9]+ ConstantFloatExp
vendor/phpstan/phpdoc-parser/doc/grammars/const-expr.peg:17:  = [eE] '-'? [0-9]+
vendor/phpstan/phpdoc-parser/doc/grammars/const-expr.peg:20:  = '-'? [0-9]+
vendor/phpstan/phpdoc-parser/doc/grammars/type.peg:32:  = [a-zA-Z_\\127-\\255][a-zA-Z0-9_\\127-\\255]*
vendor/phpstan/phpdoc-parser/doc/grammars/phpdoc-param.peg:11:  = '$' [a-zA-Z_\127-\255][a-zA-Z0-9_\127-\255]*
vendor/phpstan/phpdoc-parser/doc/grammars/type.ebnf:32:  ::= [a-zA-Z_#x7F-#x10FFFF][0-9a-zA-Z_#x7F-#x10FFFF]*
vendor/phpstan/phpdoc-parser/doc/grammars/phpdoc-method.peg:14:  = [a-zA-Z_\127-\255][a-zA-Z0-9_\127-\255]*
vendor/phpstan/phpdoc-parser/doc/grammars/phpdoc-method.peg:35:  = '$' [a-zA-Z_\127-\255][a-zA-Z0-9_\127-\255]*
vendor/dnoegel/php-xdg-base-dir/composer.json:2:    "name": "dnoegel/php-xdg-base-dir",
vendor/dnoegel/php-xdg-base-dir/composer.json:9:    "require-dev": {
vendor/dnoegel/php-xdg-base-dir/composer.json:13:        "psr-4": {
vendor/dnoegel/php-xdg-base-dir/README.md:3:[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)
vendor/dnoegel/php-xdg-base-dir/README.md:12:$ composer require dnoegel/php-xdg-base-dir
vendor/dnoegel/php-xdg-base-dir/README.md:20:echo $xdg->getHomeDir();
vendor/dnoegel/php-xdg-base-dir/README.md:21:echo $xdg->getHomeConfigDir()
vendor/dnoegel/php-xdg-base-dir/README.md:22:echo $xdg->getHomeDataDir()
vendor/dnoegel/php-xdg-base-dir/README.md:23:echo $xdg->getHomeCacheDir()
vendor/dnoegel/php-xdg-base-dir/README.md:24:echo $xdg->getRuntimeDir()
vendor/dnoegel/php-xdg-base-dir/README.md:26:$xdg->getDataDirs() // returns array
vendor/dnoegel/php-xdg-base-dir/README.md:27:$xdg->getConfigDirs() // returns array
vendor/dnoegel/php-xdg-base-dir/README.md:38:The MIT License (MIT). Please see [License File](https://github.com/dnoegel/php-xdg-base-dir/blob/master/LICENSE) for more information.
vendor/dnoegel/php-xdg-base-dir/phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/dnoegel/php-xdg-base-dir/phpunit.xml.dist:14:        <testsuite name="php-xdg-base-dir unit tests">
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:15:         putenv('HOME=/fake-dir');
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:16:         $this->assertEquals('/fake-dir', $this->getXdg()->getHomeDir());
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:23:        putenv('HOMEPATH=fake-dir');
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:24:        $this->assertEquals('C:/fake-dir', $this->getXdg()->getHomeDir());
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:32:        $this->assertEquals('tmp/', $this->getXdg()->getHomeCacheDir());
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:38:        $this->assertEquals('tmp/', $this->getXdg()->getHomeDataDir());
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:44:        $this->assertEquals('tmp/', $this->getXdg()->getHomeConfigDir());
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:52:        $this->assertArrayHasKey('tmp/', array_flip($this->getXdg()->getDataDirs()));
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:59:        $this->assertArrayHasKey('tmp/', array_flip($this->getXdg()->getConfigDirs()));
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:68:        $runtimeDir = $this->getXdg()->getRuntimeDir();
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:70:        $this->assertEquals(is_dir($runtimeDir), true);
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:81:        $this->getXdg()->getRuntimeDir(true);
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:90:        $dir = $this->getXdg()->getRuntimeDir(false);
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:92:        $this->assertEquals(700, $permission);
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:107:        $this->assertEquals(764, $permission);
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:110:        $dir = $this->getXdg()->getRuntimeDir(false);
vendor/dnoegel/php-xdg-base-dir/tests/XdgTest.php:114:        $this->assertEquals(700, $permission);
vendor/dnoegel/php-xdg-base-dir/src/Xdg.php:6: * Simple implementation of the XDG standard http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
vendor/dnoegel/php-xdg-base-dir/src/Xdg.php:18:    const RUNTIME_DIR_FALLBACK = 'php-xdg-runtime-dir-fallback-';
vendor/dnoegel/php-xdg-base-dir/src/Xdg.php:33:        $path = getenv('XDG_CONFIG_HOME') ?: $this->getHomeDir() . DIRECTORY_SEPARATOR . '.config';
vendor/dnoegel/php-xdg-base-dir/src/Xdg.php:43:        $path = getenv('XDG_DATA_HOME') ?: $this->getHomeDir() . DIRECTORY_SEPARATOR . '.local' . DIRECTORY_SEPARATOR . 'share';
vendor/dnoegel/php-xdg-base-dir/src/Xdg.php:55:        $paths = array_merge(array($this->getHomeConfigDir()), $configDirs);
vendor/dnoegel/php-xdg-base-dir/src/Xdg.php:67:        $paths = array_merge(array($this->getHomeDataDir()), $dataDirs);
vendor/dnoegel/php-xdg-base-dir/src/Xdg.php:77:        $path = getenv('XDG_CACHE_HOME') ?: $this->getHomeDir() . DIRECTORY_SEPARATOR . '.cache';
vendor/psr/log/composer.json:4:    "keywords": ["psr", "psr-3", "log"],
vendor/psr/log/composer.json:5:    "homepage": "https://github.com/php-fig/log",
vendor/psr/log/composer.json:9:            "name": "PHP-FIG",
vendor/psr/log/composer.json:10:            "homepage": "http://www.php-fig.org/"
vendor/psr/log/composer.json:17:        "psr-4": {
vendor/psr/log/composer.json:22:        "branch-alias": {
vendor/psr/log/composer.json:23:            "dev-master": "1.0.x-dev"
vendor/psr/log/README.md:5:[PSR-3](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md).
vendor/psr/log/README.md:11:-----
vendor/psr/log/README.md:26:        $this->logger = $logger;
vendor/psr/log/README.md:31:        if ($this->logger) {
vendor/psr/log/README.md:32:            $this->logger->info('Doing work');
vendor/psr/log/README.md:44:[specification text](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md)
vendor/psr/log/Psr/Log/NullLogger.php:10: * is a good way to avoid littering your code with `if ($this->logger) { }`
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:26:     * Example ->error('Foo') would yield "error Foo".
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:34:        $this->assertInstanceOf('Psr\Log\LoggerInterface', $this->getLogger());
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:42:        $logger = $this->getLogger();
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:43:        $logger->{$level}($message, array('user' => 'Bob'));
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:44:        $logger->log($level, $message, array('user' => 'Bob'));
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:50:        $this->assertEquals($expected, $this->getLogs());
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:72:        $logger = $this->getLogger();
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:73:        $logger->log('invalid level', 'Foo');
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:78:        $logger = $this->getLogger();
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:79:        $logger->info('{Message {nothing} {user} {foo.bar} a}', array('user' => 'Bob', 'foo.bar' => 'Bar'));
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:82:        $this->assertEquals($expected, $this->getLogs());
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:88:            $dummy = $this->createPartialMock('Psr\Log\Test\DummyTest', array('__toString'));
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:90:            $dummy = $this->getMock('Psr\Log\Test\DummyTest', array('__toString'));
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:92:        $dummy->expects($this->once())
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:93:            ->method('__toString')
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:94:            ->will($this->returnValue('DUMMY'));
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:96:        $this->getLogger()->warning($dummy);
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:99:        $this->assertEquals($expected, $this->getLogs());
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:115:        $this->getLogger()->warning('Crazy context data', $context);
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:118:        $this->assertEquals($expected, $this->getLogs());
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:123:        $logger = $this->getLogger();
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:124:        $logger->warning('Random message', array('exception' => 'oops'));
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:125:        $logger->critical('Uncaught Exception!', array('exception' => new \LogicException('Fail')));
vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:131:        $this->assertEquals($expected, $this->getLogs());
vendor/psr/log/Psr/Log/LoggerAwareTrait.php:24:        $this->logger = $logger;
vendor/psr/log/Psr/Log/LoggerAwareInterface.php:6: * Describes a logger-aware instance.
vendor/psr/log/Psr/Log/LoggerInterface.php:17: * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
vendor/psr/log/Psr/Log/LoggerTrait.php:9: * It simply delegates all log-level-specific methods to the `log` method to
vendor/psr/log/Psr/Log/LoggerTrait.php:25:        $this->log(LogLevel::EMERGENCY, $message, $context);
vendor/psr/log/Psr/Log/LoggerTrait.php:41:        $this->log(LogLevel::ALERT, $message, $context);
vendor/psr/log/Psr/Log/LoggerTrait.php:56:        $this->log(LogLevel::CRITICAL, $message, $context);
vendor/psr/log/Psr/Log/LoggerTrait.php:70:        $this->log(LogLevel::ERROR, $message, $context);
vendor/psr/log/Psr/Log/LoggerTrait.php:86:        $this->log(LogLevel::WARNING, $message, $context);
vendor/psr/log/Psr/Log/LoggerTrait.php:99:        $this->log(LogLevel::NOTICE, $message, $context);
vendor/psr/log/Psr/Log/LoggerTrait.php:114:        $this->log(LogLevel::INFO, $message, $context);
vendor/psr/log/Psr/Log/LoggerTrait.php:127:        $this->log(LogLevel::DEBUG, $message, $context);
vendor/psr/log/Psr/Log/AbstractLogger.php:8: * It simply delegates all log-level-specific methods to the `log` method to
vendor/psr/log/Psr/Log/AbstractLogger.php:24:        $this->log(LogLevel::EMERGENCY, $message, $context);
vendor/psr/log/Psr/Log/AbstractLogger.php:40:        $this->log(LogLevel::ALERT, $message, $context);
vendor/psr/log/Psr/Log/AbstractLogger.php:55:        $this->log(LogLevel::CRITICAL, $message, $context);
vendor/psr/log/Psr/Log/AbstractLogger.php:69:        $this->log(LogLevel::ERROR, $message, $context);
vendor/psr/log/Psr/Log/AbstractLogger.php:85:        $this->log(LogLevel::WARNING, $message, $context);
vendor/psr/log/Psr/Log/AbstractLogger.php:98:        $this->log(LogLevel::NOTICE, $message, $context);
vendor/psr/log/Psr/Log/AbstractLogger.php:113:        $this->log(LogLevel::INFO, $message, $context);
vendor/psr/log/Psr/Log/AbstractLogger.php:126:        $this->log(LogLevel::DEBUG, $message, $context);
vendor/composer/autoload_classmap.php:47:    'Nette\\Loaders\\RobotLoader' => $vendorDir . '/nette/robot-loader/src/RobotLoader/RobotLoader.php',
vendor/composer/autoload_classmap.php:58:    'Nette\\PhpGenerator\\ClassType' => $vendorDir . '/nette/php-generator/src/PhpGenerator/ClassType.php',
vendor/composer/autoload_classmap.php:59:    'Nette\\PhpGenerator\\Closure' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Closure.php',
vendor/composer/autoload_classmap.php:60:    'Nette\\PhpGenerator\\Constant' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Constant.php',
vendor/composer/autoload_classmap.php:61:    'Nette\\PhpGenerator\\Factory' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Factory.php',
vendor/composer/autoload_classmap.php:62:    'Nette\\PhpGenerator\\GlobalFunction' => $vendorDir . '/nette/php-generator/src/PhpGenerator/GlobalFunction.php',
vendor/composer/autoload_classmap.php:63:    'Nette\\PhpGenerator\\Helpers' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Helpers.php',
vendor/composer/autoload_classmap.php:64:    'Nette\\PhpGenerator\\Method' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Method.php',
vendor/composer/autoload_classmap.php:65:    'Nette\\PhpGenerator\\Parameter' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Parameter.php',
vendor/composer/autoload_classmap.php:66:    'Nette\\PhpGenerator\\PhpFile' => $vendorDir . '/nette/php-generator/src/PhpGenerator/PhpFile.php',
vendor/composer/autoload_classmap.php:67:    'Nette\\PhpGenerator\\PhpLiteral' => $vendorDir . '/nette/php-generator/src/PhpGenerator/PhpLiteral.php',
vendor/composer/autoload_classmap.php:68:    'Nette\\PhpGenerator\\PhpNamespace' => $vendorDir . '/nette/php-generator/src/PhpGenerator/PhpNamespace.php',
vendor/composer/autoload_classmap.php:69:    'Nette\\PhpGenerator\\Property' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Property.php',
vendor/composer/autoload_classmap.php:70:    'Nette\\PhpGenerator\\Traits\\CommentAware' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Traits/CommentAware.php',
vendor/composer/autoload_classmap.php:71:    'Nette\\PhpGenerator\\Traits\\FunctionLike' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Traits/FunctionLike.php',
vendor/composer/autoload_classmap.php:72:    'Nette\\PhpGenerator\\Traits\\NameAware' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Traits/NameAware.php',
vendor/composer/autoload_classmap.php:73:    'Nette\\PhpGenerator\\Traits\\VisibilityAware' => $vendorDir . '/nette/php-generator/src/PhpGenerator/Traits/VisibilityAware.php',
vendor/composer/autoload_real.php:28:            $loader->set($namespace, $path);
vendor/composer/autoload_real.php:33:            $loader->setPsr4($namespace, $path);
vendor/composer/autoload_real.php:38:            $loader->addClassMap($classMap);
vendor/composer/autoload_real.php:41:        $loader->register(true);
vendor/composer/ClassLoader.php:16: * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
vendor/composer/ClassLoader.php:21: *     $loader->add('Symfony\Component', __DIR__.'/component');
vendor/composer/ClassLoader.php:22: *     $loader->add('Symfony',           __DIR__.'/framework');
vendor/composer/ClassLoader.php:25: *     $loader->register();
vendor/composer/ClassLoader.php:28: *     $loader->setUseIncludePath(true);
vendor/composer/ClassLoader.php:40: * @see    http://www.php-fig.org/psr/psr-0/
vendor/composer/ClassLoader.php:41: * @see    http://www.php-fig.org/psr/psr-4/
vendor/composer/ClassLoader.php:45:    // PSR-4
vendor/composer/ClassLoader.php:50:    // PSR-0
vendor/composer/ClassLoader.php:61:        if (!empty($this->prefixesPsr0)) {
vendor/composer/ClassLoader.php:62:            return call_user_func_array('array_merge', $this->prefixesPsr0);
vendor/composer/ClassLoader.php:70:        return $this->prefixDirsPsr4;
vendor/composer/ClassLoader.php:75:        return $this->fallbackDirsPsr0;
vendor/composer/ClassLoader.php:80:        return $this->fallbackDirsPsr4;
vendor/composer/ClassLoader.php:85:        return $this->classMap;
vendor/composer/ClassLoader.php:93:        if ($this->classMap) {
vendor/composer/ClassLoader.php:94:            $this->classMap = array_merge($this->classMap, $classMap);
vendor/composer/ClassLoader.php:96:            $this->classMap = $classMap;
vendor/composer/ClassLoader.php:101:     * Registers a set of PSR-0 directories for a given prefix, either
vendor/composer/ClassLoader.php:105:     * @param array|string $paths   The PSR-0 root directories
vendor/composer/ClassLoader.php:112:                $this->fallbackDirsPsr0 = array_merge(
vendor/composer/ClassLoader.php:114:                    $this->fallbackDirsPsr0
vendor/composer/ClassLoader.php:117:                $this->fallbackDirsPsr0 = array_merge(
vendor/composer/ClassLoader.php:118:                    $this->fallbackDirsPsr0,
vendor/composer/ClassLoader.php:127:        if (!isset($this->prefixesPsr0[$first][$prefix])) {
vendor/composer/ClassLoader.php:128:            $this->prefixesPsr0[$first][$prefix] = (array) $paths;
vendor/composer/ClassLoader.php:133:            $this->prefixesPsr0[$first][$prefix] = array_merge(
vendor/composer/ClassLoader.php:135:                $this->prefixesPsr0[$first][$prefix]
vendor/composer/ClassLoader.php:138:            $this->prefixesPsr0[$first][$prefix] = array_merge(
vendor/composer/ClassLoader.php:139:                $this->prefixesPsr0[$first][$prefix],
vendor/composer/ClassLoader.php:146:     * Registers a set of PSR-4 directories for a given namespace, either
vendor/composer/ClassLoader.php:150:     * @param array|string $paths   The PSR-4 base directories
vendor/composer/ClassLoader.php:160:                $this->fallbackDirsPsr4 = array_merge(
vendor/composer/ClassLoader.php:162:                    $this->fallbackDirsPsr4
vendor/composer/ClassLoader.php:165:                $this->fallbackDirsPsr4 = array_merge(
vendor/composer/ClassLoader.php:166:                    $this->fallbackDirsPsr4,
vendor/composer/ClassLoader.php:170:        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
vendor/composer/ClassLoader.php:173:            if ('\\' !== $prefix[$length - 1]) {
vendor/composer/ClassLoader.php:174:                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
vendor/composer/ClassLoader.php:176:            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
vendor/composer/ClassLoader.php:177:            $this->prefixDirsPsr4[$prefix] = (array) $paths;
vendor/composer/ClassLoader.php:180:            $this->prefixDirsPsr4[$prefix] = array_merge(
vendor/composer/ClassLoader.php:182:                $this->prefixDirsPsr4[$prefix]
vendor/composer/ClassLoader.php:186:            $this->prefixDirsPsr4[$prefix] = array_merge(
vendor/composer/ClassLoader.php:187:                $this->prefixDirsPsr4[$prefix],
vendor/composer/ClassLoader.php:194:     * Registers a set of PSR-0 directories for a given prefix,
vendor/composer/ClassLoader.php:198:     * @param array|string $paths  The PSR-0 base directories
vendor/composer/ClassLoader.php:203:            $this->fallbackDirsPsr0 = (array) $paths;
vendor/composer/ClassLoader.php:205:            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
vendor/composer/ClassLoader.php:210:     * Registers a set of PSR-4 directories for a given namespace,
vendor/composer/ClassLoader.php:214:     * @param array|string $paths  The PSR-4 base directories
vendor/composer/ClassLoader.php:221:            $this->fallbackDirsPsr4 = (array) $paths;
vendor/composer/ClassLoader.php:224:            if ('\\' !== $prefix[$length - 1]) {
vendor/composer/ClassLoader.php:225:                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
vendor/composer/ClassLoader.php:227:            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
vendor/composer/ClassLoader.php:228:            $this->prefixDirsPsr4[$prefix] = (array) $paths;
vendor/composer/ClassLoader.php:239:        $this->useIncludePath = $useIncludePath;
vendor/composer/ClassLoader.php:250:        return $this->useIncludePath;
vendor/composer/ClassLoader.php:261:        $this->classMapAuthoritative = $classMapAuthoritative;
vendor/composer/ClassLoader.php:271:        return $this->classMapAuthoritative;
vendor/composer/ClassLoader.php:300:        if ($file = $this->findFile($class)) {
vendor/composer/ClassLoader.php:316:        // work around for PHP 5.3.0 - 5.3.2 https://bugs.php.net/50731
vendor/composer/ClassLoader.php:322:        if (isset($this->classMap[$class])) {
vendor/composer/ClassLoader.php:323:            return $this->classMap[$class];
vendor/composer/ClassLoader.php:325:        if ($this->classMapAuthoritative) {
vendor/composer/ClassLoader.php:329:        $file = $this->findFileWithExtension($class, '.php');
vendor/composer/ClassLoader.php:333:            $file = $this->findFileWithExtension($class, '.hh');
vendor/composer/ClassLoader.php:338:            return $this->classMap[$class] = false;
vendor/composer/ClassLoader.php:346:        // PSR-4 lookup
vendor/composer/ClassLoader.php:350:        if (isset($this->prefixLengthsPsr4[$first])) {
vendor/composer/ClassLoader.php:351:            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {
vendor/composer/ClassLoader.php:353:                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {
vendor/composer/ClassLoader.php:362:        // PSR-4 fallback dirs
vendor/composer/ClassLoader.php:363:        foreach ($this->fallbackDirsPsr4 as $dir) {
vendor/composer/ClassLoader.php:369:        // PSR-0 lookup
vendor/composer/ClassLoader.php:375:            // PEAR-like class name
vendor/composer/ClassLoader.php:379:        if (isset($this->prefixesPsr0[$first])) {
vendor/composer/ClassLoader.php:380:            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
vendor/composer/ClassLoader.php:391:        // PSR-0 fallback dirs
vendor/composer/ClassLoader.php:392:        foreach ($this->fallbackDirsPsr0 as $dir) {
vendor/composer/ClassLoader.php:398:        // PSR-0 include paths.
vendor/composer/ClassLoader.php:399:        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
vendor/composer/installed.json:3:        "name": "ocramius/package-versions",
vendor/composer/installed.json:18:            "composer-plugin-api": "^1.0",
vendor/composer/installed.json:21:        "require-dev": {
vendor/composer/installed.json:23:            "ext-zip": "*",
vendor/composer/installed.json:24:            "humbug/humbug": "dev-master",
vendor/composer/installed.json:27:        "time": "2017-11-24 11:07:03",
vendor/composer/installed.json:28:        "type": "composer-plugin",
vendor/composer/installed.json:31:            "branch-alias": {
vendor/composer/installed.json:32:                "dev-master": "2.0.x-dev"
vendor/composer/installed.json:35:        "installation-source": "dist",
vendor/composer/installed.json:37:            "psr-4": {
vendor/composer/installed.json:41:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:54:        "name": "phpstan/phpdoc-parser",
vendor/composer/installed.json:59:            "url": "https://github.com/phpstan/phpdoc-parser.git",
vendor/composer/installed.json:64:            "url": "https://api.github.com/repos/phpstan/phpdoc-parser/zipball/02f909f134fe06f0cd4790d8627ee24efbe84d6a",
vendor/composer/installed.json:71:        "require-dev": {
vendor/composer/installed.json:72:            "consistence/coding-standard": "^2.0.0",
vendor/composer/installed.json:73:            "jakub-onderka/php-parallel-lint": "^0.9.2",
vendor/composer/installed.json:77:            "slevomat/coding-standard": "^3.3.0"
vendor/composer/installed.json:79:        "time": "2018-01-13 18:19:41",
vendor/composer/installed.json:82:            "branch-alias": {
vendor/composer/installed.json:83:                "dev-master": "0.1-dev"
vendor/composer/installed.json:86:        "installation-source": "dist",
vendor/composer/installed.json:88:            "psr-4": {
vendor/composer/installed.json:94:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:101:        "name": "jean85/pretty-package-versions",
vendor/composer/installed.json:106:            "url": "https://github.com/Jean85/pretty-package-versions.git",
vendor/composer/installed.json:111:            "url": "https://api.github.com/repos/Jean85/pretty-package-versions/zipball/75c7effcf3f77501d0e0caa75111aff4daa0dd48",
vendor/composer/installed.json:116:            "ocramius/package-versions": "^1.2.0",
vendor/composer/installed.json:119:        "require-dev": {
vendor/composer/installed.json:122:        "time": "2018-06-13 13:22:40",
vendor/composer/installed.json:125:            "branch-alias": {
vendor/composer/installed.json:126:                "dev-master": "1.x-dev"
vendor/composer/installed.json:129:        "installation-source": "dist",
vendor/composer/installed.json:131:            "psr-4": {
vendor/composer/installed.json:135:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:145:        "description": "A wrapper for ocramius/package-versions to get pretty versions strings",
vendor/composer/installed.json:171:        "time": "2018-05-16 08:49:21",
vendor/composer/installed.json:174:            "branch-alias": {
vendor/composer/installed.json:175:                "dev-master": "3.4-dev"
vendor/composer/installed.json:178:        "installation-source": "dist",
vendor/composer/installed.json:180:            "psr-4": {
vendor/composer/installed.json:183:            "exclude-from-classmap": [
vendor/composer/installed.json:187:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:205:        "name": "symfony/polyfill-mbstring",
vendor/composer/installed.json:210:            "url": "https://github.com/symfony/polyfill-mbstring.git",
vendor/composer/installed.json:215:            "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/3296adf6a6454a050679cde90f95350ad604b171",
vendor/composer/installed.json:223:            "ext-mbstring": "For best performance"
vendor/composer/installed.json:225:        "time": "2018-04-26 10:06:28",
vendor/composer/installed.json:228:            "branch-alias": {
vendor/composer/installed.json:229:                "dev-master": "1.8-dev"
vendor/composer/installed.json:232:        "installation-source": "dist",
vendor/composer/installed.json:234:            "psr-4": {
vendor/composer/installed.json:241:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:271:            "url": "https://github.com/php-fig/log.git",
vendor/composer/installed.json:276:            "url": "https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
vendor/composer/installed.json:283:        "time": "2016-10-10 12:19:37",
vendor/composer/installed.json:286:            "branch-alias": {
vendor/composer/installed.json:287:                "dev-master": "1.0.x-dev"
vendor/composer/installed.json:290:        "installation-source": "dist",
vendor/composer/installed.json:292:            "psr-4": {
vendor/composer/installed.json:296:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:302:                "name": "PHP-FIG",
vendor/composer/installed.json:303:                "homepage": "http://www.php-fig.org/"
vendor/composer/installed.json:307:        "homepage": "https://github.com/php-fig/log",
vendor/composer/installed.json:311:            "psr-3"
vendor/composer/installed.json:334:            "symfony/http-kernel": ">=2.3,<2.3.24|~2.4.0|>=2.5,<2.5.9|>=2.6,<2.6.2"
vendor/composer/installed.json:336:        "require-dev": {
vendor/composer/installed.json:337:            "symfony/http-kernel": "~2.8|~3.0|~4.0"
vendor/composer/installed.json:339:        "time": "2018-05-16 14:03:39",
vendor/composer/installed.json:342:            "branch-alias": {
vendor/composer/installed.json:343:                "dev-master": "3.4-dev"
vendor/composer/installed.json:346:        "installation-source": "dist",
vendor/composer/installed.json:348:            "psr-4": {
vendor/composer/installed.json:351:            "exclude-from-classmap": [
vendor/composer/installed.json:355:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:390:            "symfony/polyfill-mbstring": "~1.0"
vendor/composer/installed.json:393:            "symfony/dependency-injection": "<3.4",
vendor/composer/installed.json:396:        "require-dev": {
vendor/composer/installed.json:399:            "symfony/dependency-injection": "~3.4|~4.0",
vendor/composer/installed.json:400:            "symfony/event-dispatcher": "~2.8|~3.0|~4.0",
vendor/composer/installed.json:405:            "psr/log-implementation": "For using the console logger",
vendor/composer/installed.json:406:            "symfony/event-dispatcher": "",
vendor/composer/installed.json:410:        "time": "2018-05-16 08:49:21",
vendor/composer/installed.json:413:            "branch-alias": {
vendor/composer/installed.json:414:                "dev-master": "3.4-dev"
vendor/composer/installed.json:417:        "installation-source": "dist",
vendor/composer/installed.json:419:            "psr-4": {
vendor/composer/installed.json:422:            "exclude-from-classmap": [
vendor/composer/installed.json:426:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:444:        "name": "nikic/php-parser",
vendor/composer/installed.json:449:            "url": "https://github.com/nikic/PHP-Parser.git",
vendor/composer/installed.json:454:            "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/bb87e28e7d7b8d9a7fda231d37457c9210faf6ce",
vendor/composer/installed.json:459:            "ext-tokenizer": "*",
vendor/composer/installed.json:462:        "require-dev": {
vendor/composer/installed.json:465:        "time": "2018-02-28 20:30:58",
vendor/composer/installed.json:467:            "bin/php-parse"
vendor/composer/installed.json:471:            "branch-alias": {
vendor/composer/installed.json:472:                "dev-master": "3.0-dev"
vendor/composer/installed.json:475:        "installation-source": "dist",
vendor/composer/installed.json:477:            "psr-4": {
vendor/composer/installed.json:481:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:483:            "BSD-3-Clause"
vendor/composer/installed.json:517:        "require-dev": {
vendor/composer/installed.json:522:            "ext-gd": "to use Image",
vendor/composer/installed.json:523:            "ext-iconv": "to use Strings::webalize() and toAscii()",
vendor/composer/installed.json:524:            "ext-intl": "for script transliteration in Strings::webalize() and toAscii()",
vendor/composer/installed.json:525:            "ext-json": "to use Nette\\Utils\\Json",
vendor/composer/installed.json:526:            "ext-mbstring": "to use Strings::lower() etc...",
vendor/composer/installed.json:527:            "ext-xml": "to use Strings::length() etc. when mbstring is not available"
vendor/composer/installed.json:529:        "time": "2018-05-02 17:16:08",
vendor/composer/installed.json:532:            "branch-alias": {
vendor/composer/installed.json:533:                "dev-master": "2.5-dev"
vendor/composer/installed.json:536:        "installation-source": "dist",
vendor/composer/installed.json:545:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:547:            "BSD-3-Clause",
vendor/composer/installed.json:548:            "GPL-2.0",
vendor/composer/installed.json:549:            "GPL-3.0"
vendor/composer/installed.json:575:            "utf-8",
vendor/composer/installed.json:602:        "require-dev": {
vendor/composer/installed.json:606:        "time": "2017-07-10 23:47:08",
vendor/composer/installed.json:609:            "branch-alias": {
vendor/composer/installed.json:610:                "dev-master": "2.4-dev"
vendor/composer/installed.json:613:        "installation-source": "dist",
vendor/composer/installed.json:619:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:621:            "BSD-3-Clause",
vendor/composer/installed.json:622:            "GPL-2.0",
vendor/composer/installed.json:623:            "GPL-3.0"
vendor/composer/installed.json:639:        "name": "nette/robot-loader",
vendor/composer/installed.json:644:            "url": "https://github.com/nette/robot-loader.git",
vendor/composer/installed.json:649:            "url": "https://api.github.com/repos/nette/robot-loader/zipball/92d4b40b49d5e2d9e37fc736bbcebe6da55fa44a",
vendor/composer/installed.json:654:            "ext-tokenizer": "*",
vendor/composer/installed.json:662:        "require-dev": {
vendor/composer/installed.json:666:        "time": "2017-09-26 13:42:21",
vendor/composer/installed.json:669:            "branch-alias": {
vendor/composer/installed.json:670:                "dev-master": "3.0-dev"
vendor/composer/installed.json:673:        "installation-source": "dist",
vendor/composer/installed.json:679:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:681:            "BSD-3-Clause",
vendor/composer/installed.json:682:            "GPL-2.0",
vendor/composer/installed.json:683:            "GPL-3.0"
vendor/composer/installed.json:706:        "name": "nette/php-generator",
vendor/composer/installed.json:711:            "url": "https://github.com/nette/php-generator.git",
vendor/composer/installed.json:716:            "url": "https://api.github.com/repos/nette/php-generator/zipball/b381ecacbf5a0b5f99cc0b303d5b0578d409f446",
vendor/composer/installed.json:727:        "require-dev": {
vendor/composer/installed.json:731:        "time": "2018-04-26 16:48:20",
vendor/composer/installed.json:734:            "branch-alias": {
vendor/composer/installed.json:735:                "dev-master": "3.0-dev"
vendor/composer/installed.json:738:        "installation-source": "dist",
vendor/composer/installed.json:744:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:746:            "BSD-3-Clause",
vendor/composer/installed.json:747:            "GPL-2.0",
vendor/composer/installed.json:748:            "GPL-3.0"
vendor/composer/installed.json:785:            "ext-iconv": "*",
vendor/composer/installed.json:786:            "ext-json": "*",
vendor/composer/installed.json:789:        "require-dev": {
vendor/composer/installed.json:793:        "time": "2017-07-11 18:29:08",
vendor/composer/installed.json:796:            "branch-alias": {
vendor/composer/installed.json:797:                "dev-master": "2.4-dev"
vendor/composer/installed.json:800:        "installation-source": "dist",
vendor/composer/installed.json:806:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:808:            "BSD-3-Clause",
vendor/composer/installed.json:809:            "GPL-2.0",
vendor/composer/installed.json:810:            "GPL-3.0"
vendor/composer/installed.json:823:        "homepage": "http://ne-on.org"
vendor/composer/installed.json:841:            "ext-tokenizer": "*",
vendor/composer/installed.json:843:            "nette/php-generator": "^2.6.1 || ~3.0.0",
vendor/composer/installed.json:851:        "require-dev": {
vendor/composer/installed.json:855:        "time": "2018-04-26 09:18:42",
vendor/composer/installed.json:858:            "branch-alias": {
vendor/composer/installed.json:859:                "dev-master": "2.4-dev"
vendor/composer/installed.json:862:        "installation-source": "dist",
vendor/composer/installed.json:868:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:870:            "BSD-3-Clause",
vendor/composer/installed.json:871:            "GPL-2.0",
vendor/composer/installed.json:872:            "GPL-3.0"
vendor/composer/installed.json:884:        "description": "💎 Nette Dependency Injection Container: Flexible, compiled and full-featured DIC with perfectly usable autowiring and support for all new PHP 7.1 features.",
vendor/composer/installed.json:919:        "require-dev": {
vendor/composer/installed.json:927:            "nette/robot-loader": "^2.4.2 || ^3.0",
vendor/composer/installed.json:928:            "nette/safe-stream": "~2.2",
vendor/composer/installed.json:934:            "nette/robot-loader": "to use Configurator::createRobotLoader()",
vendor/composer/installed.json:937:        "time": "2018-05-17 12:52:20",
vendor/composer/installed.json:940:            "branch-alias": {
vendor/composer/installed.json:941:                "dev-master": "2.4-dev"
vendor/composer/installed.json:944:        "installation-source": "dist",
vendor/composer/installed.json:950:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:952:            "BSD-3-Clause",
vendor/composer/installed.json:953:            "GPL-2.0",
vendor/composer/installed.json:954:            "GPL-3.0"
vendor/composer/installed.json:990:            "jean85/pretty-package-versions": "^1.0.3",
vendor/composer/installed.json:993:            "nette/robot-loader": "^3.0.1",
vendor/composer/installed.json:995:            "nikic/php-parser": "^3.1",
vendor/composer/installed.json:997:            "phpstan/phpdoc-parser": "^0.2",
vendor/composer/installed.json:1001:        "require-dev": {
vendor/composer/installed.json:1002:            "consistence/coding-standard": "2.2.1",
vendor/composer/installed.json:1003:            "ext-gd": "*",
vendor/composer/installed.json:1004:            "ext-intl": "*",
vendor/composer/installed.json:1005:            "ext-mysqli": "*",
vendor/composer/installed.json:1006:            "jakub-onderka/php-parallel-lint": "^0.9.2",
vendor/composer/installed.json:1008:            "phpstan/phpstan-php-parser": "^0.9",
vendor/composer/installed.json:1009:            "phpstan/phpstan-phpunit": "^0.9.3",
vendor/composer/installed.json:1010:            "phpstan/phpstan-strict-rules": "^0.9",
vendor/composer/installed.json:1012:            "slevomat/coding-standard": "4.0.0"
vendor/composer/installed.json:1014:        "time": "2018-01-28 13:22:19",
vendor/composer/installed.json:1020:            "branch-alias": {
vendor/composer/installed.json:1021:                "dev-master": "0.9-dev"
vendor/composer/installed.json:1024:        "installation-source": "dist",
vendor/composer/installed.json:1026:            "psr-4": {
vendor/composer/installed.json:1033:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:1037:        "description": "PHPStan - PHP Static Analysis Tool"
vendor/composer/installed.json:1040:        "name": "symfony/var-dumper",
vendor/composer/installed.json:1045:            "url": "https://github.com/symfony/var-dumper.git",
vendor/composer/installed.json:1050:            "url": "https://api.github.com/repos/symfony/var-dumper/zipball/e173954a28a44a32c690815fbe4d0f2eac43accb",
vendor/composer/installed.json:1056:            "symfony/polyfill-mbstring": "~1.0"
vendor/composer/installed.json:1061:        "require-dev": {
vendor/composer/installed.json:1062:            "ext-iconv": "*",
vendor/composer/installed.json:1066:            "ext-iconv": "To convert non-UTF-8 strings to UTF-8 (or symfony/polyfill-iconv in case ext-iconv cannot be used).",
vendor/composer/installed.json:1067:            "ext-intl": "To show region name in time zone dump",
vendor/composer/installed.json:1068:            "ext-symfony_debug": ""
vendor/composer/installed.json:1070:        "time": "2018-06-15 07:47:49",
vendor/composer/installed.json:1073:            "branch-alias": {
vendor/composer/installed.json:1074:                "dev-master": "3.4-dev"
vendor/composer/installed.json:1077:        "installation-source": "dist",
vendor/composer/installed.json:1082:            "psr-4": {
vendor/composer/installed.json:1085:            "exclude-from-classmap": [
vendor/composer/installed.json:1089:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:1111:        "name": "jakub-onderka/php-console-color",
vendor/composer/installed.json:1116:            "url": "https://github.com/JakubOnderka/PHP-Console-Color.git",
vendor/composer/installed.json:1121:            "url": "https://api.github.com/repos/JakubOnderka/PHP-Console-Color/zipball/e0b393dacf7703fc36a4efc3df1435485197e6c1",
vendor/composer/installed.json:1128:        "require-dev": {
vendor/composer/installed.json:1129:            "jakub-onderka/php-code-style": "1.0",
vendor/composer/installed.json:1130:            "jakub-onderka/php-parallel-lint": "0.*",
vendor/composer/installed.json:1131:            "jakub-onderka/php-var-dump-check": "0.*",
vendor/composer/installed.json:1135:        "time": "2014-04-08 15:00:19",
vendor/composer/installed.json:1137:        "installation-source": "dist",
vendor/composer/installed.json:1139:            "psr-0": {
vendor/composer/installed.json:1143:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:1145:            "BSD-2-Clause"
vendor/composer/installed.json:1156:        "name": "jakub-onderka/php-console-highlighter",
vendor/composer/installed.json:1161:            "url": "https://github.com/JakubOnderka/PHP-Console-Highlighter.git",
vendor/composer/installed.json:1166:            "url": "https://api.github.com/repos/JakubOnderka/PHP-Console-Highlighter/zipball/7daa75df45242c8d5b75a22c00a201e7954e4fb5",
vendor/composer/installed.json:1171:            "jakub-onderka/php-console-color": "~0.1",
vendor/composer/installed.json:1174:        "require-dev": {
vendor/composer/installed.json:1175:            "jakub-onderka/php-code-style": "~1.0",
vendor/composer/installed.json:1176:            "jakub-onderka/php-parallel-lint": "~0.5",
vendor/composer/installed.json:1177:            "jakub-onderka/php-var-dump-check": "~0.1",
vendor/composer/installed.json:1181:        "time": "2015-04-20 18:58:01",
vendor/composer/installed.json:1183:        "installation-source": "dist",
vendor/composer/installed.json:1185:            "psr-0": {
vendor/composer/installed.json:1189:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:1202:        "name": "dnoegel/php-xdg-base-dir",
vendor/composer/installed.json:1207:            "url": "https://github.com/dnoegel/php-xdg-base-dir.git",
vendor/composer/installed.json:1212:            "url": "https://api.github.com/repos/dnoegel/php-xdg-base-dir/zipball/265b8593498b997dc2d31e75b89f053b5cc9621a",
vendor/composer/installed.json:1219:        "require-dev": {
vendor/composer/installed.json:1222:        "time": "2014-10-24 07:27:01",
vendor/composer/installed.json:1224:        "installation-source": "dist",
vendor/composer/installed.json:1226:            "psr-4": {
vendor/composer/installed.json:1230:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/installed.json:1252:            "dnoegel/php-xdg-base-dir": "0.1",
vendor/composer/installed.json:1253:            "jakub-onderka/php-console-highlighter": "0.3.*",
vendor/composer/installed.json:1254:            "nikic/php-parser": "~1.3|~2.0|~3.0|~4.0",
vendor/composer/installed.json:1257:            "symfony/var-dumper": "~2.7|~3.0|~4.0"
vendor/composer/installed.json:1259:        "require-dev": {
vendor/composer/installed.json:1260:            "bamarni/composer-bin-plugin": "^1.2",
vendor/composer/installed.json:1265:            "ext-pcntl": "Enabling the PCNTL extension makes PsySH a lot happier :)",
vendor/composer/installed.json:1266:            "ext-pdo-sqlite": "The doc command requires SQLite to work.",
vendor/composer/installed.json:1267:            "ext-posix": "If you have PCNTL, you'll want the POSIX extension as well.",
vendor/composer/installed.json:1268:            "ext-readline": "Enables support for arrow-key history navigation, and showing and manipulating command history.",
vendor/composer/installed.json:1271:        "time": "2018-06-10 17:57:20",
vendor/composer/installed.json:1277:            "branch-alias": {
vendor/composer/installed.json:1278:                "dev-develop": "0.9.x-dev"
vendor/composer/installed.json:1281:        "installation-source": "dist",
vendor/composer/installed.json:1286:            "psr-4": {
vendor/composer/installed.json:1290:        "notification-url": "https://packagist.org/downloads/",
vendor/composer/autoload_psr4.php:9:    'XdgBaseDir\\' => array($vendorDir . '/dnoegel/php-xdg-base-dir/src'),
vendor/composer/autoload_psr4.php:10:    'Symfony\\Polyfill\\Mbstring\\' => array($vendorDir . '/symfony/polyfill-mbstring'),
vendor/composer/autoload_psr4.php:11:    'Symfony\\Component\\VarDumper\\' => array($vendorDir . '/symfony/var-dumper'),
vendor/composer/autoload_psr4.php:17:    'PhpParser\\' => array($vendorDir . '/nikic/php-parser/lib/PhpParser'),
vendor/composer/autoload_psr4.php:18:    'PackageVersions\\' => array($vendorDir . '/ocramius/package-versions/src/PackageVersions'),
vendor/composer/autoload_psr4.php:19:    'PHPStan\\PhpDocParser\\' => array($vendorDir . '/phpstan/phpdoc-parser/src'),
vendor/composer/autoload_psr4.php:21:    'Jean85\\' => array($vendorDir . '/jean85/pretty-package-versions/src'),
vendor/composer/autoload_namespaces.php:9:    'JakubOnderka\\PhpConsoleHighlighter' => array($vendorDir . '/jakub-onderka/php-console-highlighter/src'),
vendor/composer/autoload_namespaces.php:10:    'JakubOnderka\\PhpConsoleColor' => array($vendorDir . '/jakub-onderka/php-console-color/src'),
vendor/composer/LICENSE:1:Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
vendor/composer/LICENSE:2:Upstream-Name: Composer
vendor/composer/LICENSE:3:Upstream-Contact: Jordi Boggiano <j.boggiano@seld.be>
vendor/composer/LICENSE:13:License: MPL-2.0
vendor/composer/LICENSE:20:License: Expat and BSD-2-Clause
vendor/composer/LICENSE:22:License: BSD-2-Clause
vendor/composer/LICENSE:63:License: MPL-2.0
vendor/composer/LICENSE:65: --------------
vendor/composer/LICENSE:147: --------------------------------
vendor/composer/LICENSE:151: Each Contributor hereby grants You a world-wide, royalty-free,
vendor/composer/LICENSE:152: non-exclusive license:
vendor/composer/LICENSE:218: -------------------
vendor/composer/LICENSE:280: ---------------------------------------------------
vendor/composer/LICENSE:293: --------------
vendor/composer/LICENSE:301: non-compliance by some reasonable means prior to 60 days after You have
vendor/composer/LICENSE:304: notifies You of the non-compliance by some reasonable means, this is the
vendor/composer/LICENSE:305: first time You have received notice of non-compliance with this License
vendor/composer/LICENSE:311: counter-claims, and cross-claims) alleging that a Contributor Version
vendor/composer/LICENSE:324:  *  -------------------------                                           *
vendor/composer/LICENSE:330:  *  particular purpose or non-infringing. The entire risk as to the     *
vendor/composer/LICENSE:343:  *  --------------------------                                          *
vendor/composer/LICENSE:364: -------------
vendor/composer/LICENSE:369: jurisdiction, without reference to its conflict-of-law provisions.
vendor/composer/LICENSE:371: cross-claims or counter-claims.
vendor/composer/LICENSE:374: ----------------
vendor/composer/LICENSE:384: ---------------------------
vendor/composer/LICENSE:415: Exhibit A - Source Code Form License Notice
vendor/composer/LICENSE:416: -------------------------------------------
vendor/composer/LICENSE:429: Exhibit B - "Incompatible With Secondary Licenses" Notice
vendor/composer/LICENSE:430: ---------------------------------------------------------
vendor/composer/autoload_files.php:10:    '0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => $vendorDir . '/symfony/polyfill-mbstring/bootstrap.php',
vendor/composer/autoload_files.php:11:    '667aeda72477189d0494fecd327c3641' => $vendorDir . '/symfony/var-dumper/Resources/functions/dump.php',
vendor/symfony/console/composer.json:20:        "symfony/polyfill-mbstring": "~1.0",
vendor/symfony/console/composer.json:23:    "require-dev": {
vendor/symfony/console/composer.json:25:        "symfony/event-dispatcher": "~2.8|~3.0|~4.0",
vendor/symfony/console/composer.json:26:        "symfony/dependency-injection": "~3.4|~4.0",
vendor/symfony/console/composer.json:32:        "symfony/event-dispatcher": "",
vendor/symfony/console/composer.json:35:        "psr/log-implementation": "For using the console logger"
vendor/symfony/console/composer.json:38:        "symfony/dependency-injection": "<3.4",
vendor/symfony/console/composer.json:42:        "psr-4": { "Symfony\\Component\\Console\\": "" },
vendor/symfony/console/composer.json:43:        "exclude-from-classmap": [
vendor/symfony/console/composer.json:47:    "minimum-stability": "dev",
vendor/symfony/console/composer.json:49:        "branch-alias": {
vendor/symfony/console/composer.json:50:            "dev-master": "3.4-dev"
vendor/symfony/console/Exception/CommandNotFoundException.php:33:        $this->alternatives = $alternatives;
vendor/symfony/console/Exception/CommandNotFoundException.php:41:        return $this->alternatives;
vendor/symfony/console/Output/Output.php:23: *  * verbose: -v (more output)
vendor/symfony/console/Output/Output.php:24: *  * very verbose: -vv (highly extended output)
vendor/symfony/console/Output/Output.php:25: *  * debug: -vvv (all debug output)
vendor/symfony/console/Output/Output.php:26: *  * quiet: -q (no output)
vendor/symfony/console/Output/Output.php:42:        $this->verbosity = null === $verbosity ? self::VERBOSITY_NORMAL : $verbosity;
vendor/symfony/console/Output/Output.php:43:        $this->formatter = $formatter ?: new OutputFormatter();
vendor/symfony/console/Output/Output.php:44:        $this->formatter->setDecorated($decorated);
vendor/symfony/console/Output/Output.php:52:        $this->formatter = $formatter;
vendor/symfony/console/Output/Output.php:60:        return $this->formatter;
vendor/symfony/console/Output/Output.php:68:        $this->formatter->setDecorated($decorated);
vendor/symfony/console/Output/Output.php:76:        return $this->formatter->isDecorated();
vendor/symfony/console/Output/Output.php:84:        $this->verbosity = (int) $level;
vendor/symfony/console/Output/Output.php:92:        return $this->verbosity;
vendor/symfony/console/Output/Output.php:100:        return self::VERBOSITY_QUIET === $this->verbosity;
vendor/symfony/console/Output/Output.php:108:        return self::VERBOSITY_VERBOSE <= $this->verbosity;
vendor/symfony/console/Output/Output.php:116:        return self::VERBOSITY_VERY_VERBOSE <= $this->verbosity;
vendor/symfony/console/Output/Output.php:124:        return self::VERBOSITY_DEBUG <= $this->verbosity;
vendor/symfony/console/Output/Output.php:132:        $this->write($messages, true, $options);
vendor/symfony/console/Output/Output.php:148:        if ($verbosity > $this->getVerbosity()) {
vendor/symfony/console/Output/Output.php:155:                    $message = $this->formatter->format($message);
vendor/symfony/console/Output/Output.php:160:                    $message = strip_tags($this->formatter->format($message));
vendor/symfony/console/Output/Output.php:164:            $this->doWrite($message, $newline);
vendor/symfony/console/Output/ConsoleOutput.php:36:     * @param bool|null                     $decorated Whether to decorate messages (null for auto-guessing)
vendor/symfony/console/Output/ConsoleOutput.php:41:        parent::__construct($this->openOutputStream(), $verbosity, $decorated, $formatter);
vendor/symfony/console/Output/ConsoleOutput.php:43:        $actualDecorated = $this->isDecorated();
vendor/symfony/console/Output/ConsoleOutput.php:44:        $this->stderr = new StreamOutput($this->openErrorStream(), $verbosity, $decorated, $this->getFormatter());
vendor/symfony/console/Output/ConsoleOutput.php:47:            $this->setDecorated($actualDecorated && $this->stderr->isDecorated());
vendor/symfony/console/Output/ConsoleOutput.php:57:        $this->stderr->setDecorated($decorated);
vendor/symfony/console/Output/ConsoleOutput.php:66:        $this->stderr->setFormatter($formatter);
vendor/symfony/console/Output/ConsoleOutput.php:75:        $this->stderr->setVerbosity($level);
vendor/symfony/console/Output/ConsoleOutput.php:83:        return $this->stderr;
vendor/symfony/console/Output/ConsoleOutput.php:91:        $this->stderr = $error;
vendor/symfony/console/Output/ConsoleOutput.php:102:        return false === $this->isRunningOS400();
vendor/symfony/console/Output/ConsoleOutput.php:113:        return false === $this->isRunningOS400();
vendor/symfony/console/Output/ConsoleOutput.php:118:     * doesn't properly convert character-encodings between ASCII to EBCDIC.
vendor/symfony/console/Output/ConsoleOutput.php:138:        if (!$this->hasStdoutSupport()) {
vendor/symfony/console/Output/ConsoleOutput.php:150:        return fopen($this->hasStderrSupport() ? 'php://stderr' : 'php://output', 'w');
vendor/symfony/console/Output/BufferedOutput.php:15: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Output/BufferedOutput.php:28:        $content = $this->buffer;
vendor/symfony/console/Output/BufferedOutput.php:29:        $this->buffer = '';
vendor/symfony/console/Output/BufferedOutput.php:39:        $this->buffer .= $message;
vendor/symfony/console/Output/BufferedOutput.php:42:            $this->buffer .= PHP_EOL;
vendor/symfony/console/Output/StreamOutput.php:38:     * @param bool|null                     $decorated Whether to decorate messages (null for auto-guessing)
vendor/symfony/console/Output/StreamOutput.php:49:        $this->stream = $stream;
vendor/symfony/console/Output/StreamOutput.php:52:            $decorated = $this->hasColorSupport();
vendor/symfony/console/Output/StreamOutput.php:65:        return $this->stream;
vendor/symfony/console/Output/StreamOutput.php:73:        if (false === @fwrite($this->stream, $message) || ($newline && (false === @fwrite($this->stream, PHP_EOL)))) {
vendor/symfony/console/Output/StreamOutput.php:78:        fflush($this->stream);
vendor/symfony/console/Output/StreamOutput.php:90:     * https://github.com/composer/xdebug-handler
vendor/symfony/console/Output/StreamOutput.php:98:                && @sapi_windows_vt100_support($this->stream))
vendor/symfony/console/Output/StreamOutput.php:105:            return @stream_isatty($this->stream);
vendor/symfony/console/Output/StreamOutput.php:109:            return @posix_isatty($this->stream);
vendor/symfony/console/Output/StreamOutput.php:112:        $stat = @fstat($this->stream);
vendor/symfony/console/Output/OutputInterface.php:65:     * Returns whether verbosity is quiet (-q).
vendor/symfony/console/Output/OutputInterface.php:72:     * Returns whether verbosity is verbose (-v).
vendor/symfony/console/Output/OutputInterface.php:79:     * Returns whether verbosity is very verbose (-vv).
vendor/symfony/console/Output/OutputInterface.php:86:     * Returns whether verbosity is debug (-vvv).
vendor/symfony/console/Descriptor/DescriptorInterface.php:19: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Descriptor/Descriptor.php:23: * @author Jean-François Simon <jeanfrancois.simon@sensiolabs.com>
vendor/symfony/console/Descriptor/Descriptor.php:39:        $this->output = $output;
vendor/symfony/console/Descriptor/Descriptor.php:43:                $this->describeInputArgument($object, $options);
vendor/symfony/console/Descriptor/Descriptor.php:46:                $this->describeInputOption($object, $options);
vendor/symfony/console/Descriptor/Descriptor.php:49:                $this->describeInputDefinition($object, $options);
vendor/symfony/console/Descriptor/Descriptor.php:52:                $this->describeCommand($object, $options);
vendor/symfony/console/Descriptor/Descriptor.php:55:                $this->describeApplication($object, $options);
vendor/symfony/console/Descriptor/Descriptor.php:70:        $this->output->write($content, false, $decorated ? OutputInterface::OUTPUT_NORMAL : OutputInterface::OUTPUT_RAW);
vendor/symfony/console/Descriptor/TextDescriptor.php:25: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Descriptor/TextDescriptor.php:36:        if (null !== $argument->getDefault() && (!is_array($argument->getDefault()) || count($argument->getDefault()))) {
vendor/symfony/console/Descriptor/TextDescriptor.php:37:            $default = sprintf('<comment> [default: %s]</comment>', $this->formatDefaultValue($argument->getDefault()));
vendor/symfony/console/Descriptor/TextDescriptor.php:42:        $totalWidth = isset($options['total_width']) ? $options['total_width'] : Helper::strlen($argument->getName());
vendor/symfony/console/Descriptor/TextDescriptor.php:43:        $spacingWidth = $totalWidth - strlen($argument->getName());
vendor/symfony/console/Descriptor/TextDescriptor.php:45:        $this->writeText(sprintf('  <info>%s</info>  %s%s%s',
vendor/symfony/console/Descriptor/TextDescriptor.php:46:            $argument->getName(),
vendor/symfony/console/Descriptor/TextDescriptor.php:49:            preg_replace('/\s*[\r\n]\s*/', "\n".str_repeat(' ', $totalWidth + 4), $argument->getDescription()),
vendor/symfony/console/Descriptor/TextDescriptor.php:59:        if ($option->acceptValue() && null !== $option->getDefault() && (!is_array($option->getDefault()) || count($option->getDefault()))) {
vendor/symfony/console/Descriptor/TextDescriptor.php:60:            $default = sprintf('<comment> [default: %s]</comment>', $this->formatDefaultValue($option->getDefault()));
vendor/symfony/console/Descriptor/TextDescriptor.php:66:        if ($option->acceptValue()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:67:            $value = '='.strtoupper($option->getName());
vendor/symfony/console/Descriptor/TextDescriptor.php:69:            if ($option->isValueOptional()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:74:        $totalWidth = isset($options['total_width']) ? $options['total_width'] : $this->calculateTotalWidthForOptions(array($option));
vendor/symfony/console/Descriptor/TextDescriptor.php:76:            $option->getShortcut() ? sprintf('-%s, ', $option->getShortcut()) : '    ',
vendor/symfony/console/Descriptor/TextDescriptor.php:77:            sprintf('--%s%s', $option->getName(), $value)
vendor/symfony/console/Descriptor/TextDescriptor.php:80:        $spacingWidth = $totalWidth - Helper::strlen($synopsis);
vendor/symfony/console/Descriptor/TextDescriptor.php:82:        $this->writeText(sprintf('  <info>%s</info>  %s%s%s%s',
vendor/symfony/console/Descriptor/TextDescriptor.php:86:            preg_replace('/\s*[\r\n]\s*/', "\n".str_repeat(' ', $totalWidth + 4), $option->getDescription()),
vendor/symfony/console/Descriptor/TextDescriptor.php:88:            $option->isArray() ? '<comment> (multiple values allowed)</comment>' : ''
vendor/symfony/console/Descriptor/TextDescriptor.php:97:        $totalWidth = $this->calculateTotalWidthForOptions($definition->getOptions());
vendor/symfony/console/Descriptor/TextDescriptor.php:98:        foreach ($definition->getArguments() as $argument) {
vendor/symfony/console/Descriptor/TextDescriptor.php:99:            $totalWidth = max($totalWidth, Helper::strlen($argument->getName()));
vendor/symfony/console/Descriptor/TextDescriptor.php:102:        if ($definition->getArguments()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:103:            $this->writeText('<comment>Arguments:</comment>', $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:104:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:105:            foreach ($definition->getArguments() as $argument) {
vendor/symfony/console/Descriptor/TextDescriptor.php:106:                $this->describeInputArgument($argument, array_merge($options, array('total_width' => $totalWidth)));
vendor/symfony/console/Descriptor/TextDescriptor.php:107:                $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:111:        if ($definition->getArguments() && $definition->getOptions()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:112:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:115:        if ($definition->getOptions()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:118:            $this->writeText('<comment>Options:</comment>', $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:119:            foreach ($definition->getOptions() as $option) {
vendor/symfony/console/Descriptor/TextDescriptor.php:120:                if (strlen($option->getShortcut()) > 1) {
vendor/symfony/console/Descriptor/TextDescriptor.php:124:                $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:125:                $this->describeInputOption($option, array_merge($options, array('total_width' => $totalWidth)));
vendor/symfony/console/Descriptor/TextDescriptor.php:128:                $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:129:                $this->describeInputOption($option, array_merge($options, array('total_width' => $totalWidth)));
vendor/symfony/console/Descriptor/TextDescriptor.php:139:        $command->getSynopsis(true);
vendor/symfony/console/Descriptor/TextDescriptor.php:140:        $command->getSynopsis(false);
vendor/symfony/console/Descriptor/TextDescriptor.php:141:        $command->mergeApplicationDefinition(false);
vendor/symfony/console/Descriptor/TextDescriptor.php:143:        $this->writeText('<comment>Usage:</comment>', $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:144:        foreach (array_merge(array($command->getSynopsis(true)), $command->getAliases(), $command->getUsages()) as $usage) {
vendor/symfony/console/Descriptor/TextDescriptor.php:145:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:146:            $this->writeText('  '.OutputFormatter::escape($usage), $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:148:        $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:150:        $definition = $command->getNativeDefinition();
vendor/symfony/console/Descriptor/TextDescriptor.php:151:        if ($definition->getOptions() || $definition->getArguments()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:152:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:153:            $this->describeInputDefinition($definition, $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:154:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:157:        if ($help = $command->getProcessedHelp()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:158:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:159:            $this->writeText('<comment>Help:</comment>', $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:160:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:161:            $this->writeText('  '.str_replace("\n", "\n  ", $help), $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:162:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:175:            $width = $this->getColumnWidth($description->getCommands());
vendor/symfony/console/Descriptor/TextDescriptor.php:177:            foreach ($description->getCommands() as $command) {
vendor/symfony/console/Descriptor/TextDescriptor.php:178:                $this->writeText(sprintf("%-{$width}s %s", $command->getName(), $command->getDescription()), $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:179:                $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:182:            if ('' != $help = $application->getHelp()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:183:                $this->writeText("$help\n\n", $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:186:            $this->writeText("<comment>Usage:</comment>\n", $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:187:            $this->writeText("  command [options] [arguments]\n\n", $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:189:            $this->describeInputDefinition(new InputDefinition($application->getDefinition()->getOptions()), $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:191:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:192:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:194:            $commands = $description->getCommands();
vendor/symfony/console/Descriptor/TextDescriptor.php:195:            $namespaces = $description->getNamespaces();
vendor/symfony/console/Descriptor/TextDescriptor.php:200:                    $commands[$name] = $description->getCommand($name);
vendor/symfony/console/Descriptor/TextDescriptor.php:205:            $width = $this->getColumnWidth(call_user_func_array('array_merge', array_map(function ($namespace) use ($commands) {
vendor/symfony/console/Descriptor/TextDescriptor.php:210:                $this->writeText(sprintf('<comment>Available commands for the "%s" namespace:</comment>', $describedNamespace), $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:212:                $this->writeText('<comment>Available commands:</comment>', $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:225:                    $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:226:                    $this->writeText(' <comment>'.$namespace['id'].'</comment>', $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:230:                    $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:231:                    $spacingWidth = $width - Helper::strlen($name);
vendor/symfony/console/Descriptor/TextDescriptor.php:233:                    $commandAliases = $name === $command->getName() ? $this->getCommandAliasesText($command) : '';
vendor/symfony/console/Descriptor/TextDescriptor.php:234:                    $this->writeText(sprintf('  <info>%s</info>%s%s', $name, str_repeat(' ', $spacingWidth), $commandAliases.$command->getDescription()), $options);
vendor/symfony/console/Descriptor/TextDescriptor.php:238:            $this->writeText("\n");
vendor/symfony/console/Descriptor/TextDescriptor.php:247:        $this->write(
vendor/symfony/console/Descriptor/TextDescriptor.php:261:        $aliases = $command->getAliases();
vendor/symfony/console/Descriptor/TextDescriptor.php:307:                $widths[] = Helper::strlen($command->getName());
vendor/symfony/console/Descriptor/TextDescriptor.php:308:                foreach ($command->getAliases() as $alias) {
vendor/symfony/console/Descriptor/TextDescriptor.php:328:            // "-" + shortcut + ", --" + name
vendor/symfony/console/Descriptor/TextDescriptor.php:329:            $nameLength = 1 + max(Helper::strlen($option->getShortcut()), 1) + 4 + Helper::strlen($option->getName());
vendor/symfony/console/Descriptor/TextDescriptor.php:331:            if ($option->acceptValue()) {
vendor/symfony/console/Descriptor/TextDescriptor.php:332:                $valueLength = 1 + Helper::strlen($option->getName()); // = + value
vendor/symfony/console/Descriptor/TextDescriptor.php:333:                $valueLength += $option->isValueOptional() ? 2 : 0; // [ + ]
vendor/symfony/console/Descriptor/XmlDescriptor.php:23: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Descriptor/XmlDescriptor.php:34:        $dom = new \DOMDocument('1.0', 'UTF-8');
vendor/symfony/console/Descriptor/XmlDescriptor.php:35:        $dom->appendChild($definitionXML = $dom->createElement('definition'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:37:        $definitionXML->appendChild($argumentsXML = $dom->createElement('arguments'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:38:        foreach ($definition->getArguments() as $argument) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:39:            $this->appendDocument($argumentsXML, $this->getInputArgumentDocument($argument));
vendor/symfony/console/Descriptor/XmlDescriptor.php:42:        $definitionXML->appendChild($optionsXML = $dom->createElement('options'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:43:        foreach ($definition->getOptions() as $option) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:44:            $this->appendDocument($optionsXML, $this->getInputOptionDocument($option));
vendor/symfony/console/Descriptor/XmlDescriptor.php:55:        $dom = new \DOMDocument('1.0', 'UTF-8');
vendor/symfony/console/Descriptor/XmlDescriptor.php:56:        $dom->appendChild($commandXML = $dom->createElement('command'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:58:        $command->getSynopsis();
vendor/symfony/console/Descriptor/XmlDescriptor.php:59:        $command->mergeApplicationDefinition(false);
vendor/symfony/console/Descriptor/XmlDescriptor.php:61:        $commandXML->setAttribute('id', $command->getName());
vendor/symfony/console/Descriptor/XmlDescriptor.php:62:        $commandXML->setAttribute('name', $command->getName());
vendor/symfony/console/Descriptor/XmlDescriptor.php:63:        $commandXML->setAttribute('hidden', $command->isHidden() ? 1 : 0);
vendor/symfony/console/Descriptor/XmlDescriptor.php:65:        $commandXML->appendChild($usagesXML = $dom->createElement('usages'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:67:        foreach (array_merge(array($command->getSynopsis()), $command->getAliases(), $command->getUsages()) as $usage) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:68:            $usagesXML->appendChild($dom->createElement('usage', $usage));
vendor/symfony/console/Descriptor/XmlDescriptor.php:71:        $commandXML->appendChild($descriptionXML = $dom->createElement('description'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:72:        $descriptionXML->appendChild($dom->createTextNode(str_replace("\n", "\n ", $command->getDescription())));
vendor/symfony/console/Descriptor/XmlDescriptor.php:74:        $commandXML->appendChild($helpXML = $dom->createElement('help'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:75:        $helpXML->appendChild($dom->createTextNode(str_replace("\n", "\n ", $command->getProcessedHelp())));
vendor/symfony/console/Descriptor/XmlDescriptor.php:77:        $definitionXML = $this->getInputDefinitionDocument($command->getNativeDefinition());
vendor/symfony/console/Descriptor/XmlDescriptor.php:78:        $this->appendDocument($commandXML, $definitionXML->getElementsByTagName('definition')->item(0));
vendor/symfony/console/Descriptor/XmlDescriptor.php:91:        $dom = new \DOMDocument('1.0', 'UTF-8');
vendor/symfony/console/Descriptor/XmlDescriptor.php:92:        $dom->appendChild($rootXml = $dom->createElement('symfony'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:94:        if ('UNKNOWN' !== $application->getName()) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:95:            $rootXml->setAttribute('name', $application->getName());
vendor/symfony/console/Descriptor/XmlDescriptor.php:96:            if ('UNKNOWN' !== $application->getVersion()) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:97:                $rootXml->setAttribute('version', $application->getVersion());
vendor/symfony/console/Descriptor/XmlDescriptor.php:101:        $rootXml->appendChild($commandsXML = $dom->createElement('commands'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:106:            $commandsXML->setAttribute('namespace', $namespace);
vendor/symfony/console/Descriptor/XmlDescriptor.php:109:        foreach ($description->getCommands() as $command) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:110:            $this->appendDocument($commandsXML, $this->getCommandDocument($command));
vendor/symfony/console/Descriptor/XmlDescriptor.php:114:            $rootXml->appendChild($namespacesXML = $dom->createElement('namespaces'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:116:            foreach ($description->getNamespaces() as $namespaceDescription) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:117:                $namespacesXML->appendChild($namespaceArrayXML = $dom->createElement('namespace'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:118:                $namespaceArrayXML->setAttribute('id', $namespaceDescription['id']);
vendor/symfony/console/Descriptor/XmlDescriptor.php:121:                    $namespaceArrayXML->appendChild($commandXML = $dom->createElement('command'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:122:                    $commandXML->appendChild($dom->createTextNode($name));
vendor/symfony/console/Descriptor/XmlDescriptor.php:135:        $this->writeDocument($this->getInputArgumentDocument($argument));
vendor/symfony/console/Descriptor/XmlDescriptor.php:143:        $this->writeDocument($this->getInputOptionDocument($option));
vendor/symfony/console/Descriptor/XmlDescriptor.php:151:        $this->writeDocument($this->getInputDefinitionDocument($definition));
vendor/symfony/console/Descriptor/XmlDescriptor.php:159:        $this->writeDocument($this->getCommandDocument($command));
vendor/symfony/console/Descriptor/XmlDescriptor.php:167:        $this->writeDocument($this->getApplicationDocument($application, isset($options['namespace']) ? $options['namespace'] : null));
vendor/symfony/console/Descriptor/XmlDescriptor.php:175:        foreach ($importedParent->childNodes as $childNode) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:176:            $parentNode->appendChild($parentNode->ownerDocument->importNode($childNode, true));
vendor/symfony/console/Descriptor/XmlDescriptor.php:187:        $dom->formatOutput = true;
vendor/symfony/console/Descriptor/XmlDescriptor.php:188:        $this->write($dom->saveXML());
vendor/symfony/console/Descriptor/XmlDescriptor.php:196:        $dom = new \DOMDocument('1.0', 'UTF-8');
vendor/symfony/console/Descriptor/XmlDescriptor.php:198:        $dom->appendChild($objectXML = $dom->createElement('argument'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:199:        $objectXML->setAttribute('name', $argument->getName());
vendor/symfony/console/Descriptor/XmlDescriptor.php:200:        $objectXML->setAttribute('is_required', $argument->isRequired() ? 1 : 0);
vendor/symfony/console/Descriptor/XmlDescriptor.php:201:        $objectXML->setAttribute('is_array', $argument->isArray() ? 1 : 0);
vendor/symfony/console/Descriptor/XmlDescriptor.php:202:        $objectXML->appendChild($descriptionXML = $dom->createElement('description'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:203:        $descriptionXML->appendChild($dom->createTextNode($argument->getDescription()));
vendor/symfony/console/Descriptor/XmlDescriptor.php:205:        $objectXML->appendChild($defaultsXML = $dom->createElement('defaults'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:206:        $defaults = is_array($argument->getDefault()) ? $argument->getDefault() : (is_bool($argument->getDefault()) ? array(var_export($argument->getDefault(), true)) : ($argument->getDefault() ? array($argument->getDefault()) : array()));
vendor/symfony/console/Descriptor/XmlDescriptor.php:208:            $defaultsXML->appendChild($defaultXML = $dom->createElement('default'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:209:            $defaultXML->appendChild($dom->createTextNode($default));
vendor/symfony/console/Descriptor/XmlDescriptor.php:220:        $dom = new \DOMDocument('1.0', 'UTF-8');
vendor/symfony/console/Descriptor/XmlDescriptor.php:222:        $dom->appendChild($objectXML = $dom->createElement('option'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:223:        $objectXML->setAttribute('name', '--'.$option->getName());
vendor/symfony/console/Descriptor/XmlDescriptor.php:224:        $pos = strpos($option->getShortcut(), '|');
vendor/symfony/console/Descriptor/XmlDescriptor.php:226:            $objectXML->setAttribute('shortcut', '-'.substr($option->getShortcut(), 0, $pos));
vendor/symfony/console/Descriptor/XmlDescriptor.php:227:            $objectXML->setAttribute('shortcuts', '-'.str_replace('|', '|-', $option->getShortcut()));
vendor/symfony/console/Descriptor/XmlDescriptor.php:229:            $objectXML->setAttribute('shortcut', $option->getShortcut() ? '-'.$option->getShortcut() : '');
vendor/symfony/console/Descriptor/XmlDescriptor.php:231:        $objectXML->setAttribute('accept_value', $option->acceptValue() ? 1 : 0);
vendor/symfony/console/Descriptor/XmlDescriptor.php:232:        $objectXML->setAttribute('is_value_required', $option->isValueRequired() ? 1 : 0);
vendor/symfony/console/Descriptor/XmlDescriptor.php:233:        $objectXML->setAttribute('is_multiple', $option->isArray() ? 1 : 0);
vendor/symfony/console/Descriptor/XmlDescriptor.php:234:        $objectXML->appendChild($descriptionXML = $dom->createElement('description'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:235:        $descriptionXML->appendChild($dom->createTextNode($option->getDescription()));
vendor/symfony/console/Descriptor/XmlDescriptor.php:237:        if ($option->acceptValue()) {
vendor/symfony/console/Descriptor/XmlDescriptor.php:238:            $defaults = is_array($option->getDefault()) ? $option->getDefault() : (is_bool($option->getDefault()) ? array(var_export($option->getDefault(), true)) : ($option->getDefault() ? array($option->getDefault()) : array()));
vendor/symfony/console/Descriptor/XmlDescriptor.php:239:            $objectXML->appendChild($defaultsXML = $dom->createElement('defaults'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:243:                    $defaultsXML->appendChild($defaultXML = $dom->createElement('default'));
vendor/symfony/console/Descriptor/XmlDescriptor.php:244:                    $defaultXML->appendChild($dom->createTextNode($default));
vendor/symfony/console/Descriptor/JsonDescriptor.php:23: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Descriptor/JsonDescriptor.php:34:        $this->writeData($this->getInputArgumentData($argument), $options);
vendor/symfony/console/Descriptor/JsonDescriptor.php:42:        $this->writeData($this->getInputOptionData($option), $options);
vendor/symfony/console/Descriptor/JsonDescriptor.php:50:        $this->writeData($this->getInputDefinitionData($definition), $options);
vendor/symfony/console/Descriptor/JsonDescriptor.php:58:        $this->writeData($this->getCommandData($command), $options);
vendor/symfony/console/Descriptor/JsonDescriptor.php:70:        foreach ($description->getCommands() as $command) {
vendor/symfony/console/Descriptor/JsonDescriptor.php:71:            $commands[] = $this->getCommandData($command);
vendor/symfony/console/Descriptor/JsonDescriptor.php:75:        if ('UNKNOWN' !== $application->getName()) {
vendor/symfony/console/Descriptor/JsonDescriptor.php:76:            $data['application']['name'] = $application->getName();
vendor/symfony/console/Descriptor/JsonDescriptor.php:77:            if ('UNKNOWN' !== $application->getVersion()) {
vendor/symfony/console/Descriptor/JsonDescriptor.php:78:                $data['application']['version'] = $application->getVersion();
vendor/symfony/console/Descriptor/JsonDescriptor.php:87:            $data['namespaces'] = array_values($description->getNamespaces());
vendor/symfony/console/Descriptor/JsonDescriptor.php:90:        $this->writeData($data, $options);
vendor/symfony/console/Descriptor/JsonDescriptor.php:100:        $this->write(json_encode($data, isset($options['json_encoding']) ? $options['json_encoding'] : 0));
vendor/symfony/console/Descriptor/JsonDescriptor.php:109:            'name' => $argument->getName(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:110:            'is_required' => $argument->isRequired(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:111:            'is_array' => $argument->isArray(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:112:            'description' => preg_replace('/\s*[\r\n]\s*/', ' ', $argument->getDescription()),
vendor/symfony/console/Descriptor/JsonDescriptor.php:113:            'default' => INF === $argument->getDefault() ? 'INF' : $argument->getDefault(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:123:            'name' => '--'.$option->getName(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:124:            'shortcut' => $option->getShortcut() ? '-'.str_replace('|', '|-', $option->getShortcut()) : '',
vendor/symfony/console/Descriptor/JsonDescriptor.php:125:            'accept_value' => $option->acceptValue(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:126:            'is_value_required' => $option->isValueRequired(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:127:            'is_multiple' => $option->isArray(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:128:            'description' => preg_replace('/\s*[\r\n]\s*/', ' ', $option->getDescription()),
vendor/symfony/console/Descriptor/JsonDescriptor.php:129:            'default' => INF === $option->getDefault() ? 'INF' : $option->getDefault(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:139:        foreach ($definition->getArguments() as $name => $argument) {
vendor/symfony/console/Descriptor/JsonDescriptor.php:140:            $inputArguments[$name] = $this->getInputArgumentData($argument);
vendor/symfony/console/Descriptor/JsonDescriptor.php:144:        foreach ($definition->getOptions() as $name => $option) {
vendor/symfony/console/Descriptor/JsonDescriptor.php:145:            $inputOptions[$name] = $this->getInputOptionData($option);
vendor/symfony/console/Descriptor/JsonDescriptor.php:156:        $command->getSynopsis();
vendor/symfony/console/Descriptor/JsonDescriptor.php:157:        $command->mergeApplicationDefinition(false);
vendor/symfony/console/Descriptor/JsonDescriptor.php:160:            'name' => $command->getName(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:161:            'usage' => array_merge(array($command->getSynopsis()), $command->getUsages(), $command->getAliases()),
vendor/symfony/console/Descriptor/JsonDescriptor.php:162:            'description' => $command->getDescription(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:163:            'help' => $command->getProcessedHelp(),
vendor/symfony/console/Descriptor/JsonDescriptor.php:164:            'definition' => $this->getInputDefinitionData($command->getNativeDefinition()),
vendor/symfony/console/Descriptor/JsonDescriptor.php:165:            'hidden' => $command->isHidden(),
vendor/symfony/console/Descriptor/ApplicationDescription.php:19: * @author Jean-François Simon <jeanfrancois.simon@sensiolabs.com>
vendor/symfony/console/Descriptor/ApplicationDescription.php:53:        $this->application = $application;
vendor/symfony/console/Descriptor/ApplicationDescription.php:54:        $this->namespace = $namespace;
vendor/symfony/console/Descriptor/ApplicationDescription.php:55:        $this->showHidden = $showHidden;
vendor/symfony/console/Descriptor/ApplicationDescription.php:63:        if (null === $this->namespaces) {
vendor/symfony/console/Descriptor/ApplicationDescription.php:64:            $this->inspectApplication();
vendor/symfony/console/Descriptor/ApplicationDescription.php:67:        return $this->namespaces;
vendor/symfony/console/Descriptor/ApplicationDescription.php:75:        if (null === $this->commands) {
vendor/symfony/console/Descriptor/ApplicationDescription.php:76:            $this->inspectApplication();
vendor/symfony/console/Descriptor/ApplicationDescription.php:79:        return $this->commands;
vendor/symfony/console/Descriptor/ApplicationDescription.php:91:        if (!isset($this->commands[$name]) && !isset($this->aliases[$name])) {
vendor/symfony/console/Descriptor/ApplicationDescription.php:95:        return isset($this->commands[$name]) ? $this->commands[$name] : $this->aliases[$name];
vendor/symfony/console/Descriptor/ApplicationDescription.php:100:        $this->commands = array();
vendor/symfony/console/Descriptor/ApplicationDescription.php:101:        $this->namespaces = array();
vendor/symfony/console/Descriptor/ApplicationDescription.php:103:        $all = $this->application->all($this->namespace ? $this->application->findNamespace($this->namespace) : null);
vendor/symfony/console/Descriptor/ApplicationDescription.php:104:        foreach ($this->sortCommands($all) as $namespace => $commands) {
vendor/symfony/console/Descriptor/ApplicationDescription.php:109:                if (!$command->getName() || (!$this->showHidden && $command->isHidden())) {
vendor/symfony/console/Descriptor/ApplicationDescription.php:113:                if ($command->getName() === $name) {
vendor/symfony/console/Descriptor/ApplicationDescription.php:114:                    $this->commands[$name] = $command;
vendor/symfony/console/Descriptor/ApplicationDescription.php:116:                    $this->aliases[$name] = $command;
vendor/symfony/console/Descriptor/ApplicationDescription.php:122:            $this->namespaces[$namespace] = array('id' => $namespace, 'commands' => $names);
vendor/symfony/console/Descriptor/ApplicationDescription.php:134:            $key = $this->application->extractNamespace($name, 1);
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:25: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:36:        $decorated = $output->isDecorated();
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:37:        $output->setDecorated(false);
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:41:        $output->setDecorated($decorated);
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:57:        $this->write(
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:58:            '#### `'.($argument->getName() ?: '<none>')."`\n\n"
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:59:            .($argument->getDescription() ? preg_replace('/\s*[\r\n]\s*/', "\n", $argument->getDescription())."\n\n" : '')
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:60:            .'* Is required: '.($argument->isRequired() ? 'yes' : 'no')."\n"
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:61:            .'* Is array: '.($argument->isArray() ? 'yes' : 'no')."\n"
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:62:            .'* Default: `'.str_replace("\n", '', var_export($argument->getDefault(), true)).'`'
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:71:        $name = '--'.$option->getName();
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:72:        if ($option->getShortcut()) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:73:            $name .= '|-'.str_replace('|', '|-', $option->getShortcut()).'';
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:76:        $this->write(
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:78:            .($option->getDescription() ? preg_replace('/\s*[\r\n]\s*/', "\n", $option->getDescription())."\n\n" : '')
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:79:            .'* Accept value: '.($option->acceptValue() ? 'yes' : 'no')."\n"
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:80:            .'* Is value required: '.($option->isValueRequired() ? 'yes' : 'no')."\n"
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:81:            .'* Is multiple: '.($option->isArray() ? 'yes' : 'no')."\n"
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:82:            .'* Default: `'.str_replace("\n", '', var_export($option->getDefault(), true)).'`'
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:91:        if ($showArguments = count($definition->getArguments()) > 0) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:92:            $this->write('### Arguments');
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:93:            foreach ($definition->getArguments() as $argument) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:94:                $this->write("\n\n");
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:95:                $this->write($this->describeInputArgument($argument));
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:99:        if (count($definition->getOptions()) > 0) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:101:                $this->write("\n\n");
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:104:            $this->write('### Options');
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:105:            foreach ($definition->getOptions() as $option) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:106:                $this->write("\n\n");
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:107:                $this->write($this->describeInputOption($option));
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:117:        $command->getSynopsis();
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:118:        $command->mergeApplicationDefinition(false);
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:120:        $this->write(
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:121:            '`'.$command->getName()."`\n"
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:122:            .str_repeat('-', Helper::strlen($command->getName()) + 2)."\n\n"
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:123:            .($command->getDescription() ? $command->getDescription()."\n\n" : '')
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:125:            .array_reduce(array_merge(array($command->getSynopsis()), $command->getAliases(), $command->getUsages()), function ($carry, $usage) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:130:        if ($help = $command->getProcessedHelp()) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:131:            $this->write("\n");
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:132:            $this->write($help);
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:135:        if ($command->getNativeDefinition()) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:136:            $this->write("\n\n");
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:137:            $this->describeInputDefinition($command->getNativeDefinition());
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:148:        $title = $this->getApplicationTitle($application);
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:150:        $this->write($title."\n".str_repeat('=', Helper::strlen($title)));
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:152:        foreach ($description->getNamespaces() as $namespace) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:154:                $this->write("\n\n");
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:155:                $this->write('**'.$namespace['id'].':**');
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:158:            $this->write("\n\n");
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:159:            $this->write(implode("\n", array_map(function ($commandName) use ($description) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:160:                return sprintf('* [`%s`](#%s)', $commandName, str_replace(':', '', $description->getCommand($commandName)->getName()));
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:164:        foreach ($description->getCommands() as $command) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:165:            $this->write("\n\n");
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:166:            $this->write($this->describeCommand($command));
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:172:        if ('UNKNOWN' !== $application->getName()) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:173:            if ('UNKNOWN' !== $application->getVersion()) {
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:174:                return sprintf('%s %s', $application->getName(), $application->getVersion());
vendor/symfony/console/Descriptor/MarkdownDescriptor.php:177:            return $application->getName();
vendor/symfony/console/README.md:8:---------
vendor/symfony/console/README.md:17:-------
vendor/symfony/console/README.md:20:component. Find sources and license at https://github.com/Seldaek/hidden-input.
vendor/symfony/console/Helper/ProgressIndicator.php:44:        $this->output = $output;
vendor/symfony/console/Helper/ProgressIndicator.php:47:            $format = $this->determineBestFormat();
vendor/symfony/console/Helper/ProgressIndicator.php:51:            $indicatorValues = array('-', '\\', '|', '/');
vendor/symfony/console/Helper/ProgressIndicator.php:60:        $this->format = self::getFormatDefinition($format);
vendor/symfony/console/Helper/ProgressIndicator.php:61:        $this->indicatorChangeInterval = $indicatorChangeInterval;
vendor/symfony/console/Helper/ProgressIndicator.php:62:        $this->indicatorValues = $indicatorValues;
vendor/symfony/console/Helper/ProgressIndicator.php:63:        $this->startTime = time();
vendor/symfony/console/Helper/ProgressIndicator.php:73:        $this->message = $message;
vendor/symfony/console/Helper/ProgressIndicator.php:75:        $this->display();
vendor/symfony/console/Helper/ProgressIndicator.php:85:        if ($this->started) {
vendor/symfony/console/Helper/ProgressIndicator.php:89:        $this->message = $message;
vendor/symfony/console/Helper/ProgressIndicator.php:90:        $this->started = true;
vendor/symfony/console/Helper/ProgressIndicator.php:91:        $this->startTime = time();
vendor/symfony/console/Helper/ProgressIndicator.php:92:        $this->indicatorUpdateTime = $this->getCurrentTimeInMilliseconds() + $this->indicatorChangeInterval;
vendor/symfony/console/Helper/ProgressIndicator.php:93:        $this->indicatorCurrent = 0;
vendor/symfony/console/Helper/ProgressIndicator.php:95:        $this->display();
vendor/symfony/console/Helper/ProgressIndicator.php:103:        if (!$this->started) {
vendor/symfony/console/Helper/ProgressIndicator.php:107:        if (!$this->output->isDecorated()) {
vendor/symfony/console/Helper/ProgressIndicator.php:111:        $currentTime = $this->getCurrentTimeInMilliseconds();
vendor/symfony/console/Helper/ProgressIndicator.php:113:        if ($currentTime < $this->indicatorUpdateTime) {
vendor/symfony/console/Helper/ProgressIndicator.php:117:        $this->indicatorUpdateTime = $currentTime + $this->indicatorChangeInterval;
vendor/symfony/console/Helper/ProgressIndicator.php:118:        ++$this->indicatorCurrent;
vendor/symfony/console/Helper/ProgressIndicator.php:120:        $this->display();
vendor/symfony/console/Helper/ProgressIndicator.php:130:        if (!$this->started) {
vendor/symfony/console/Helper/ProgressIndicator.php:134:        $this->message = $message;
vendor/symfony/console/Helper/ProgressIndicator.php:135:        $this->display();
vendor/symfony/console/Helper/ProgressIndicator.php:136:        $this->output->writeln('');
vendor/symfony/console/Helper/ProgressIndicator.php:137:        $this->started = false;
vendor/symfony/console/Helper/ProgressIndicator.php:191:        if (OutputInterface::VERBOSITY_QUIET === $this->output->getVerbosity()) {
vendor/symfony/console/Helper/ProgressIndicator.php:197:        $this->overwrite(preg_replace_callback("{%([a-z\-_]+)(?:\:([^%]+))?%}i", function ($matches) use ($self) {
vendor/symfony/console/Helper/ProgressIndicator.php:203:        }, $this->format));
vendor/symfony/console/Helper/ProgressIndicator.php:208:        switch ($this->output->getVerbosity()) {
vendor/symfony/console/Helper/ProgressIndicator.php:211:                return $this->output->isDecorated() ? 'verbose' : 'verbose_no_ansi';
vendor/symfony/console/Helper/ProgressIndicator.php:214:                return $this->output->isDecorated() ? 'very_verbose' : 'very_verbose_no_ansi';
vendor/symfony/console/Helper/ProgressIndicator.php:216:                return $this->output->isDecorated() ? 'normal' : 'normal_no_ansi';
vendor/symfony/console/Helper/ProgressIndicator.php:227:        if ($this->output->isDecorated()) {
vendor/symfony/console/Helper/ProgressIndicator.php:228:            $this->output->write("\x0D\x1B[2K");
vendor/symfony/console/Helper/ProgressIndicator.php:229:            $this->output->write($message);
vendor/symfony/console/Helper/ProgressIndicator.php:231:            $this->output->writeln($message);
vendor/symfony/console/Helper/ProgressIndicator.php:244:                return $indicator->indicatorValues[$indicator->indicatorCurrent % count($indicator->indicatorValues)];
vendor/symfony/console/Helper/ProgressIndicator.php:247:                return $indicator->message;
vendor/symfony/console/Helper/ProgressIndicator.php:250:                return Helper::formatTime(time() - $indicator->startTime);
vendor/symfony/console/Helper/ProgressBar.php:29:    private $emptyBarChar = '-';
vendor/symfony/console/Helper/ProgressBar.php:56:            $output = $output->getErrorOutput();
vendor/symfony/console/Helper/ProgressBar.php:59:        $this->output = $output;
vendor/symfony/console/Helper/ProgressBar.php:60:        $this->setMaxSteps($max);
vendor/symfony/console/Helper/ProgressBar.php:61:        $this->terminal = new Terminal();
vendor/symfony/console/Helper/ProgressBar.php:63:        if (!$this->output->isDecorated()) {
vendor/symfony/console/Helper/ProgressBar.php:65:            $this->overwrite = false;
vendor/symfony/console/Helper/ProgressBar.php:68:            $this->setRedrawFrequency($max / 10);
vendor/symfony/console/Helper/ProgressBar.php:71:        $this->startTime = time();
vendor/symfony/console/Helper/ProgressBar.php:152:        $this->messages[$name] = $message;
vendor/symfony/console/Helper/ProgressBar.php:157:        return $this->messages[$name];
vendor/symfony/console/Helper/ProgressBar.php:167:        return $this->startTime;
vendor/symfony/console/Helper/ProgressBar.php:177:        return $this->max;
vendor/symfony/console/Helper/ProgressBar.php:187:        return $this->step;
vendor/symfony/console/Helper/ProgressBar.php:197:        return $this->stepWidth;
vendor/symfony/console/Helper/ProgressBar.php:207:        return $this->percent;
vendor/symfony/console/Helper/ProgressBar.php:217:        $this->barWidth = max(1, (int) $size);
vendor/symfony/console/Helper/ProgressBar.php:227:        return $this->barWidth;
vendor/symfony/console/Helper/ProgressBar.php:237:        $this->barChar = $char;
vendor/symfony/console/Helper/ProgressBar.php:247:        if (null === $this->barChar) {
vendor/symfony/console/Helper/ProgressBar.php:248:            return $this->max ? '=' : $this->emptyBarChar;
vendor/symfony/console/Helper/ProgressBar.php:251:        return $this->barChar;
vendor/symfony/console/Helper/ProgressBar.php:261:        $this->emptyBarChar = $char;
vendor/symfony/console/Helper/ProgressBar.php:271:        return $this->emptyBarChar;
vendor/symfony/console/Helper/ProgressBar.php:281:        $this->progressChar = $char;
vendor/symfony/console/Helper/ProgressBar.php:291:        return $this->progressChar;
vendor/symfony/console/Helper/ProgressBar.php:301:        $this->format = null;
vendor/symfony/console/Helper/ProgressBar.php:302:        $this->internalFormat = $format;
vendor/symfony/console/Helper/ProgressBar.php:312:        $this->redrawFreq = max((int) $freq, 1);
vendor/symfony/console/Helper/ProgressBar.php:322:        $this->startTime = time();
vendor/symfony/console/Helper/ProgressBar.php:323:        $this->step = 0;
vendor/symfony/console/Helper/ProgressBar.php:324:        $this->percent = 0.0;
vendor/symfony/console/Helper/ProgressBar.php:327:            $this->setMaxSteps($max);
vendor/symfony/console/Helper/ProgressBar.php:330:        $this->display();
vendor/symfony/console/Helper/ProgressBar.php:340:        $this->setProgress($this->step + $step);
vendor/symfony/console/Helper/ProgressBar.php:350:        $this->overwrite = (bool) $overwrite;
vendor/symfony/console/Helper/ProgressBar.php:362:        if ($this->max && $step > $this->max) {
vendor/symfony/console/Helper/ProgressBar.php:363:            $this->max = $step;
vendor/symfony/console/Helper/ProgressBar.php:368:        $prevPeriod = (int) ($this->step / $this->redrawFreq);
vendor/symfony/console/Helper/ProgressBar.php:369:        $currPeriod = (int) ($step / $this->redrawFreq);
vendor/symfony/console/Helper/ProgressBar.php:370:        $this->step = $step;
vendor/symfony/console/Helper/ProgressBar.php:371:        $this->percent = $this->max ? (float) $this->step / $this->max : 0;
vendor/symfony/console/Helper/ProgressBar.php:372:        if ($prevPeriod !== $currPeriod || $this->max === $step) {
vendor/symfony/console/Helper/ProgressBar.php:373:            $this->display();
vendor/symfony/console/Helper/ProgressBar.php:382:        if (!$this->max) {
vendor/symfony/console/Helper/ProgressBar.php:383:            $this->max = $this->step;
vendor/symfony/console/Helper/ProgressBar.php:386:        if ($this->step === $this->max && !$this->overwrite) {
vendor/symfony/console/Helper/ProgressBar.php:391:        $this->setProgress($this->max);
vendor/symfony/console/Helper/ProgressBar.php:399:        if (OutputInterface::VERBOSITY_QUIET === $this->output->getVerbosity()) {
vendor/symfony/console/Helper/ProgressBar.php:403:        if (null === $this->format) {
vendor/symfony/console/Helper/ProgressBar.php:404:            $this->setRealFormat($this->internalFormat ?: $this->determineBestFormat());
vendor/symfony/console/Helper/ProgressBar.php:407:        $this->overwrite($this->buildLine());
vendor/symfony/console/Helper/ProgressBar.php:419:        if (!$this->overwrite) {
vendor/symfony/console/Helper/ProgressBar.php:423:        if (null === $this->format) {
vendor/symfony/console/Helper/ProgressBar.php:424:            $this->setRealFormat($this->internalFormat ?: $this->determineBestFormat());
vendor/symfony/console/Helper/ProgressBar.php:427:        $this->overwrite('');
vendor/symfony/console/Helper/ProgressBar.php:438:        if (!$this->max && null !== self::getFormatDefinition($format.'_nomax')) {
vendor/symfony/console/Helper/ProgressBar.php:439:            $this->format = self::getFormatDefinition($format.'_nomax');
vendor/symfony/console/Helper/ProgressBar.php:441:            $this->format = self::getFormatDefinition($format);
vendor/symfony/console/Helper/ProgressBar.php:443:            $this->format = $format;
vendor/symfony/console/Helper/ProgressBar.php:446:        $this->formatLineCount = substr_count($this->format, "\n");
vendor/symfony/console/Helper/ProgressBar.php:456:        $this->max = max(0, (int) $max);
vendor/symfony/console/Helper/ProgressBar.php:457:        $this->stepWidth = $this->max ? Helper::strlen($this->max) : 4;
vendor/symfony/console/Helper/ProgressBar.php:467:        if ($this->overwrite) {
vendor/symfony/console/Helper/ProgressBar.php:468:            if (!$this->firstRun) {
vendor/symfony/console/Helper/ProgressBar.php:470:                $this->output->write("\x0D");
vendor/symfony/console/Helper/ProgressBar.php:473:                $this->output->write("\x1B[2K");
vendor/symfony/console/Helper/ProgressBar.php:476:                if ($this->formatLineCount > 0) {
vendor/symfony/console/Helper/ProgressBar.php:477:                    $this->output->write(str_repeat("\x1B[1A\x1B[2K", $this->formatLineCount));
vendor/symfony/console/Helper/ProgressBar.php:480:        } elseif ($this->step > 0) {
vendor/symfony/console/Helper/ProgressBar.php:481:            $this->output->writeln('');
vendor/symfony/console/Helper/ProgressBar.php:484:        $this->firstRun = false;
vendor/symfony/console/Helper/ProgressBar.php:486:        $this->output->write($message);
vendor/symfony/console/Helper/ProgressBar.php:491:        switch ($this->output->getVerbosity()) {
vendor/symfony/console/Helper/ProgressBar.php:494:                return $this->max ? 'verbose' : 'verbose_nomax';
vendor/symfony/console/Helper/ProgressBar.php:496:                return $this->max ? 'very_verbose' : 'very_verbose_nomax';
vendor/symfony/console/Helper/ProgressBar.php:498:                return $this->max ? 'debug' : 'debug_nomax';
vendor/symfony/console/Helper/ProgressBar.php:500:                return $this->max ? 'normal' : 'normal_nomax';
vendor/symfony/console/Helper/ProgressBar.php:508:                $completeBars = floor($bar->getMaxSteps() > 0 ? $bar->getProgressPercent() * $bar->getBarWidth() : $bar->getProgress() % $bar->getBarWidth());
vendor/symfony/console/Helper/ProgressBar.php:509:                $display = str_repeat($bar->getBarCharacter(), $completeBars);
vendor/symfony/console/Helper/ProgressBar.php:510:                if ($completeBars < $bar->getBarWidth()) {
vendor/symfony/console/Helper/ProgressBar.php:511:                    $emptyBars = $bar->getBarWidth() - $completeBars - Helper::strlenWithoutDecoration($output->getFormatter(), $bar->getProgressCharacter());
vendor/symfony/console/Helper/ProgressBar.php:512:                    $display .= $bar->getProgressCharacter().str_repeat($bar->getEmptyBarCharacter(), $emptyBars);
vendor/symfony/console/Helper/ProgressBar.php:518:                return Helper::formatTime(time() - $bar->getStartTime());
vendor/symfony/console/Helper/ProgressBar.php:521:                if (!$bar->getMaxSteps()) {
vendor/symfony/console/Helper/ProgressBar.php:525:                if (!$bar->getProgress()) {
vendor/symfony/console/Helper/ProgressBar.php:528:                    $remaining = round((time() - $bar->getStartTime()) / $bar->getProgress() * ($bar->getMaxSteps() - $bar->getProgress()));
vendor/symfony/console/Helper/ProgressBar.php:534:                if (!$bar->getMaxSteps()) {
vendor/symfony/console/Helper/ProgressBar.php:538:                if (!$bar->getProgress()) {
vendor/symfony/console/Helper/ProgressBar.php:541:                    $estimated = round((time() - $bar->getStartTime()) / $bar->getProgress() * $bar->getMaxSteps());
vendor/symfony/console/Helper/ProgressBar.php:550:                return str_pad($bar->getProgress(), $bar->getStepWidth(), ' ', STR_PAD_LEFT);
vendor/symfony/console/Helper/ProgressBar.php:553:                return $bar->getMaxSteps();
vendor/symfony/console/Helper/ProgressBar.php:556:                return floor($bar->getProgressPercent() * 100);
vendor/symfony/console/Helper/ProgressBar.php:570:            'very_verbose' => ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s%',
vendor/symfony/console/Helper/ProgressBar.php:573:            'debug' => ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s% %memory:6s%',
vendor/symfony/console/Helper/ProgressBar.php:583:        $regex = "{%([a-z\-_]+)(?:\:([^%]+))?%}i";
vendor/symfony/console/Helper/ProgressBar.php:586:                $text = call_user_func($formatter, $this, $this->output);
vendor/symfony/console/Helper/ProgressBar.php:587:            } elseif (isset($this->messages[$matches[1]])) {
vendor/symfony/console/Helper/ProgressBar.php:588:                $text = $this->messages[$matches[1]];
vendor/symfony/console/Helper/ProgressBar.php:599:        $line = preg_replace_callback($regex, $callback, $this->format);
vendor/symfony/console/Helper/ProgressBar.php:603:            return Helper::strlenWithoutDecoration($this->output->getFormatter(), rtrim($subLine, "\r"));
vendor/symfony/console/Helper/ProgressBar.php:608:        $terminalWidth = $this->terminal->getWidth();
vendor/symfony/console/Helper/ProgressBar.php:613:        $this->setBarWidth($this->barWidth - $linesWidth + $terminalWidth);
vendor/symfony/console/Helper/ProgressBar.php:615:        return preg_replace_callback($regex, $callback, $this->format);
vendor/symfony/console/Helper/DebugFormatterHelper.php:25:    private $count = -1;
vendor/symfony/console/Helper/DebugFormatterHelper.php:38:        $this->started[$id] = array('border' => ++$this->count % count($this->colors));
vendor/symfony/console/Helper/DebugFormatterHelper.php:40:        return sprintf("%s<bg=blue;fg=white> %s </> <fg=blue>%s</>\n", $this->getBorder($id), $prefix, $message);
vendor/symfony/console/Helper/DebugFormatterHelper.php:59:            if (isset($this->started[$id]['out'])) {
vendor/symfony/console/Helper/DebugFormatterHelper.php:61:                unset($this->started[$id]['out']);
vendor/symfony/console/Helper/DebugFormatterHelper.php:63:            if (!isset($this->started[$id]['err'])) {
vendor/symfony/console/Helper/DebugFormatterHelper.php:64:                $message .= sprintf('%s<bg=red;fg=white> %s </> ', $this->getBorder($id), $errorPrefix);
vendor/symfony/console/Helper/DebugFormatterHelper.php:65:                $this->started[$id]['err'] = true;
vendor/symfony/console/Helper/DebugFormatterHelper.php:68:            $message .= str_replace("\n", sprintf("\n%s<bg=red;fg=white> %s </> ", $this->getBorder($id), $errorPrefix), $buffer);
vendor/symfony/console/Helper/DebugFormatterHelper.php:70:            if (isset($this->started[$id]['err'])) {
vendor/symfony/console/Helper/DebugFormatterHelper.php:72:                unset($this->started[$id]['err']);
vendor/symfony/console/Helper/DebugFormatterHelper.php:74:            if (!isset($this->started[$id]['out'])) {
vendor/symfony/console/Helper/DebugFormatterHelper.php:75:                $message .= sprintf('%s<bg=green;fg=white> %s </> ', $this->getBorder($id), $prefix);
vendor/symfony/console/Helper/DebugFormatterHelper.php:76:                $this->started[$id]['out'] = true;
vendor/symfony/console/Helper/DebugFormatterHelper.php:79:            $message .= str_replace("\n", sprintf("\n%s<bg=green;fg=white> %s </> ", $this->getBorder($id), $prefix), $buffer);
vendor/symfony/console/Helper/DebugFormatterHelper.php:97:        $trailingEOL = isset($this->started[$id]['out']) || isset($this->started[$id]['err']) ? "\n" : '';
vendor/symfony/console/Helper/DebugFormatterHelper.php:100:            return sprintf("%s%s<bg=green;fg=white> %s </> <fg=green>%s</>\n", $trailingEOL, $this->getBorder($id), $prefix, $message);
vendor/symfony/console/Helper/DebugFormatterHelper.php:103:        $message = sprintf("%s%s<bg=red;fg=white> %s </> <fg=red>%s</>\n", $trailingEOL, $this->getBorder($id), $prefix, $message);
vendor/symfony/console/Helper/DebugFormatterHelper.php:105:        unset($this->started[$id]['out'], $this->started[$id]['err']);
vendor/symfony/console/Helper/DebugFormatterHelper.php:117:        return sprintf('<bg=%s> </>', $this->colors[$this->started[$id]['border']]);
vendor/symfony/console/Helper/QuestionHelper.php:46:            $output = $output->getErrorOutput();
vendor/symfony/console/Helper/QuestionHelper.php:49:        if (!$input->isInteractive()) {
vendor/symfony/console/Helper/QuestionHelper.php:51:                $choices = $question->getChoices();
vendor/symfony/console/Helper/QuestionHelper.php:53:                return $choices[$question->getDefault()];
vendor/symfony/console/Helper/QuestionHelper.php:56:            return $question->getDefault();
vendor/symfony/console/Helper/QuestionHelper.php:59:        if ($input instanceof StreamableInputInterface && $stream = $input->getStream()) {
vendor/symfony/console/Helper/QuestionHelper.php:60:            $this->inputStream = $stream;
vendor/symfony/console/Helper/QuestionHelper.php:63:        if (!$question->getValidator()) {
vendor/symfony/console/Helper/QuestionHelper.php:64:            return $this->doAsk($output, $question);
vendor/symfony/console/Helper/QuestionHelper.php:68:            return $this->doAsk($output, $question);
vendor/symfony/console/Helper/QuestionHelper.php:71:        return $this->validateAttempts($interviewer, $output, $question);
vendor/symfony/console/Helper/QuestionHelper.php:94:        $this->inputStream = $stream;
vendor/symfony/console/Helper/QuestionHelper.php:111:        return $this->inputStream;
vendor/symfony/console/Helper/QuestionHelper.php:139:        $this->writePrompt($output, $question);
vendor/symfony/console/Helper/QuestionHelper.php:141:        $inputStream = $this->inputStream ?: STDIN;
vendor/symfony/console/Helper/QuestionHelper.php:142:        $autocomplete = $question->getAutocompleterValues();
vendor/symfony/console/Helper/QuestionHelper.php:144:        if (null === $autocomplete || !$this->hasSttyAvailable()) {
vendor/symfony/console/Helper/QuestionHelper.php:146:            if ($question->isHidden()) {
vendor/symfony/console/Helper/QuestionHelper.php:148:                    $ret = trim($this->getHiddenResponse($output, $inputStream));
vendor/symfony/console/Helper/QuestionHelper.php:150:                    if (!$question->isHiddenFallback()) {
vendor/symfony/console/Helper/QuestionHelper.php:164:            $ret = trim($this->autocomplete($output, $question, $inputStream, is_array($autocomplete) ? $autocomplete : iterator_to_array($autocomplete, false)));
vendor/symfony/console/Helper/QuestionHelper.php:167:        $ret = strlen($ret) > 0 ? $ret : $question->getDefault();
vendor/symfony/console/Helper/QuestionHelper.php:169:        if ($normalizer = $question->getNormalizer()) {
vendor/symfony/console/Helper/QuestionHelper.php:181:        $message = $question->getQuestion();
vendor/symfony/console/Helper/QuestionHelper.php:184:            $maxWidth = max(array_map(array($this, 'strlen'), array_keys($question->getChoices())));
vendor/symfony/console/Helper/QuestionHelper.php:186:            $messages = (array) $question->getQuestion();
vendor/symfony/console/Helper/QuestionHelper.php:187:            foreach ($question->getChoices() as $key => $value) {
vendor/symfony/console/Helper/QuestionHelper.php:188:                $width = $maxWidth - $this->strlen($key);
vendor/symfony/console/Helper/QuestionHelper.php:192:            $output->writeln($messages);
vendor/symfony/console/Helper/QuestionHelper.php:194:            $message = $question->getPrompt();
vendor/symfony/console/Helper/QuestionHelper.php:197:        $output->write($message);
vendor/symfony/console/Helper/QuestionHelper.php:205:        if (null !== $this->getHelperSet() && $this->getHelperSet()->has('formatter')) {
vendor/symfony/console/Helper/QuestionHelper.php:206:            $message = $this->getHelperSet()->get('formatter')->formatBlock($error->getMessage(), 'error');
vendor/symfony/console/Helper/QuestionHelper.php:208:            $message = '<error>'.$error->getMessage().'</error>';
vendor/symfony/console/Helper/QuestionHelper.php:211:        $output->writeln($message);
vendor/symfony/console/Helper/QuestionHelper.php:229:        $ofs = -1;
vendor/symfony/console/Helper/QuestionHelper.php:233:        $sttyMode = shell_exec('stty -g');
vendor/symfony/console/Helper/QuestionHelper.php:236:        shell_exec('stty -icanon -echo');
vendor/symfony/console/Helper/QuestionHelper.php:239:        $output->getFormatter()->setStyle('hl', new OutputFormatterStyle('black', 'white'));
vendor/symfony/console/Helper/QuestionHelper.php:248:                    --$i;
vendor/symfony/console/Helper/QuestionHelper.php:250:                    $output->write("\033[1D");
vendor/symfony/console/Helper/QuestionHelper.php:254:                    $ofs = -1;
vendor/symfony/console/Helper/QuestionHelper.php:269:                    if ('A' === $c[2] && -1 === $ofs) {
vendor/symfony/console/Helper/QuestionHelper.php:277:                    $ofs += ('A' === $c[2]) ? -1 : 1;
vendor/symfony/console/Helper/QuestionHelper.php:282:                    if ($numMatches > 0 && -1 !== $ofs) {
vendor/symfony/console/Helper/QuestionHelper.php:285:                        $output->write(substr($ret, $i));
vendor/symfony/console/Helper/QuestionHelper.php:290:                        $output->write($c);
vendor/symfony/console/Helper/QuestionHelper.php:299:                $output->write($c);
vendor/symfony/console/Helper/QuestionHelper.php:315:            $output->write("\033[K");
vendor/symfony/console/Helper/QuestionHelper.php:317:            if ($numMatches > 0 && -1 !== $ofs) {
vendor/symfony/console/Helper/QuestionHelper.php:319:                $output->write("\0337");
vendor/symfony/console/Helper/QuestionHelper.php:321:                $output->write('<hl>'.OutputFormatter::escapeTrailingBackslash(substr($matches[$ofs], $i)).'</hl>');
vendor/symfony/console/Helper/QuestionHelper.php:323:                $output->write("\0338");
vendor/symfony/console/Helper/QuestionHelper.php:356:            $output->writeln('');
vendor/symfony/console/Helper/QuestionHelper.php:365:        if ($this->hasSttyAvailable()) {
vendor/symfony/console/Helper/QuestionHelper.php:366:            $sttyMode = shell_exec('stty -g');
vendor/symfony/console/Helper/QuestionHelper.php:368:            shell_exec('stty -echo');
vendor/symfony/console/Helper/QuestionHelper.php:377:            $output->writeln('');
vendor/symfony/console/Helper/QuestionHelper.php:382:        if (false !== $shell = $this->getShell()) {
vendor/symfony/console/Helper/QuestionHelper.php:383:            $readCmd = 'csh' === $shell ? 'set mypassword = $<' : 'read -r mypassword';
vendor/symfony/console/Helper/QuestionHelper.php:384:            $command = sprintf("/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \$mypassword'", $shell, $readCmd);
vendor/symfony/console/Helper/QuestionHelper.php:386:            $output->writeln('');
vendor/symfony/console/Helper/QuestionHelper.php:408:        $attempts = $question->getMaxAttempts();
vendor/symfony/console/Helper/QuestionHelper.php:409:        while (null === $attempts || $attempts--) {
vendor/symfony/console/Helper/QuestionHelper.php:411:                $this->writeError($output, $error);
vendor/symfony/console/Helper/QuestionHelper.php:415:                return call_user_func($question->getValidator(), $interviewer());
vendor/symfony/console/Helper/QuestionHelper.php:440:            $test = "/usr/bin/env %s -c 'echo OK' 2> /dev/null";
vendor/symfony/console/Helper/HelperSet.php:36:            $this->set($helper, is_int($alias) ? null : $alias);
vendor/symfony/console/Helper/HelperSet.php:48:        $this->helpers[$helper->getName()] = $helper;
vendor/symfony/console/Helper/HelperSet.php:50:            $this->helpers[$alias] = $helper;
vendor/symfony/console/Helper/HelperSet.php:53:        $helper->setHelperSet($this);
vendor/symfony/console/Helper/HelperSet.php:65:        return isset($this->helpers[$name]);
vendor/symfony/console/Helper/HelperSet.php:79:        if (!$this->has($name)) {
vendor/symfony/console/Helper/HelperSet.php:83:        return $this->helpers[$name];
vendor/symfony/console/Helper/HelperSet.php:88:        $this->command = $command;
vendor/symfony/console/Helper/HelperSet.php:98:        return $this->command;
vendor/symfony/console/Helper/HelperSet.php:106:        return new \ArrayIterator($this->helpers);
vendor/symfony/console/Helper/Table.php:75:        $this->output = $output;
vendor/symfony/console/Helper/Table.php:81:        $this->setStyle('default');
vendor/symfony/console/Helper/Table.php:128:        $this->style = $this->resolveStyle($name);
vendor/symfony/console/Helper/Table.php:140:        return $this->style;
vendor/symfony/console/Helper/Table.php:155:        $this->columnStyles[$columnIndex] = $this->resolveStyle($name);
vendor/symfony/console/Helper/Table.php:171:        if (isset($this->columnStyles[$columnIndex])) {
vendor/symfony/console/Helper/Table.php:172:            return $this->columnStyles[$columnIndex];
vendor/symfony/console/Helper/Table.php:175:        return $this->getStyle();
vendor/symfony/console/Helper/Table.php:188:        $this->columnWidths[(int) $columnIndex] = (int) $width;
vendor/symfony/console/Helper/Table.php:202:        $this->columnWidths = array();
vendor/symfony/console/Helper/Table.php:204:            $this->setColumnWidth($index, $width);
vendor/symfony/console/Helper/Table.php:217:        $this->headers = $headers;
vendor/symfony/console/Helper/Table.php:224:        $this->rows = array();
vendor/symfony/console/Helper/Table.php:226:        return $this->addRows($rows);
vendor/symfony/console/Helper/Table.php:232:            $this->addRow($row);
vendor/symfony/console/Helper/Table.php:241:            $this->rows[] = $row;
vendor/symfony/console/Helper/Table.php:250:        $this->rows[] = array_values($row);
vendor/symfony/console/Helper/Table.php:257:        $this->rows[$column] = $row;
vendor/symfony/console/Helper/Table.php:267:     * +---------------+-----------------------+------------------+
vendor/symfony/console/Helper/Table.php:269:     * +---------------+-----------------------+------------------+
vendor/symfony/console/Helper/Table.php:270:     * | 99921-58-10-7 | Divine Comedy         | Dante Alighieri  |
vendor/symfony/console/Helper/Table.php:271:     * | 9971-5-0210-0 | A Tale of Two Cities  | Charles Dickens  |
vendor/symfony/console/Helper/Table.php:272:     * | 960-425-059-0 | The Lord of the Rings | J. R. R. Tolkien |
vendor/symfony/console/Helper/Table.php:273:     * +---------------+-----------------------+------------------+
vendor/symfony/console/Helper/Table.php:278:        $this->calculateNumberOfColumns();
vendor/symfony/console/Helper/Table.php:279:        $rows = $this->buildTableRows($this->rows);
vendor/symfony/console/Helper/Table.php:280:        $headers = $this->buildTableRows($this->headers);
vendor/symfony/console/Helper/Table.php:282:        $this->calculateColumnsWidth(array_merge($headers, $rows));
vendor/symfony/console/Helper/Table.php:284:        $this->renderRowSeparator();
vendor/symfony/console/Helper/Table.php:287:                $this->renderRow($header, $this->style->getCellHeaderFormat());
vendor/symfony/console/Helper/Table.php:288:                $this->renderRowSeparator();
vendor/symfony/console/Helper/Table.php:293:                $this->renderRowSeparator();
vendor/symfony/console/Helper/Table.php:295:                $this->renderRow($row, $this->style->getCellRowFormat());
vendor/symfony/console/Helper/Table.php:299:            $this->renderRowSeparator();
vendor/symfony/console/Helper/Table.php:302:        $this->cleanup();
vendor/symfony/console/Helper/Table.php:308:     * Example: <code>+-----+-----------+-------+</code>
vendor/symfony/console/Helper/Table.php:312:        if (0 === $count = $this->numberOfColumns) {
vendor/symfony/console/Helper/Table.php:316:        if (!$this->style->getHorizontalBorderChar() && !$this->style->getCrossingChar()) {
vendor/symfony/console/Helper/Table.php:320:        $markup = $this->style->getCrossingChar();
vendor/symfony/console/Helper/Table.php:322:            $markup .= str_repeat($this->style->getHorizontalBorderChar(), $this->effectiveColumnWidths[$column]).$this->style->getCrossingChar();
vendor/symfony/console/Helper/Table.php:325:        $this->output->writeln(sprintf($this->style->getBorderFormat(), $markup));
vendor/symfony/console/Helper/Table.php:333:        return sprintf($this->style->getBorderFormat(), $this->style->getVerticalBorderChar());
vendor/symfony/console/Helper/Table.php:339:     * Example: <code>| 9971-5-0210-0 | A Tale of Two Cities  | Charles Dickens  |</code>
vendor/symfony/console/Helper/Table.php:350:        $rowContent = $this->renderColumnSeparator();
vendor/symfony/console/Helper/Table.php:351:        foreach ($this->getRowColumns($row) as $column) {
vendor/symfony/console/Helper/Table.php:352:            $rowContent .= $this->renderCell($row, $column, $cellFormat);
vendor/symfony/console/Helper/Table.php:353:            $rowContent .= $this->renderColumnSeparator();
vendor/symfony/console/Helper/Table.php:355:        $this->output->writeln($rowContent);
vendor/symfony/console/Helper/Table.php:368:        $width = $this->effectiveColumnWidths[$column];
vendor/symfony/console/Helper/Table.php:369:        if ($cell instanceof TableCell && $cell->getColspan() > 1) {
vendor/symfony/console/Helper/Table.php:371:            foreach (range($column + 1, $column + $cell->getColspan() - 1) as $nextColumn) {
vendor/symfony/console/Helper/Table.php:372:                $width += $this->getColumnSeparatorWidth() + $this->effectiveColumnWidths[$nextColumn];
vendor/symfony/console/Helper/Table.php:376:        // str_pad won't work properly with multi-byte strings, we need to fix the padding
vendor/symfony/console/Helper/Table.php:378:            $width += strlen($cell) - mb_strwidth($cell, $encoding);
vendor/symfony/console/Helper/Table.php:381:        $style = $this->getColumnStyle($column);
vendor/symfony/console/Helper/Table.php:384:            return sprintf($style->getBorderFormat(), str_repeat($style->getHorizontalBorderChar(), $width));
vendor/symfony/console/Helper/Table.php:387:        $width += Helper::strlen($cell) - Helper::strlenWithoutDecoration($this->output->getFormatter(), $cell);
vendor/symfony/console/Helper/Table.php:388:        $content = sprintf($style->getCellRowContentFormat(), $cell);
vendor/symfony/console/Helper/Table.php:390:        return sprintf($cellFormat, str_pad($content, $width, $style->getPaddingChar(), $style->getPadType()));
vendor/symfony/console/Helper/Table.php:398:        if (null !== $this->numberOfColumns) {
vendor/symfony/console/Helper/Table.php:403:        foreach (array_merge($this->headers, $this->rows) as $row) {
vendor/symfony/console/Helper/Table.php:408:            $columns[] = $this->getNumberOfColumns($row);
vendor/symfony/console/Helper/Table.php:411:        $this->numberOfColumns = max($columns);
vendor/symfony/console/Helper/Table.php:418:            $rows = $this->fillNextRows($rows, $rowKey);
vendor/symfony/console/Helper/Table.php:428:                        $line = new TableCell($line, array('colspan' => $cell->getColspan()));
vendor/symfony/console/Helper/Table.php:441:            $tableRows[] = $this->fillCells($row);
vendor/symfony/console/Helper/Table.php:467:            if ($cell instanceof TableCell && $cell->getRowspan() > 1) {
vendor/symfony/console/Helper/Table.php:468:                $nbLines = $cell->getRowspan() - 1;
vendor/symfony/console/Helper/Table.php:474:                    $rows[$line][$column] = new TableCell($lines[0], array('colspan' => $cell->getColspan()));
vendor/symfony/console/Helper/Table.php:481:                    $value = isset($lines[$unmergedRowKey - $line]) ? $lines[$unmergedRowKey - $line] : '';
vendor/symfony/console/Helper/Table.php:482:                    $unmergedRows[$unmergedRowKey][$column] = new TableCell($value, array('colspan' => $cell->getColspan()));
vendor/symfony/console/Helper/Table.php:483:                    if ($nbLines === $unmergedRowKey - $line) {
vendor/symfony/console/Helper/Table.php:492:            if (isset($rows[$unmergedRowKey]) && is_array($rows[$unmergedRowKey]) && ($this->getNumberOfColumns($rows[$unmergedRowKey]) + $this->getNumberOfColumns($unmergedRows[$unmergedRowKey]) <= $this->numberOfColumns)) {
vendor/symfony/console/Helper/Table.php:498:                $row = $this->copyRow($rows, $unmergedRowKey - 1);
vendor/symfony/console/Helper/Table.php:521:            if ($cell instanceof TableCell && $cell->getColspan() > 1) {
vendor/symfony/console/Helper/Table.php:522:                foreach (range($column + 1, $column + $cell->getColspan() - 1) as $position) {
vendor/symfony/console/Helper/Table.php:544:                $row[$cellKey] = new TableCell('', array('colspan' => $cellValue->getColspan()));
vendor/symfony/console/Helper/Table.php:560:            $columns += $column instanceof TableCell ? ($column->getColspan() - 1) : 0;
vendor/symfony/console/Helper/Table.php:573:        $columns = range(0, $this->numberOfColumns - 1);
vendor/symfony/console/Helper/Table.php:575:            if ($cell instanceof TableCell && $cell->getColspan() > 1) {
vendor/symfony/console/Helper/Table.php:577:                $columns = array_diff($columns, range($cellKey + 1, $cellKey + $cell->getColspan() - 1));
vendor/symfony/console/Helper/Table.php:589:        for ($column = 0; $column < $this->numberOfColumns; ++$column) {
vendor/symfony/console/Helper/Table.php:598:                        $textContent = Helper::removeDecoration($this->output->getFormatter(), $cell);
vendor/symfony/console/Helper/Table.php:601:                            $contentColumns = str_split($textContent, ceil($textLength / $cell->getColspan()));
vendor/symfony/console/Helper/Table.php:609:                $lengths[] = $this->getCellWidth($row, $column);
vendor/symfony/console/Helper/Table.php:612:            $this->effectiveColumnWidths[$column] = max($lengths) + strlen($this->style->getCellRowContentFormat()) - 2;
vendor/symfony/console/Helper/Table.php:623:        return strlen(sprintf($this->style->getBorderFormat(), $this->style->getVerticalBorderChar()));
vendor/symfony/console/Helper/Table.php:640:            $cellWidth = Helper::strlenWithoutDecoration($this->output->getFormatter(), $cell);
vendor/symfony/console/Helper/Table.php:643:        $columnWidth = isset($this->columnWidths[$column]) ? $this->columnWidths[$column] : 0;
vendor/symfony/console/Helper/Table.php:653:        $this->effectiveColumnWidths = array();
vendor/symfony/console/Helper/Table.php:654:        $this->numberOfColumns = null;
vendor/symfony/console/Helper/Table.php:661:            ->setHorizontalBorderChar('=')
vendor/symfony/console/Helper/Table.php:662:            ->setVerticalBorderChar(' ')
vendor/symfony/console/Helper/Table.php:663:            ->setCrossingChar(' ')
vendor/symfony/console/Helper/Table.php:668:            ->setHorizontalBorderChar('')
vendor/symfony/console/Helper/Table.php:669:            ->setVerticalBorderChar(' ')
vendor/symfony/console/Helper/Table.php:670:            ->setCrossingChar('')
vendor/symfony/console/Helper/Table.php:671:            ->setCellRowContentFormat('%s')
vendor/symfony/console/Helper/Table.php:676:            ->setHorizontalBorderChar('-')
vendor/symfony/console/Helper/Table.php:677:            ->setVerticalBorderChar(' ')
vendor/symfony/console/Helper/Table.php:678:            ->setCrossingChar(' ')
vendor/symfony/console/Helper/Table.php:679:            ->setCellHeaderFormat('%s')
vendor/symfony/console/Helper/Table.php:686:            'symfony-style-guide' => $styleGuide,
vendor/symfony/console/Helper/ProcessHelper.php:41:            $output = $output->getErrorOutput();
vendor/symfony/console/Helper/ProcessHelper.php:44:        $formatter = $this->getHelperSet()->get('debug_formatter');
vendor/symfony/console/Helper/ProcessHelper.php:52:        if ($verbosity <= $output->getVerbosity()) {
vendor/symfony/console/Helper/ProcessHelper.php:53:            $output->write($formatter->start(spl_object_hash($process), $this->escapeString($process->getCommandLine())));
vendor/symfony/console/Helper/ProcessHelper.php:56:        if ($output->isDebug()) {
vendor/symfony/console/Helper/ProcessHelper.php:57:            $callback = $this->wrapCallback($output, $process, $callback);
vendor/symfony/console/Helper/ProcessHelper.php:60:        $process->run($callback);
vendor/symfony/console/Helper/ProcessHelper.php:62:        if ($verbosity <= $output->getVerbosity()) {
vendor/symfony/console/Helper/ProcessHelper.php:63:            $message = $process->isSuccessful() ? 'Command ran successfully' : sprintf('%s Command did not run successfully', $process->getExitCode());
vendor/symfony/console/Helper/ProcessHelper.php:64:            $output->write($formatter->stop(spl_object_hash($process), $message, $process->isSuccessful()));
vendor/symfony/console/Helper/ProcessHelper.php:67:        if (!$process->isSuccessful() && null !== $error) {
vendor/symfony/console/Helper/ProcessHelper.php:68:            $output->writeln(sprintf('<error>%s</error>', $this->escapeString($error)));
vendor/symfony/console/Helper/ProcessHelper.php:78:     * exits with a non-zero exit code.
vendor/symfony/console/Helper/ProcessHelper.php:94:        $process = $this->run($output, $cmd, $error, $callback);
vendor/symfony/console/Helper/ProcessHelper.php:96:        if (!$process->isSuccessful()) {
vendor/symfony/console/Helper/ProcessHelper.php:115:            $output = $output->getErrorOutput();
vendor/symfony/console/Helper/ProcessHelper.php:118:        $formatter = $this->getHelperSet()->get('debug_formatter');
vendor/symfony/console/Helper/ProcessHelper.php:121:            $output->write($formatter->progress(spl_object_hash($process), $this->escapeString($buffer), Process::ERR === $type));
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:37:        $validator = $question->getValidator();
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:38:        $question->setValidator(function ($value) use ($validator) {
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:61:        $text = OutputFormatter::escapeTrailingBackslash($question->getQuestion());
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:62:        $default = $question->getDefault();
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:75:            case $question instanceof ChoiceQuestion && $question->isMultiselect():
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:76:                $choices = $question->getChoices();
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:88:                $choices = $question->getChoices();
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:97:        $output->writeln($text);
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:100:            $width = max(array_map('strlen', array_keys($question->getChoices())));
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:102:            foreach ($question->getChoices() as $key => $value) {
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:103:                $output->writeln(sprintf("  [<comment>%-${width}s</comment>] %s", $key, $value));
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:107:        $output->write(' > ');
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:116:            $output->newLine();
vendor/symfony/console/Helper/SymfonyQuestionHelper.php:117:            $output->error($error->getMessage());
vendor/symfony/console/Helper/TableCell.php:37:        $this->value = $value;
vendor/symfony/console/Helper/TableCell.php:40:        if ($diff = array_diff(array_keys($options), array_keys($this->options))) {
vendor/symfony/console/Helper/TableCell.php:44:        $this->options = array_merge($this->options, $options);
vendor/symfony/console/Helper/TableCell.php:54:        return $this->value;
vendor/symfony/console/Helper/TableCell.php:64:        return (int) $this->options['colspan'];
vendor/symfony/console/Helper/TableCell.php:74:        return (int) $this->options['rowspan'];
vendor/symfony/console/Helper/DescriptorHelper.php:25: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Helper/DescriptorHelper.php:37:            ->register('txt', new TextDescriptor())
vendor/symfony/console/Helper/DescriptorHelper.php:38:            ->register('xml', new XmlDescriptor())
vendor/symfony/console/Helper/DescriptorHelper.php:39:            ->register('json', new JsonDescriptor())
vendor/symfony/console/Helper/DescriptorHelper.php:40:            ->register('md', new MarkdownDescriptor())
vendor/symfony/console/Helper/DescriptorHelper.php:64:        if (!isset($this->descriptors[$options['format']])) {
vendor/symfony/console/Helper/DescriptorHelper.php:68:        $descriptor = $this->descriptors[$options['format']];
vendor/symfony/console/Helper/DescriptorHelper.php:69:        $descriptor->describe($output, $object, $options);
vendor/symfony/console/Helper/DescriptorHelper.php:82:        $this->descriptors[$format] = $descriptor;
vendor/symfony/console/Helper/FormatterHelper.php:57:            $len = max($this->strlen($message) + ($large ? 4 : 2), $len);
vendor/symfony/console/Helper/FormatterHelper.php:62:            $messages[] = $lines[$i].str_repeat(' ', $len - $this->strlen($lines[$i]));
vendor/symfony/console/Helper/FormatterHelper.php:86:        $computedLength = $length - $this->strlen($suffix);
vendor/symfony/console/Helper/FormatterHelper.php:88:        if ($computedLength > $this->strlen($message)) {
vendor/symfony/console/Helper/Helper.php:30:        $this->helperSet = $helperSet;
vendor/symfony/console/Helper/Helper.php:38:        return $this->helperSet;
vendor/symfony/console/Helper/Helper.php:92:                    || $index == count($timeFormats) - 1
vendor/symfony/console/Helper/Helper.php:128:        $isDecorated = $formatter->isDecorated();
vendor/symfony/console/Helper/Helper.php:129:        $formatter->setDecorated(false);
vendor/symfony/console/Helper/Helper.php:131:        $string = $formatter->format($string);
vendor/symfony/console/Helper/Helper.php:134:        $formatter->setDecorated($isDecorated);
vendor/symfony/console/Helper/TableStyle.php:26:    private $horizontalBorderChar = '-';
vendor/symfony/console/Helper/TableStyle.php:48:        $this->paddingChar = $paddingChar;
vendor/symfony/console/Helper/TableStyle.php:60:        return $this->paddingChar;
vendor/symfony/console/Helper/TableStyle.php:72:        $this->horizontalBorderChar = $horizontalBorderChar;
vendor/symfony/console/Helper/TableStyle.php:84:        return $this->horizontalBorderChar;
vendor/symfony/console/Helper/TableStyle.php:96:        $this->verticalBorderChar = $verticalBorderChar;
vendor/symfony/console/Helper/TableStyle.php:108:        return $this->verticalBorderChar;
vendor/symfony/console/Helper/TableStyle.php:120:        $this->crossingChar = $crossingChar;
vendor/symfony/console/Helper/TableStyle.php:132:        return $this->crossingChar;
vendor/symfony/console/Helper/TableStyle.php:144:        $this->cellHeaderFormat = $cellHeaderFormat;
vendor/symfony/console/Helper/TableStyle.php:156:        return $this->cellHeaderFormat;
vendor/symfony/console/Helper/TableStyle.php:168:        $this->cellRowFormat = $cellRowFormat;
vendor/symfony/console/Helper/TableStyle.php:180:        return $this->cellRowFormat;
vendor/symfony/console/Helper/TableStyle.php:192:        $this->cellRowContentFormat = $cellRowContentFormat;
vendor/symfony/console/Helper/TableStyle.php:204:        return $this->cellRowContentFormat;
vendor/symfony/console/Helper/TableStyle.php:216:        $this->borderFormat = $borderFormat;
vendor/symfony/console/Helper/TableStyle.php:228:        return $this->borderFormat;
vendor/symfony/console/Helper/TableStyle.php:244:        $this->padType = $padType;
vendor/symfony/console/Helper/TableStyle.php:256:        return $this->padType;
vendor/symfony/console/Helper/InputAwareHelper.php:31:        $this->input = $input;
vendor/symfony/console/Application.php:57: *     $app->add(new SimpleCommand());
vendor/symfony/console/Application.php:58: *     $app->run();
vendor/symfony/console/Application.php:86:        $this->name = $name;
vendor/symfony/console/Application.php:87:        $this->version = $version;
vendor/symfony/console/Application.php:88:        $this->terminal = new Terminal();
vendor/symfony/console/Application.php:89:        $this->defaultCommand = 'list';
vendor/symfony/console/Application.php:94:        $this->dispatcher = $dispatcher;
vendor/symfony/console/Application.php:99:        $this->commandLoader = $commandLoader;
vendor/symfony/console/Application.php:111:        putenv('LINES='.$this->terminal->getHeight());
vendor/symfony/console/Application.php:112:        putenv('COLUMNS='.$this->terminal->getWidth());
vendor/symfony/console/Application.php:124:                $e = class_exists(FatalThrowableError::class) ? new FatalThrowableError($e) : new \ErrorException($e->getMessage(), $e->getCode(), E_ERROR, $e->getFile(), $e->getLine());
vendor/symfony/console/Application.php:127:                $this->renderException($e, $output->getErrorOutput());
vendor/symfony/console/Application.php:129:                $this->renderException($e, $output);
vendor/symfony/console/Application.php:136:            } elseif ($debugHandler = $phpHandler[0]->setExceptionHandler($renderException)) {
vendor/symfony/console/Application.php:137:                $phpHandler[0]->setExceptionHandler($debugHandler);
vendor/symfony/console/Application.php:141:        if (null !== $this->dispatcher && $this->dispatcher->hasListeners(ConsoleEvents::EXCEPTION)) {
vendor/symfony/console/Application.php:145:        $this->configureIO($input, $output);
vendor/symfony/console/Application.php:148:            $exitCode = $this->doRun($input, $output);
vendor/symfony/console/Application.php:150:            if (!$this->catchExceptions) {
vendor/symfony/console/Application.php:156:            $exitCode = $e->getCode();
vendor/symfony/console/Application.php:174:                $finalHandler = $phpHandler[0]->setExceptionHandler(null);
vendor/symfony/console/Application.php:176:                    $phpHandler[0]->setExceptionHandler($finalHandler);
vendor/symfony/console/Application.php:181:        if ($this->autoExit) {
vendor/symfony/console/Application.php:199:        if (true === $input->hasParameterOption(array('--version', '-V'), true)) {
vendor/symfony/console/Application.php:200:            $output->writeln($this->getLongVersion());
vendor/symfony/console/Application.php:205:        $name = $this->getCommandName($input);
vendor/symfony/console/Application.php:206:        if (true === $input->hasParameterOption(array('--help', '-h'), true)) {
vendor/symfony/console/Application.php:209:                $input = new ArrayInput(array('command_name' => $this->defaultCommand));
vendor/symfony/console/Application.php:211:                $this->wantHelps = true;
vendor/symfony/console/Application.php:216:            $name = $this->defaultCommand;
vendor/symfony/console/Application.php:217:            $definition = $this->getDefinition();
vendor/symfony/console/Application.php:218:            $definition->setArguments(array_merge(
vendor/symfony/console/Application.php:219:                $definition->getArguments(),
vendor/symfony/console/Application.php:221:                    'command' => new InputArgument('command', InputArgument::OPTIONAL, $definition->getArgument('command')->getDescription(), $name),
vendor/symfony/console/Application.php:227:            $e = $this->runningCommand = null;
vendor/symfony/console/Application.php:229:            $command = $this->find($name);
vendor/symfony/console/Application.php:234:            if (null !== $this->dispatcher) {
vendor/symfony/console/Application.php:236:                $this->dispatcher->dispatch(ConsoleEvents::ERROR, $event);
vendor/symfony/console/Application.php:237:                $e = $event->getError();
vendor/symfony/console/Application.php:239:                if (0 === $event->getExitCode()) {
vendor/symfony/console/Application.php:247:        $this->runningCommand = $command;
vendor/symfony/console/Application.php:248:        $exitCode = $this->doRunCommand($command, $input, $output);
vendor/symfony/console/Application.php:249:        $this->runningCommand = null;
vendor/symfony/console/Application.php:256:        $this->helperSet = $helperSet;
vendor/symfony/console/Application.php:266:        if (!$this->helperSet) {
vendor/symfony/console/Application.php:267:            $this->helperSet = $this->getDefaultHelperSet();
vendor/symfony/console/Application.php:270:        return $this->helperSet;
vendor/symfony/console/Application.php:275:        $this->definition = $definition;
vendor/symfony/console/Application.php:285:        if (!$this->definition) {
vendor/symfony/console/Application.php:286:            $this->definition = $this->getDefaultInputDefinition();
vendor/symfony/console/Application.php:289:        if ($this->singleCommand) {
vendor/symfony/console/Application.php:290:            $inputDefinition = $this->definition;
vendor/symfony/console/Application.php:291:            $inputDefinition->setArguments();
vendor/symfony/console/Application.php:296:        return $this->definition;
vendor/symfony/console/Application.php:306:        return $this->getLongVersion();
vendor/symfony/console/Application.php:316:        return $this->catchExceptions;
vendor/symfony/console/Application.php:326:        $this->catchExceptions = (bool) $boolean;
vendor/symfony/console/Application.php:336:        return $this->autoExit;
vendor/symfony/console/Application.php:346:        $this->autoExit = (bool) $boolean;
vendor/symfony/console/Application.php:356:        return $this->name;
vendor/symfony/console/Application.php:366:        $this->name = $name;
vendor/symfony/console/Application.php:376:        return $this->version;
vendor/symfony/console/Application.php:386:        $this->version = $version;
vendor/symfony/console/Application.php:396:        if ('UNKNOWN' !== $this->getName()) {
vendor/symfony/console/Application.php:397:            if ('UNKNOWN' !== $this->getVersion()) {
vendor/symfony/console/Application.php:398:                return sprintf('%s <info>%s</info>', $this->getName(), $this->getVersion());
vendor/symfony/console/Application.php:401:            return $this->getName();
vendor/symfony/console/Application.php:416:        return $this->add(new Command($name));
vendor/symfony/console/Application.php:429:            $this->add($command);
vendor/symfony/console/Application.php:443:        $this->init();
vendor/symfony/console/Application.php:445:        $command->setApplication($this);
vendor/symfony/console/Application.php:447:        if (!$command->isEnabled()) {
vendor/symfony/console/Application.php:448:            $command->setApplication(null);
vendor/symfony/console/Application.php:453:        if (null === $command->getDefinition()) {
vendor/symfony/console/Application.php:457:        if (!$command->getName()) {
vendor/symfony/console/Application.php:461:        $this->commands[$command->getName()] = $command;
vendor/symfony/console/Application.php:463:        foreach ($command->getAliases() as $alias) {
vendor/symfony/console/Application.php:464:            $this->commands[$alias] = $command;
vendor/symfony/console/Application.php:481:        $this->init();
vendor/symfony/console/Application.php:483:        if (!$this->has($name)) {
vendor/symfony/console/Application.php:487:        $command = $this->commands[$name];
vendor/symfony/console/Application.php:489:        if ($this->wantHelps) {
vendor/symfony/console/Application.php:490:            $this->wantHelps = false;
vendor/symfony/console/Application.php:492:            $helpCommand = $this->get('help');
vendor/symfony/console/Application.php:493:            $helpCommand->setCommand($command);
vendor/symfony/console/Application.php:510:        $this->init();
vendor/symfony/console/Application.php:512:        return isset($this->commands[$name]) || ($this->commandLoader && $this->commandLoader->has($name) && $this->add($this->commandLoader->get($name)));
vendor/symfony/console/Application.php:525:        foreach ($this->all() as $command) {
vendor/symfony/console/Application.php:526:            $namespaces = array_merge($namespaces, $this->extractAllNamespaces($command->getName()));
vendor/symfony/console/Application.php:528:            foreach ($command->getAliases() as $alias) {
vendor/symfony/console/Application.php:529:                $namespaces = array_merge($namespaces, $this->extractAllNamespaces($alias));
vendor/symfony/console/Application.php:547:        $allNamespaces = $this->getNamespaces();
vendor/symfony/console/Application.php:554:            if ($alternatives = $this->findAlternatives($namespace, $allNamespaces)) {
vendor/symfony/console/Application.php:569:            throw new CommandNotFoundException(sprintf("The namespace \"%s\" is ambiguous.\nDid you mean one of these?\n%s", $namespace, $this->getAbbreviationSuggestions(array_values($namespaces))), array_values($namespaces));
vendor/symfony/console/Application.php:589:        $this->init();
vendor/symfony/console/Application.php:592:        $allCommands = $this->commandLoader ? array_merge($this->commandLoader->getNames(), array_keys($this->commands)) : array_keys($this->commands);
vendor/symfony/console/Application.php:604:                $this->findNamespace(substr($name, 0, $pos));
vendor/symfony/console/Application.php:609:            if ($alternatives = $this->findAlternatives($name, $allCommands)) {
vendor/symfony/console/Application.php:623:            $commandList = $this->commandLoader ? array_merge(array_flip($this->commandLoader->getNames()), $this->commands) : $this->commands;
vendor/symfony/console/Application.php:625:                $commandName = $commandList[$nameOrAlias] instanceof Command ? $commandList[$nameOrAlias]->getName() : $nameOrAlias;
vendor/symfony/console/Application.php:634:            $usableWidth = $this->terminal->getWidth() - 10;
vendor/symfony/console/Application.php:644:                $abbrev = str_pad($cmd, $maxLen, ' ').' '.$commandList[$cmd]->getDescription();
vendor/symfony/console/Application.php:646:                return Helper::strlen($abbrev) > $usableWidth ? Helper::substr($abbrev, 0, $usableWidth - 3).'...' : $abbrev;
vendor/symfony/console/Application.php:648:            $suggestions = $this->getAbbreviationSuggestions($abbrevs);
vendor/symfony/console/Application.php:653:        return $this->get($exact ? $name : reset($commands));
vendor/symfony/console/Application.php:667:        $this->init();
vendor/symfony/console/Application.php:670:            if (!$this->commandLoader) {
vendor/symfony/console/Application.php:671:                return $this->commands;
vendor/symfony/console/Application.php:674:            $commands = $this->commands;
vendor/symfony/console/Application.php:675:            foreach ($this->commandLoader->getNames() as $name) {
vendor/symfony/console/Application.php:676:                if (!isset($commands[$name]) && $this->has($name)) {
vendor/symfony/console/Application.php:677:                    $commands[$name] = $this->get($name);
vendor/symfony/console/Application.php:685:        foreach ($this->commands as $name => $command) {
vendor/symfony/console/Application.php:686:            if ($namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1)) {
vendor/symfony/console/Application.php:691:        if ($this->commandLoader) {
vendor/symfony/console/Application.php:692:            foreach ($this->commandLoader->getNames() as $name) {
vendor/symfony/console/Application.php:693:                if (!isset($commands[$name]) && $namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1) && $this->has($name)) {
vendor/symfony/console/Application.php:694:                    $commands[$name] = $this->get($name);
vendor/symfony/console/Application.php:713:            for ($len = strlen($name); $len > 0; --$len) {
vendor/symfony/console/Application.php:727:        $output->writeln('', OutputInterface::VERBOSITY_QUIET);
vendor/symfony/console/Application.php:729:        $this->doRenderException($e, $output);
vendor/symfony/console/Application.php:731:        if (null !== $this->runningCommand) {
vendor/symfony/console/Application.php:732:            $output->writeln(sprintf('<info>%s</info>', sprintf($this->runningCommand->getSynopsis(), $this->getName())), OutputInterface::VERBOSITY_QUIET);
vendor/symfony/console/Application.php:733:            $output->writeln('', OutputInterface::VERBOSITY_QUIET);
vendor/symfony/console/Application.php:740:            $message = trim($e->getMessage());
vendor/symfony/console/Application.php:741:            if ('' === $message || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {
vendor/symfony/console/Application.php:742:                $title = sprintf('  [%s%s]  ', get_class($e), 0 !== ($code = $e->getCode()) ? ' ('.$code.')' : '');
vendor/symfony/console/Application.php:748:            $width = $this->terminal->getWidth() ? $this->terminal->getWidth() - 1 : PHP_INT_MAX;
vendor/symfony/console/Application.php:755:                foreach ($this->splitStringByWidth($line, $width - 4) as $line) {
vendor/symfony/console/Application.php:756:                    // pre-format lines to get the right string length
vendor/symfony/console/Application.php:765:            if (!$e instanceof ExceptionInterface || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {
vendor/symfony/console/Application.php:766:                $messages[] = sprintf('<comment>%s</comment>', OutputFormatter::escape(sprintf('In %s line %s:', basename($e->getFile()) ?: 'n/a', $e->getLine() ?: 'n/a')));
vendor/symfony/console/Application.php:769:            if ('' === $message || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {
vendor/symfony/console/Application.php:770:                $messages[] = sprintf('<error>%s%s</error>', $title, str_repeat(' ', max(0, $len - Helper::strlen($title))));
vendor/symfony/console/Application.php:773:                $messages[] = sprintf('<error>  %s  %s</error>', OutputFormatter::escape($line[0]), str_repeat(' ', $len - $line[1]));
vendor/symfony/console/Application.php:778:            $output->writeln($messages, OutputInterface::VERBOSITY_QUIET);
vendor/symfony/console/Application.php:780:            if (OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {
vendor/symfony/console/Application.php:781:                $output->writeln('<comment>Exception trace:</comment>', OutputInterface::VERBOSITY_QUIET);
vendor/symfony/console/Application.php:784:                $trace = $e->getTrace();
vendor/symfony/console/Application.php:793:                    $output->writeln(sprintf(' %s%s%s() at <info>%s:%s</info>', $class, $type, $function, $file, $line), OutputInterface::VERBOSITY_QUIET);
vendor/symfony/console/Application.php:796:                $output->writeln('', OutputInterface::VERBOSITY_QUIET);
vendor/symfony/console/Application.php:798:        } while ($e = $e->getPrevious());
vendor/symfony/console/Application.php:812:        return $this->terminal->getWidth();
vendor/symfony/console/Application.php:826:        return $this->terminal->getHeight();
vendor/symfony/console/Application.php:840:        return array($this->terminal->getWidth(), $this->terminal->getHeight());
vendor/symfony/console/Application.php:870:        if (true === $input->hasParameterOption(array('--ansi'), true)) {
vendor/symfony/console/Application.php:871:            $output->setDecorated(true);
vendor/symfony/console/Application.php:872:        } elseif (true === $input->hasParameterOption(array('--no-ansi'), true)) {
vendor/symfony/console/Application.php:873:            $output->setDecorated(false);
vendor/symfony/console/Application.php:876:        if (true === $input->hasParameterOption(array('--no-interaction', '-n'), true)) {
vendor/symfony/console/Application.php:877:            $input->setInteractive(false);
vendor/symfony/console/Application.php:882:                $inputStream = $input->getStream();
vendor/symfony/console/Application.php:887:            if (!$inputStream && $this->getHelperSet()->has('question')) {
vendor/symfony/console/Application.php:888:                $inputStream = $this->getHelperSet()->get('question')->getInputStream(false);
vendor/symfony/console/Application.php:892:                $input->setInteractive(false);
vendor/symfony/console/Application.php:897:            case -1: $output->setVerbosity(OutputInterface::VERBOSITY_QUIET); break;
vendor/symfony/console/Application.php:898:            case 1: $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE); break;
vendor/symfony/console/Application.php:899:            case 2: $output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE); break;
vendor/symfony/console/Application.php:900:            case 3: $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG); break;
vendor/symfony/console/Application.php:904:        if (true === $input->hasParameterOption(array('--quiet', '-q'), true)) {
vendor/symfony/console/Application.php:905:            $output->setVerbosity(OutputInterface::VERBOSITY_QUIET);
vendor/symfony/console/Application.php:906:            $shellVerbosity = -1;
vendor/symfony/console/Application.php:908:            if ($input->hasParameterOption('-vvv', true) || $input->hasParameterOption('--verbose=3', true) || 3 === $input->getParameterOption('--verbose', false, true)) {
vendor/symfony/console/Application.php:909:                $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);
vendor/symfony/console/Application.php:911:            } elseif ($input->hasParameterOption('-vv', true) || $input->hasParameterOption('--verbose=2', true) || 2 === $input->getParameterOption('--verbose', false, true)) {
vendor/symfony/console/Application.php:912:                $output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE);
vendor/symfony/console/Application.php:914:            } elseif ($input->hasParameterOption('-v', true) || $input->hasParameterOption('--verbose=1', true) || $input->hasParameterOption('--verbose', true) || $input->getParameterOption('--verbose', false, true)) {
vendor/symfony/console/Application.php:915:                $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);
vendor/symfony/console/Application.php:920:        if (-1 === $shellVerbosity) {
vendor/symfony/console/Application.php:921:            $input->setInteractive(false);
vendor/symfony/console/Application.php:933:     * events are also dispatched during the life-cycle of the command.
vendor/symfony/console/Application.php:939:        foreach ($command->getHelperSet() as $helper) {
vendor/symfony/console/Application.php:941:                $helper->setInput($input);
vendor/symfony/console/Application.php:945:        if (null === $this->dispatcher) {
vendor/symfony/console/Application.php:946:            return $command->run($input, $output);
vendor/symfony/console/Application.php:951:            $command->mergeApplicationDefinition();
vendor/symfony/console/Application.php:952:            $input->bind($command->getDefinition());
vendor/symfony/console/Application.php:961:            $this->dispatcher->dispatch(ConsoleEvents::COMMAND, $event);
vendor/symfony/console/Application.php:963:            if ($event->commandShouldRun()) {
vendor/symfony/console/Application.php:964:                $exitCode = $command->run($input, $output);
vendor/symfony/console/Application.php:972:            if ($this->dispatcher->hasListeners(ConsoleEvents::EXCEPTION)) {
vendor/symfony/console/Application.php:974:                $event = new ConsoleExceptionEvent($command, $input, $output, $x, $x->getCode());
vendor/symfony/console/Application.php:975:                $this->dispatcher->dispatch(ConsoleEvents::EXCEPTION, $event);
vendor/symfony/console/Application.php:977:                if ($x !== $event->getException()) {
vendor/symfony/console/Application.php:978:                    $e = $event->getException();
vendor/symfony/console/Application.php:982:            $this->dispatcher->dispatch(ConsoleEvents::ERROR, $event);
vendor/symfony/console/Application.php:983:            $e = $event->getError();
vendor/symfony/console/Application.php:985:            if (0 === $exitCode = $event->getExitCode()) {
vendor/symfony/console/Application.php:991:        $this->dispatcher->dispatch(ConsoleEvents::TERMINATE, $event);
vendor/symfony/console/Application.php:997:        return $event->getExitCode();
vendor/symfony/console/Application.php:1007:        return $this->singleCommand ? $this->defaultCommand : $input->getFirstArgument();
vendor/symfony/console/Application.php:1020:            new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display this help message'),
vendor/symfony/console/Application.php:1021:            new InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Do not output any message'),
vendor/symfony/console/Application.php:1022:            new InputOption('--verbose', '-v|vv|vvv', InputOption::VALUE_NONE, 'Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug'),
vendor/symfony/console/Application.php:1023:            new InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this application version'),
vendor/symfony/console/Application.php:1024:            new InputOption('--ansi', '', InputOption::VALUE_NONE, 'Force ANSI output'),
vendor/symfony/console/Application.php:1025:            new InputOption('--no-ansi', '', InputOption::VALUE_NONE, 'Disable ANSI output'),
vendor/symfony/console/Application.php:1026:            new InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question'),
vendor/symfony/console/Application.php:1126:                $alternatives[$item] = isset($alternatives[$item]) ? $alternatives[$item] - $lev : $lev;
vendor/symfony/console/Application.php:1146:        $this->defaultCommand = $commandName;
vendor/symfony/console/Application.php:1150:            $this->find($commandName);
vendor/symfony/console/Application.php:1152:            $this->singleCommand = true;
vendor/symfony/console/Application.php:1160:        // str_split is not suitable for multi-byte characters, we should use preg_split to get char array properly.
vendor/symfony/console/Application.php:1197:        // -1 as third argument is needed to skip the command short name when exploding
vendor/symfony/console/Application.php:1198:        $parts = explode(':', $name, -1);
vendor/symfony/console/Application.php:1214:        if ($this->initialized) {
vendor/symfony/console/Application.php:1217:        $this->initialized = true;
vendor/symfony/console/Application.php:1219:        foreach ($this->getDefaultCommands() as $command) {
vendor/symfony/console/Application.php:1220:            $this->add($command);
vendor/symfony/console/phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/phpunit.xml.dist:3:<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
vendor/symfony/console/phpunit.xml.dist:12:        <ini name="error_reporting" value="-1" />
vendor/symfony/console/phpunit.xml.dist:36:                    <element key="time-sensitive"><string>Symfony\Component\Console</string></element>
vendor/symfony/console/Tester/ApplicationTester.php:27: *     $application->setAutoExit(false);
vendor/symfony/console/Tester/ApplicationTester.php:44:        $this->application = $application;
vendor/symfony/console/Tester/ApplicationTester.php:64:        $this->input = new ArrayInput($input);
vendor/symfony/console/Tester/ApplicationTester.php:66:            $this->input->setInteractive($options['interactive']);
vendor/symfony/console/Tester/ApplicationTester.php:69:        $this->captureStreamsIndependently = array_key_exists('capture_stderr_separately', $options) && $options['capture_stderr_separately'];
vendor/symfony/console/Tester/ApplicationTester.php:70:        if (!$this->captureStreamsIndependently) {
vendor/symfony/console/Tester/ApplicationTester.php:71:            $this->output = new StreamOutput(fopen('php://memory', 'w', false));
vendor/symfony/console/Tester/ApplicationTester.php:73:                $this->output->setDecorated($options['decorated']);
vendor/symfony/console/Tester/ApplicationTester.php:76:                $this->output->setVerbosity($options['verbosity']);
vendor/symfony/console/Tester/ApplicationTester.php:79:            $this->output = new ConsoleOutput(
vendor/symfony/console/Tester/ApplicationTester.php:85:            $errorOutput->setFormatter($this->output->getFormatter());
vendor/symfony/console/Tester/ApplicationTester.php:86:            $errorOutput->setVerbosity($this->output->getVerbosity());
vendor/symfony/console/Tester/ApplicationTester.php:87:            $errorOutput->setDecorated($this->output->isDecorated());
vendor/symfony/console/Tester/ApplicationTester.php:89:            $reflectedOutput = new \ReflectionObject($this->output);
vendor/symfony/console/Tester/ApplicationTester.php:90:            $strErrProperty = $reflectedOutput->getProperty('stderr');
vendor/symfony/console/Tester/ApplicationTester.php:91:            $strErrProperty->setAccessible(true);
vendor/symfony/console/Tester/ApplicationTester.php:92:            $strErrProperty->setValue($this->output, $errorOutput);
vendor/symfony/console/Tester/ApplicationTester.php:94:            $reflectedParent = $reflectedOutput->getParentClass();
vendor/symfony/console/Tester/ApplicationTester.php:95:            $streamProperty = $reflectedParent->getProperty('stream');
vendor/symfony/console/Tester/ApplicationTester.php:96:            $streamProperty->setAccessible(true);
vendor/symfony/console/Tester/ApplicationTester.php:97:            $streamProperty->setValue($this->output, fopen('php://memory', 'w', false));
vendor/symfony/console/Tester/ApplicationTester.php:100:        return $this->statusCode = $this->application->run($this->input, $this->output);
vendor/symfony/console/Tester/ApplicationTester.php:112:        rewind($this->output->getStream());
vendor/symfony/console/Tester/ApplicationTester.php:114:        $display = stream_get_contents($this->output->getStream());
vendor/symfony/console/Tester/ApplicationTester.php:132:        if (!$this->captureStreamsIndependently) {
vendor/symfony/console/Tester/ApplicationTester.php:136:        rewind($this->output->getErrorOutput()->getStream());
vendor/symfony/console/Tester/ApplicationTester.php:138:        $display = stream_get_contents($this->output->getErrorOutput()->getStream());
vendor/symfony/console/Tester/ApplicationTester.php:154:        return $this->input;
vendor/symfony/console/Tester/ApplicationTester.php:164:        return $this->output;
vendor/symfony/console/Tester/ApplicationTester.php:174:        return $this->statusCode;
vendor/symfony/console/Tester/CommandTester.php:36:        $this->command = $command;
vendor/symfony/console/Tester/CommandTester.php:58:            && (null !== $application = $this->command->getApplication())
vendor/symfony/console/Tester/CommandTester.php:59:            && $application->getDefinition()->hasArgument('command')
vendor/symfony/console/Tester/CommandTester.php:61:            $input = array_merge(array('command' => $this->command->getName()), $input);
vendor/symfony/console/Tester/CommandTester.php:64:        $this->input = new ArrayInput($input);
vendor/symfony/console/Tester/CommandTester.php:65:        if ($this->inputs) {
vendor/symfony/console/Tester/CommandTester.php:66:            $this->input->setStream(self::createStream($this->inputs));
vendor/symfony/console/Tester/CommandTester.php:70:            $this->input->setInteractive($options['interactive']);
vendor/symfony/console/Tester/CommandTester.php:73:        $this->output = new StreamOutput(fopen('php://memory', 'w', false));
vendor/symfony/console/Tester/CommandTester.php:74:        $this->output->setDecorated(isset($options['decorated']) ? $options['decorated'] : false);
vendor/symfony/console/Tester/CommandTester.php:76:            $this->output->setVerbosity($options['verbosity']);
vendor/symfony/console/Tester/CommandTester.php:79:        return $this->statusCode = $this->command->run($this->input, $this->output);
vendor/symfony/console/Tester/CommandTester.php:91:        rewind($this->output->getStream());
vendor/symfony/console/Tester/CommandTester.php:93:        $display = stream_get_contents($this->output->getStream());
vendor/symfony/console/Tester/CommandTester.php:109:        return $this->input;
vendor/symfony/console/Tester/CommandTester.php:119:        return $this->output;
vendor/symfony/console/Tester/CommandTester.php:129:        return $this->statusCode;
vendor/symfony/console/Tester/CommandTester.php:142:        $this->inputs = $inputs;
vendor/symfony/console/Tests/Fixtures/input_option_6.md:1:#### `--option_name|-o|-O`
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced2Command.php:15:            ->setName('foo:go:bret')
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced2Command.php:16:            ->setDescription('The foo:bar:go command')
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced2Command.php:17:            ->setAliases(array('foobargo'))
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced2Command.php:23:        $this->input = $input;
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced2Command.php:24:        $this->output = $output;
vendor/symfony/console/Tests/Fixtures/input_option_6.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_6.json:3:    "shortcut": "-o|-O",
vendor/symfony/console/Tests/Fixtures/input_option_with_style_array.md:1:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/input_definition_3.json:5:            "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_definition_3.json:6:            "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/TestTiti.php:12:            ->setName('test-titi')
vendor/symfony/console/Tests/Fixtures/TestTiti.php:13:            ->setDescription('The test:titi command')
vendor/symfony/console/Tests/Fixtures/TestTiti.php:19:        $output->write('test-titi');
vendor/symfony/console/Tests/Fixtures/input_option_with_style.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_with_style.json:3:    "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/input_argument_1.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_argument_with_style.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_argument_with_default_inf_value.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_with_style_array.txt:1:  <info>-o, --option_name=OPTION_NAME</info>  option description<comment> [default: ["\<comment>Hello\</comment>","\<info>world\</info>"]]</comment><comment> (multiple values allowed)</comment>
vendor/symfony/console/Tests/Fixtures/input_option_4.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_4.json:3:    "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/command_mbstring.md:2:----------------
vendor/symfony/console/Tests/Fixtures/command_mbstring.md:8:* `descriptor:åèä [-o|--option_åèä] [--] <argument_åèä>`
vendor/symfony/console/Tests/Fixtures/command_mbstring.md:9:* `descriptor:åèä -o|--option_name <argument_name>`
vendor/symfony/console/Tests/Fixtures/command_mbstring.md:24:#### `--option_åèä|-o`
vendor/symfony/console/Tests/Fixtures/DescriptorApplication2.php:21:        $this->add(new DescriptorCommand1());
vendor/symfony/console/Tests/Fixtures/DescriptorApplication2.php:22:        $this->add(new DescriptorCommand2());
vendor/symfony/console/Tests/Fixtures/DescriptorApplication2.php:23:        $this->add(new DescriptorCommand3());
vendor/symfony/console/Tests/Fixtures/DescriptorApplication2.php:24:        $this->add(new DescriptorCommand4());
vendor/symfony/console/Tests/Fixtures/input_option_2.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_2.xml:2:<option name="--option_name" shortcut="-o" accept_value="1" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_run1.txt:7:  -h, --help            Display this help message
vendor/symfony/console/Tests/Fixtures/application_run1.txt:8:  -q, --quiet           Do not output any message
vendor/symfony/console/Tests/Fixtures/application_run1.txt:9:  -V, --version         Display this application version
vendor/symfony/console/Tests/Fixtures/application_run1.txt:10:      --ansi            Force ANSI output
vendor/symfony/console/Tests/Fixtures/application_run1.txt:11:      --no-ansi         Disable ANSI output
vendor/symfony/console/Tests/Fixtures/application_run1.txt:12:  -n, --no-interaction  Do not ask any interactive question
vendor/symfony/console/Tests/Fixtures/application_run1.txt:13:  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
vendor/symfony/console/Tests/Fixtures/application_filtered_namespace.txt:7:  <info>-h, --help</info>            Display this help message
vendor/symfony/console/Tests/Fixtures/application_filtered_namespace.txt:8:  <info>-q, --quiet</info>           Do not output any message
vendor/symfony/console/Tests/Fixtures/application_filtered_namespace.txt:9:  <info>-V, --version</info>         Display this application version
vendor/symfony/console/Tests/Fixtures/application_filtered_namespace.txt:10:  <info>    --ansi</info>            Force ANSI output
vendor/symfony/console/Tests/Fixtures/application_filtered_namespace.txt:11:  <info>    --no-ansi</info>         Disable ANSI output
vendor/symfony/console/Tests/Fixtures/application_filtered_namespace.txt:12:  <info>-n, --no-interaction</info>  Do not ask any interactive question
vendor/symfony/console/Tests/Fixtures/application_filtered_namespace.txt:13:  <info>-v|vv|vvv, --verbose</info>  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
vendor/symfony/console/Tests/Fixtures/input_option_with_style.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_with_style.xml:2:<option name="--option_name" shortcut="-o" accept_value="1" is_value_required="1" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/input_option_1.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_1.xml:2:<option name="--option_name" shortcut="-o" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/DescriptorCommandMbString.php:23:            ->setName('descriptor:åèä')
vendor/symfony/console/Tests/Fixtures/DescriptorCommandMbString.php:24:            ->setDescription('command åèä description')
vendor/symfony/console/Tests/Fixtures/DescriptorCommandMbString.php:25:            ->setHelp('command åèä help')
vendor/symfony/console/Tests/Fixtures/DescriptorCommandMbString.php:26:            ->addUsage('-o|--option_name <argument_name>')
vendor/symfony/console/Tests/Fixtures/DescriptorCommandMbString.php:27:            ->addUsage('<argument_name>')
vendor/symfony/console/Tests/Fixtures/DescriptorCommandMbString.php:28:            ->addArgument('argument_åèä', InputArgument::REQUIRED)
vendor/symfony/console/Tests/Fixtures/DescriptorCommandMbString.php:29:            ->addOption('option_åèä', 'o', InputOption::VALUE_NONE)
vendor/symfony/console/Tests/Fixtures/input_option_1.txt:1:  <info>-o, --option_name</info>
vendor/symfony/console/Tests/Fixtures/DescriptorCommand3.php:21:            ->setName('descriptor:command3')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand3.php:22:            ->setDescription('command 3 description')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand3.php:23:            ->setHelp('command 3 help')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand3.php:24:            ->setHidden(true)
vendor/symfony/console/Tests/Fixtures/Foo6Command.php:10:        $this->setName('0foo:bar')->setDescription('0foo:bar command');
vendor/symfony/console/Tests/Fixtures/FooLock2Command.php:14:        $this->setName('foo:lock2');
vendor/symfony/console/Tests/Fixtures/FooLock2Command.php:20:            $this->lock();
vendor/symfony/console/Tests/Fixtures/FooLock2Command.php:21:            $this->lock();
vendor/symfony/console/Tests/Fixtures/input_option_with_default_inf_value.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_with_default_inf_value.json:3:    "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/command_1.md:2:---------------------
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:16:            ->setName('foo:bar')
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:17:            ->setDescription('The foo:bar command')
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:18:            ->setAliases(array('afoobar'))
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:19:            ->addOption('fooopt', 'fo', InputOption::VALUE_OPTIONAL, 'fooopt description')
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:25:        $output->writeln('interact called');
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:30:        $this->input = $input;
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:31:        $this->output = $output;
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:33:        $output->writeln('called');
vendor/symfony/console/Tests/Fixtures/FooOptCommand.php:34:        $output->writeln($this->input->getOption('fooopt'));
vendor/symfony/console/Tests/Fixtures/Foo3Command.php:12:            ->setName('foo3:bar')
vendor/symfony/console/Tests/Fixtures/Foo3Command.php:13:            ->setDescription('The foo3:bar command')
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:12:------
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:18:* `help [--format FORMAT] [--raw] [--] [<command_name>]`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:24:You can also output the help in other formats by using the --format option:
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:26:  php app/console help --format=xml list
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:42:#### `--format`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:51:#### `--raw`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:60:#### `--help|-h`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:69:#### `--quiet|-q`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:78:#### `--verbose|-v|-vv|-vvv`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:87:#### `--version|-V`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:96:#### `--ansi`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:105:#### `--no-ansi`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:114:#### `--no-interaction|-n`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:124:------
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:130:* `list [--raw] [--format FORMAT] [--] [<namespace>]`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:140:You can also output the information in other formats by using the --format option:
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:142:  php app/console list --format=xml
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:146:  php app/console list --raw
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:160:#### `--raw`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:169:#### `--format`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:179:----------------
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:185:* `descriptor:åèä [-o|--option_åèä] [--] <argument_åèä>`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:186:* `descriptor:åèä -o|--option_name <argument_name>`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:201:#### `--option_åèä|-o`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:208:#### `--help|-h`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:217:#### `--quiet|-q`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:226:#### `--verbose|-v|-vv|-vvv`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:235:#### `--version|-V`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:244:#### `--ansi`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:253:#### `--no-ansi`
vendor/symfony/console/Tests/Fixtures/application_mbstring.md:262:#### `--no-interaction|-n`
vendor/symfony/console/Tests/Fixtures/input_option_with_default_inf_value.md:1:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/input_option_4.txt:1:  <info>-o, --option_name[=OPTION_NAME]</info>  option description<comment> (multiple values allowed)</comment>
vendor/symfony/console/Tests/Fixtures/input_argument_3.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/DescriptorCommand2.php:23:            ->setName('descriptor:command2')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand2.php:24:            ->setDescription('command 2 description')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand2.php:25:            ->setHelp('command 2 help')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand2.php:26:            ->addUsage('-o|--option_name <argument_name>')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand2.php:27:            ->addUsage('<argument_name>')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand2.php:28:            ->addArgument('argument_name', InputArgument::REQUIRED)
vendor/symfony/console/Tests/Fixtures/DescriptorCommand2.php:29:            ->addOption('option_name', 'o', InputOption::VALUE_NONE)
vendor/symfony/console/Tests/Fixtures/input_definition_1.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/application_renderexception2.txt:3:  The "--foo" option does not exist.  
vendor/symfony/console/Tests/Fixtures/application_renderexception2.txt:6:list [--raw] [--format FORMAT] [--] [<namespace>]
vendor/symfony/console/Tests/Fixtures/input_option_with_style_array.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_with_style_array.json:3:    "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/input_option_with_default_inf_value.txt:1:  <info>-o, --option_name[=OPTION_NAME]</info>  option description<comment> [default: INF]</comment>
vendor/symfony/console/Tests/Fixtures/FoobarCommand.php:15:            ->setName('foobar:foo')
vendor/symfony/console/Tests/Fixtures/FoobarCommand.php:16:            ->setDescription('The foobar:foo command')
vendor/symfony/console/Tests/Fixtures/FoobarCommand.php:22:        $this->input = $input;
vendor/symfony/console/Tests/Fixtures/FoobarCommand.php:23:        $this->output = $output;
vendor/symfony/console/Tests/Fixtures/input_definition_4.txt:5:  <info>-o, --option_name</info>
vendor/symfony/console/Tests/Fixtures/application_mbstring.txt:7:  <info>-h, --help</info>            Display this help message
vendor/symfony/console/Tests/Fixtures/application_mbstring.txt:8:  <info>-q, --quiet</info>           Do not output any message
vendor/symfony/console/Tests/Fixtures/application_mbstring.txt:9:  <info>-V, --version</info>         Display this application version
vendor/symfony/console/Tests/Fixtures/application_mbstring.txt:10:  <info>    --ansi</info>            Force ANSI output
vendor/symfony/console/Tests/Fixtures/application_mbstring.txt:11:  <info>    --no-ansi</info>         Disable ANSI output
vendor/symfony/console/Tests/Fixtures/application_mbstring.txt:12:  <info>-n, --no-interaction</info>  Do not ask any interactive question
vendor/symfony/console/Tests/Fixtures/application_mbstring.txt:13:  <info>-v|vv|vvv, --verbose</info>  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
vendor/symfony/console/Tests/Fixtures/input_option_with_default_inf_value.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_with_default_inf_value.xml:2:<option name="--option_name" shortcut="-o" accept_value="1" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.txt:7:  <info>-h, --help</info>            Display this help message
vendor/symfony/console/Tests/Fixtures/application_1.txt:8:  <info>-q, --quiet</info>           Do not output any message
vendor/symfony/console/Tests/Fixtures/application_1.txt:9:  <info>-V, --version</info>         Display this application version
vendor/symfony/console/Tests/Fixtures/application_1.txt:10:  <info>    --ansi</info>            Force ANSI output
vendor/symfony/console/Tests/Fixtures/application_1.txt:11:  <info>    --no-ansi</info>         Disable ANSI output
vendor/symfony/console/Tests/Fixtures/application_1.txt:12:  <info>-n, --no-interaction</info>  Do not ask any interactive question
vendor/symfony/console/Tests/Fixtures/application_1.txt:13:  <info>-v|vv|vvv, --verbose</info>  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
vendor/symfony/console/Tests/Fixtures/DescriptorCommand4.php:21:            ->setName('descriptor:command4')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand4.php:22:            ->setAliases(array('descriptor:alias_command4', 'command4:descriptor'))
vendor/symfony/console/Tests/Fixtures/FooSameCaseLowercaseCommand.php:9:        $this->setName('foo:bar')->setDescription('foo:bar command');
vendor/symfony/console/Tests/Fixtures/input_option_with_style_array.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_with_style_array.xml:2:<option name="--option_name" shortcut="-o" accept_value="1" is_value_required="1" is_multiple="1">
vendor/symfony/console/Tests/Fixtures/input_option_6.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_6.xml:2:<option name="--option_name" shortcut="-o" shortcuts="-o|-O" accept_value="1" is_value_required="1" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/Foo1Command.php:15:            ->setName('foo:bar1')
vendor/symfony/console/Tests/Fixtures/Foo1Command.php:16:            ->setDescription('The foo:bar1 command')
vendor/symfony/console/Tests/Fixtures/Foo1Command.php:17:            ->setAliases(array('afoobar1'))
vendor/symfony/console/Tests/Fixtures/Foo1Command.php:23:        $this->input = $input;
vendor/symfony/console/Tests/Fixtures/Foo1Command.php:24:        $this->output = $output;
vendor/symfony/console/Tests/Fixtures/TestCommand.php:12:            ->setName('namespace:name')
vendor/symfony/console/Tests/Fixtures/TestCommand.php:13:            ->setAliases(array('name'))
vendor/symfony/console/Tests/Fixtures/TestCommand.php:14:            ->setDescription('description')
vendor/symfony/console/Tests/Fixtures/TestCommand.php:15:            ->setHelp('help')
vendor/symfony/console/Tests/Fixtures/TestCommand.php:21:        $output->writeln('execute called');
vendor/symfony/console/Tests/Fixtures/TestCommand.php:26:        $output->writeln('interact called');
vendor/symfony/console/Tests/Fixtures/TestToto.php:12:            ->setName('test-toto')
vendor/symfony/console/Tests/Fixtures/TestToto.php:13:            ->setDescription('The test-toto command')
vendor/symfony/console/Tests/Fixtures/TestToto.php:14:            ->setAliases(array('test'))
vendor/symfony/console/Tests/Fixtures/TestToto.php:20:        $output->write('test-toto');
vendor/symfony/console/Tests/Fixtures/command_1.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/DescriptorCommand1.php:21:            ->setName('descriptor:command1')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand1.php:22:            ->setAliases(array('alias1', 'alias2'))
vendor/symfony/console/Tests/Fixtures/DescriptorCommand1.php:23:            ->setDescription('command 1 description')
vendor/symfony/console/Tests/Fixtures/DescriptorCommand1.php:24:            ->setHelp('command 1 help')
vendor/symfony/console/Tests/Fixtures/input_option_3.txt:1:  <info>-o, --option_name=OPTION_NAME</info>  option description
vendor/symfony/console/Tests/Fixtures/application_1.json:7:                "help [--format FORMAT] [--raw] [--] [<command_name>]"
vendor/symfony/console/Tests/Fixtures/application_1.json:10:            "help": "The <info>help<\/info> command displays help for a given command:\n\n  <info>php app\/console help list<\/info>\n\nYou can also output the help in other formats by using the <comment>--format<\/comment> option:\n\n  <info>php app\/console help --format=xml list<\/info>\n\nTo display the list of available commands, please use the <info>list<\/info> command.",
vendor/symfony/console/Tests/Fixtures/application_1.json:23:                        "name": "--format",
vendor/symfony/console/Tests/Fixtures/application_1.json:32:                        "name": "--raw",
vendor/symfony/console/Tests/Fixtures/application_1.json:41:                        "name": "--help",
vendor/symfony/console/Tests/Fixtures/application_1.json:42:                        "shortcut": "-h",
vendor/symfony/console/Tests/Fixtures/application_1.json:50:                        "name": "--quiet",
vendor/symfony/console/Tests/Fixtures/application_1.json:51:                        "shortcut": "-q",
vendor/symfony/console/Tests/Fixtures/application_1.json:59:                        "name": "--verbose",
vendor/symfony/console/Tests/Fixtures/application_1.json:60:                        "shortcut": "-v|-vv|-vvv",
vendor/symfony/console/Tests/Fixtures/application_1.json:68:                        "name": "--version",
vendor/symfony/console/Tests/Fixtures/application_1.json:69:                        "shortcut": "-V",
vendor/symfony/console/Tests/Fixtures/application_1.json:77:                        "name": "--ansi",
vendor/symfony/console/Tests/Fixtures/application_1.json:85:                    "no-ansi": {
vendor/symfony/console/Tests/Fixtures/application_1.json:86:                        "name": "--no-ansi",
vendor/symfony/console/Tests/Fixtures/application_1.json:94:                    "no-interaction": {
vendor/symfony/console/Tests/Fixtures/application_1.json:95:                        "name": "--no-interaction",
vendor/symfony/console/Tests/Fixtures/application_1.json:96:                        "shortcut": "-n",
vendor/symfony/console/Tests/Fixtures/application_1.json:110:                "list [--raw] [--format FORMAT] [--] [<namespace>]"
vendor/symfony/console/Tests/Fixtures/application_1.json:113:            "help": "The <info>list<\/info> command lists all commands:\n\n  <info>php app\/console list<\/info>\n\nYou can also display the commands for a specific namespace:\n\n  <info>php app\/console list test<\/info>\n\nYou can also output the information in other formats by using the <comment>--format<\/comment> option:\n\n  <info>php app\/console list --format=xml<\/info>\n\nIt's also possible to get raw list of commands (useful for embedding command runner):\n\n  <info>php app\/console list --raw<\/info>",
vendor/symfony/console/Tests/Fixtures/application_1.json:126:                        "name": "--raw",
vendor/symfony/console/Tests/Fixtures/application_1.json:135:                        "name": "--format",
vendor/symfony/console/Tests/Fixtures/input_option_5.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_5.xml:2:<option name="--option_name" shortcut="-o" accept_value="1" is_value_required="1" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/input_definition_3.md:3:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/input_definition_3.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_definition_3.xml:5:    <option name="--option_name" shortcut="-o" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/command_2.txt:2:  descriptor:command2 [options] [--] \<argument_name>
vendor/symfony/console/Tests/Fixtures/command_2.txt:3:  descriptor:command2 -o|--option_name \<argument_name>
vendor/symfony/console/Tests/Fixtures/command_2.txt:10:  <info>-o, --option_name</info>  
vendor/symfony/console/Tests/Fixtures/application_run3.txt:2:  list [options] [--] [<namespace>]
vendor/symfony/console/Tests/Fixtures/application_run3.txt:8:      --raw            To output raw command list
vendor/symfony/console/Tests/Fixtures/application_run3.txt:9:      --format=FORMAT  The output format (txt, xml, json, or md) [default: "txt"]
vendor/symfony/console/Tests/Fixtures/application_run3.txt:20:  You can also output the information in other formats by using the --format option:
vendor/symfony/console/Tests/Fixtures/application_run3.txt:22:    php app/console list --format=xml
vendor/symfony/console/Tests/Fixtures/application_run3.txt:26:    php app/console list --raw
vendor/symfony/console/Tests/Fixtures/application_1.md:8:------
vendor/symfony/console/Tests/Fixtures/application_1.md:14:* `help [--format FORMAT] [--raw] [--] [<command_name>]`
vendor/symfony/console/Tests/Fixtures/application_1.md:20:You can also output the help in other formats by using the --format option:
vendor/symfony/console/Tests/Fixtures/application_1.md:22:  php app/console help --format=xml list
vendor/symfony/console/Tests/Fixtures/application_1.md:38:#### `--format`
vendor/symfony/console/Tests/Fixtures/application_1.md:47:#### `--raw`
vendor/symfony/console/Tests/Fixtures/application_1.md:56:#### `--help|-h`
vendor/symfony/console/Tests/Fixtures/application_1.md:65:#### `--quiet|-q`
vendor/symfony/console/Tests/Fixtures/application_1.md:74:#### `--verbose|-v|-vv|-vvv`
vendor/symfony/console/Tests/Fixtures/application_1.md:83:#### `--version|-V`
vendor/symfony/console/Tests/Fixtures/application_1.md:92:#### `--ansi`
vendor/symfony/console/Tests/Fixtures/application_1.md:101:#### `--no-ansi`
vendor/symfony/console/Tests/Fixtures/application_1.md:110:#### `--no-interaction|-n`
vendor/symfony/console/Tests/Fixtures/application_1.md:120:------
vendor/symfony/console/Tests/Fixtures/application_1.md:126:* `list [--raw] [--format FORMAT] [--] [<namespace>]`
vendor/symfony/console/Tests/Fixtures/application_1.md:136:You can also output the information in other formats by using the --format option:
vendor/symfony/console/Tests/Fixtures/application_1.md:138:  php app/console list --format=xml
vendor/symfony/console/Tests/Fixtures/application_1.md:142:  php app/console list --raw
vendor/symfony/console/Tests/Fixtures/application_1.md:156:#### `--raw`
vendor/symfony/console/Tests/Fixtures/application_1.md:165:#### `--format`
vendor/symfony/console/Tests/Fixtures/input_option_1.md:1:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced1Command.php:15:            ->setName('foo:bar:baz')
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced1Command.php:16:            ->setDescription('The foo:bar:baz command')
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced1Command.php:17:            ->setAliases(array('foobarbaz'))
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced1Command.php:23:        $this->input = $input;
vendor/symfony/console/Tests/Fixtures/FooSubnamespaced1Command.php:24:        $this->output = $output;
vendor/symfony/console/Tests/Fixtures/application_2.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/application_2.xml:6:        <usage>help [--format FORMAT] [--raw] [--] [&lt;command_name&gt;]</usage>
vendor/symfony/console/Tests/Fixtures/application_2.xml:13: You can also output the help in other formats by using the &lt;comment&gt;--format&lt;/comment&gt; option:
vendor/symfony/console/Tests/Fixtures/application_2.xml:15:   &lt;info&gt;php app/console help --format=xml list&lt;/info&gt;
vendor/symfony/console/Tests/Fixtures/application_2.xml:27:        <option name="--format" shortcut="" accept_value="1" is_value_required="1" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:33:        <option name="--raw" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:36:        <option name="--help" shortcut="-h" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:39:        <option name="--quiet" shortcut="-q" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:42:        <option name="--verbose" shortcut="-v" shortcuts="-v|-vv|-vvv" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:45:        <option name="--version" shortcut="-V" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:48:        <option name="--ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:51:        <option name="--no-ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:54:        <option name="--no-interaction" shortcut="-n" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:61:        <usage>list [--raw] [--format FORMAT] [--] [&lt;namespace&gt;]</usage>
vendor/symfony/console/Tests/Fixtures/application_2.xml:72: You can also output the information in other formats by using the &lt;comment&gt;--format&lt;/comment&gt; option:
vendor/symfony/console/Tests/Fixtures/application_2.xml:74:   &lt;info&gt;php app/console list --format=xml&lt;/info&gt;
vendor/symfony/console/Tests/Fixtures/application_2.xml:78:   &lt;info&gt;php app/console list --raw&lt;/info&gt;</help>
vendor/symfony/console/Tests/Fixtures/application_2.xml:86:        <option name="--raw" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:89:        <option name="--format" shortcut="" accept_value="1" is_value_required="1" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:107:        <option name="--help" shortcut="-h" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:110:        <option name="--quiet" shortcut="-q" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:113:        <option name="--verbose" shortcut="-v" shortcuts="-v|-vv|-vvv" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:116:        <option name="--version" shortcut="-V" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:119:        <option name="--ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:122:        <option name="--no-ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:125:        <option name="--no-interaction" shortcut="-n" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:132:        <usage>descriptor:command2 [-o|--option_name] [--] &lt;argument_name&gt;</usage>
vendor/symfony/console/Tests/Fixtures/application_2.xml:133:        <usage>descriptor:command2 -o|--option_name &lt;argument_name&gt;</usage>
vendor/symfony/console/Tests/Fixtures/application_2.xml:145:        <option name="--option_name" shortcut="-o" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:148:        <option name="--help" shortcut="-h" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:151:        <option name="--quiet" shortcut="-q" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:154:        <option name="--verbose" shortcut="-v" shortcuts="-v|-vv|-vvv" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:157:        <option name="--version" shortcut="-V" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:160:        <option name="--ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:163:        <option name="--no-ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:166:        <option name="--no-interaction" shortcut="-n" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:179:        <option name="--help" shortcut="-h" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:182:        <option name="--quiet" shortcut="-q" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:185:        <option name="--verbose" shortcut="-v" shortcuts="-v|-vv|-vvv" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:188:        <option name="--version" shortcut="-V" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:191:        <option name="--ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:194:        <option name="--no-ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:197:        <option name="--no-interaction" shortcut="-n" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:212:        <option name="--help" shortcut="-h" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:215:        <option name="--quiet" shortcut="-q" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:218:        <option name="--verbose" shortcut="-v" shortcuts="-v|-vv|-vvv" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:221:        <option name="--version" shortcut="-V" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:224:        <option name="--ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:227:        <option name="--no-ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_2.xml:230:        <option name="--no-interaction" shortcut="-n" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/input_option_1.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_1.json:3:    "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/input_option_6.txt:1:  <info>-o|O, --option_name=OPTION_NAME</info>  option with multiple shortcuts
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/output/output_8.txt:1: ---------------- --------------- --------------------- 
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/output/output_8.txt:3: ---------------- --------------- --------------------- 
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/output/output_8.txt:5: ---------------- --------------- --------------------- 
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/output/output_8.txt:6:  978-0521567817   De Monarchia    Dante Alighieri      
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/output/output_8.txt:7:  978-0804169127   Divine Comedy   spans multiple rows  
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/output/output_8.txt:8: ---------------- --------------- --------------------- 
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/output/output_17.txt:6:---------------------
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_11.php:11:    $sfStyle->block($word, 'CUSTOM', 'fg=white;bg=blue', ' § ', false);
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:11:    $output->write('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:12:    $output->title('First title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:14:    $output->writeln('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:15:    $output->title('Second title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:17:    $output->write('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:18:    $output->write('');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:19:    $output->title('Third title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:22:    $output->write('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:23:    $output->write(array('', '', ''));
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:24:    $output->title('Fourth title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:27:    $output->writeln('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:28:    $output->writeln(array('', '')); //Should append an extra blank line
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:29:    $output->title('Fifth title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:31:    $output->writeln('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:32:    $output->newLine(2); //Should append an extra blank line
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_4.php:33:    $output->title('Fifth title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_13.php:9:    $output->setDecorated(true);
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_13.php:11:    $output->comment(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_16.php:9:    $output->setDecorated(true);
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_16.php:11:    $output->success(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_2.php:10:    $output->warning('Warning');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_2.php:11:    $output->caution('Caution');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_2.php:12:    $output->error('Error');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_2.php:13:    $output->success('Success');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_2.php:14:    $output->note('Note');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_2.php:15:    $output->block('Custom block', 'CUSTOM', 'fg=white;bg=green', 'X ', true);
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_6.php:11:    $output->listing(array(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_6.php:15:    $output->success('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_3.php:10:    $output->title('First title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_3.php:11:    $output->title('Second title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_15.php:10:    $output->block(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_7.php:7://Ensure questions do not output anything when input is non-interactive
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_7.php:10:    $output->title('Title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_7.php:11:    $output->askHidden('Hidden question');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_7.php:12:    $output->choice('Choice question with default', array('choice1', 'choice2'), 'choice1');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_7.php:13:    $output->confirm('Confirmation with yes default', true);
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_7.php:14:    $output->text('Duis aute irure dolor in reprehenderit in voluptate velit esse');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/interactive_command_1.php:14:    $input->setStream($stream);
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/interactive_command_1.php:16:    $output->ask('What\'s your name?');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/interactive_command_1.php:17:    $output->ask('How are you?');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/interactive_command_1.php:18:    $output->ask('Where do you come from?');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_10.php:10:    $output->block(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_12.php:10:    $output->comment(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_14.php:10:    $output->block(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:11:    $output->writeln('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:12:    $output->listing(array(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:18:    $output->write('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:19:    $output->listing(array(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:24:    $output->write('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:25:    $output->text(array(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:30:    $output->newLine();
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:32:    $output->write('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_5.php:33:    $output->comment(array(
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_0.php:10:    $output->caution('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_1.php:10:    $output->title('Title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_1.php:11:    $output->warning('Lorem ipsum dolor sit amet');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_1.php:12:    $output->title('Title');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_9.php:7://Ensure that all lines are aligned to the begin of the first line in a multi-line block
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_9.php:10:    $output->block(array('Custom block', 'Second custom block line'), 'CUSTOM', 'fg=white;bg=green', 'X ', true);
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_17.php:11:    $output->title('Title ending with \\');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_17.php:12:    $output->section('Section ending with \\');
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_8.php:17:            '978-0521567817',
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_8.php:21:        array('978-0804169127', 'Divine Comedy'),
vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_8.php:25:    $output->table($headers, $rows);
vendor/symfony/console/Tests/Fixtures/command_mbstring.txt:2:  descriptor:åèä [options] [--] \<argument_åèä>
vendor/symfony/console/Tests/Fixtures/command_mbstring.txt:3:  descriptor:åèä -o|--option_name \<argument_name>
vendor/symfony/console/Tests/Fixtures/command_mbstring.txt:10:  <info>-o, --option_åèä</info>  
vendor/symfony/console/Tests/Fixtures/input_definition_3.txt:2:  <info>-o, --option_name</info>
vendor/symfony/console/Tests/Fixtures/input_option_3.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_3.json:3:    "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/input_definition_2.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/application_2.txt:7:  <info>-h, --help</info>            Display this help message
vendor/symfony/console/Tests/Fixtures/application_2.txt:8:  <info>-q, --quiet</info>           Do not output any message
vendor/symfony/console/Tests/Fixtures/application_2.txt:9:  <info>-V, --version</info>         Display this application version
vendor/symfony/console/Tests/Fixtures/application_2.txt:10:  <info>    --ansi</info>            Force ANSI output
vendor/symfony/console/Tests/Fixtures/application_2.txt:11:  <info>    --no-ansi</info>         Disable ANSI output
vendor/symfony/console/Tests/Fixtures/application_2.txt:12:  <info>-n, --no-interaction</info>  Do not ask any interactive question
vendor/symfony/console/Tests/Fixtures/application_2.txt:13:  <info>-v|vv|vvv, --verbose</info>  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
vendor/symfony/console/Tests/Fixtures/application_2.md:21:------
vendor/symfony/console/Tests/Fixtures/application_2.md:27:* `help [--format FORMAT] [--raw] [--] [<command_name>]`
vendor/symfony/console/Tests/Fixtures/application_2.md:33:You can also output the help in other formats by using the --format option:
vendor/symfony/console/Tests/Fixtures/application_2.md:35:  php app/console help --format=xml list
vendor/symfony/console/Tests/Fixtures/application_2.md:51:#### `--format`
vendor/symfony/console/Tests/Fixtures/application_2.md:60:#### `--raw`
vendor/symfony/console/Tests/Fixtures/application_2.md:69:#### `--help|-h`
vendor/symfony/console/Tests/Fixtures/application_2.md:78:#### `--quiet|-q`
vendor/symfony/console/Tests/Fixtures/application_2.md:87:#### `--verbose|-v|-vv|-vvv`
vendor/symfony/console/Tests/Fixtures/application_2.md:96:#### `--version|-V`
vendor/symfony/console/Tests/Fixtures/application_2.md:105:#### `--ansi`
vendor/symfony/console/Tests/Fixtures/application_2.md:114:#### `--no-ansi`
vendor/symfony/console/Tests/Fixtures/application_2.md:123:#### `--no-interaction|-n`
vendor/symfony/console/Tests/Fixtures/application_2.md:133:------
vendor/symfony/console/Tests/Fixtures/application_2.md:139:* `list [--raw] [--format FORMAT] [--] [<namespace>]`
vendor/symfony/console/Tests/Fixtures/application_2.md:149:You can also output the information in other formats by using the --format option:
vendor/symfony/console/Tests/Fixtures/application_2.md:151:  php app/console list --format=xml
vendor/symfony/console/Tests/Fixtures/application_2.md:155:  php app/console list --raw
vendor/symfony/console/Tests/Fixtures/application_2.md:169:#### `--raw`
vendor/symfony/console/Tests/Fixtures/application_2.md:178:#### `--format`
vendor/symfony/console/Tests/Fixtures/application_2.md:188:---------------------
vendor/symfony/console/Tests/Fixtures/application_2.md:202:#### `--help|-h`
vendor/symfony/console/Tests/Fixtures/application_2.md:211:#### `--quiet|-q`
vendor/symfony/console/Tests/Fixtures/application_2.md:220:#### `--verbose|-v|-vv|-vvv`
vendor/symfony/console/Tests/Fixtures/application_2.md:229:#### `--version|-V`
vendor/symfony/console/Tests/Fixtures/application_2.md:238:#### `--ansi`
vendor/symfony/console/Tests/Fixtures/application_2.md:247:#### `--no-ansi`
vendor/symfony/console/Tests/Fixtures/application_2.md:256:#### `--no-interaction|-n`
vendor/symfony/console/Tests/Fixtures/application_2.md:266:---------------------
vendor/symfony/console/Tests/Fixtures/application_2.md:272:* `descriptor:command2 [-o|--option_name] [--] <argument_name>`
vendor/symfony/console/Tests/Fixtures/application_2.md:273:* `descriptor:command2 -o|--option_name <argument_name>`
vendor/symfony/console/Tests/Fixtures/application_2.md:288:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/application_2.md:295:#### `--help|-h`
vendor/symfony/console/Tests/Fixtures/application_2.md:304:#### `--quiet|-q`
vendor/symfony/console/Tests/Fixtures/application_2.md:313:#### `--verbose|-v|-vv|-vvv`
vendor/symfony/console/Tests/Fixtures/application_2.md:322:#### `--version|-V`
vendor/symfony/console/Tests/Fixtures/application_2.md:331:#### `--ansi`
vendor/symfony/console/Tests/Fixtures/application_2.md:340:#### `--no-ansi`
vendor/symfony/console/Tests/Fixtures/application_2.md:349:#### `--no-interaction|-n`
vendor/symfony/console/Tests/Fixtures/application_2.md:359:---------------------
vendor/symfony/console/Tests/Fixtures/application_2.md:370:#### `--help|-h`
vendor/symfony/console/Tests/Fixtures/application_2.md:379:#### `--quiet|-q`
vendor/symfony/console/Tests/Fixtures/application_2.md:388:#### `--verbose|-v|-vv|-vvv`
vendor/symfony/console/Tests/Fixtures/application_2.md:397:#### `--version|-V`
vendor/symfony/console/Tests/Fixtures/application_2.md:406:#### `--ansi`
vendor/symfony/console/Tests/Fixtures/application_2.md:415:#### `--no-ansi`
vendor/symfony/console/Tests/Fixtures/application_2.md:424:#### `--no-interaction|-n`
vendor/symfony/console/Tests/Fixtures/command_2.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/command_2.xml:4:    <usage>descriptor:command2 [-o|--option_name] [--] &lt;argument_name&gt;</usage>
vendor/symfony/console/Tests/Fixtures/command_2.xml:5:    <usage>descriptor:command2 -o|--option_name &lt;argument_name&gt;</usage>
vendor/symfony/console/Tests/Fixtures/command_2.xml:17:    <option name="--option_name" shortcut="-o" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/input_definition_4.json:13:            "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_definition_4.json:14:            "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/input_option_5.txt:1:  <info>-o, --option_name=OPTION_NAME</info>  multiline
vendor/symfony/console/Tests/Fixtures/input_option_5.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_5.json:3:    "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/input_option_2.md:1:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/Foo4Command.php:9:        $this->setName('foo3:bar:toh');
vendor/symfony/console/Tests/Fixtures/application_2.json:11:                "help [--format FORMAT] [--raw] [--] [<command_name>]"
vendor/symfony/console/Tests/Fixtures/application_2.json:14:            "help": "The <info>help<\/info> command displays help for a given command:\n\n  <info>php app\/console help list<\/info>\n\nYou can also output the help in other formats by using the <comment>--format<\/comment> option:\n\n  <info>php app\/console help --format=xml list<\/info>\n\nTo display the list of available commands, please use the <info>list<\/info> command.",
vendor/symfony/console/Tests/Fixtures/application_2.json:27:                        "name": "--format",
vendor/symfony/console/Tests/Fixtures/application_2.json:36:                        "name": "--raw",
vendor/symfony/console/Tests/Fixtures/application_2.json:45:                        "name": "--help",
vendor/symfony/console/Tests/Fixtures/application_2.json:46:                        "shortcut": "-h",
vendor/symfony/console/Tests/Fixtures/application_2.json:54:                        "name": "--quiet",
vendor/symfony/console/Tests/Fixtures/application_2.json:55:                        "shortcut": "-q",
vendor/symfony/console/Tests/Fixtures/application_2.json:63:                        "name": "--verbose",
vendor/symfony/console/Tests/Fixtures/application_2.json:64:                        "shortcut": "-v|-vv|-vvv",
vendor/symfony/console/Tests/Fixtures/application_2.json:72:                        "name": "--version",
vendor/symfony/console/Tests/Fixtures/application_2.json:73:                        "shortcut": "-V",
vendor/symfony/console/Tests/Fixtures/application_2.json:81:                        "name": "--ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:89:                    "no-ansi": {
vendor/symfony/console/Tests/Fixtures/application_2.json:90:                        "name": "--no-ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:98:                    "no-interaction": {
vendor/symfony/console/Tests/Fixtures/application_2.json:99:                        "name": "--no-interaction",
vendor/symfony/console/Tests/Fixtures/application_2.json:100:                        "shortcut": "-n",
vendor/symfony/console/Tests/Fixtures/application_2.json:114:                "list [--raw] [--format FORMAT] [--] [<namespace>]"
vendor/symfony/console/Tests/Fixtures/application_2.json:117:            "help": "The <info>list<\/info> command lists all commands:\n\n  <info>php app\/console list<\/info>\n\nYou can also display the commands for a specific namespace:\n\n  <info>php app\/console list test<\/info>\n\nYou can also output the information in other formats by using the <comment>--format<\/comment> option:\n\n  <info>php app\/console list --format=xml<\/info>\n\nIt's also possible to get raw list of commands (useful for embedding command runner):\n\n  <info>php app\/console list --raw<\/info>",
vendor/symfony/console/Tests/Fixtures/application_2.json:130:                        "name": "--raw",
vendor/symfony/console/Tests/Fixtures/application_2.json:139:                        "name": "--format",
vendor/symfony/console/Tests/Fixtures/application_2.json:164:                        "name": "--help",
vendor/symfony/console/Tests/Fixtures/application_2.json:165:                        "shortcut": "-h",
vendor/symfony/console/Tests/Fixtures/application_2.json:173:                        "name": "--quiet",
vendor/symfony/console/Tests/Fixtures/application_2.json:174:                        "shortcut": "-q",
vendor/symfony/console/Tests/Fixtures/application_2.json:182:                        "name": "--verbose",
vendor/symfony/console/Tests/Fixtures/application_2.json:183:                        "shortcut": "-v|-vv|-vvv",
vendor/symfony/console/Tests/Fixtures/application_2.json:191:                        "name": "--version",
vendor/symfony/console/Tests/Fixtures/application_2.json:192:                        "shortcut": "-V",
vendor/symfony/console/Tests/Fixtures/application_2.json:200:                        "name": "--ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:208:                    "no-ansi": {
vendor/symfony/console/Tests/Fixtures/application_2.json:209:                        "name": "--no-ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:217:                    "no-interaction": {
vendor/symfony/console/Tests/Fixtures/application_2.json:218:                        "name": "--no-interaction",
vendor/symfony/console/Tests/Fixtures/application_2.json:219:                        "shortcut": "-n",
vendor/symfony/console/Tests/Fixtures/application_2.json:233:                "descriptor:command2 [-o|--option_name] [--] <argument_name>",
vendor/symfony/console/Tests/Fixtures/application_2.json:234:                "descriptor:command2 -o|--option_name <argument_name>",
vendor/symfony/console/Tests/Fixtures/application_2.json:251:                        "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/application_2.json:252:                        "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/application_2.json:260:                        "name": "--help",
vendor/symfony/console/Tests/Fixtures/application_2.json:261:                        "shortcut": "-h",
vendor/symfony/console/Tests/Fixtures/application_2.json:269:                        "name": "--quiet",
vendor/symfony/console/Tests/Fixtures/application_2.json:270:                        "shortcut": "-q",
vendor/symfony/console/Tests/Fixtures/application_2.json:278:                        "name": "--verbose",
vendor/symfony/console/Tests/Fixtures/application_2.json:279:                        "shortcut": "-v|-vv|-vvv",
vendor/symfony/console/Tests/Fixtures/application_2.json:287:                        "name": "--version",
vendor/symfony/console/Tests/Fixtures/application_2.json:288:                        "shortcut": "-V",
vendor/symfony/console/Tests/Fixtures/application_2.json:296:                        "name": "--ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:304:                    "no-ansi": {
vendor/symfony/console/Tests/Fixtures/application_2.json:305:                        "name": "--no-ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:313:                    "no-interaction": {
vendor/symfony/console/Tests/Fixtures/application_2.json:314:                        "name": "--no-interaction",
vendor/symfony/console/Tests/Fixtures/application_2.json:315:                        "shortcut": "-n",
vendor/symfony/console/Tests/Fixtures/application_2.json:337:                        "name": "--help",
vendor/symfony/console/Tests/Fixtures/application_2.json:338:                        "shortcut": "-h",
vendor/symfony/console/Tests/Fixtures/application_2.json:346:                        "name": "--quiet",
vendor/symfony/console/Tests/Fixtures/application_2.json:347:                        "shortcut": "-q",
vendor/symfony/console/Tests/Fixtures/application_2.json:355:                        "name": "--verbose",
vendor/symfony/console/Tests/Fixtures/application_2.json:356:                        "shortcut": "-v|-vv|-vvv",
vendor/symfony/console/Tests/Fixtures/application_2.json:364:                        "name": "--version",
vendor/symfony/console/Tests/Fixtures/application_2.json:365:                        "shortcut": "-V",
vendor/symfony/console/Tests/Fixtures/application_2.json:373:                        "name": "--ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:381:                    "no-ansi": {
vendor/symfony/console/Tests/Fixtures/application_2.json:382:                        "name": "--no-ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:390:                    "no-interaction": {
vendor/symfony/console/Tests/Fixtures/application_2.json:391:                        "name": "--no-interaction",
vendor/symfony/console/Tests/Fixtures/application_2.json:392:                        "shortcut": "-n",
vendor/symfony/console/Tests/Fixtures/application_2.json:416:                        "name": "--help",
vendor/symfony/console/Tests/Fixtures/application_2.json:417:                        "shortcut": "-h",
vendor/symfony/console/Tests/Fixtures/application_2.json:425:                        "name": "--quiet",
vendor/symfony/console/Tests/Fixtures/application_2.json:426:                        "shortcut": "-q",
vendor/symfony/console/Tests/Fixtures/application_2.json:434:                        "name": "--verbose",
vendor/symfony/console/Tests/Fixtures/application_2.json:435:                        "shortcut": "-v|-vv|-vvv",
vendor/symfony/console/Tests/Fixtures/application_2.json:443:                        "name": "--version",
vendor/symfony/console/Tests/Fixtures/application_2.json:444:                        "shortcut": "-V",
vendor/symfony/console/Tests/Fixtures/application_2.json:452:                        "name": "--ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:460:                    "no-ansi": {
vendor/symfony/console/Tests/Fixtures/application_2.json:461:                        "name": "--no-ansi",
vendor/symfony/console/Tests/Fixtures/application_2.json:469:                    "no-interaction": {
vendor/symfony/console/Tests/Fixtures/application_2.json:470:                        "name": "--no-interaction",
vendor/symfony/console/Tests/Fixtures/application_2.json:471:                        "shortcut": "-n",
vendor/symfony/console/Tests/Fixtures/input_argument_4.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_4.md:1:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/input_option_with_style.txt:1:  <info>-o, --option_name=OPTION_NAME</info>  option description<comment> [default: "\<comment>style\</>"]</comment>
vendor/symfony/console/Tests/Fixtures/input_option_3.md:1:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/application_run2.txt:2:  list [options] [--] [<namespace>]
vendor/symfony/console/Tests/Fixtures/application_run2.txt:8:      --raw            To output raw command list
vendor/symfony/console/Tests/Fixtures/application_run2.txt:9:      --format=FORMAT  The output format (txt, xml, json, or md) [default: "txt"]
vendor/symfony/console/Tests/Fixtures/application_run2.txt:20:  You can also output the information in other formats by using the --format option:
vendor/symfony/console/Tests/Fixtures/application_run2.txt:22:    php app/console list --format=xml
vendor/symfony/console/Tests/Fixtures/application_run2.txt:26:    php app/console list --raw
vendor/symfony/console/Tests/Fixtures/FooLockCommand.php:14:        $this->setName('foo:lock');
vendor/symfony/console/Tests/Fixtures/FooLockCommand.php:19:        if (!$this->lock()) {
vendor/symfony/console/Tests/Fixtures/FooLockCommand.php:23:        $this->release();
vendor/symfony/console/Tests/Fixtures/BarBucCommand.php:9:        $this->setName('bar:buc');
vendor/symfony/console/Tests/Fixtures/input_definition_4.md:11:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/input_option_with_style.md:1:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/input_option_2.json:2:    "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/input_option_2.json:3:    "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/input_option_5.md:1:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/input_argument_2.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_definition_4.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_definition_4.xml:10:    <option name="--option_name" shortcut="-o" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/input_option_3.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_3.xml:2:<option name="--option_name" shortcut="-o" accept_value="1" is_value_required="1" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/DescriptorApplicationMbString.php:22:        $this->add(new DescriptorCommandMbString());
vendor/symfony/console/Tests/Fixtures/input_option_2.txt:1:  <info>-o, --option_name[=OPTION_NAME]</info>  option description<comment> [default: "default_value"]</comment>
vendor/symfony/console/Tests/Fixtures/FooCommand.php:15:            ->setName('foo:bar')
vendor/symfony/console/Tests/Fixtures/FooCommand.php:16:            ->setDescription('The foo:bar command')
vendor/symfony/console/Tests/Fixtures/FooCommand.php:17:            ->setAliases(array('afoobar'))
vendor/symfony/console/Tests/Fixtures/FooCommand.php:23:        $output->writeln('interact called');
vendor/symfony/console/Tests/Fixtures/FooCommand.php:28:        $this->input = $input;
vendor/symfony/console/Tests/Fixtures/FooCommand.php:29:        $this->output = $output;
vendor/symfony/console/Tests/Fixtures/FooCommand.php:31:        $output->writeln('called');
vendor/symfony/console/Tests/Fixtures/DummyOutput.php:29:        foreach (explode(PHP_EOL, trim($this->fetch())) as $message) {
vendor/symfony/console/Tests/Fixtures/Foo2Command.php:12:            ->setName('foo1:bar')
vendor/symfony/console/Tests/Fixtures/Foo2Command.php:13:            ->setDescription('The foo1:bar command')
vendor/symfony/console/Tests/Fixtures/Foo2Command.php:14:            ->setAliases(array('afoobar2'))
vendor/symfony/console/Tests/Fixtures/application_1.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/application_1.xml:6:        <usage>help [--format FORMAT] [--raw] [--] [&lt;command_name&gt;]</usage>
vendor/symfony/console/Tests/Fixtures/application_1.xml:13: You can also output the help in other formats by using the &lt;comment&gt;--format&lt;/comment&gt; option:
vendor/symfony/console/Tests/Fixtures/application_1.xml:15:   &lt;info&gt;php app/console help --format=xml list&lt;/info&gt;
vendor/symfony/console/Tests/Fixtures/application_1.xml:27:        <option name="--format" shortcut="" accept_value="1" is_value_required="1" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:33:        <option name="--raw" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:36:        <option name="--help" shortcut="-h" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:39:        <option name="--quiet" shortcut="-q" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:42:        <option name="--verbose" shortcut="-v" shortcuts="-v|-vv|-vvv" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:45:        <option name="--version" shortcut="-V" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:48:        <option name="--ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:51:        <option name="--no-ansi" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:54:        <option name="--no-interaction" shortcut="-n" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:61:        <usage>list [--raw] [--format FORMAT] [--] [&lt;namespace&gt;]</usage>
vendor/symfony/console/Tests/Fixtures/application_1.xml:72: You can also output the information in other formats by using the &lt;comment&gt;--format&lt;/comment&gt; option:
vendor/symfony/console/Tests/Fixtures/application_1.xml:74:   &lt;info&gt;php app/console list --format=xml&lt;/info&gt;
vendor/symfony/console/Tests/Fixtures/application_1.xml:78:   &lt;info&gt;php app/console list --raw&lt;/info&gt;</help>
vendor/symfony/console/Tests/Fixtures/application_1.xml:86:        <option name="--raw" shortcut="" accept_value="0" is_value_required="0" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/application_1.xml:89:        <option name="--format" shortcut="" accept_value="1" is_value_required="1" is_multiple="0">
vendor/symfony/console/Tests/Fixtures/command_2.md:2:---------------------
vendor/symfony/console/Tests/Fixtures/command_2.md:8:* `descriptor:command2 [-o|--option_name] [--] <argument_name>`
vendor/symfony/console/Tests/Fixtures/command_2.md:9:* `descriptor:command2 -o|--option_name <argument_name>`
vendor/symfony/console/Tests/Fixtures/command_2.md:24:#### `--option_name|-o`
vendor/symfony/console/Tests/Fixtures/FooSameCaseUppercaseCommand.php:9:        $this->setName('foo:BAR')->setDescription('foo:BAR command');
vendor/symfony/console/Tests/Fixtures/command_2.json:5:        "descriptor:command2 [-o|--option_name] [--] <argument_name>",
vendor/symfony/console/Tests/Fixtures/command_2.json:6:        "descriptor:command2 -o|--option_name <argument_name>",
vendor/symfony/console/Tests/Fixtures/command_2.json:23:                "name": "--option_name",
vendor/symfony/console/Tests/Fixtures/command_2.json:24:                "shortcut": "-o",
vendor/symfony/console/Tests/Fixtures/input_option_4.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/console/Tests/Fixtures/input_option_4.xml:2:<option name="--option_name" shortcut="-o" accept_value="1" is_value_required="0" is_multiple="1">
vendor/symfony/console/Tests/Output/OutputTest.php:23:        $this->assertEquals(Output::VERBOSITY_QUIET, $output->getVerbosity(), '__construct() takes the verbosity as its first argument');
vendor/symfony/console/Tests/Output/OutputTest.php:24:        $this->assertTrue($output->isDecorated(), '__construct() takes the decorated flag as its second argument');
vendor/symfony/console/Tests/Output/OutputTest.php:30:        $output->setDecorated(true);
vendor/symfony/console/Tests/Output/OutputTest.php:31:        $this->assertTrue($output->isDecorated(), 'setDecorated() sets the decorated flag');
vendor/symfony/console/Tests/Output/OutputTest.php:37:        $output->setVerbosity(Output::VERBOSITY_QUIET);
vendor/symfony/console/Tests/Output/OutputTest.php:38:        $this->assertEquals(Output::VERBOSITY_QUIET, $output->getVerbosity(), '->setVerbosity() sets the verbosity');
vendor/symfony/console/Tests/Output/OutputTest.php:40:        $this->assertTrue($output->isQuiet());
vendor/symfony/console/Tests/Output/OutputTest.php:41:        $this->assertFalse($output->isVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:42:        $this->assertFalse($output->isVeryVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:43:        $this->assertFalse($output->isDebug());
vendor/symfony/console/Tests/Output/OutputTest.php:45:        $output->setVerbosity(Output::VERBOSITY_NORMAL);
vendor/symfony/console/Tests/Output/OutputTest.php:46:        $this->assertFalse($output->isQuiet());
vendor/symfony/console/Tests/Output/OutputTest.php:47:        $this->assertFalse($output->isVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:48:        $this->assertFalse($output->isVeryVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:49:        $this->assertFalse($output->isDebug());
vendor/symfony/console/Tests/Output/OutputTest.php:51:        $output->setVerbosity(Output::VERBOSITY_VERBOSE);
vendor/symfony/console/Tests/Output/OutputTest.php:52:        $this->assertFalse($output->isQuiet());
vendor/symfony/console/Tests/Output/OutputTest.php:53:        $this->assertTrue($output->isVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:54:        $this->assertFalse($output->isVeryVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:55:        $this->assertFalse($output->isDebug());
vendor/symfony/console/Tests/Output/OutputTest.php:57:        $output->setVerbosity(Output::VERBOSITY_VERY_VERBOSE);
vendor/symfony/console/Tests/Output/OutputTest.php:58:        $this->assertFalse($output->isQuiet());
vendor/symfony/console/Tests/Output/OutputTest.php:59:        $this->assertTrue($output->isVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:60:        $this->assertTrue($output->isVeryVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:61:        $this->assertFalse($output->isDebug());
vendor/symfony/console/Tests/Output/OutputTest.php:63:        $output->setVerbosity(Output::VERBOSITY_DEBUG);
vendor/symfony/console/Tests/Output/OutputTest.php:64:        $this->assertFalse($output->isQuiet());
vendor/symfony/console/Tests/Output/OutputTest.php:65:        $this->assertTrue($output->isVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:66:        $this->assertTrue($output->isVeryVerbose());
vendor/symfony/console/Tests/Output/OutputTest.php:67:        $this->assertTrue($output->isDebug());
vendor/symfony/console/Tests/Output/OutputTest.php:73:        $output->writeln('foo');
vendor/symfony/console/Tests/Output/OutputTest.php:74:        $this->assertEquals('', $output->output, '->writeln() outputs nothing if verbosity is set to VERBOSITY_QUIET');
vendor/symfony/console/Tests/Output/OutputTest.php:80:        $output->writeln(array('foo', 'bar'));
vendor/symfony/console/Tests/Output/OutputTest.php:81:        $this->assertEquals("foo\nbar\n", $output->output, '->writeln() can take an array of messages to output');
vendor/symfony/console/Tests/Output/OutputTest.php:90:        $output->writeln($message, $type);
vendor/symfony/console/Tests/Output/OutputTest.php:91:        $this->assertEquals($expectedOutput, $output->output);
vendor/symfony/console/Tests/Output/OutputTest.php:105:        $output->setDecorated(false);
vendor/symfony/console/Tests/Output/OutputTest.php:106:        $output->writeln('<info>foo</info>');
vendor/symfony/console/Tests/Output/OutputTest.php:107:        $this->assertEquals("foo\n", $output->output, '->writeln() strips decoration tags if decoration is set to false');
vendor/symfony/console/Tests/Output/OutputTest.php:114:        $output->getFormatter()->setStyle('FOO', $fooStyle);
vendor/symfony/console/Tests/Output/OutputTest.php:115:        $output->setDecorated(true);
vendor/symfony/console/Tests/Output/OutputTest.php:116:        $output->writeln('<foo>foo</foo>');
vendor/symfony/console/Tests/Output/OutputTest.php:117:        $this->assertEquals("\033[33;41;5mfoo\033[39;49;25m\n", $output->output, '->writeln() decorates the output');
vendor/symfony/console/Tests/Output/OutputTest.php:124:        $output->clear();
vendor/symfony/console/Tests/Output/OutputTest.php:125:        $output->write('<bar>foo</bar>');
vendor/symfony/console/Tests/Output/OutputTest.php:126:        $this->assertEquals('<bar>foo</bar>', $output->output, '->write() do nothing when a style does not exist');
vendor/symfony/console/Tests/Output/OutputTest.php:128:        $output->clear();
vendor/symfony/console/Tests/Output/OutputTest.php:129:        $output->writeln('<bar>foo</bar>');
vendor/symfony/console/Tests/Output/OutputTest.php:130:        $this->assertEquals("<bar>foo</bar>\n", $output->output, '->writeln() do nothing when a style does not exist');
vendor/symfony/console/Tests/Output/OutputTest.php:140:        $output->setVerbosity($verbosity);
vendor/symfony/console/Tests/Output/OutputTest.php:141:        $output->clear();
vendor/symfony/console/Tests/Output/OutputTest.php:142:        $output->write('1', false);
vendor/symfony/console/Tests/Output/OutputTest.php:143:        $output->write('2', false, Output::VERBOSITY_QUIET);
vendor/symfony/console/Tests/Output/OutputTest.php:144:        $output->write('3', false, Output::VERBOSITY_NORMAL);
vendor/symfony/console/Tests/Output/OutputTest.php:145:        $output->write('4', false, Output::VERBOSITY_VERBOSE);
vendor/symfony/console/Tests/Output/OutputTest.php:146:        $output->write('5', false, Output::VERBOSITY_VERY_VERBOSE);
vendor/symfony/console/Tests/Output/OutputTest.php:147:        $output->write('6', false, Output::VERBOSITY_DEBUG);
vendor/symfony/console/Tests/Output/OutputTest.php:148:        $this->assertEquals($expected, $output->output, $msg);
vendor/symfony/console/Tests/Output/OutputTest.php:154:            array(Output::VERBOSITY_QUIET, '2', '->write() in QUIET mode only outputs when an explicit QUIET verbosity is passed'),
vendor/symfony/console/Tests/Output/OutputTest.php:155:            array(Output::VERBOSITY_NORMAL, '123', '->write() in NORMAL mode outputs anything below an explicit VERBOSE verbosity'),
vendor/symfony/console/Tests/Output/OutputTest.php:156:            array(Output::VERBOSITY_VERBOSE, '1234', '->write() in VERBOSE mode outputs anything below an explicit VERY_VERBOSE verbosity'),
vendor/symfony/console/Tests/Output/OutputTest.php:157:            array(Output::VERBOSITY_VERY_VERBOSE, '12345', '->write() in VERY_VERBOSE mode outputs anything below an explicit DEBUG verbosity'),
vendor/symfony/console/Tests/Output/OutputTest.php:158:            array(Output::VERBOSITY_DEBUG, '123456', '->write() in DEBUG mode outputs everything'),
vendor/symfony/console/Tests/Output/OutputTest.php:169:        $this->output = '';
vendor/symfony/console/Tests/Output/OutputTest.php:174:        $this->output .= $message.($newline ? "\n" : '');
vendor/symfony/console/Tests/Output/NullOutputTest.php:27:        $output->write('foo');
vendor/symfony/console/Tests/Output/NullOutputTest.php:30:        $this->assertSame('', $buffer, '->write() does nothing (at least nothing is printed)');
vendor/symfony/console/Tests/Output/NullOutputTest.php:31:        $this->assertFalse($output->isDecorated(), '->isDecorated() returns false');
vendor/symfony/console/Tests/Output/NullOutputTest.php:37:        $this->assertSame(OutputInterface::VERBOSITY_QUIET, $output->getVerbosity(), '->getVerbosity() returns VERBOSITY_QUIET for NullOutput by default');
vendor/symfony/console/Tests/Output/NullOutputTest.php:39:        $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);
vendor/symfony/console/Tests/Output/NullOutputTest.php:40:        $this->assertSame(OutputInterface::VERBOSITY_QUIET, $output->getVerbosity(), '->getVerbosity() always returns VERBOSITY_QUIET for NullOutput');
vendor/symfony/console/Tests/Output/NullOutputTest.php:47:        $output->setFormatter($outputFormatter);
vendor/symfony/console/Tests/Output/NullOutputTest.php:48:        $this->assertNotSame($outputFormatter, $output->getFormatter());
vendor/symfony/console/Tests/Output/NullOutputTest.php:54:        $output->setVerbosity(Output::VERBOSITY_NORMAL);
vendor/symfony/console/Tests/Output/NullOutputTest.php:55:        $this->assertEquals(Output::VERBOSITY_QUIET, $output->getVerbosity());
vendor/symfony/console/Tests/Output/NullOutputTest.php:61:        $output->setDecorated(true);
vendor/symfony/console/Tests/Output/NullOutputTest.php:62:        $this->assertFalse($output->isDecorated());
vendor/symfony/console/Tests/Output/NullOutputTest.php:68:        $this->assertTrue($output->isQuiet());
vendor/symfony/console/Tests/Output/NullOutputTest.php:74:        $this->assertFalse($output->isVerbose());
vendor/symfony/console/Tests/Output/NullOutputTest.php:80:        $this->assertFalse($output->isVeryVerbose());
vendor/symfony/console/Tests/Output/NullOutputTest.php:86:        $this->assertFalse($output->isDebug());
vendor/symfony/console/Tests/Output/StreamOutputTest.php:24:        $this->stream = fopen('php://memory', 'a', false);
vendor/symfony/console/Tests/Output/StreamOutputTest.php:29:        $this->stream = null;
vendor/symfony/console/Tests/Output/StreamOutputTest.php:34:        $output = new StreamOutput($this->stream, Output::VERBOSITY_QUIET, true);
vendor/symfony/console/Tests/Output/StreamOutputTest.php:35:        $this->assertEquals(Output::VERBOSITY_QUIET, $output->getVerbosity(), '__construct() takes the verbosity as its first argument');
vendor/symfony/console/Tests/Output/StreamOutputTest.php:36:        $this->assertTrue($output->isDecorated(), '__construct() takes the decorated flag as its second argument');
vendor/symfony/console/Tests/Output/StreamOutputTest.php:50:        $output = new StreamOutput($this->stream);
vendor/symfony/console/Tests/Output/StreamOutputTest.php:51:        $this->assertEquals($this->stream, $output->getStream(), '->getStream() returns the current stream');
vendor/symfony/console/Tests/Output/StreamOutputTest.php:56:        $output = new StreamOutput($this->stream);
vendor/symfony/console/Tests/Output/StreamOutputTest.php:57:        $output->writeln('foo');
vendor/symfony/console/Tests/Output/StreamOutputTest.php:58:        rewind($output->getStream());
vendor/symfony/console/Tests/Output/StreamOutputTest.php:59:        $this->assertEquals('foo'.PHP_EOL, stream_get_contents($output->getStream()), '->doWrite() writes to the stream');
vendor/symfony/console/Tests/Output/ConsoleOutputTest.php:24:        $this->assertEquals(Output::VERBOSITY_QUIET, $output->getVerbosity(), '__construct() takes the verbosity as its first argument');
vendor/symfony/console/Tests/Output/ConsoleOutputTest.php:25:        $this->assertSame($output->getFormatter(), $output->getErrorOutput()->getFormatter(), '__construct() takes a formatter or null as the third argument');
vendor/symfony/console/Tests/Output/ConsoleOutputTest.php:32:        $output->setFormatter($outputFormatter);
vendor/symfony/console/Tests/Output/ConsoleOutputTest.php:33:        $this->assertSame($outputFormatter, $output->getFormatter());
vendor/symfony/console/Tests/Output/ConsoleOutputTest.php:39:        $output->setVerbosity(Output::VERBOSITY_VERBOSE);
vendor/symfony/console/Tests/Output/ConsoleOutputTest.php:40:        $this->assertSame(Output::VERBOSITY_VERBOSE, $output->getVerbosity());
vendor/symfony/console/Tests/Descriptor/MarkdownDescriptorTest.php:22:        return $this->getDescriptionTestData(array_merge(
vendor/symfony/console/Tests/Descriptor/MarkdownDescriptorTest.php:30:        return $this->getDescriptionTestData(array_merge(
vendor/symfony/console/Tests/Descriptor/TextDescriptorTest.php:23:        return $this->getDescriptionTestData(array_merge(
vendor/symfony/console/Tests/Descriptor/TextDescriptorTest.php:31:        return $this->getDescriptionTestData(array_merge(
vendor/symfony/console/Tests/Descriptor/TextDescriptorTest.php:41:        $this->assertDescription(file_get_contents(__DIR__.'/../Fixtures/application_filtered_namespace.txt'), $application, array('namespace' => 'command4'));
vendor/symfony/console/Tests/Descriptor/ObjectsProvider.php:23: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Tests/Descriptor/JsonDescriptorTest.php:32:        $this->getDescriptor()->describe($output, $describedObject, $options + array('raw_output' => true));
vendor/symfony/console/Tests/Descriptor/JsonDescriptorTest.php:33:        $this->assertEquals(json_decode(trim($expectedDescription), true), json_decode(trim(str_replace(PHP_EOL, "\n", $output->fetch())), true));
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:27:        $this->assertDescription($expectedDescription, $argument);
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:33:        $this->assertDescription($expectedDescription, $option);
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:39:        $this->assertDescription($expectedDescription, $definition);
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:45:        $this->assertDescription($expectedDescription, $command);
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:54:        foreach ($application->all() as $command) {
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:55:            $command->setHelp(str_replace('%command.full_name%', 'app/console %command.name%', $command->getHelp()));
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:58:        $this->assertDescription($expectedDescription, $application);
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:63:        return $this->getDescriptionTestData(ObjectsProvider::getInputArguments());
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:68:        return $this->getDescriptionTestData(ObjectsProvider::getInputOptions());
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:73:        return $this->getDescriptionTestData(ObjectsProvider::getInputDefinitions());
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:78:        return $this->getDescriptionTestData(ObjectsProvider::getCommands());
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:83:        return $this->getDescriptionTestData(ObjectsProvider::getApplications());
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:94:            $description = file_get_contents(sprintf('%s/../Fixtures/%s.%s', __DIR__, $name, $this->getFormat()));
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:104:        $this->getDescriptor()->describe($output, $describedObject, $options + array('raw_output' => true));
vendor/symfony/console/Tests/Descriptor/AbstractDescriptorTest.php:105:        $this->assertEquals(trim($expectedDescription), trim(str_replace(PHP_EOL, "\n", $output->fetch())));
vendor/symfony/console/Tests/Helper/HelperSetTest.php:22:        $mock_helper = $this->getGenericMockHelper('fake_helper');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:25:        $this->assertEquals($mock_helper, $helperset->get('fake_helper_alias'), '__construct sets given helper to helpers');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:26:        $this->assertTrue($helperset->has('fake_helper_alias'), '__construct sets helper alias for given helper');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:32:        $helperset->set($this->getGenericMockHelper('fake_helper', $helperset));
vendor/symfony/console/Tests/Helper/HelperSetTest.php:33:        $this->assertTrue($helperset->has('fake_helper'), '->set() adds helper to helpers');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:36:        $helperset->set($this->getGenericMockHelper('fake_helper_01', $helperset));
vendor/symfony/console/Tests/Helper/HelperSetTest.php:37:        $helperset->set($this->getGenericMockHelper('fake_helper_02', $helperset));
vendor/symfony/console/Tests/Helper/HelperSetTest.php:38:        $this->assertTrue($helperset->has('fake_helper_01'), '->set() will set multiple helpers on consecutive calls');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:39:        $this->assertTrue($helperset->has('fake_helper_02'), '->set() will set multiple helpers on consecutive calls');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:42:        $helperset->set($this->getGenericMockHelper('fake_helper', $helperset), 'fake_helper_alias');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:43:        $this->assertTrue($helperset->has('fake_helper'), '->set() adds helper alias when set');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:44:        $this->assertTrue($helperset->has('fake_helper_alias'), '->set() adds helper alias when set');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:49:        $helperset = new HelperSet(array('fake_helper_alias' => $this->getGenericMockHelper('fake_helper')));
vendor/symfony/console/Tests/Helper/HelperSetTest.php:50:        $this->assertTrue($helperset->has('fake_helper'), '->has() finds set helper');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:51:        $this->assertTrue($helperset->has('fake_helper_alias'), '->has() finds set helper by alias');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:56:        $helper_01 = $this->getGenericMockHelper('fake_helper_01');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:57:        $helper_02 = $this->getGenericMockHelper('fake_helper_02');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:59:        $this->assertEquals($helper_01, $helperset->get('fake_helper_01'), '->get() returns correct helper by name');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:60:        $this->assertEquals($helper_01, $helperset->get('fake_helper_01_alias'), '->get() returns correct helper by alias');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:61:        $this->assertEquals($helper_02, $helperset->get('fake_helper_02'), '->get() returns correct helper by name');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:62:        $this->assertEquals($helper_02, $helperset->get('fake_helper_02_alias'), '->get() returns correct helper by alias');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:66:            $helperset->get('foo');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:67:            $this->fail('->get() throws InvalidArgumentException when helper not found');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:69:            $this->assertInstanceOf('\InvalidArgumentException', $e, '->get() throws InvalidArgumentException when helper not found');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:70:            $this->assertInstanceOf('Symfony\Component\Console\Exception\ExceptionInterface', $e, '->get() throws domain specific exception when helper not found');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:71:            $this->assertContains('The helper "foo" is not defined.', $e->getMessage(), '->get() throws InvalidArgumentException when helper not found');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:81:        $helperset->setCommand($cmd_01);
vendor/symfony/console/Tests/Helper/HelperSetTest.php:82:        $this->assertEquals($cmd_01, $helperset->getCommand(), '->setCommand() stores given command');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:85:        $helperset->setCommand($cmd_01);
vendor/symfony/console/Tests/Helper/HelperSetTest.php:86:        $helperset->setCommand($cmd_02);
vendor/symfony/console/Tests/Helper/HelperSetTest.php:87:        $this->assertEquals($cmd_02, $helperset->getCommand(), '->setCommand() overwrites stored command with consecutive calls');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:94:        $helperset->setCommand($cmd);
vendor/symfony/console/Tests/Helper/HelperSetTest.php:95:        $this->assertEquals($cmd, $helperset->getCommand(), '->getCommand() retrieves stored command');
vendor/symfony/console/Tests/Helper/HelperSetTest.php:101:        $helperset->set($this->getGenericMockHelper('fake_helper_01', $helperset));
vendor/symfony/console/Tests/Helper/HelperSetTest.php:102:        $helperset->set($this->getGenericMockHelper('fake_helper_02', $helperset));
vendor/symfony/console/Tests/Helper/HelperSetTest.php:108:            $this->assertEquals($helpers[$i++], $helper->getName());
vendor/symfony/console/Tests/Helper/HelperSetTest.php:114:        $mock_helper = $this->getMockBuilder('\Symfony\Component\Console\Helper\HelperInterface')->getMock();
vendor/symfony/console/Tests/Helper/HelperSetTest.php:115:        $mock_helper->expects($this->any())
vendor/symfony/console/Tests/Helper/HelperSetTest.php:116:            ->method('getName')
vendor/symfony/console/Tests/Helper/HelperSetTest.php:117:            ->will($this->returnValue($name));
vendor/symfony/console/Tests/Helper/HelperSetTest.php:120:            $mock_helper->expects($this->any())
vendor/symfony/console/Tests/Helper/HelperSetTest.php:121:                ->method('setHelperSet')
vendor/symfony/console/Tests/Helper/HelperSetTest.php:122:                ->with($this->equalTo($helperset));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:22:        $questionHelper->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:26:        $inputStream = $this->getInputStream("\n1\n  1  \nFabien\n1\nFabien\n1\n0,2\n 0 , 2  \n\n\n");
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:29:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:31:        $this->assertEquals('Spiderman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $output = $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:32:        $this->assertOutputContains('What is your favorite superhero? [Spiderman]', $output);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:35:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:36:        $this->assertEquals('Batman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:37:        $this->assertEquals('Batman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:40:        $question->setErrorMessage('Input "%s" is not a superhero!');
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:41:        $question->setMaxAttempts(2);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:42:        $this->assertEquals('Batman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $output = $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:43:        $this->assertOutputContains('Input "Fabien" is not a superhero!', $output);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:47:            $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:48:            $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $output = $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:49:            $this->fail();
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:51:            $this->assertEquals('Value "Fabien" is invalid', $e->getMessage());
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:55:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:56:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:58:        $this->assertEquals(array('Batman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:59:        $this->assertEquals(array('Superman', 'Spiderman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:60:        $this->assertEquals(array('Superman', 'Spiderman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:63:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:64:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:66:        $this->assertEquals(array('Superman', 'Batman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $output = $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:67:        $this->assertOutputContains('What is your favorite superhero? [Superman, Batman]', $output);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:70:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:71:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:73:        $this->assertEquals(array('Superman', 'Batman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $output = $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:74:        $this->assertOutputContains('What is your favorite superhero? [Superman, Batman]', $output);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:81:        $question->setValidator(function ($value) { return $value; });
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:82:        $input = $this->createStreamableInputInterfaceMock($this->getInputStream("\n"));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:83:        $this->assertNull($questionHelper->ask($input, $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:89:        $input = $this->createStreamableInputInterfaceMock($this->getInputStream('\\'));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:90:        $helper->ask($input, $output = $this->createOutputInterface(), new Question('Can I have a backslash?', '\\'));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:92:        $this->assertOutputContains('Can I have a backslash? [\]', $output);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:98:        $input = $this->createStreamableInputInterfaceMock($this->getInputStream('Foo\\Bar'));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:99:        $helper->ask($input, $output = $this->createOutputInterface(), new Question('Do you want to use Foo\\Bar <comment>or</comment> Foo\\Baz\\?', 'Foo\\Baz'));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:101:        $this->assertOutputContains('Do you want to use Foo\\Bar or Foo\\Baz\\? [Foo\\Baz]:', $output);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:107:        $input = $this->createStreamableInputInterfaceMock($this->getInputStream('sure'));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:108:        $helper->ask($input, $output = $this->createOutputInterface(), new Question('Question with a trailing \\'));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:110:        $this->assertOutputContains('Question with a trailing \\', $output);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:120:        $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream('')), $this->createOutputInterface(), new Question('What\'s your name?'));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:135:        $output->setDecorated(false);
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:142:        $mock = $this->getMockBuilder('Symfony\Component\Console\Input\InputInterface')->getMock();
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:143:        $mock->expects($this->any())
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:144:            ->method('isInteractive')
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:145:            ->will($this->returnValue($interactive));
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:152:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:153:        $stream = stream_get_contents($output->getStream());
vendor/symfony/console/Tests/Helper/SymfonyQuestionHelperTest.php:154:        $this->assertContains($expected, $stream);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:33:        $questionHelper->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:37:        $inputStream = $this->getInputStream("\n1\n  1  \nFabien\n1\nFabien\n1\n0,2\n 0 , 2  \n\n\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:40:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:42:        $this->assertEquals('Spiderman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:45:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:46:        $this->assertEquals('Batman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:47:        $this->assertEquals('Batman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:50:        $question->setErrorMessage('Input "%s" is not a superhero!');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:51:        $question->setMaxAttempts(2);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:52:        $this->assertEquals('Batman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $output = $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:54:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:55:        $stream = stream_get_contents($output->getStream());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:56:        $this->assertContains('Input "Fabien" is not a superhero!', $stream);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:60:            $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:61:            $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $output = $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:62:            $this->fail();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:64:            $this->assertEquals('Value "Fabien" is invalid', $e->getMessage());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:68:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:69:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:71:        $this->assertEquals(array('Batman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:72:        $this->assertEquals(array('Superman', 'Spiderman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:73:        $this->assertEquals(array('Superman', 'Spiderman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:76:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:77:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:79:        $this->assertEquals(array('Superman', 'Batman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:82:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:83:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:85:        $this->assertEquals(array('Superman', 'Batman'), $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:89:        $this->assertEquals('Superman', $questionHelper->ask($this->createStreamableInputInterfaceMock($inputStream, true), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:96:        $inputStream = $this->getInputStream("\n8AM\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:99:        $this->assertEquals('2PM', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:102:        $this->assertEquals('8AM', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $output = $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:104:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:105:        $this->assertEquals('What time is it?', stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:110:        if (!$this->hasSttyAvailable()) {
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:111:            $this->markTestSkipped('`stty` is required to test autocomplete functionality');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:122:        $inputStream = $this->getInputStream("Acm\nAc\177\177s\tTest\n\n\033[A\033[A\n\033[A\033[A\033[A\033[A\033[A\tTest\n\033[B\nS\177\177\033[B\033[B\nF00\177\177oo\t\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:126:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:129:        $question->setAutocompleterValues(array('AcmeDemoBundle', 'AsseticBundle', 'SecurityBundle', 'FooBundle'));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:131:        $this->assertEquals('AcmeDemoBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:132:        $this->assertEquals('AsseticBundleTest', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:133:        $this->assertEquals('FrameworkBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:134:        $this->assertEquals('SecurityBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:135:        $this->assertEquals('FooBundleTest', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:136:        $this->assertEquals('AcmeDemoBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:137:        $this->assertEquals('AsseticBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:138:        $this->assertEquals('FooBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:143:        if (!$this->hasSttyAvailable()) {
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:144:            $this->markTestSkipped('`stty` is required to test autocomplete functionality');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:148:        $inputStream = $this->getInputStream("\033[A\033[A\n\033[B\033[B\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:151:        $dialog->setHelperSet(new HelperSet(array(new FormatterHelper())));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:154:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:156:        $this->assertEquals('AcmeDemoBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:157:        $this->assertEquals('AsseticBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:162:        if (!$this->hasSttyAvailable()) {
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:163:            $this->markTestSkipped('`stty` is required to test autocomplete functionality');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:166:        $inputStream = $this->getInputStream("b\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:175:        $dialog->setHelperSet(new HelperSet(array(new FormatterHelper())));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:178:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:180:        $this->assertSame('b', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:185:        if (!$this->hasSttyAvailable()) {
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:186:            $this->markTestSkipped('`stty` is required to test autocomplete functionality');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:189:        $inputStream = $this->getInputStream('E');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:193:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:197:        $question->setAutocompleterValues(array($expectedCompletion));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:199:        $output = $this->createOutputInterface();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:200:        $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $output, $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:202:        $outputStream = $output->getStream();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:219:        $this->assertEquals($expectedCompletion, $importantActualOutput);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:225:            $this->markTestSkipped('This test is not supported on Windows');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:231:        $question->setHidden(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:233:        $this->assertEquals('8AM', $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream("8AM\n")), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:243:        $inputStream = $this->getInputStream($question."\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:245:        $this->assertEquals($expected, $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question), 'confirmation question should '.($expected ? 'pass' : 'cancel'));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:264:        $inputStream = $this->getInputStream("j\ny\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:266:        $this->assertTrue($dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:268:        $this->assertTrue($dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:275:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:287:        $question->setValidator($validator);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:288:        $question->setMaxAttempts(2);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:290:        $inputStream = $this->getInputStream("\nblack\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:291:        $this->assertEquals('white', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:292:        $this->assertEquals('black', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:295:            $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream("green\nyellow\norange\n")), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:296:            $this->fail();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:298:            $this->assertEquals($error, $e->getMessage());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:315:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:318:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:319:        $answer = $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream($providedAnswer."\n")), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:321:        $this->assertSame($expectedValue, $answer);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:347:        $inputStream = $this->getInputStream($providedAnswer."\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:349:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:352:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:353:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:354:        $answer = $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:356:        $this->assertSame($expectedValue, $answer);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:381:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:384:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:385:        $answer = $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream($providedAnswer."\n")), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:387:        $this->assertSame($expectedValue, $answer);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:415:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:418:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:419:        $answer = $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream($providedAnswer."\n")), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:421:        $this->assertSame($expectedValue, $answer);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:438:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:441:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:443:        $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream("My environment\n")), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:460:        $this->assertEquals('not yet', $dialog->ask($this->createStreamableInputInterfaceMock(null, false), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:480:        $output = $this->getMockBuilder('\Symfony\Component\Console\Output\OutputInterface')->getMock();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:481:        $output->method('getFormatter')->willReturn(new OutputFormatter());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:485:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:487:        $output->expects($this->once())->method('writeln')->with($this->equalTo($outputShown));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:490:        $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream("\n")), $output, $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:501:        $questionHelper->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:505:        $questionHelper->setInputStream($this->getInputStream("\n1\n  1  \nFabien\n1\nFabien\n1\n0,2\n 0 , 2  \n\n\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:508:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:510:        $this->assertEquals('Spiderman', $questionHelper->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:513:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:514:        $this->assertEquals('Batman', $questionHelper->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:515:        $this->assertEquals('Batman', $questionHelper->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:518:        $question->setErrorMessage('Input "%s" is not a superhero!');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:519:        $question->setMaxAttempts(2);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:520:        $this->assertEquals('Batman', $questionHelper->ask($this->createInputInterfaceMock(), $output = $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:522:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:523:        $stream = stream_get_contents($output->getStream());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:524:        $this->assertContains('Input "Fabien" is not a superhero!', $stream);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:528:            $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:529:            $questionHelper->ask($this->createInputInterfaceMock(), $output = $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:530:            $this->fail();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:532:            $this->assertEquals('Value "Fabien" is invalid', $e->getMessage());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:536:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:537:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:539:        $this->assertEquals(array('Batman'), $questionHelper->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:540:        $this->assertEquals(array('Superman', 'Spiderman'), $questionHelper->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:541:        $this->assertEquals(array('Superman', 'Spiderman'), $questionHelper->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:544:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:545:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:547:        $this->assertEquals(array('Superman', 'Batman'), $questionHelper->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:550:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:551:        $question->setMultiselect(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:553:        $this->assertEquals(array('Superman', 'Batman'), $questionHelper->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:563:        $dialog->setInputStream($this->getInputStream("\n8AM\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:566:        $this->assertEquals('2PM', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:569:        $this->assertEquals('8AM', $dialog->ask($this->createInputInterfaceMock(), $output = $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:571:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:572:        $this->assertEquals('What time is it?', stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:580:        if (!$this->hasSttyAvailable()) {
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:581:            $this->markTestSkipped('`stty` is required to test autocomplete functionality');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:592:        $inputStream = $this->getInputStream("Acm\nAc\177\177s\tTest\n\n\033[A\033[A\n\033[A\033[A\033[A\033[A\033[A\tTest\n\033[B\nS\177\177\033[B\033[B\nF00\177\177oo\t\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:595:        $dialog->setInputStream($inputStream);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:597:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:600:        $question->setAutocompleterValues(array('AcmeDemoBundle', 'AsseticBundle', 'SecurityBundle', 'FooBundle'));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:602:        $this->assertEquals('AcmeDemoBundle', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:603:        $this->assertEquals('AsseticBundleTest', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:604:        $this->assertEquals('FrameworkBundle', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:605:        $this->assertEquals('SecurityBundle', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:606:        $this->assertEquals('FooBundleTest', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:607:        $this->assertEquals('AcmeDemoBundle', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:608:        $this->assertEquals('AsseticBundle', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:609:        $this->assertEquals('FooBundle', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:617:        if (!$this->hasSttyAvailable()) {
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:618:            $this->markTestSkipped('`stty` is required to test autocomplete functionality');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:622:        $inputStream = $this->getInputStream("\033[A\033[A\n\033[B\033[B\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:625:        $dialog->setInputStream($inputStream);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:626:        $dialog->setHelperSet(new HelperSet(array(new FormatterHelper())));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:629:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:631:        $this->assertEquals('AcmeDemoBundle', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:632:        $this->assertEquals('AsseticBundle', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:641:            $this->markTestSkipped('This test is not supported on Windows');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:645:        $dialog->setInputStream($this->getInputStream("8AM\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:648:        $question->setHidden(true);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:650:        $this->assertEquals('8AM', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:661:        $dialog->setInputStream($this->getInputStream($question."\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:663:        $this->assertEquals($expected, $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question), 'confirmation question should '.($expected ? 'pass' : 'cancel'));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:673:        $dialog->setInputStream($this->getInputStream("j\ny\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:675:        $this->assertTrue($dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:677:        $this->assertTrue($dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:687:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:699:        $question->setValidator($validator);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:700:        $question->setMaxAttempts(2);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:702:        $dialog->setInputStream($this->getInputStream("\nblack\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:703:        $this->assertEquals('white', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:704:        $this->assertEquals('black', $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:706:        $dialog->setInputStream($this->getInputStream("green\nyellow\norange\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:708:            $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:709:            $this->fail();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:711:            $this->assertEquals($error, $e->getMessage());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:728:        $dialog->setInputStream($this->getInputStream($providedAnswer."\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:730:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:733:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:734:        $answer = $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:736:        $this->assertSame($expectedValue, $answer);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:753:        $dialog->setInputStream($this->getInputStream($providedAnswer."\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:755:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:758:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:759:        $answer = $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:761:        $this->assertSame($expectedValue, $answer);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:777:        $dialog->setInputStream($this->getInputStream($providedAnswer."\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:779:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:782:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:783:        $answer = $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:785:        $this->assertSame($expectedValue, $answer);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:802:        $dialog->setInputStream($this->getInputStream("My environment\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:804:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:807:        $question->setMaxAttempts(1);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:809:        $dialog->ask($this->createInputInterfaceMock(), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:830:        $output = $this->getMockBuilder('\Symfony\Component\Console\Output\OutputInterface')->getMock();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:831:        $output->method('getFormatter')->willReturn(new OutputFormatter());
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:834:        $dialog->setInputStream($this->getInputStream("\n"));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:836:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:838:        $output->expects($this->once())->method('writeln')->with($this->equalTo($outputShown));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:841:        $dialog->ask($this->createInputInterfaceMock(), $output, $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:851:        $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream('')), $this->createOutputInterface(), new Question('What\'s your name?'));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:863:        $question->setValidator(function () {
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:869:        $dialog->ask($this->createStreamableInputInterfaceMock($this->getInputStream('')), $this->createOutputInterface(), $question);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:883:        if (!$this->hasSttyAvailable()) {
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:884:            $this->markTestSkipped('`stty` is required to test autocomplete functionality');
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:895:        $inputStream = $this->getInputStream("Acm\nAc\177\177s\tTest\n\n\033[A\033[A\n\033[A\033[A\033[A\033[A\033[A\tTest\n\033[B\nS\177\177\033[B\033[B\nF00\177\177oo\t\n");
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:899:        $dialog->setHelperSet($helperSet);
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:902:        $question->setAutocompleterValues(new AutocompleteValues(array('irrelevant' => 'AcmeDemoBundle', 'AsseticBundle', 'SecurityBundle', 'FooBundle')));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:904:        $this->assertEquals('AcmeDemoBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:905:        $this->assertEquals('AsseticBundleTest', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:906:        $this->assertEquals('FrameworkBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:907:        $this->assertEquals('SecurityBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:908:        $this->assertEquals('FooBundleTest', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:909:        $this->assertEquals('AcmeDemoBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:910:        $this->assertEquals('AsseticBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:911:        $this->assertEquals('FooBundle', $dialog->ask($this->createStreamableInputInterfaceMock($inputStream), $this->createOutputInterface(), $question));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:930:        $mock = $this->getMockBuilder('Symfony\Component\Console\Input\InputInterface')->getMock();
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:931:        $mock->expects($this->any())
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:932:            ->method('isInteractive')
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:933:            ->will($this->returnValue($interactive));
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:952:        $this->values = $values;
vendor/symfony/console/Tests/Helper/QuestionHelperTest.php:957:        return new \ArrayIterator($this->values);
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:10: * @group time-sensitive
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:16:        $bar = new ProgressIndicator($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:17:        $bar->start('Starting...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:19:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:21:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:23:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:25:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:27:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:29:        $bar->setMessage('Advancing...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:30:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:31:        $bar->finish('Done...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:32:        $bar->start('Starting Again...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:34:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:35:        $bar->finish('Done Again...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:37:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:39:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:40:            $this->generateOutput(' - Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:41:            $this->generateOutput(' \\ Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:42:            $this->generateOutput(' | Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:43:            $this->generateOutput(' / Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:44:            $this->generateOutput(' - Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:45:            $this->generateOutput(' \\ Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:46:            $this->generateOutput(' \\ Advancing...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:47:            $this->generateOutput(' | Advancing...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:48:            $this->generateOutput(' | Done...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:50:            $this->generateOutput(' - Starting Again...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:51:            $this->generateOutput(' \\ Starting Again...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:52:            $this->generateOutput(' \\ Done Again...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:54:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:60:        $bar = new ProgressIndicator($output = $this->getOutputStream(false));
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:62:        $bar->start('Starting...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:63:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:64:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:65:        $bar->setMessage('Midway...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:66:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:67:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:68:        $bar->finish('Done...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:70:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:72:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:76:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:82:        $bar = new ProgressIndicator($output = $this->getOutputStream(), null, 100, array('a', 'b', 'c'));
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:84:        $bar->start('Starting...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:86:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:88:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:90:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:92:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:94:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:95:            $this->generateOutput(' a Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:96:            $this->generateOutput(' b Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:97:            $this->generateOutput(' c Starting...').
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:98:            $this->generateOutput(' a Starting...'),
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:99:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:109:        $bar = new ProgressIndicator($this->getOutputStream(), null, 100, array('1'));
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:118:        $bar = new ProgressIndicator($this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:119:        $bar->start('Starting...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:120:        $bar->start('Starting Again.');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:129:        $bar = new ProgressIndicator($this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:130:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:139:        $bar = new ProgressIndicator($this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:140:        $bar->finish('Finished');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:148:        $bar = new ProgressIndicator($output = $this->getOutputStream(), $format);
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:149:        $bar->start('Starting...');
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:150:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:152:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressIndicatorTest.php:154:        $this->assertNotEmpty(stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/HelperTest.php:53:        $this->assertEquals($expectedFormat, Helper::formatTime($secs));
vendor/symfony/console/Tests/Helper/TableTest.php:27:        $this->stream = fopen('php://memory', 'r+');
vendor/symfony/console/Tests/Helper/TableTest.php:32:        fclose($this->stream);
vendor/symfony/console/Tests/Helper/TableTest.php:33:        $this->stream = null;
vendor/symfony/console/Tests/Helper/TableTest.php:41:        $table = new Table($output = $this->getOutputStream($decorated));
vendor/symfony/console/Tests/Helper/TableTest.php:43:            ->setHeaders($headers)
vendor/symfony/console/Tests/Helper/TableTest.php:44:            ->setRows($rows)
vendor/symfony/console/Tests/Helper/TableTest.php:45:            ->setStyle($style)
vendor/symfony/console/Tests/Helper/TableTest.php:47:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:49:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:57:        $table = new Table($output = $this->getOutputStream($decorated));
vendor/symfony/console/Tests/Helper/TableTest.php:59:            ->setHeaders($headers)
vendor/symfony/console/Tests/Helper/TableTest.php:60:            ->addRows($rows)
vendor/symfony/console/Tests/Helper/TableTest.php:61:            ->setStyle($style)
vendor/symfony/console/Tests/Helper/TableTest.php:63:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:65:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:73:        $table = new Table($output = $this->getOutputStream($decorated));
vendor/symfony/console/Tests/Helper/TableTest.php:75:            ->setHeaders($headers)
vendor/symfony/console/Tests/Helper/TableTest.php:76:            ->setStyle($style)
vendor/symfony/console/Tests/Helper/TableTest.php:79:            $table->addRow($row);
vendor/symfony/console/Tests/Helper/TableTest.php:81:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:83:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:89:            array('99921-58-10-7', 'Divine Comedy', 'Dante Alighieri'),
vendor/symfony/console/Tests/Helper/TableTest.php:90:            array('9971-5-0210-0', 'A Tale of Two Cities', 'Charles Dickens'),
vendor/symfony/console/Tests/Helper/TableTest.php:91:            array('960-425-059-0', 'The Lord of the Rings', 'J. R. R. Tolkien'),
vendor/symfony/console/Tests/Helper/TableTest.php:92:            array('80-902734-1-6', 'And Then There Were None', 'Agatha Christie'),
vendor/symfony/console/Tests/Helper/TableTest.php:101:+---------------+--------------------------+------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:103:+---------------+--------------------------+------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:104:| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |
vendor/symfony/console/Tests/Helper/TableTest.php:105:| 9971-5-0210-0 | A Tale of Two Cities     | Charles Dickens  |
vendor/symfony/console/Tests/Helper/TableTest.php:106:| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |
vendor/symfony/console/Tests/Helper/TableTest.php:107:| 80-902734-1-6 | And Then There Were None | Agatha Christie  |
vendor/symfony/console/Tests/Helper/TableTest.php:108:+---------------+--------------------------+------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:118: 99921-58-10-7 Divine Comedy            Dante Alighieri  
vendor/symfony/console/Tests/Helper/TableTest.php:119: 9971-5-0210-0 A Tale of Two Cities     Charles Dickens  
vendor/symfony/console/Tests/Helper/TableTest.php:120: 960-425-059-0 The Lord of the Rings    J. R. R. Tolkien 
vendor/symfony/console/Tests/Helper/TableTest.php:121: 80-902734-1-6 And Then There Were None Agatha Christie  
vendor/symfony/console/Tests/Helper/TableTest.php:133:  99921-58-10-7   Divine Comedy              Dante Alighieri   
vendor/symfony/console/Tests/Helper/TableTest.php:134:  9971-5-0210-0   A Tale of Two Cities       Charles Dickens   
vendor/symfony/console/Tests/Helper/TableTest.php:135:  960-425-059-0   The Lord of the Rings      J. R. R. Tolkien  
vendor/symfony/console/Tests/Helper/TableTest.php:136:  80-902734-1-6   And Then There Were None   Agatha Christie   
vendor/symfony/console/Tests/Helper/TableTest.php:144:                    array('99921-58-10-7', 'Divine Comedy', 'Dante Alighieri'),
vendor/symfony/console/Tests/Helper/TableTest.php:145:                    array('9971-5-0210-0'),
vendor/symfony/console/Tests/Helper/TableTest.php:146:                    array('960-425-059-0', 'The Lord of the Rings', 'J. R. R. Tolkien'),
vendor/symfony/console/Tests/Helper/TableTest.php:147:                    array('80-902734-1-6', 'And Then There Were None', 'Agatha Christie'),
vendor/symfony/console/Tests/Helper/TableTest.php:151:+---------------+--------------------------+------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:153:+---------------+--------------------------+------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:154:| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |
vendor/symfony/console/Tests/Helper/TableTest.php:155:| 9971-5-0210-0 |                          |                  |
vendor/symfony/console/Tests/Helper/TableTest.php:156:| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |
vendor/symfony/console/Tests/Helper/TableTest.php:157:| 80-902734-1-6 | And Then There Were None | Agatha Christie  |
vendor/symfony/console/Tests/Helper/TableTest.php:158:+---------------+--------------------------+------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:165:                    array('99921-58-10-7', 'Divine Comedy', 'Dante Alighieri'),
vendor/symfony/console/Tests/Helper/TableTest.php:166:                    array('9971-5-0210-0'),
vendor/symfony/console/Tests/Helper/TableTest.php:167:                    array('960-425-059-0', 'The Lord of the Rings', 'J. R. R. Tolkien'),
vendor/symfony/console/Tests/Helper/TableTest.php:168:                    array('80-902734-1-6', 'And Then There Were None', 'Agatha Christie'),
vendor/symfony/console/Tests/Helper/TableTest.php:172:+---------------+--------------------------+------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:173:| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |
vendor/symfony/console/Tests/Helper/TableTest.php:174:| 9971-5-0210-0 |                          |                  |
vendor/symfony/console/Tests/Helper/TableTest.php:175:| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |
vendor/symfony/console/Tests/Helper/TableTest.php:176:| 80-902734-1-6 | And Then There Were None | Agatha Christie  |
vendor/symfony/console/Tests/Helper/TableTest.php:177:+---------------+--------------------------+------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:184:                    array('99921-58-10-7', "Divine\nComedy", 'Dante Alighieri'),
vendor/symfony/console/Tests/Helper/TableTest.php:185:                    array('9971-5-0210-2', "Harry Potter\nand the Chamber of Secrets", "Rowling\nJoanne K."),
vendor/symfony/console/Tests/Helper/TableTest.php:186:                    array('9971-5-0210-2', "Harry Potter\nand the Chamber of Secrets", "Rowling\nJoanne K."),
vendor/symfony/console/Tests/Helper/TableTest.php:187:                    array('960-425-059-0', 'The Lord of the Rings', "J. R. R.\nTolkien"),
vendor/symfony/console/Tests/Helper/TableTest.php:191:+---------------+----------------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:193:+---------------+----------------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:194:| 99921-58-10-7 | Divine                     | Dante Alighieri |
vendor/symfony/console/Tests/Helper/TableTest.php:196:| 9971-5-0210-2 | Harry Potter               | Rowling         |
vendor/symfony/console/Tests/Helper/TableTest.php:198:| 9971-5-0210-2 | Harry Potter               | Rowling         |
vendor/symfony/console/Tests/Helper/TableTest.php:200:| 960-425-059-0 | The Lord of the Rings      | J. R. R.        |
vendor/symfony/console/Tests/Helper/TableTest.php:202:+---------------+----------------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:211:+------+-------+
vendor/symfony/console/Tests/Helper/TableTest.php:213:+------+-------+
vendor/symfony/console/Tests/Helper/TableTest.php:226:                    array('<info>99921-58-10-7</info>', '<error>Divine Comedy</error>', '<fg=blue;bg=white>Dante Alighieri</fg=blue;bg=white>'),
vendor/symfony/console/Tests/Helper/TableTest.php:227:                    array('9971-5-0210-0', 'A Tale of Two Cities', '<info>Charles Dickens</>'),
vendor/symfony/console/Tests/Helper/TableTest.php:231:+---------------+----------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:233:+---------------+----------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:234:| 99921-58-10-7 | Divine Comedy        | Dante Alighieri |
vendor/symfony/console/Tests/Helper/TableTest.php:235:| 9971-5-0210-0 | A Tale of Two Cities | Charles Dickens |
vendor/symfony/console/Tests/Helper/TableTest.php:236:+---------------+----------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:243:                    array('<strong>99921-58-10-700</strong>', '<f>Divine Com</f>', 'Dante Alighieri'),
vendor/symfony/console/Tests/Helper/TableTest.php:244:                    array('9971-5-0210-0', 'A Tale of Two Cities', 'Charles Dickens'),
vendor/symfony/console/Tests/Helper/TableTest.php:248:+----------------------------------+----------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:250:+----------------------------------+----------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:251:| <strong>99921-58-10-700</strong> | <f>Divine Com</f>    | Dante Alighieri |
vendor/symfony/console/Tests/Helper/TableTest.php:252:| 9971-5-0210-0                    | A Tale of Two Cities | Charles Dickens |
vendor/symfony/console/Tests/Helper/TableTest.php:253:+----------------------------------+----------------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:260:                    array('99921-58-10-7', 'Divine Comedy', 'Dante Alighieri'),
vendor/symfony/console/Tests/Helper/TableTest.php:265:                        new TableCell('Arduino: A Quick-Start Guide', array('colspan' => 2)),
vendor/symfony/console/Tests/Helper/TableTest.php:270:                        '9971-5-0210-0',
vendor/symfony/console/Tests/Helper/TableTest.php:280:+-------------------------------+-------------------------------+-----------------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:282:+-------------------------------+-------------------------------+-----------------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:283:| 99921-58-10-7                 | Divine Comedy                 | Dante Alighieri             |
vendor/symfony/console/Tests/Helper/TableTest.php:284:+-------------------------------+-------------------------------+-----------------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:286:+-------------------------------+-------------------------------+-----------------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:287:| Arduino: A Quick-Start Guide                                  | Mark Schmidt                |
vendor/symfony/console/Tests/Helper/TableTest.php:288:+-------------------------------+-------------------------------+-----------------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:289:| 9971-5-0210-0                 | A Tale of                                                   |
vendor/symfony/console/Tests/Helper/TableTest.php:291:+-------------------------------+-------------------------------+-----------------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:293:+-------------------------------+-------------------------------+-----------------------------+
vendor/symfony/console/Tests/Helper/TableTest.php:301:                        new TableCell('9971-5-0210-0', array('rowspan' => 3)),
vendor/symfony/console/Tests/Helper/TableTest.php:308:                    array('80-902734-1-6', new TableCell("And Then \nThere \nWere None", array('rowspan' => 3)), 'Agatha Christie'),
vendor/symfony/console/Tests/Helper/TableTest.php:309:                    array('80-902734-1-7', 'Test'),
vendor/symfony/console/Tests/Helper/TableTest.php:313:+---------------+---------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:315:+---------------+---------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:316:| 9971-5-0210-0 | Divine Comedy | Dante Alighieri |
vendor/symfony/console/Tests/Helper/TableTest.php:320:+---------------+---------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:321:| 80-902734-1-6 | And Then      | Agatha Christie |
vendor/symfony/console/Tests/Helper/TableTest.php:322:| 80-902734-1-7 | There         | Test            |
vendor/symfony/console/Tests/Helper/TableTest.php:324:+---------------+---------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:332:                        new TableCell('9971-5-0210-0', array('rowspan' => 2, 'colspan' => 2)),
vendor/symfony/console/Tests/Helper/TableTest.php:339:                        new TableCell('9971-5-0210-0', array('rowspan' => 3, 'colspan' => 2)),
vendor/symfony/console/Tests/Helper/TableTest.php:346:+------------------+---------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:348:+------------------+---------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:349:| 9971-5-0210-0              | Dante Alighieri |
vendor/symfony/console/Tests/Helper/TableTest.php:351:+------------------+---------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:352:| Dante Alighieri  | 9971-5-0210-0             |
vendor/symfony/console/Tests/Helper/TableTest.php:355:+------------------+---------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:363:                        new TableCell("9971\n-5-\n021\n0-0", array('rowspan' => 2, 'colspan' => 2)),
vendor/symfony/console/Tests/Helper/TableTest.php:370:                        new TableCell("9971\n-5-\n021\n0-0", array('rowspan' => 2, 'colspan' => 2)),
vendor/symfony/console/Tests/Helper/TableTest.php:375:                        new TableCell("9971\n-5-\n021\n0-0", array('rowspan' => 2, 'colspan' => 2)),
vendor/symfony/console/Tests/Helper/TableTest.php:381:+-----------------+-------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:383:+-----------------+-------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:385:| -5-                     | Charles Dickens |
vendor/symfony/console/Tests/Helper/TableTest.php:387:| 0-0                     |                 |
vendor/symfony/console/Tests/Helper/TableTest.php:388:+-----------------+-------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:390:| Charles Dickens | -5-                     |
vendor/symfony/console/Tests/Helper/TableTest.php:392:|                 | 0-0                     |
vendor/symfony/console/Tests/Helper/TableTest.php:393:+-----------------+-------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:395:| -5-                     | Alighieri       |
vendor/symfony/console/Tests/Helper/TableTest.php:397:| 0-0                     |                 |
vendor/symfony/console/Tests/Helper/TableTest.php:398:+-----------------+-------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:406:                        new TableCell("9971\n-5-\n021\n0-0", array('rowspan' => 2, 'colspan' => 2)),
vendor/symfony/console/Tests/Helper/TableTest.php:412:                        new TableCell("9971\n-5-\n021\n0-0", array('rowspan' => 2, 'colspan' => 2)),
vendor/symfony/console/Tests/Helper/TableTest.php:418:+-----------------+-------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:420:+-----------------+-------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:422:| -5-                     | Charles Dickens |
vendor/symfony/console/Tests/Helper/TableTest.php:424:| 0-0                     |                 |
vendor/symfony/console/Tests/Helper/TableTest.php:426:| Charles Dickens | -5-                     |
vendor/symfony/console/Tests/Helper/TableTest.php:428:|                 | 0-0                     |
vendor/symfony/console/Tests/Helper/TableTest.php:429:+-----------------+-------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:437:                        new TableCell('9971-5-0210-0', array('rowspan' => 3, 'colspan' => 1)),
vendor/symfony/console/Tests/Helper/TableTest.php:445:+---------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:447:+---------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:448:| 9971-5-0210-0 | Dante Alighieri |
vendor/symfony/console/Tests/Helper/TableTest.php:449:|               |-----------------|
vendor/symfony/console/Tests/Helper/TableTest.php:451:+---------------+-----------------+
vendor/symfony/console/Tests/Helper/TableTest.php:463:+------+-------+--------+
vendor/symfony/console/Tests/Helper/TableTest.php:465:+------+-------+--------+
vendor/symfony/console/Tests/Helper/TableTest.php:467:+------+-------+--------+
vendor/symfony/console/Tests/Helper/TableTest.php:483:+---+--+--+---+--+---+--+---+--+
vendor/symfony/console/Tests/Helper/TableTest.php:485:+---+--+--+---+--+---+--+---+--+
vendor/symfony/console/Tests/Helper/TableTest.php:495:                        new TableCell('9971-5-0210-0', array('colspan' => 3)),
vendor/symfony/console/Tests/Helper/TableTest.php:506:+-----------------+------------------+---------+
vendor/symfony/console/Tests/Helper/TableTest.php:508:+-----------------+------------------+---------+
vendor/symfony/console/Tests/Helper/TableTest.php:509:| 9971-5-0210-0                                |
vendor/symfony/console/Tests/Helper/TableTest.php:510:+-----------------+------------------+---------+
vendor/symfony/console/Tests/Helper/TableTest.php:512:+-----------------+------------------+---------+
vendor/symfony/console/Tests/Helper/TableTest.php:535:+-------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:538:+-------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:541:+-------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:552:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:554:            ->setHeaders(array('■■'))
vendor/symfony/console/Tests/Helper/TableTest.php:555:            ->setRows(array(array(1234)))
vendor/symfony/console/Tests/Helper/TableTest.php:556:            ->setStyle('default')
vendor/symfony/console/Tests/Helper/TableTest.php:558:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:562:+------+
vendor/symfony/console/Tests/Helper/TableTest.php:564:+------+
vendor/symfony/console/Tests/Helper/TableTest.php:566:+------+
vendor/symfony/console/Tests/Helper/TableTest.php:570:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:575:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:577:        $table->setRows(array(array(new TableCell(12345))));
vendor/symfony/console/Tests/Helper/TableTest.php:578:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:582:+-------+
vendor/symfony/console/Tests/Helper/TableTest.php:584:+-------+
vendor/symfony/console/Tests/Helper/TableTest.php:588:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:593:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:595:        $table->setRows(array(array(new TableCell(12345.01))));
vendor/symfony/console/Tests/Helper/TableTest.php:596:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:600:+----------+
vendor/symfony/console/Tests/Helper/TableTest.php:602:+----------+
vendor/symfony/console/Tests/Helper/TableTest.php:606:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:613:            ->setHorizontalBorderChar('.')
vendor/symfony/console/Tests/Helper/TableTest.php:614:            ->setVerticalBorderChar('.')
vendor/symfony/console/Tests/Helper/TableTest.php:615:            ->setCrossingChar('.')
vendor/symfony/console/Tests/Helper/TableTest.php:619:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:621:            ->setHeaders(array('Foo'))
vendor/symfony/console/Tests/Helper/TableTest.php:622:            ->setRows(array(array('Bar')))
vendor/symfony/console/Tests/Helper/TableTest.php:623:            ->setStyle('dotfull');
vendor/symfony/console/Tests/Helper/TableTest.php:624:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:636:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:641:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:643:            ->setHeaders(array('Foo'))
vendor/symfony/console/Tests/Helper/TableTest.php:644:            ->setRows(array(
vendor/symfony/console/Tests/Helper/TableTest.php:651:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:655:+------+
vendor/symfony/console/Tests/Helper/TableTest.php:657:+------+
vendor/symfony/console/Tests/Helper/TableTest.php:659:+------+
vendor/symfony/console/Tests/Helper/TableTest.php:661:+------+
vendor/symfony/console/Tests/Helper/TableTest.php:663:+------+
vendor/symfony/console/Tests/Helper/TableTest.php:667:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:669:        $this->assertEquals($table, $table->addRow(new TableSeparator()), 'fluent interface on addRow() with a single TableSeparator() works');
vendor/symfony/console/Tests/Helper/TableTest.php:674:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:675:        $table->setRows(array(
vendor/symfony/console/Tests/Helper/TableTest.php:678:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:679:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:680:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:684:+----+---+
vendor/symfony/console/Tests/Helper/TableTest.php:686:+----+---+
vendor/symfony/console/Tests/Helper/TableTest.php:687:+----+---+
vendor/symfony/console/Tests/Helper/TableTest.php:689:+----+---+
vendor/symfony/console/Tests/Helper/TableTest.php:690:+----+---+
vendor/symfony/console/Tests/Helper/TableTest.php:692:+----+---+
vendor/symfony/console/Tests/Helper/TableTest.php:696:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:701:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:703:            ->setHeaders(array('ISBN', 'Title', 'Author', 'Price'))
vendor/symfony/console/Tests/Helper/TableTest.php:704:            ->setRows(array(
vendor/symfony/console/Tests/Helper/TableTest.php:705:                array('99921-58-10-7', 'Divine Comedy', 'Dante Alighieri', '9.95'),
vendor/symfony/console/Tests/Helper/TableTest.php:706:                array('9971-5-0210-0', 'A Tale of Two Cities', 'Charles Dickens', '139.25'),
vendor/symfony/console/Tests/Helper/TableTest.php:710:        $style->setPadType(STR_PAD_LEFT);
vendor/symfony/console/Tests/Helper/TableTest.php:711:        $table->setColumnStyle(3, $style);
vendor/symfony/console/Tests/Helper/TableTest.php:713:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:717:+---------------+----------------------+-----------------+--------+
vendor/symfony/console/Tests/Helper/TableTest.php:719:+---------------+----------------------+-----------------+--------+
vendor/symfony/console/Tests/Helper/TableTest.php:720:| 99921-58-10-7 | Divine Comedy        | Dante Alighieri |   9.95 |
vendor/symfony/console/Tests/Helper/TableTest.php:721:| 9971-5-0210-0 | A Tale of Two Cities | Charles Dickens | 139.25 |
vendor/symfony/console/Tests/Helper/TableTest.php:722:+---------------+----------------------+-----------------+--------+
vendor/symfony/console/Tests/Helper/TableTest.php:726:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:735:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:737:            ->setHeaders(array('ISBN', 'Title', 'Author', 'Price'))
vendor/symfony/console/Tests/Helper/TableTest.php:738:            ->setRows(array(
vendor/symfony/console/Tests/Helper/TableTest.php:739:                array('99921-58-10-7', array(), 'Dante Alighieri', '9.95'),
vendor/symfony/console/Tests/Helper/TableTest.php:742:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:747:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:749:            ->setHeaders(array('ISBN', 'Title', 'Author', 'Price'))
vendor/symfony/console/Tests/Helper/TableTest.php:750:            ->setRows(array(
vendor/symfony/console/Tests/Helper/TableTest.php:751:                array('99921-58-10-7', 'Divine Comedy', 'Dante Alighieri', '9.95'),
vendor/symfony/console/Tests/Helper/TableTest.php:752:                array('9971-5-0210-0', 'A Tale of Two Cities', 'Charles Dickens', '139.25'),
vendor/symfony/console/Tests/Helper/TableTest.php:754:            ->setColumnWidth(0, 15)
vendor/symfony/console/Tests/Helper/TableTest.php:755:            ->setColumnWidth(3, 10);
vendor/symfony/console/Tests/Helper/TableTest.php:758:        $style->setPadType(STR_PAD_LEFT);
vendor/symfony/console/Tests/Helper/TableTest.php:759:        $table->setColumnStyle(3, $style);
vendor/symfony/console/Tests/Helper/TableTest.php:761:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:765:+-----------------+----------------------+-----------------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:767:+-----------------+----------------------+-----------------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:768:| 99921-58-10-7   | Divine Comedy        | Dante Alighieri |       9.95 |
vendor/symfony/console/Tests/Helper/TableTest.php:769:| 9971-5-0210-0   | A Tale of Two Cities | Charles Dickens |     139.25 |
vendor/symfony/console/Tests/Helper/TableTest.php:770:+-----------------+----------------------+-----------------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:774:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:779:        $table = new Table($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:781:            ->setHeaders(array('ISBN', 'Title', 'Author', 'Price'))
vendor/symfony/console/Tests/Helper/TableTest.php:782:            ->setRows(array(
vendor/symfony/console/Tests/Helper/TableTest.php:783:                array('99921-58-10-7', 'Divine Comedy', 'Dante Alighieri', '9.95'),
vendor/symfony/console/Tests/Helper/TableTest.php:784:                array('9971-5-0210-0', 'A Tale of Two Cities', 'Charles Dickens', '139.25'),
vendor/symfony/console/Tests/Helper/TableTest.php:786:            ->setColumnWidths(array(15, 0, -1, 10));
vendor/symfony/console/Tests/Helper/TableTest.php:789:        $style->setPadType(STR_PAD_LEFT);
vendor/symfony/console/Tests/Helper/TableTest.php:790:        $table->setColumnStyle(3, $style);
vendor/symfony/console/Tests/Helper/TableTest.php:792:        $table->render();
vendor/symfony/console/Tests/Helper/TableTest.php:796:+-----------------+----------------------+-----------------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:798:+-----------------+----------------------+-----------------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:799:| 99921-58-10-7   | Divine Comedy        | Dante Alighieri |       9.95 |
vendor/symfony/console/Tests/Helper/TableTest.php:800:| 9971-5-0210-0   | A Tale of Two Cities | Charles Dickens |     139.25 |
vendor/symfony/console/Tests/Helper/TableTest.php:801:+-----------------+----------------------+-----------------+------------+
vendor/symfony/console/Tests/Helper/TableTest.php:805:        $this->assertEquals($expected, $this->getOutputContent($output));
vendor/symfony/console/Tests/Helper/TableTest.php:814:        $table = new Table($this->getOutputStream());
vendor/symfony/console/Tests/Helper/TableTest.php:815:        $table->setStyle('absent');
vendor/symfony/console/Tests/Helper/TableTest.php:829:        return new StreamOutput($this->stream, StreamOutput::VERBOSITY_NORMAL, $decorated);
vendor/symfony/console/Tests/Helper/TableTest.php:834:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/TableTest.php:836:        return str_replace(PHP_EOL, "\n", stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:29:        $helper->setHelperSet(new HelperSet(array(new DebugFormatterHelper())));
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:30:        $output = $this->getOutputStream($verbosity);
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:31:        $helper->run($output, $cmd, $error);
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:32:        $this->assertEquals($expected, $this->getOutput($output));
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:38:        $helper->setHelperSet(new HelperSet(array(new DebugFormatterHelper())));
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:39:        $output = $this->getOutputStream(StreamOutput::VERBOSITY_NORMAL);
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:44:        $helper->run($output, 'php -r "echo 42;"', null, $callback);
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:45:        $this->assertTrue($executed);
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:51:  RUN  php -r "echo 42;"
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:56:  RUN  php -r "echo 42;"
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:62:  RUN  php -r "echo '<info>42</info>';"
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:68:  RUN  'php' '-r' 'echo 42;'
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:74:  RUN  php -r "fwrite(STDERR, 'error message');usleep(50000);fwrite(STDOUT, 'out message');exit(252);"
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:79:  RUN  php -r "fwrite(STDERR, 'error message');usleep(500000);fwrite(STDOUT, 'out message');exit(252);"
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:87:        $args = new Process(array('php', '-r', 'echo 42;'));
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:88:        $args = $args->getCommandLine();
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:89:        $successOutputProcessDebug = str_replace("'php' '-r' 'echo 42;'", $args, $successOutputProcessDebug);
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:92:            array('', 'php -r "echo 42;"', StreamOutput::VERBOSITY_VERBOSE, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:93:            array($successOutputVerbose, 'php -r "echo 42;"', StreamOutput::VERBOSITY_VERY_VERBOSE, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:94:            array($successOutputDebug, 'php -r "echo 42;"', StreamOutput::VERBOSITY_DEBUG, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:95:            array($successOutputDebugWithTags, 'php -r "echo \'<info>42</info>\';"', StreamOutput::VERBOSITY_DEBUG, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:96:            array('', 'php -r "syntax error"', StreamOutput::VERBOSITY_VERBOSE, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:97:            array($syntaxErrorOutputVerbose, 'php -r "fwrite(STDERR, \'error message\');usleep(50000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_VERY_VERBOSE, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:98:            array($syntaxErrorOutputDebug, 'php -r "fwrite(STDERR, \'error message\');usleep(500000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_DEBUG, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:99:            array($errorMessage.PHP_EOL, 'php -r "fwrite(STDERR, \'error message\');usleep(50000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_VERBOSE, $errorMessage),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:100:            array($syntaxErrorOutputVerbose.$errorMessage.PHP_EOL, 'php -r "fwrite(STDERR, \'error message\');usleep(50000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_VERY_VERBOSE, $errorMessage),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:101:            array($syntaxErrorOutputDebug.$errorMessage.PHP_EOL, 'php -r "fwrite(STDERR, \'error message\');usleep(500000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_DEBUG, $errorMessage),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:102:            array($successOutputProcessDebug, array('php', '-r', 'echo 42;'), StreamOutput::VERBOSITY_DEBUG, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:103:            array($successOutputDebug, new Process('php -r "echo 42;"'), StreamOutput::VERBOSITY_DEBUG, null),
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:114:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProcessHelperTest.php:116:        return stream_get_contents($output->getStream());
vendor/symfony/console/Tests/Helper/AbstractQuestionHelperTest.php:21:        $mock = $this->getMockBuilder(StreamableInputInterface::class)->getMock();
vendor/symfony/console/Tests/Helper/AbstractQuestionHelperTest.php:22:        $mock->expects($this->any())
vendor/symfony/console/Tests/Helper/AbstractQuestionHelperTest.php:23:            ->method('isInteractive')
vendor/symfony/console/Tests/Helper/AbstractQuestionHelperTest.php:24:            ->will($this->returnValue($interactive));
vendor/symfony/console/Tests/Helper/AbstractQuestionHelperTest.php:27:            $mock->expects($this->any())
vendor/symfony/console/Tests/Helper/AbstractQuestionHelperTest.php:28:                ->method('getStream')
vendor/symfony/console/Tests/Helper/AbstractQuestionHelperTest.php:29:                ->willReturn($stream);
vendor/symfony/console/Tests/Helper/TableStyleTest.php:26:        $style->setPadType('TEST');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:20: * @group time-sensitive
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:26:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:27:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:28:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:29:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:31:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:32:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:33:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:34:            $this->generateOutput('    1 [->--------------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:35:            $this->generateOutput('    0 [>---------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:36:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:42:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:43:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:44:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:46:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:47:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:48:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:49:            $this->generateOutput('    1 [->--------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:50:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:56:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:57:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:58:        $bar->advance(5);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:60:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:61:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:62:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:63:            $this->generateOutput('    5 [----->----------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:64:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:70:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:71:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:72:        $bar->advance(3);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:73:        $bar->advance(2);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:75:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:76:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:77:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:78:            $this->generateOutput('    3 [--->------------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:79:            $this->generateOutput('    5 [----->----------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:80:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:86:        $bar = new ProgressBar($output = $this->getOutputStream(), 10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:87:        $bar->setProgress(9);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:88:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:89:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:91:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:92:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:93:            '  9/10 [=========================>--]  90%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:94:            $this->generateOutput(' 10/10 [============================] 100%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:95:            $this->generateOutput(' 11/11 [============================] 100%'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:96:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:102:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:103:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:104:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:105:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:106:        $bar->advance(-1);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:108:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:109:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:110:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:111:            $this->generateOutput('    1 [->--------------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:112:            $this->generateOutput('    2 [-->-------------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:113:            $this->generateOutput('    1 [->--------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:114:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:120:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:121:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:122:        $bar->advance(4);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:123:        $bar->advance(4);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:124:        $bar->advance(-2);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:126:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:127:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:128:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:129:            $this->generateOutput('    4 [---->-----------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:130:            $this->generateOutput('    8 [-------->-------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:131:            $this->generateOutput('    6 [------>---------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:132:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:138:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:139:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:140:        $bar->advance(3);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:141:        $bar->advance(3);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:142:        $bar->advance(-1);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:143:        $bar->advance(-2);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:145:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:146:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:147:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:148:            $this->generateOutput('    3 [--->------------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:149:            $this->generateOutput('    6 [------>---------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:150:            $this->generateOutput('    5 [----->----------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:151:            $this->generateOutput('    3 [--->------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:152:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:158:        $bar = new ProgressBar($output = $this->getOutputStream(), 10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:159:        $bar->setProgress(1);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:160:        $bar->advance(-1);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:161:        $bar->advance(-1);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:163:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:164:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:165:            '  1/10 [==>-------------------------]  10%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:166:            $this->generateOutput('  0/10 [>---------------------------]   0%'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:167:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:174:            '  0/10 [>---------------------------]   0%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:175:            $this->generateOutput(' 10/10 [============================] 100%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:176:            $this->generateOutput(' 10/10 [============================] 100%')
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:180:        $bar = new ProgressBar($output = $this->getOutputStream(), 10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:181:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:182:        $bar->advance(10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:183:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:185:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:186:        $this->assertEquals($expected, stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:189:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:190:        $bar->start(10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:191:        $bar->advance(10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:192:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:194:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:195:        $this->assertEquals($expected, stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:198:        $bar = new ProgressBar($output = $this->getOutputStream(), 10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:199:        $bar->setFormat('normal');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:200:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:201:        $bar->advance(10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:202:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:204:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:205:        $this->assertEquals($expected, stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:208:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:209:        $bar->setFormat('normal');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:210:        $bar->start(10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:211:        $bar->advance(10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:212:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:214:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:215:        $this->assertEquals($expected, stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:220:        $bar = new ProgressBar($output = $this->getOutputStream(), 10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:221:        $bar->setBarWidth(10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:222:        $bar->setBarCharacter('_');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:223:        $bar->setEmptyBarCharacter(' ');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:224:        $bar->setProgressCharacter('/');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:225:        $bar->setFormat(' %current%/%max% [%bar%] %percent:3s%%');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:226:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:227:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:229:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:230:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:232:            $this->generateOutput('  1/10 [_/        ]  10%'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:233:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:239:        $bar = new ProgressBar($output = $this->getOutputStream(), 50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:240:        $bar->display();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:242:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:243:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:244:            '  0/50 [>---------------------------]   0%',
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:245:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:251:        $bar = new ProgressBar($output = $this->getOutputStream(true, StreamOutput::VERBOSITY_QUIET), 50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:252:        $bar->display();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:254:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:255:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:257:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:263:        $bar = new ProgressBar($output = $this->getOutputStream(), 50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:264:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:266:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:267:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:269:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:275:        $bar = new ProgressBar($output = $this->getOutputStream(), 50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:276:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:277:        $bar->display();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:278:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:279:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:281:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:282:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:283:            '  0/50 [>---------------------------]   0%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:284:            $this->generateOutput('  0/50 [>---------------------------]   0%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:285:            $this->generateOutput('  1/50 [>---------------------------]   2%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:286:            $this->generateOutput('  2/50 [=>--------------------------]   4%'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:287:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:293:        $bar = new ProgressBar($output = $this->getOutputStream(), 50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:294:        $bar->setFormat(' %current%/%max% [%bar%] %percent:3s%%');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:295:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:296:        $bar->display();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:297:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:300:        $bar->setFormat(' %current%/%max% [%bar%]');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:301:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:303:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:304:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:305:            '  0/50 [>---------------------------]   0%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:306:            $this->generateOutput('  0/50 [>---------------------------]   0%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:307:            $this->generateOutput('  1/50 [>---------------------------]   2%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:308:            $this->generateOutput('  2/50 [=>--------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:309:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:315:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:316:        $bar->setFormat('%current%/%max% [%bar%]');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:317:        $bar->start(50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:318:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:320:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:321:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:322:            ' 0/50 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:323:            $this->generateOutput(' 1/50 [>---------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:324:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:330:        $bar = new ProgressBar($output = $this->getOutputStream(), 50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:331:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:332:        $bar->display();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:333:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:334:        $bar->setProgress(15);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:335:        $bar->setProgress(25);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:337:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:338:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:339:            '  0/50 [>---------------------------]   0%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:340:            $this->generateOutput('  0/50 [>---------------------------]   0%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:341:            $this->generateOutput('  1/50 [>---------------------------]   2%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:342:            $this->generateOutput(' 15/50 [========>-------------------]  30%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:343:            $this->generateOutput(' 25/50 [==============>-------------]  50%'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:344:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:350:        $bar = new ProgressBar($this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:351:        $bar->setProgress(15);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:352:        $this->assertNotNull($bar->getStartTime());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:357:        $bar = new ProgressBar($output = $this->getOutputStream(), 6);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:358:        $bar->setRedrawFrequency(2);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:359:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:360:        $bar->setProgress(1);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:361:        $bar->advance(2);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:362:        $bar->advance(2);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:363:        $bar->advance(1);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:365:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:366:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:367:            ' 0/6 [>---------------------------]   0%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:368:            $this->generateOutput(' 3/6 [==============>-------------]  50%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:369:            $this->generateOutput(' 5/6 [=======================>----]  83%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:370:            $this->generateOutput(' 6/6 [============================] 100%'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:371:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:377:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:378:        $bar->setRedrawFrequency(0);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:379:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:380:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:382:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:383:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:384:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:385:            $this->generateOutput('    1 [->--------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:386:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:392:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:393:        $bar->setRedrawFrequency(0.9);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:394:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:395:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:397:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:398:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:399:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:400:            $this->generateOutput('    1 [->--------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:401:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:407:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:408:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:409:        $bar->setBarCharacter('■');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:410:        $bar->advance(3);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:412:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:413:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:414:            '    0 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:415:            $this->generateOutput('    3 [■■■>------------------------]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:416:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:422:        $bar = new ProgressBar($output = $this->getOutputStream(), 50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:423:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:424:        $bar->setProgress(25);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:425:        $bar->clear();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:427:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:428:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:429:            '  0/50 [>---------------------------]   0%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:430:            $this->generateOutput(' 25/50 [==============>-------------]  50%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:431:            $this->generateOutput(''),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:432:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:438:        $bar = new ProgressBar($output = $this->getOutputStream(), 200);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:439:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:440:        $bar->display();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:441:        $bar->advance(199);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:442:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:444:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:445:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:446:            '   0/200 [>---------------------------]   0%'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:447:            $this->generateOutput('   0/200 [>---------------------------]   0%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:448:            $this->generateOutput(' 199/200 [===========================>]  99%').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:449:            $this->generateOutput(' 200/200 [============================] 100%'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:450:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:456:        $bar = new ProgressBar($output = $this->getOutputStream(false), 200);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:457:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:460:            $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:463:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:465:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:466:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:467:            '   0/200 [>---------------------------]   0%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:468:            '  20/200 [==>-------------------------]  10%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:469:            '  40/200 [=====>----------------------]  20%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:470:            '  60/200 [========>-------------------]  30%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:471:            '  80/200 [===========>----------------]  40%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:472:            ' 100/200 [==============>-------------]  50%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:473:            ' 120/200 [================>-----------]  60%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:474:            ' 140/200 [===================>--------]  70%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:475:            ' 160/200 [======================>-----]  80%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:476:            ' 180/200 [=========================>--]  90%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:478:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:484:        $bar = new ProgressBar($output = $this->getOutputStream(false), 50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:485:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:486:        $bar->setProgress(25);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:487:        $bar->clear();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:488:        $bar->setProgress(50);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:489:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:491:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:492:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:493:            '  0/50 [>---------------------------]   0%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:494:            ' 25/50 [==============>-------------]  50%'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:496:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:502:        $bar = new ProgressBar($output = $this->getOutputStream(false));
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:503:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:504:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:506:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:507:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:508:            '    0 [>---------------------------]'.PHP_EOL.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:509:            '    1 [->--------------------------]',
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:510:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:516:        $output = $this->getOutputStream();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:519:        $bar2->setProgressCharacter('#');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:522:        $bar1->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:523:        $output->write("\n");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:524:        $bar2->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:525:        $output->write("\n");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:526:        $bar3->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:530:            $output->write("\033[2A");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:532:                $bar1->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:534:            $output->write("\n");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:535:            $bar2->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:536:            $output->write("\n");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:537:            $bar3->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:539:        $output->write("\033[2A");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:540:        $output->write("\n");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:541:        $output->write("\n");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:542:        $bar3->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:544:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:545:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:546:            ' 0/2 [>---------------------------]   0%'."\n".
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:547:            ' 0/3 [#---------------------------]   0%'."\n".
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:548:            rtrim('    0 [>---------------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:551:            $this->generateOutput(' 1/2 [==============>-------------]  50%')."\n".
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:552:            $this->generateOutput(' 1/3 [=========#------------------]  33%')."\n".
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:553:            rtrim($this->generateOutput('    1 [->--------------------------]')).
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:556:            $this->generateOutput(' 2/2 [============================] 100%')."\n".
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:557:            $this->generateOutput(' 2/3 [==================#---------]  66%')."\n".
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:558:            rtrim($this->generateOutput('    2 [-->-------------------------]')).
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:562:            $this->generateOutput(' 3/3 [============================] 100%')."\n".
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:563:            rtrim($this->generateOutput('    3 [--->------------------------]')).
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:568:            rtrim($this->generateOutput('    3 [============================]')),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:569:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:575:        $output = $this->getOutputStream();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:578:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:579:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:580:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:581:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:582:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:584:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:585:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:586:            rtrim('    0 [>---------------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:587:            rtrim($this->generateOutput('    1 [->--------------------------]')).
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:588:            rtrim($this->generateOutput('    2 [-->-------------------------]')).
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:589:            rtrim($this->generateOutput('    3 [--->------------------------]')).
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:590:            rtrim($this->generateOutput('    3 [============================]')),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:591:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:597:        $output = $this->getOutputStream();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:601:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:602:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:605:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:606:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:607:            '    0 [>---]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:608:            $this->generateOutput('    1 [->--]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:609:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:616:            return $bar->getMaxSteps() - $bar->getProgress();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:618:        $bar = new ProgressBar($output = $this->getOutputStream(), 3);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:619:        $bar->setFormat(' %remaining_steps% [%bar%]');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:621:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:622:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:623:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:625:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:626:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:627:            ' 3 [>---------------------------]'.
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:628:            $this->generateOutput(' 2 [=========>------------------]').
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:629:            $this->generateOutput(' 0 [============================]'),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:630:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:636:        $bar = new ProgressBar($output = $this->getOutputStream(), 3);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:637:        $bar->setFormat("%bar%\nfoobar");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:639:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:640:        $bar->advance();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:641:        $bar->clear();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:642:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:644:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:645:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:646:            ">---------------------------\nfoobar".
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:647:            $this->generateOutput("=========>------------------\nfoobar").
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:649:            $this->generateOutput("============================\nfoobar"),
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:650:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:658:        $bar = new ProgressBar($output = $this->getOutputStream(), 15);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:666:        $bar->setFormat(" \033[44;37m %title:-37s% \033[0m\n %current%/%max% %bar% %percent:3s%%\n 🏁  %remaining:-10s% %memory:37s%");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:667:        $bar->setBarCharacter($done = "\033[32m●\033[0m");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:668:        $bar->setEmptyBarCharacter($empty = "\033[31m●\033[0m");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:669:        $bar->setProgressCharacter($progress = "\033[32m➤ \033[0m");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:671:        $bar->setMessage('Starting the demo... fingers crossed', 'title');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:672:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:674:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:675:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:679:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:681:        ftruncate($output->getStream(), 0);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:682:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:684:        $bar->setMessage('Looks good to me...', 'title');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:685:        $bar->advance(4);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:687:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:688:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:689:            $this->generateOutput(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:694:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:696:        ftruncate($output->getStream(), 0);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:697:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:699:        $bar->setMessage('Thanks, bye', 'title');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:700:        $bar->finish();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:702:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:703:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:704:            $this->generateOutput(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:709:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:716:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:717:        $bar->setFormat('normal');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:718:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:719:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:720:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:721:            '    0 [>---------------------------]',
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:722:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:725:        $bar = new ProgressBar($output = $this->getOutputStream(), 10);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:726:        $bar->setFormat('normal');
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:727:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:728:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:729:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:730:            '  0/10 [>---------------------------]   0%',
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:731:            stream_get_contents($output->getStream())
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:740:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:741:        $bar->setFormat($format);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:742:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:744:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:745:        $this->assertNotEmpty(stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:779:        $bar = new ProgressBar($output = $this->getOutputStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:780:        $bar->setFormat("%bar%\n0123456789");
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:783:        $bar->setBarWidth(5);
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:784:        $this->assertEquals(5, $bar->getBarWidth());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:787:        $bar->start();
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:788:        rewind($output->getStream());
vendor/symfony/console/Tests/Helper/ProgressBarTest.php:789:        $this->assertEquals(5, $bar->getBarWidth(), stream_get_contents($output->getStream()));
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:23:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:25:            $formatter->formatSection('cli', 'Some text to display'),
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:34:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:36:            $formatter->formatBlock('Some text to display', 'error'),
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:40:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:43:            $formatter->formatBlock(array('Some text to display', 'foo bar'), 'error'),
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:47:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:51:            $formatter->formatBlock('Some text to display', 'error', true),
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:60:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:64:            $formatter->formatBlock('Du texte à afficher', 'error', true),
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:72:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:76:            $formatter->formatBlock('表示するテキスト', 'error', true),
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:85:        $this->assertEquals(
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:89:            $formatter->formatBlock('<info>some info</info>', 'error', true),
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:99:        $this->assertSame('test...', $formatter->truncate($message, 4));
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:100:        $this->assertSame('testing truncat...', $formatter->truncate($message, 15));
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:101:        $this->assertSame('testing truncate...', $formatter->truncate($message, 16));
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:102:        $this->assertSame('zażółć gęślą...', $formatter->truncate('zażółć gęślą jaźń', 12));
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:110:        $this->assertSame('test!', $formatter->truncate($message, 4, '!'));
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:118:        $this->assertSame($message, $formatter->truncate($message, 10));
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:126:        $this->assertSame('testing tru...', $formatter->truncate($message, -5));
vendor/symfony/console/Tests/Helper/FormatterHelperTest.php:127:        $this->assertSame('...', $formatter->truncate($message, -100));
vendor/symfony/console/Tests/TerminalTest.php:24:        $this->assertSame(100, $terminal->getWidth());
vendor/symfony/console/Tests/TerminalTest.php:25:        $this->assertSame(50, $terminal->getHeight());
vendor/symfony/console/Tests/TerminalTest.php:30:        $this->assertSame(120, $terminal->getWidth());
vendor/symfony/console/Tests/TerminalTest.php:31:        $this->assertSame(60, $terminal->getHeight());
vendor/symfony/console/Tests/TerminalTest.php:41:        $this->assertSame(0, $terminal->getWidth());
vendor/symfony/console/Tests/TerminalTest.php:42:        $this->assertSame(0, $terminal->getHeight());
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:31:        $this->command = new Command('foo');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:32:        $this->command->addArgument('command');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:33:        $this->command->addArgument('foo');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:34:        $this->command->setCode(function ($input, $output) { $output->writeln('foo'); });
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:36:        $this->tester = new CommandTester($this->command);
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:37:        $this->tester->execute(array('foo' => 'bar'), array('interactive' => false, 'decorated' => false, 'verbosity' => Output::VERBOSITY_VERBOSE));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:42:        $this->command = null;
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:43:        $this->tester = null;
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:48:        $this->assertFalse($this->tester->getInput()->isInteractive(), '->execute() takes an interactive option');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:49:        $this->assertFalse($this->tester->getOutput()->isDecorated(), '->execute() takes a decorated option');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:50:        $this->assertEquals(Output::VERBOSITY_VERBOSE, $this->tester->getOutput()->getVerbosity(), '->execute() takes a verbosity option');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:55:        $this->assertEquals('bar', $this->tester->getInput()->getArgument('foo'), '->getInput() returns the current input instance');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:60:        rewind($this->tester->getOutput()->getStream());
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:61:        $this->assertEquals('foo'.PHP_EOL, stream_get_contents($this->tester->getOutput()->getStream()), '->getOutput() returns the current output instance');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:66:        $this->assertEquals('foo'.PHP_EOL, $this->tester->getDisplay(), '->getDisplay() returns the display of the last execution');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:71:        $this->assertSame(0, $this->tester->getStatusCode(), '->getStatusCode() returns the status code');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:77:        $application->setAutoExit(false);
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:80:        $command->setCode(function ($input, $output) { $output->writeln('foo'); });
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:82:        $application->add($command);
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:84:        $tester = new CommandTester($application->find('foo'));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:87:        $this->assertEquals(0, $tester->execute(array()));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:99:        $command->setHelperSet(new HelperSet(array(new QuestionHelper())));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:100:        $command->setCode(function ($input, $output) use ($questions, $command) {
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:101:            $helper = $command->getHelper('question');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:102:            $helper->ask($input, $output, new Question($questions[0]));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:103:            $helper->ask($input, $output, new Question($questions[1]));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:104:            $helper->ask($input, $output, new Question($questions[2]));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:108:        $tester->setInputs(array('Bobby', 'Fine', 'France'));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:109:        $tester->execute(array());
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:111:        $this->assertEquals(0, $tester->getStatusCode());
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:112:        $this->assertEquals(implode('', $questions), $tester->getDisplay(true));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:128:        $command->setHelperSet(new HelperSet(array(new QuestionHelper())));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:129:        $command->setCode(function ($input, $output) use ($questions, $command) {
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:130:            $helper = $command->getHelper('question');
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:131:            $helper->ask($input, $output, new Question($questions[0]));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:132:            $helper->ask($input, $output, new Question($questions[1]));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:133:            $helper->ask($input, $output, new Question($questions[2]));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:137:        $tester->setInputs(array('Bobby', 'Fine'));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:138:        $tester->execute(array());
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:150:        $command->setCode(function ($input, $output) use ($questions, $command) {
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:152:            $io->ask($questions[0]);
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:153:            $io->ask($questions[1]);
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:154:            $io->ask($questions[2]);
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:158:        $tester->setInputs(array('Bobby', 'Fine', 'France'));
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:159:        $tester->execute(array());
vendor/symfony/console/Tests/Tester/CommandTesterTest.php:161:        $this->assertEquals(0, $tester->getStatusCode());
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:26:        $this->application = new Application();
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:27:        $this->application->setAutoExit(false);
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:28:        $this->application->register('foo')
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:29:            ->addArgument('foo')
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:30:            ->setCode(function ($input, $output) { $output->writeln('foo'); })
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:33:        $this->tester = new ApplicationTester($this->application);
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:34:        $this->tester->run(array('command' => 'foo', 'foo' => 'bar'), array('interactive' => false, 'decorated' => false, 'verbosity' => Output::VERBOSITY_VERBOSE));
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:39:        $this->application = null;
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:40:        $this->tester = null;
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:45:        $this->assertFalse($this->tester->getInput()->isInteractive(), '->execute() takes an interactive option');
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:46:        $this->assertFalse($this->tester->getOutput()->isDecorated(), '->execute() takes a decorated option');
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:47:        $this->assertEquals(Output::VERBOSITY_VERBOSE, $this->tester->getOutput()->getVerbosity(), '->execute() takes a verbosity option');
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:52:        $this->assertEquals('bar', $this->tester->getInput()->getArgument('foo'), '->getInput() returns the current input instance');
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:57:        rewind($this->tester->getOutput()->getStream());
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:58:        $this->assertEquals('foo'.PHP_EOL, stream_get_contents($this->tester->getOutput()->getStream()), '->getOutput() returns the current output instance');
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:63:        $this->assertEquals('foo'.PHP_EOL, $this->tester->getDisplay(), '->getDisplay() returns the display of the last execution');
vendor/symfony/console/Tests/Tester/ApplicationTesterTest.php:68:        $this->assertSame(0, $this->tester->getStatusCode(), '->getStatusCode() returns the status code');
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:31:        $container->addCompilerPass(new AddConsoleCommandPass());
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:32:        $container->setParameter('my-command.class', 'Symfony\Component\Console\Tests\DependencyInjection\MyCommand');
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:34:        $definition = new Definition('%my-command.class%');
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:35:        $definition->setPublic($public);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:36:        $definition->addTag('console.command');
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:37:        $container->setDefinition('my-command', $definition);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:39:        $container->compile();
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:44:            $this->assertFalse($container->hasAlias($alias));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:45:            $id = 'my-command';
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:50:            $this->assertFalse($container->hasDefinition('my-command'));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:51:            $this->assertTrue($container->hasDefinition($alias));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:54:        $this->assertTrue($container->hasParameter('console.command.ids'));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:55:        $this->assertSame(array($alias => $id), $container->getParameter('console.command.ids'));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:62:            ->register('my-command', MyCommand::class)
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:63:            ->setPublic(false)
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:64:            ->addTag('console.command', array('command' => 'my:command'))
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:65:            ->addTag('console.command', array('command' => 'my:alias'))
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:68:        (new AddConsoleCommandPass())->process($container);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:70:        $commandLoader = $container->getDefinition('console.command_loader');
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:71:        $commandLocator = $container->getDefinition((string) $commandLoader->getArgument(0));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:73:        $this->assertSame(ContainerCommandLoader::class, $commandLoader->getClass());
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:74:        $this->assertSame(array('my:command' => 'my-command', 'my:alias' => 'my-command'), $commandLoader->getArgument(1));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:75:        $this->assertEquals(array(array('my-command' => new ServiceClosureArgument(new TypedReference('my-command', MyCommand::class)))), $commandLocator->getArguments());
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:76:        $this->assertSame(array('console.command.symfony_component_console_tests_dependencyinjection_mycommand' => 'my-command'), $container->getParameter('console.command.ids'));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:77:        $this->assertSame(array('my-command' => true), $container->getParameter('console.lazy_command.ids'));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:78:        $this->assertSame(array(array('setName', array('my:command')), array('setAliases', array(array('my:alias')))), $command->getMethodCalls());
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:85:            ->register('with-default-name', NamedCommand::class)
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:86:            ->setPublic(false)
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:87:            ->addTag('console.command')
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:91:        $pass->process($container);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:93:        $commandLoader = $container->getDefinition('console.command_loader');
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:94:        $commandLocator = $container->getDefinition((string) $commandLoader->getArgument(0));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:96:        $this->assertSame(ContainerCommandLoader::class, $commandLoader->getClass());
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:97:        $this->assertSame(array('default' => 'with-default-name'), $commandLoader->getArgument(1));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:98:        $this->assertEquals(array(array('with-default-name' => new ServiceClosureArgument(new TypedReference('with-default-name', NamedCommand::class)))), $commandLocator->getArguments());
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:99:        $this->assertSame(array('console.command.symfony_component_console_tests_dependencyinjection_namedcommand' => 'with-default-name'), $container->getParameter('console.command.ids'));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:100:        $this->assertSame(array('with-default-name' => true), $container->getParameter('console.lazy_command.ids'));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:104:            ->register('with-default-name', NamedCommand::class)
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:105:            ->setPublic(false)
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:106:            ->addTag('console.command', array('command' => 'new-name'))
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:109:        $pass->process($container);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:111:        $this->assertSame(array('new-name' => 'with-default-name'), $container->getDefinition('console.command_loader')->getArgument(1));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:124:     * @expectedExceptionMessage The service "my-command" tagged "console.command" must not be abstract.
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:129:        $container->setResourceTracking(false);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:130:        $container->addCompilerPass(new AddConsoleCommandPass());
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:133:        $definition->addTag('console.command');
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:134:        $definition->setAbstract(true);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:135:        $container->setDefinition('my-command', $definition);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:137:        $container->compile();
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:142:     * @expectedExceptionMessage The service "my-command" tagged "console.command" must be a subclass of "Symfony\Component\Console\Command\Command".
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:147:        $container->setResourceTracking(false);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:148:        $container->addCompilerPass(new AddConsoleCommandPass());
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:151:        $definition->addTag('console.command');
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:152:        $container->setDefinition('my-command', $definition);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:154:        $container->compile();
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:163:        $definition1->addTag('console.command')->setPublic(false);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:166:        $definition2->addTag('console.command')->setPublic(false);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:168:        $container->setDefinition('my-command1', $definition1);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:169:        $container->setDefinition('my-command2', $definition2);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:171:        (new AddConsoleCommandPass())->process($container);
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:174:        $alias2 = $alias1.'_my-command2';
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:175:        $this->assertTrue($container->hasAlias($alias1));
vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:176:        $this->assertTrue($container->hasAlias($alias2));
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:33:        $this->command = new Command('sfstyle');
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:34:        $this->tester = new CommandTester($this->command);
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:40:        $this->command = null;
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:41:        $this->tester = null;
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:50:        $this->command->setCode($code);
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:51:        $this->tester->execute(array(), array('interactive' => false, 'decorated' => false));
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:52:        $this->assertStringEqualsFile($outputFilepath, $this->tester->getDisplay(true));
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:61:        $this->command->setCode($code);
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:62:        $this->tester->execute(array(), array('interactive' => true, 'decorated' => false));
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:63:        $this->assertStringEqualsFile($outputFilepath, $this->tester->getDisplay(true));
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:82:        $input = $this->getMockBuilder(InputInterface::class)->getMock();
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:84:        $errorOutput = $this->getMockBuilder(OutputInterface::class)->getMock();
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:86:            ->method('getFormatter')
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:87:            ->willReturn(new OutputFormatter());
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:89:            ->expects($this->once())
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:90:            ->method('write');
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:92:        $output = $this->getMockBuilder(ConsoleOutputInterface::class)->getMock();
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:94:            ->method('getFormatter')
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:95:            ->willReturn(new OutputFormatter());
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:97:            ->expects($this->once())
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:98:            ->method('getErrorOutput')
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:99:            ->willReturn($errorOutput);
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:102:        $io->getErrorStyle()->write('');
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:107:        $output = $this->getMockBuilder(OutputInterface::class)->getMock();
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:109:            ->method('getFormatter')
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:110:            ->willReturn(new OutputFormatter());
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:112:        $style = new SymfonyStyle($this->getMockBuilder(InputInterface::class)->getMock(), $output);
vendor/symfony/console/Tests/Style/SymfonyStyleTest.php:114:        $this->assertInstanceOf(SymfonyStyle::class, $style->getErrorStyle());
vendor/symfony/console/Tests/CommandLoader/FactoryCommandLoaderTest.php:27:        $this->assertTrue($loader->has('foo'));
vendor/symfony/console/Tests/CommandLoader/FactoryCommandLoaderTest.php:28:        $this->assertTrue($loader->has('bar'));
vendor/symfony/console/Tests/CommandLoader/FactoryCommandLoaderTest.php:29:        $this->assertFalse($loader->has('baz'));
vendor/symfony/console/Tests/CommandLoader/FactoryCommandLoaderTest.php:39:        $this->assertInstanceOf(Command::class, $loader->get('foo'));
vendor/symfony/console/Tests/CommandLoader/FactoryCommandLoaderTest.php:40:        $this->assertInstanceOf(Command::class, $loader->get('bar'));
vendor/symfony/console/Tests/CommandLoader/FactoryCommandLoaderTest.php:48:        (new FactoryCommandLoader(array()))->get('unknown');
vendor/symfony/console/Tests/CommandLoader/FactoryCommandLoaderTest.php:58:        $this->assertSame(array('foo', 'bar'), $loader->getNames());
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:24:            'foo-service' => function () { return new Command('foo'); },
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:25:            'bar-service' => function () { return new Command('bar'); },
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:26:        )), array('foo' => 'foo-service', 'bar' => 'bar-service'));
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:28:        $this->assertTrue($loader->has('foo'));
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:29:        $this->assertTrue($loader->has('bar'));
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:30:        $this->assertFalse($loader->has('baz'));
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:36:            'foo-service' => function () { return new Command('foo'); },
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:37:            'bar-service' => function () { return new Command('bar'); },
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:38:        )), array('foo' => 'foo-service', 'bar' => 'bar-service'));
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:40:        $this->assertInstanceOf(Command::class, $loader->get('foo'));
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:41:        $this->assertInstanceOf(Command::class, $loader->get('bar'));
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:49:        (new ContainerCommandLoader(new ServiceLocator(array()), array()))->get('unknown');
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:55:            'foo-service' => function () { return new Command('foo'); },
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:56:            'bar-service' => function () { return new Command('bar'); },
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:57:        )), array('foo' => 'foo-service', 'bar' => 'bar-service'));
vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:59:        $this->assertSame(array('foo', 'bar'), $loader->getNames());
vendor/symfony/console/Tests/Command/CommandTest.php:40:        $this->assertEquals('foo:bar', $command->getName(), '__construct() takes the command name as its first argument');
vendor/symfony/console/Tests/Command/CommandTest.php:49:        (new Application())->add(new Command());
vendor/symfony/console/Tests/Command/CommandTest.php:56:        $command->setApplication($application);
vendor/symfony/console/Tests/Command/CommandTest.php:57:        $this->assertEquals($application, $command->getApplication(), '->setApplication() sets the current application');
vendor/symfony/console/Tests/Command/CommandTest.php:58:        $this->assertEquals($application->getHelperSet(), $command->getHelperSet());
vendor/symfony/console/Tests/Command/CommandTest.php:64:        $command->setApplication(null);
vendor/symfony/console/Tests/Command/CommandTest.php:65:        $this->assertNull($command->getHelperSet());
vendor/symfony/console/Tests/Command/CommandTest.php:71:        $ret = $command->setDefinition($definition = new InputDefinition());
vendor/symfony/console/Tests/Command/CommandTest.php:72:        $this->assertEquals($command, $ret, '->setDefinition() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:73:        $this->assertEquals($definition, $command->getDefinition(), '->setDefinition() sets the current InputDefinition instance');
vendor/symfony/console/Tests/Command/CommandTest.php:74:        $command->setDefinition(array(new InputArgument('foo'), new InputOption('bar')));
vendor/symfony/console/Tests/Command/CommandTest.php:75:        $this->assertTrue($command->getDefinition()->hasArgument('foo'), '->setDefinition() also takes an array of InputArguments and InputOptions as an argument');
vendor/symfony/console/Tests/Command/CommandTest.php:76:        $this->assertTrue($command->getDefinition()->hasOption('bar'), '->setDefinition() also takes an array of InputArguments and InputOptions as an argument');
vendor/symfony/console/Tests/Command/CommandTest.php:77:        $command->setDefinition(new InputDefinition());
vendor/symfony/console/Tests/Command/CommandTest.php:83:        $ret = $command->addArgument('foo');
vendor/symfony/console/Tests/Command/CommandTest.php:84:        $this->assertEquals($command, $ret, '->addArgument() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:85:        $this->assertTrue($command->getDefinition()->hasArgument('foo'), '->addArgument() adds an argument to the command');
vendor/symfony/console/Tests/Command/CommandTest.php:91:        $ret = $command->addOption('foo');
vendor/symfony/console/Tests/Command/CommandTest.php:92:        $this->assertEquals($command, $ret, '->addOption() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:93:        $this->assertTrue($command->getDefinition()->hasOption('foo'), '->addOption() adds an option to the command');
vendor/symfony/console/Tests/Command/CommandTest.php:99:        $command->setHidden(true);
vendor/symfony/console/Tests/Command/CommandTest.php:100:        $this->assertTrue($command->isHidden());
vendor/symfony/console/Tests/Command/CommandTest.php:106:        $this->assertEquals('namespace:name', $command->getName(), '->getName() returns the command name');
vendor/symfony/console/Tests/Command/CommandTest.php:107:        $command->setName('foo');
vendor/symfony/console/Tests/Command/CommandTest.php:108:        $this->assertEquals('foo', $command->getName(), '->setName() sets the command name');
vendor/symfony/console/Tests/Command/CommandTest.php:110:        $ret = $command->setName('foobar:bar');
vendor/symfony/console/Tests/Command/CommandTest.php:111:        $this->assertEquals($command, $ret, '->setName() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:112:        $this->assertEquals('foobar:bar', $command->getName(), '->setName() sets the command name');
vendor/symfony/console/Tests/Command/CommandTest.php:121:            $this->expectException('InvalidArgumentException');
vendor/symfony/console/Tests/Command/CommandTest.php:122:            $this->expectExceptionMessage(sprintf('Command name "%s" is invalid.', $name));
vendor/symfony/console/Tests/Command/CommandTest.php:124:            $this->setExpectedException('InvalidArgumentException', sprintf('Command name "%s" is invalid.', $name));
vendor/symfony/console/Tests/Command/CommandTest.php:128:        $command->setName($name);
vendor/symfony/console/Tests/Command/CommandTest.php:142:        $this->assertEquals('description', $command->getDescription(), '->getDescription() returns the description');
vendor/symfony/console/Tests/Command/CommandTest.php:143:        $ret = $command->setDescription('description1');
vendor/symfony/console/Tests/Command/CommandTest.php:144:        $this->assertEquals($command, $ret, '->setDescription() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:145:        $this->assertEquals('description1', $command->getDescription(), '->setDescription() sets the description');
vendor/symfony/console/Tests/Command/CommandTest.php:151:        $this->assertEquals('help', $command->getHelp(), '->getHelp() returns the help');
vendor/symfony/console/Tests/Command/CommandTest.php:152:        $ret = $command->setHelp('help1');
vendor/symfony/console/Tests/Command/CommandTest.php:153:        $this->assertEquals($command, $ret, '->setHelp() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:154:        $this->assertEquals('help1', $command->getHelp(), '->setHelp() sets the help');
vendor/symfony/console/Tests/Command/CommandTest.php:155:        $command->setHelp('');
vendor/symfony/console/Tests/Command/CommandTest.php:156:        $this->assertEquals('', $command->getHelp(), '->getHelp() does not fall back to the description');
vendor/symfony/console/Tests/Command/CommandTest.php:162:        $command->setHelp('The %command.name% command does... Example: php %command.full_name%.');
vendor/symfony/console/Tests/Command/CommandTest.php:163:        $this->assertContains('The namespace:name command does...', $command->getProcessedHelp(), '->getProcessedHelp() replaces %command.name% correctly');
vendor/symfony/console/Tests/Command/CommandTest.php:164:        $this->assertNotContains('%command.full_name%', $command->getProcessedHelp(), '->getProcessedHelp() replaces %command.full_name%');
vendor/symfony/console/Tests/Command/CommandTest.php:167:        $command->setHelp('');
vendor/symfony/console/Tests/Command/CommandTest.php:168:        $this->assertContains('description', $command->getProcessedHelp(), '->getProcessedHelp() falls back to the description');
vendor/symfony/console/Tests/Command/CommandTest.php:174:        $this->assertEquals(array('name'), $command->getAliases(), '->getAliases() returns the aliases');
vendor/symfony/console/Tests/Command/CommandTest.php:175:        $ret = $command->setAliases(array('name1'));
vendor/symfony/console/Tests/Command/CommandTest.php:176:        $this->assertEquals($command, $ret, '->setAliases() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:177:        $this->assertEquals(array('name1'), $command->getAliases(), '->setAliases() sets the aliases');
vendor/symfony/console/Tests/Command/CommandTest.php:183:        $this->{method_exists($this, $_ = 'expectException') ? $_ : 'setExpectedException'}('InvalidArgumentException');
vendor/symfony/console/Tests/Command/CommandTest.php:184:        $command->setAliases(null);
vendor/symfony/console/Tests/Command/CommandTest.php:190:        $command->addOption('foo');
vendor/symfony/console/Tests/Command/CommandTest.php:191:        $command->addArgument('bar');
vendor/symfony/console/Tests/Command/CommandTest.php:192:        $this->assertEquals('namespace:name [--foo] [--] [<bar>]', $command->getSynopsis(), '->getSynopsis() returns the synopsis');
vendor/symfony/console/Tests/Command/CommandTest.php:198:        $command->addUsage('foo1');
vendor/symfony/console/Tests/Command/CommandTest.php:199:        $command->addUsage('foo2');
vendor/symfony/console/Tests/Command/CommandTest.php:200:        $this->assertContains('namespace:name foo1', $command->getUsages());
vendor/symfony/console/Tests/Command/CommandTest.php:201:        $this->assertContains('namespace:name foo2', $command->getUsages());
vendor/symfony/console/Tests/Command/CommandTest.php:208:        $command->setApplication($application);
vendor/symfony/console/Tests/Command/CommandTest.php:210:        $this->assertEquals($formatterHelper->getName(), $command->getHelper('formatter')->getName(), '->getHelper() returns the correct helper');
vendor/symfony/console/Tests/Command/CommandTest.php:220:        $command->getHelper('formatter');
vendor/symfony/console/Tests/Command/CommandTest.php:226:        $application1->getDefinition()->addArguments(array(new InputArgument('foo')));
vendor/symfony/console/Tests/Command/CommandTest.php:227:        $application1->getDefinition()->addOptions(array(new InputOption('bar')));
vendor/symfony/console/Tests/Command/CommandTest.php:229:        $command->setApplication($application1);
vendor/symfony/console/Tests/Command/CommandTest.php:230:        $command->setDefinition($definition = new InputDefinition(array(new InputArgument('bar'), new InputOption('foo'))));
vendor/symfony/console/Tests/Command/CommandTest.php:233:        $m = $r->getMethod('mergeApplicationDefinition');
vendor/symfony/console/Tests/Command/CommandTest.php:234:        $m->setAccessible(true);
vendor/symfony/console/Tests/Command/CommandTest.php:235:        $m->invoke($command);
vendor/symfony/console/Tests/Command/CommandTest.php:236:        $this->assertTrue($command->getDefinition()->hasArgument('foo'), '->mergeApplicationDefinition() merges the application arguments and the command arguments');
vendor/symfony/console/Tests/Command/CommandTest.php:237:        $this->assertTrue($command->getDefinition()->hasArgument('bar'), '->mergeApplicationDefinition() merges the application arguments and the command arguments');
vendor/symfony/console/Tests/Command/CommandTest.php:238:        $this->assertTrue($command->getDefinition()->hasOption('foo'), '->mergeApplicationDefinition() merges the application options and the command options');
vendor/symfony/console/Tests/Command/CommandTest.php:239:        $this->assertTrue($command->getDefinition()->hasOption('bar'), '->mergeApplicationDefinition() merges the application options and the command options');
vendor/symfony/console/Tests/Command/CommandTest.php:241:        $m->invoke($command);
vendor/symfony/console/Tests/Command/CommandTest.php:242:        $this->assertEquals(3, $command->getDefinition()->getArgumentCount(), '->mergeApplicationDefinition() does not try to merge twice the application arguments and options');
vendor/symfony/console/Tests/Command/CommandTest.php:248:        $application1->getDefinition()->addArguments(array(new InputArgument('foo')));
vendor/symfony/console/Tests/Command/CommandTest.php:249:        $application1->getDefinition()->addOptions(array(new InputOption('bar')));
vendor/symfony/console/Tests/Command/CommandTest.php:251:        $command->setApplication($application1);
vendor/symfony/console/Tests/Command/CommandTest.php:252:        $command->setDefinition($definition = new InputDefinition(array()));
vendor/symfony/console/Tests/Command/CommandTest.php:255:        $m = $r->getMethod('mergeApplicationDefinition');
vendor/symfony/console/Tests/Command/CommandTest.php:256:        $m->setAccessible(true);
vendor/symfony/console/Tests/Command/CommandTest.php:257:        $m->invoke($command, false);
vendor/symfony/console/Tests/Command/CommandTest.php:258:        $this->assertTrue($command->getDefinition()->hasOption('bar'), '->mergeApplicationDefinition(false) merges the application and the command options');
vendor/symfony/console/Tests/Command/CommandTest.php:259:        $this->assertFalse($command->getDefinition()->hasArgument('foo'), '->mergeApplicationDefinition(false) does not merge the application arguments');
vendor/symfony/console/Tests/Command/CommandTest.php:261:        $m->invoke($command, true);
vendor/symfony/console/Tests/Command/CommandTest.php:262:        $this->assertTrue($command->getDefinition()->hasArgument('foo'), '->mergeApplicationDefinition(true) merges the application arguments and the command arguments');
vendor/symfony/console/Tests/Command/CommandTest.php:264:        $m->invoke($command);
vendor/symfony/console/Tests/Command/CommandTest.php:265:        $this->assertEquals(2, $command->getDefinition()->getArgumentCount(), '->mergeApplicationDefinition() does not try to merge twice the application arguments');
vendor/symfony/console/Tests/Command/CommandTest.php:272:        $tester->execute(array(), array('interactive' => true));
vendor/symfony/console/Tests/Command/CommandTest.php:274:        $this->assertEquals('interact called'.PHP_EOL.'execute called'.PHP_EOL, $tester->getDisplay(), '->run() calls the interact() method if the input is interactive');
vendor/symfony/console/Tests/Command/CommandTest.php:281:        $tester->execute(array(), array('interactive' => false));
vendor/symfony/console/Tests/Command/CommandTest.php:283:        $this->assertEquals('execute called'.PHP_EOL, $tester->getDisplay(), '->run() does not call the interact() method if the input is not interactive');
vendor/symfony/console/Tests/Command/CommandTest.php:293:        $command->run(new StringInput(''), new NullOutput());
vendor/symfony/console/Tests/Command/CommandTest.php:298:     * @expectedExceptionMessage The "--bar" option does not exist.
vendor/symfony/console/Tests/Command/CommandTest.php:304:        $tester->execute(array('--bar' => true));
vendor/symfony/console/Tests/Command/CommandTest.php:310:        $exitCode = $command->run(new StringInput(''), new NullOutput());
vendor/symfony/console/Tests/Command/CommandTest.php:311:        $this->assertSame(0, $exitCode, '->run() returns integer exit code (treats null as 0)');
vendor/symfony/console/Tests/Command/CommandTest.php:313:        $command = $this->getMockBuilder('TestCommand')->setMethods(array('execute'))->getMock();
vendor/symfony/console/Tests/Command/CommandTest.php:314:        $command->expects($this->once())
vendor/symfony/console/Tests/Command/CommandTest.php:315:            ->method('execute')
vendor/symfony/console/Tests/Command/CommandTest.php:316:            ->will($this->returnValue('2.3'));
vendor/symfony/console/Tests/Command/CommandTest.php:317:        $exitCode = $command->run(new StringInput(''), new NullOutput());
vendor/symfony/console/Tests/Command/CommandTest.php:318:        $this->assertSame(2, $exitCode, '->run() returns integer exit code (casts numeric to int)');
vendor/symfony/console/Tests/Command/CommandTest.php:324:        $command->setApplication(new Application());
vendor/symfony/console/Tests/Command/CommandTest.php:325:        $exitCode = $command->run(new StringInput(''), new NullOutput());
vendor/symfony/console/Tests/Command/CommandTest.php:327:        $this->assertSame(0, $exitCode, '->run() returns an integer exit code');
vendor/symfony/console/Tests/Command/CommandTest.php:334:        $this->assertSame(0, $command->run(new StringInput(''), new NullOutput()));
vendor/symfony/console/Tests/Command/CommandTest.php:340:        $command->setApplication(new Application());
vendor/symfony/console/Tests/Command/CommandTest.php:341:        $command->setProcessTitle('foo');
vendor/symfony/console/Tests/Command/CommandTest.php:342:        $this->assertSame(0, $command->run(new StringInput(''), new NullOutput()));
vendor/symfony/console/Tests/Command/CommandTest.php:345:                $this->markTestSkipped('Running "cli_get_process_title" as an unprivileged user is not supported on MacOS.');
vendor/symfony/console/Tests/Command/CommandTest.php:347:            $this->assertEquals('foo', cli_get_process_title());
vendor/symfony/console/Tests/Command/CommandTest.php:354:        $ret = $command->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/Command/CommandTest.php:355:            $output->writeln('from the code...');
vendor/symfony/console/Tests/Command/CommandTest.php:357:        $this->assertEquals($command, $ret, '->setCode() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:359:        $tester->execute(array());
vendor/symfony/console/Tests/Command/CommandTest.php:360:        $this->assertEquals('interact called'.PHP_EOL.'from the code...'.PHP_EOL, $tester->getDisplay());
vendor/symfony/console/Tests/Command/CommandTest.php:378:            $code = $code->bindTo($this);
vendor/symfony/console/Tests/Command/CommandTest.php:382:        $command->setCode($code);
vendor/symfony/console/Tests/Command/CommandTest.php:384:        $tester->execute(array());
vendor/symfony/console/Tests/Command/CommandTest.php:385:        $this->assertEquals('interact called'.PHP_EOL.$expected.PHP_EOL, $tester->getDisplay());
vendor/symfony/console/Tests/Command/CommandTest.php:391:        $command->setCode(self::createClosure());
vendor/symfony/console/Tests/Command/CommandTest.php:393:        $tester->execute(array());
vendor/symfony/console/Tests/Command/CommandTest.php:397:            $this->assertEquals('interact called'.PHP_EOL.'not bound'.PHP_EOL, $tester->getDisplay());
vendor/symfony/console/Tests/Command/CommandTest.php:400:            $this->assertEquals('interact called'.PHP_EOL.'bound'.PHP_EOL, $tester->getDisplay());
vendor/symfony/console/Tests/Command/CommandTest.php:407:            $output->writeln(isset($this) ? 'bound' : 'not bound');
vendor/symfony/console/Tests/Command/CommandTest.php:414:        $ret = $command->setCode(array($this, 'callableMethodCommand'));
vendor/symfony/console/Tests/Command/CommandTest.php:415:        $this->assertEquals($command, $ret, '->setCode() implements a fluent interface');
vendor/symfony/console/Tests/Command/CommandTest.php:417:        $tester->execute(array());
vendor/symfony/console/Tests/Command/CommandTest.php:418:        $this->assertEquals('interact called'.PHP_EOL.'from the code...'.PHP_EOL, $tester->getDisplay());
vendor/symfony/console/Tests/Command/CommandTest.php:423:        $output->writeln('from the code...');
vendor/symfony/console/Tests/Command/CommandTest.php:432:        $output->writeln($this instanceof Command ? 'bound to the command' : 'not bound to the command');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:25:        $command->setApplication(new Application());
vendor/symfony/console/Tests/Command/HelpCommandTest.php:27:        $commandTester->execute(array('command_name' => 'li'), array('decorated' => false));
vendor/symfony/console/Tests/Command/HelpCommandTest.php:28:        $this->assertContains('list [options] [--] [<namespace>]', $commandTester->getDisplay(), '->execute() returns a text help for the given command alias');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:29:        $this->assertContains('format=FORMAT', $commandTester->getDisplay(), '->execute() returns a text help for the given command alias');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:30:        $this->assertContains('raw', $commandTester->getDisplay(), '->execute() returns a text help for the given command alias');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:37:        $command->setCommand(new ListCommand());
vendor/symfony/console/Tests/Command/HelpCommandTest.php:38:        $commandTester->execute(array(), array('decorated' => false));
vendor/symfony/console/Tests/Command/HelpCommandTest.php:39:        $this->assertContains('list [options] [--] [<namespace>]', $commandTester->getDisplay(), '->execute() returns a text help for the given command');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:40:        $this->assertContains('format=FORMAT', $commandTester->getDisplay(), '->execute() returns a text help for the given command');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:41:        $this->assertContains('raw', $commandTester->getDisplay(), '->execute() returns a text help for the given command');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:48:        $command->setCommand(new ListCommand());
vendor/symfony/console/Tests/Command/HelpCommandTest.php:49:        $commandTester->execute(array('--format' => 'xml'));
vendor/symfony/console/Tests/Command/HelpCommandTest.php:50:        $this->assertContains('<command', $commandTester->getDisplay(), '->execute() returns an XML help text if --xml is passed');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:56:        $commandTester = new CommandTester($application->get('help'));
vendor/symfony/console/Tests/Command/HelpCommandTest.php:57:        $commandTester->execute(array('command_name' => 'list'));
vendor/symfony/console/Tests/Command/HelpCommandTest.php:58:        $this->assertContains('list [options] [--] [<namespace>]', $commandTester->getDisplay(), '->execute() returns a text help for the given command');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:59:        $this->assertContains('format=FORMAT', $commandTester->getDisplay(), '->execute() returns a text help for the given command');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:60:        $this->assertContains('raw', $commandTester->getDisplay(), '->execute() returns a text help for the given command');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:66:        $commandTester = new CommandTester($application->get('help'));
vendor/symfony/console/Tests/Command/HelpCommandTest.php:67:        $commandTester->execute(array('command_name' => 'list', '--format' => 'xml'));
vendor/symfony/console/Tests/Command/HelpCommandTest.php:68:        $this->assertContains('list [--raw] [--format FORMAT] [--] [&lt;namespace&gt;]', $commandTester->getDisplay(), '->execute() returns a text help for the given command');
vendor/symfony/console/Tests/Command/HelpCommandTest.php:69:        $this->assertContains('<command', $commandTester->getDisplay(), '->execute() returns an XML help text if --format=xml is passed');
vendor/symfony/console/Tests/Command/ListCommandTest.php:23:        $commandTester = new CommandTester($command = $application->get('list'));
vendor/symfony/console/Tests/Command/ListCommandTest.php:24:        $commandTester->execute(array('command' => $command->getName()), array('decorated' => false));
vendor/symfony/console/Tests/Command/ListCommandTest.php:26:        $this->assertRegExp('/help\s{2,}Displays help for a command/', $commandTester->getDisplay(), '->execute() returns a list of available commands');
vendor/symfony/console/Tests/Command/ListCommandTest.php:32:        $commandTester = new CommandTester($command = $application->get('list'));
vendor/symfony/console/Tests/Command/ListCommandTest.php:33:        $commandTester->execute(array('command' => $command->getName(), '--format' => 'xml'));
vendor/symfony/console/Tests/Command/ListCommandTest.php:34:        $this->assertRegExp('/<command id="list" name="list" hidden="0">/', $commandTester->getDisplay(), '->execute() returns a list of available commands in XML if --xml is passed');
vendor/symfony/console/Tests/Command/ListCommandTest.php:40:        $commandTester = new CommandTester($command = $application->get('list'));
vendor/symfony/console/Tests/Command/ListCommandTest.php:41:        $commandTester->execute(array('command' => $command->getName(), '--raw' => true));
vendor/symfony/console/Tests/Command/ListCommandTest.php:48:        $this->assertEquals($output, $commandTester->getDisplay(true));
vendor/symfony/console/Tests/Command/ListCommandTest.php:55:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/Command/ListCommandTest.php:56:        $commandTester = new CommandTester($command = $application->get('list'));
vendor/symfony/console/Tests/Command/ListCommandTest.php:57:        $commandTester->execute(array('command' => $command->getName(), 'namespace' => 'foo', '--raw' => true));
vendor/symfony/console/Tests/Command/ListCommandTest.php:63:        $this->assertEquals($output, $commandTester->getDisplay(true));
vendor/symfony/console/Tests/Command/ListCommandTest.php:70:        $application->add(new \Foo6Command());
vendor/symfony/console/Tests/Command/ListCommandTest.php:71:        $commandTester = new CommandTester($command = $application->get('list'));
vendor/symfony/console/Tests/Command/ListCommandTest.php:72:        $commandTester->execute(array('command' => $command->getName()), array('decorated' => false));
vendor/symfony/console/Tests/Command/ListCommandTest.php:80:  -h, --help            Display this help message
vendor/symfony/console/Tests/Command/ListCommandTest.php:81:  -q, --quiet           Do not output any message
vendor/symfony/console/Tests/Command/ListCommandTest.php:82:  -V, --version         Display this application version
vendor/symfony/console/Tests/Command/ListCommandTest.php:83:      --ansi            Force ANSI output
vendor/symfony/console/Tests/Command/ListCommandTest.php:84:      --no-ansi         Disable ANSI output
vendor/symfony/console/Tests/Command/ListCommandTest.php:85:  -n, --no-interaction  Do not ask any interactive question
vendor/symfony/console/Tests/Command/ListCommandTest.php:86:  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
vendor/symfony/console/Tests/Command/ListCommandTest.php:95:        $this->assertEquals($output, trim($commandTester->getDisplay(true)));
vendor/symfony/console/Tests/Command/ListCommandTest.php:102:        $application->add(new \Foo6Command());
vendor/symfony/console/Tests/Command/ListCommandTest.php:103:        $commandTester = new CommandTester($command = $application->get('list'));
vendor/symfony/console/Tests/Command/ListCommandTest.php:104:        $commandTester->execute(array('command' => $command->getName(), '--raw' => true));
vendor/symfony/console/Tests/Command/ListCommandTest.php:111:        $this->assertEquals($output, trim($commandTester->getDisplay(true)));
vendor/symfony/console/Tests/Command/LockableTraitTest.php:36:        $this->assertSame(2, $tester->execute(array()));
vendor/symfony/console/Tests/Command/LockableTraitTest.php:37:        $this->assertSame(2, $tester->execute(array()));
vendor/symfony/console/Tests/Command/LockableTraitTest.php:50:        $lock = (new Factory($store))->createLock($command->getName());
vendor/symfony/console/Tests/Command/LockableTraitTest.php:51:        $lock->acquire();
vendor/symfony/console/Tests/Command/LockableTraitTest.php:54:        $this->assertSame(1, $tester->execute(array()));
vendor/symfony/console/Tests/Command/LockableTraitTest.php:56:        $lock->release();
vendor/symfony/console/Tests/Command/LockableTraitTest.php:57:        $this->assertSame(2, $tester->execute(array()));
vendor/symfony/console/Tests/Command/LockableTraitTest.php:65:        $this->assertSame(1, $tester->execute(array()));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:40:        $this->output = new DummyOutput(OutputInterface::VERBOSITY_VERBOSE);
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:42:        return new ConsoleLogger($this->output, array(
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:61:        return $this->output->getLogs();
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:71:        $logger->log($logLevel, 'foo bar');
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:72:        $logs = $out->fetch();
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:73:        $this->assertEquals($isOutput ? "[$logLevel] foo bar".PHP_EOL : '', $logs);
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:100:        $this->assertFalse($logger->hasErrored());
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:102:        $logger->warning('foo');
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:103:        $this->assertFalse($logger->hasErrored());
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:105:        $logger->error('bar');
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:106:        $this->assertTrue($logger->hasErrored());
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:111:        $this->assertInstanceOf('Psr\Log\LoggerInterface', $this->getLogger());
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:119:        $logger = $this->getLogger();
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:120:        $logger->{$level}($message, array('user' => 'Bob'));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:121:        $logger->log($level, $message, array('user' => 'Bob'));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:127:        $this->assertEquals($expected, $this->getLogs());
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:149:        $logger = $this->getLogger();
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:150:        $logger->log('invalid level', 'Foo');
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:155:        $logger = $this->getLogger();
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:156:        $logger->info('{Message {nothing} {user} {foo.bar} a}', array('user' => 'Bob', 'foo.bar' => 'Bar'));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:159:        $this->assertEquals($expected, $this->getLogs());
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:165:            $dummy = $this->createPartialMock('Symfony\Component\Console\Tests\Logger\DummyTest', array('__toString'));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:167:            $dummy = $this->getMock('Symfony\Component\Console\Tests\Logger\DummyTest', array('__toString'));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:169:        $dummy->method('__toString')->will($this->returnValue('DUMMY'));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:171:        $this->getLogger()->warning($dummy);
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:174:        $this->assertEquals($expected, $this->getLogs());
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:190:        $this->getLogger()->warning('Crazy context data', $context);
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:193:        $this->assertEquals($expected, $this->getLogs());
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:198:        $logger = $this->getLogger();
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:199:        $logger->warning('Random message', array('exception' => 'oops'));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:200:        $logger->critical('Uncaught Exception!', array('exception' => new \LogicException('Fail')));
vendor/symfony/console/Tests/Logger/ConsoleLoggerTest.php:206:        $this->assertEquals($expected, $this->getLogs());
vendor/symfony/console/Tests/ApplicationTest.php:76:        foreach ($application->all() as $command) {
vendor/symfony/console/Tests/ApplicationTest.php:77:            $command->setHelp(str_replace('%command.full_name%', 'app/console %command.name%', $command->getHelp()));
vendor/symfony/console/Tests/ApplicationTest.php:84:        $this->assertEquals('foo', $application->getName(), '__construct() takes the application name as its first argument');
vendor/symfony/console/Tests/ApplicationTest.php:85:        $this->assertEquals('bar', $application->getVersion(), '__construct() takes the application version as its second argument');
vendor/symfony/console/Tests/ApplicationTest.php:86:        $this->assertEquals(array('help', 'list'), array_keys($application->all()), '__construct() registered the help and list commands by default');
vendor/symfony/console/Tests/ApplicationTest.php:92:        $application->setName('foo');
vendor/symfony/console/Tests/ApplicationTest.php:93:        $this->assertEquals('foo', $application->getName(), '->setName() sets the name of the application');
vendor/symfony/console/Tests/ApplicationTest.php:99:        $application->setVersion('bar');
vendor/symfony/console/Tests/ApplicationTest.php:100:        $this->assertEquals('bar', $application->getVersion(), '->setVersion() sets the version of the application');
vendor/symfony/console/Tests/ApplicationTest.php:106:        $this->assertEquals('foo <info>bar</info>', $application->getLongVersion(), '->getLongVersion() returns the long version of the application');
vendor/symfony/console/Tests/ApplicationTest.php:112:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_gethelp.txt', $this->normalizeLineBreaks($application->getHelp()), '->getHelp() returns a help message');
vendor/symfony/console/Tests/ApplicationTest.php:118:        $commands = $application->all();
vendor/symfony/console/Tests/ApplicationTest.php:119:        $this->assertInstanceOf('Symfony\\Component\\Console\\Command\\HelpCommand', $commands['help'], '->all() returns the registered commands');
vendor/symfony/console/Tests/ApplicationTest.php:121:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:122:        $commands = $application->all('foo');
vendor/symfony/console/Tests/ApplicationTest.php:123:        $this->assertCount(1, $commands, '->all() takes a namespace as its first argument');
vendor/symfony/console/Tests/ApplicationTest.php:129:        $commands = $application->all();
vendor/symfony/console/Tests/ApplicationTest.php:130:        $this->assertInstanceOf('Symfony\\Component\\Console\\Command\\HelpCommand', $commands['help'], '->all() returns the registered commands');
vendor/symfony/console/Tests/ApplicationTest.php:132:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:133:        $commands = $application->all('foo');
vendor/symfony/console/Tests/ApplicationTest.php:134:        $this->assertCount(1, $commands, '->all() takes a namespace as its first argument');
vendor/symfony/console/Tests/ApplicationTest.php:136:        $application->setCommandLoader(new FactoryCommandLoader(array(
vendor/symfony/console/Tests/ApplicationTest.php:139:        $commands = $application->all('foo');
vendor/symfony/console/Tests/ApplicationTest.php:140:        $this->assertCount(2, $commands, '->all() takes a namespace as its first argument');
vendor/symfony/console/Tests/ApplicationTest.php:141:        $this->assertInstanceOf(\FooCommand::class, $commands['foo:bar'], '->all() returns the registered commands');
vendor/symfony/console/Tests/ApplicationTest.php:142:        $this->assertInstanceOf(\Foo1Command::class, $commands['foo:bar1'], '->all() returns the registered commands');
vendor/symfony/console/Tests/ApplicationTest.php:148:        $command = $application->register('foo');
vendor/symfony/console/Tests/ApplicationTest.php:149:        $this->assertEquals('foo', $command->getName(), '->register() registers a new command');
vendor/symfony/console/Tests/ApplicationTest.php:155:        $application->add($foo = new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:156:        $commands = $application->all();
vendor/symfony/console/Tests/ApplicationTest.php:157:        $this->assertEquals($foo, $commands['foo:bar'], '->add() registers a command');
vendor/symfony/console/Tests/ApplicationTest.php:160:        $application->addCommands(array($foo = new \FooCommand(), $foo1 = new \Foo1Command()));
vendor/symfony/console/Tests/ApplicationTest.php:161:        $commands = $application->all();
vendor/symfony/console/Tests/ApplicationTest.php:162:        $this->assertEquals(array($foo, $foo1), array($commands['foo:bar'], $commands['foo:bar1']), '->addCommands() registers an array of commands');
vendor/symfony/console/Tests/ApplicationTest.php:172:        $application->add(new \Foo5Command());
vendor/symfony/console/Tests/ApplicationTest.php:178:        $this->assertTrue($application->has('list'), '->has() returns true if a named command is registered');
vendor/symfony/console/Tests/ApplicationTest.php:179:        $this->assertFalse($application->has('afoobar'), '->has() returns false if a named command is not registered');
vendor/symfony/console/Tests/ApplicationTest.php:181:        $application->add($foo = new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:182:        $this->assertTrue($application->has('afoobar'), '->has() returns true if an alias is registered');
vendor/symfony/console/Tests/ApplicationTest.php:183:        $this->assertEquals($foo, $application->get('foo:bar'), '->get() returns a command by name');
vendor/symfony/console/Tests/ApplicationTest.php:184:        $this->assertEquals($foo, $application->get('afoobar'), '->get() returns a command by alias');
vendor/symfony/console/Tests/ApplicationTest.php:187:        $application->add($foo = new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:188:        // simulate --help
vendor/symfony/console/Tests/ApplicationTest.php:190:        $p = $r->getProperty('wantHelps');
vendor/symfony/console/Tests/ApplicationTest.php:191:        $p->setAccessible(true);
vendor/symfony/console/Tests/ApplicationTest.php:192:        $p->setValue($application, true);
vendor/symfony/console/Tests/ApplicationTest.php:193:        $command = $application->get('foo:bar');
vendor/symfony/console/Tests/ApplicationTest.php:194:        $this->assertInstanceOf('Symfony\Component\Console\Command\HelpCommand', $command, '->get() returns the help command if --help is provided as the input');
vendor/symfony/console/Tests/ApplicationTest.php:200:        $this->assertTrue($application->has('list'), '->has() returns true if a named command is registered');
vendor/symfony/console/Tests/ApplicationTest.php:201:        $this->assertFalse($application->has('afoobar'), '->has() returns false if a named command is not registered');
vendor/symfony/console/Tests/ApplicationTest.php:203:        $application->add($foo = new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:204:        $this->assertTrue($application->has('afoobar'), '->has() returns true if an alias is registered');
vendor/symfony/console/Tests/ApplicationTest.php:205:        $this->assertEquals($foo, $application->get('foo:bar'), '->get() returns a command by name');
vendor/symfony/console/Tests/ApplicationTest.php:206:        $this->assertEquals($foo, $application->get('afoobar'), '->get() returns a command by alias');
vendor/symfony/console/Tests/ApplicationTest.php:208:        $application->setCommandLoader(new FactoryCommandLoader(array(
vendor/symfony/console/Tests/ApplicationTest.php:212:        $this->assertTrue($application->has('afoobar'), '->has() returns true if an instance is registered for an alias even with command loader');
vendor/symfony/console/Tests/ApplicationTest.php:213:        $this->assertEquals($foo, $application->get('foo:bar'), '->get() returns an instance by name even with command loader');
vendor/symfony/console/Tests/ApplicationTest.php:214:        $this->assertEquals($foo, $application->get('afoobar'), '->get() returns an instance by alias even with command loader');
vendor/symfony/console/Tests/ApplicationTest.php:215:        $this->assertTrue($application->has('foo:bar1'), '->has() returns true for commands registered in the loader');
vendor/symfony/console/Tests/ApplicationTest.php:216:        $this->assertInstanceOf(\Foo1Command::class, $foo1 = $application->get('foo:bar1'), '->get() returns a command by name from the command loader');
vendor/symfony/console/Tests/ApplicationTest.php:217:        $this->assertTrue($application->has('afoobar1'), '->has() returns true for commands registered in the loader');
vendor/symfony/console/Tests/ApplicationTest.php:218:        $this->assertEquals($foo1, $application->get('afoobar1'), '->get() returns a command by name from the command loader');
vendor/symfony/console/Tests/ApplicationTest.php:224:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:225:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:228:        $tester->run(array('-h' => true, '-q' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:230:        $this->assertEmpty($tester->getDisplay(true));
vendor/symfony/console/Tests/ApplicationTest.php:240:        $application->get('foofoo');
vendor/symfony/console/Tests/ApplicationTest.php:246:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:247:        $application->add(new \Foo1Command());
vendor/symfony/console/Tests/ApplicationTest.php:248:        $this->assertEquals(array('foo'), $application->getNamespaces(), '->getNamespaces() returns an array of unique used namespaces');
vendor/symfony/console/Tests/ApplicationTest.php:254:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:255:        $this->assertEquals('foo', $application->findNamespace('foo'), '->findNamespace() returns the given namespace if it exists');
vendor/symfony/console/Tests/ApplicationTest.php:256:        $this->assertEquals('foo', $application->findNamespace('f'), '->findNamespace() finds a namespace given an abbreviation');
vendor/symfony/console/Tests/ApplicationTest.php:257:        $application->add(new \Foo2Command());
vendor/symfony/console/Tests/ApplicationTest.php:258:        $this->assertEquals('foo', $application->findNamespace('foo'), '->findNamespace() returns the given namespace if it exists');
vendor/symfony/console/Tests/ApplicationTest.php:264:        $application->add(new \FooSubnamespaced1Command());
vendor/symfony/console/Tests/ApplicationTest.php:265:        $application->add(new \FooSubnamespaced2Command());
vendor/symfony/console/Tests/ApplicationTest.php:266:        $this->assertEquals('foo', $application->findNamespace('foo'), '->findNamespace() returns commands even if the commands are only contained in subnamespaces');
vendor/symfony/console/Tests/ApplicationTest.php:272:        $application->add(new \BarBucCommand());
vendor/symfony/console/Tests/ApplicationTest.php:273:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:274:        $application->add(new \Foo2Command());
vendor/symfony/console/Tests/ApplicationTest.php:279:            $this->expectException(CommandNotFoundException::class);
vendor/symfony/console/Tests/ApplicationTest.php:280:            $this->expectExceptionMessage($expectedMsg);
vendor/symfony/console/Tests/ApplicationTest.php:282:            $this->setExpectedException(CommandNotFoundException::class, $expectedMsg);
vendor/symfony/console/Tests/ApplicationTest.php:285:        $application->findNamespace('f');
vendor/symfony/console/Tests/ApplicationTest.php:291:        $application->add(new \TestTiti());
vendor/symfony/console/Tests/ApplicationTest.php:292:        $application->add(new \TestToto());
vendor/symfony/console/Tests/ApplicationTest.php:293:        $this->assertEquals('test-toto', $application->find('test')->getName());
vendor/symfony/console/Tests/ApplicationTest.php:303:        $application->findNamespace('bar');
vendor/symfony/console/Tests/ApplicationTest.php:313:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:314:        $application->add(new \Foo1Command());
vendor/symfony/console/Tests/ApplicationTest.php:315:        $application->add(new \Foo2Command());
vendor/symfony/console/Tests/ApplicationTest.php:317:        $application->find($commandName = 'foo1');
vendor/symfony/console/Tests/ApplicationTest.php:323:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:325:        $this->assertInstanceOf('FooCommand', $application->find('foo:bar'), '->find() returns a command if its name exists');
vendor/symfony/console/Tests/ApplicationTest.php:326:        $this->assertInstanceOf('Symfony\Component\Console\Command\HelpCommand', $application->find('h'), '->find() returns a command if its name exists');
vendor/symfony/console/Tests/ApplicationTest.php:327:        $this->assertInstanceOf('FooCommand', $application->find('f:bar'), '->find() returns a command if the abbreviation for the namespace exists');
vendor/symfony/console/Tests/ApplicationTest.php:328:        $this->assertInstanceOf('FooCommand', $application->find('f:b'), '->find() returns a command if the abbreviation for the namespace and the command name exist');
vendor/symfony/console/Tests/ApplicationTest.php:329:        $this->assertInstanceOf('FooCommand', $application->find('a'), '->find() returns a command if the abbreviation exists for an alias');
vendor/symfony/console/Tests/ApplicationTest.php:335:        $application->add(new \FooSameCaseUppercaseCommand());
vendor/symfony/console/Tests/ApplicationTest.php:336:        $application->add(new \FooSameCaseLowercaseCommand());
vendor/symfony/console/Tests/ApplicationTest.php:338:        $this->assertInstanceOf('FooSameCaseUppercaseCommand', $application->find('f:B'), '->find() returns a command if the abbreviation is the correct case');
vendor/symfony/console/Tests/ApplicationTest.php:339:        $this->assertInstanceOf('FooSameCaseUppercaseCommand', $application->find('f:BAR'), '->find() returns a command if the abbreviation is the correct case');
vendor/symfony/console/Tests/ApplicationTest.php:340:        $this->assertInstanceOf('FooSameCaseLowercaseCommand', $application->find('f:b'), '->find() returns a command if the abbreviation is the correct case');
vendor/symfony/console/Tests/ApplicationTest.php:341:        $this->assertInstanceOf('FooSameCaseLowercaseCommand', $application->find('f:bar'), '->find() returns a command if the abbreviation is the correct case');
vendor/symfony/console/Tests/ApplicationTest.php:347:        $application->add(new \FooSameCaseLowercaseCommand());
vendor/symfony/console/Tests/ApplicationTest.php:349:        $this->assertInstanceOf('FooSameCaseLowercaseCommand', $application->find('f:b'), '->find() returns a command if the abbreviation is the correct case');
vendor/symfony/console/Tests/ApplicationTest.php:350:        $this->assertInstanceOf('FooSameCaseLowercaseCommand', $application->find('f:B'), '->find() will fallback to case insensitivity');
vendor/symfony/console/Tests/ApplicationTest.php:351:        $this->assertInstanceOf('FooSameCaseLowercaseCommand', $application->find('FoO:BaR'), '->find() will fallback to case insensitivity');
vendor/symfony/console/Tests/ApplicationTest.php:361:        $application->add(new \FooSameCaseLowercaseCommand());
vendor/symfony/console/Tests/ApplicationTest.php:362:        $application->add(new \FooSameCaseUppercaseCommand());
vendor/symfony/console/Tests/ApplicationTest.php:364:        $this->assertInstanceOf('FooSameCaseLowercaseCommand', $application->find('FoO:BaR'), '->find() will find two suggestions with case insensitivity');
vendor/symfony/console/Tests/ApplicationTest.php:370:        $application->setCommandLoader(new FactoryCommandLoader(array(
vendor/symfony/console/Tests/ApplicationTest.php:374:        $this->assertInstanceOf('FooCommand', $application->find('foo:bar'), '->find() returns a command if its name exists');
vendor/symfony/console/Tests/ApplicationTest.php:375:        $this->assertInstanceOf('Symfony\Component\Console\Command\HelpCommand', $application->find('h'), '->find() returns a command if its name exists');
vendor/symfony/console/Tests/ApplicationTest.php:376:        $this->assertInstanceOf('FooCommand', $application->find('f:bar'), '->find() returns a command if the abbreviation for the namespace exists');
vendor/symfony/console/Tests/ApplicationTest.php:377:        $this->assertInstanceOf('FooCommand', $application->find('f:b'), '->find() returns a command if the abbreviation for the namespace and the command name exist');
vendor/symfony/console/Tests/ApplicationTest.php:378:        $this->assertInstanceOf('FooCommand', $application->find('a'), '->find() returns a command if the abbreviation exists for an alias');
vendor/symfony/console/Tests/ApplicationTest.php:387:            $this->expectException('Symfony\Component\Console\Exception\CommandNotFoundException');
vendor/symfony/console/Tests/ApplicationTest.php:388:            $this->expectExceptionMessage($expectedExceptionMessage);
vendor/symfony/console/Tests/ApplicationTest.php:390:            $this->setExpectedException('Symfony\Component\Console\Exception\CommandNotFoundException', $expectedExceptionMessage);
vendor/symfony/console/Tests/ApplicationTest.php:394:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:395:        $application->add(new \Foo1Command());
vendor/symfony/console/Tests/ApplicationTest.php:396:        $application->add(new \Foo2Command());
vendor/symfony/console/Tests/ApplicationTest.php:398:        $application->find($abbreviation);
vendor/symfony/console/Tests/ApplicationTest.php:425:        $application->add(new \Foo3Command());
vendor/symfony/console/Tests/ApplicationTest.php:426:        $application->add(new \Foo4Command());
vendor/symfony/console/Tests/ApplicationTest.php:428:        $this->assertInstanceOf('Foo3Command', $application->find('foo3:bar'), '->find() returns the good command even if a namespace has same name');
vendor/symfony/console/Tests/ApplicationTest.php:429:        $this->assertInstanceOf('Foo4Command', $application->find('foo3:bar:toh'), '->find() returns a command even if its namespace equals another command name');
vendor/symfony/console/Tests/ApplicationTest.php:435:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:436:        $application->add(new \FoobarCommand());
vendor/symfony/console/Tests/ApplicationTest.php:438:        $this->assertInstanceOf('FoobarCommand', $application->find('f:f'));
vendor/symfony/console/Tests/ApplicationTest.php:444:        $application->add(new \Foo4Command());
vendor/symfony/console/Tests/ApplicationTest.php:446:        $this->assertInstanceOf('Foo4Command', $application->find('f::t'));
vendor/symfony/console/Tests/ApplicationTest.php:457:        $application->add(new \Foo3Command());
vendor/symfony/console/Tests/ApplicationTest.php:458:        $application->find($name);
vendor/symfony/console/Tests/ApplicationTest.php:472:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:473:        $application->add(new \Foo1Command());
vendor/symfony/console/Tests/ApplicationTest.php:474:        $application->add(new \Foo2Command());
vendor/symfony/console/Tests/ApplicationTest.php:478:            $application->find('foo:baR');
vendor/symfony/console/Tests/ApplicationTest.php:479:            $this->fail('->find() throws a CommandNotFoundException if command does not exist, with alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:481:            $this->assertInstanceOf('Symfony\Component\Console\Exception\CommandNotFoundException', $e, '->find() throws a CommandNotFoundException if command does not exist, with alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:482:            $this->assertRegExp('/Did you mean one of these/', $e->getMessage(), '->find() throws a CommandNotFoundException if command does not exist, with alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:483:            $this->assertRegExp('/foo1:bar/', $e->getMessage());
vendor/symfony/console/Tests/ApplicationTest.php:484:            $this->assertRegExp('/foo:bar/', $e->getMessage());
vendor/symfony/console/Tests/ApplicationTest.php:489:            $application->find('foo2:bar');
vendor/symfony/console/Tests/ApplicationTest.php:490:            $this->fail('->find() throws a CommandNotFoundException if command does not exist, with alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:492:            $this->assertInstanceOf('Symfony\Component\Console\Exception\CommandNotFoundException', $e, '->find() throws a CommandNotFoundException if command does not exist, with alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:493:            $this->assertRegExp('/Did you mean one of these/', $e->getMessage(), '->find() throws a CommandNotFoundException if command does not exist, with alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:494:            $this->assertRegExp('/foo1/', $e->getMessage());
vendor/symfony/console/Tests/ApplicationTest.php:497:        $application->add(new \Foo3Command());
vendor/symfony/console/Tests/ApplicationTest.php:498:        $application->add(new \Foo4Command());
vendor/symfony/console/Tests/ApplicationTest.php:502:            $a = $application->find('foo3:');
vendor/symfony/console/Tests/ApplicationTest.php:503:            $this->fail('->find() should throw an Symfony\Component\Console\Exception\CommandNotFoundException if a command is ambiguous because of a subnamespace, with alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:505:            $this->assertInstanceOf('Symfony\Component\Console\Exception\CommandNotFoundException', $e);
vendor/symfony/console/Tests/ApplicationTest.php:506:            $this->assertRegExp('/foo3:bar/', $e->getMessage());
vendor/symfony/console/Tests/ApplicationTest.php:507:            $this->assertRegExp('/foo3:bar:toh/', $e->getMessage());
vendor/symfony/console/Tests/ApplicationTest.php:515:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:516:        $application->add(new \Foo1Command());
vendor/symfony/console/Tests/ApplicationTest.php:517:        $application->add(new \Foo2Command());
vendor/symfony/console/Tests/ApplicationTest.php:520:            $application->find($commandName = 'Unknown command');
vendor/symfony/console/Tests/ApplicationTest.php:521:            $this->fail('->find() throws a CommandNotFoundException if command does not exist');
vendor/symfony/console/Tests/ApplicationTest.php:523:            $this->assertInstanceOf('Symfony\Component\Console\Exception\CommandNotFoundException', $e, '->find() throws a CommandNotFoundException if command does not exist');
vendor/symfony/console/Tests/ApplicationTest.php:524:            $this->assertSame(array(), $e->getAlternatives());
vendor/symfony/console/Tests/ApplicationTest.php:525:            $this->assertEquals(sprintf('Command "%s" is not defined.', $commandName), $e->getMessage(), '->find() throws a CommandNotFoundException if command does not exist, without alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:531:            $application->find($commandName = 'bar1');
vendor/symfony/console/Tests/ApplicationTest.php:532:            $this->fail('->find() throws a CommandNotFoundException if command does not exist');
vendor/symfony/console/Tests/ApplicationTest.php:534:            $this->assertInstanceOf('Symfony\Component\Console\Exception\CommandNotFoundException', $e, '->find() throws a CommandNotFoundException if command does not exist');
vendor/symfony/console/Tests/ApplicationTest.php:535:            $this->assertSame(array('afoobar1', 'foo:bar1'), $e->getAlternatives());
vendor/symfony/console/Tests/ApplicationTest.php:536:            $this->assertRegExp(sprintf('/Command "%s" is not defined./', $commandName), $e->getMessage(), '->find() throws a CommandNotFoundException if command does not exist, with alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:537:            $this->assertRegExp('/afoobar1/', $e->getMessage(), '->find() throws a CommandNotFoundException if command does not exist, with alternative : "afoobar1"');
vendor/symfony/console/Tests/ApplicationTest.php:538:            $this->assertRegExp('/foo:bar1/', $e->getMessage(), '->find() throws a CommandNotFoundException if command does not exist, with alternative : "foo:bar1"');
vendor/symfony/console/Tests/ApplicationTest.php:539:            $this->assertNotRegExp('/foo:bar(?>!1)/', $e->getMessage(), '->find() throws a CommandNotFoundException if command does not exist, without "foo:bar" alternative');
vendor/symfony/console/Tests/ApplicationTest.php:546:        $fooCommand->setAliases(array('foo2'));
vendor/symfony/console/Tests/ApplicationTest.php:549:        $application->add($fooCommand);
vendor/symfony/console/Tests/ApplicationTest.php:551:        $result = $application->find('foo');
vendor/symfony/console/Tests/ApplicationTest.php:553:        $this->assertSame($fooCommand, $result);
vendor/symfony/console/Tests/ApplicationTest.php:560:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:561:        $application->add(new \Foo1Command());
vendor/symfony/console/Tests/ApplicationTest.php:562:        $application->add(new \Foo2Command());
vendor/symfony/console/Tests/ApplicationTest.php:563:        $application->add(new \Foo3Command());
vendor/symfony/console/Tests/ApplicationTest.php:566:            $application->find('Unknown-namespace:Unknown-command');
vendor/symfony/console/Tests/ApplicationTest.php:567:            $this->fail('->find() throws a CommandNotFoundException if namespace does not exist');
vendor/symfony/console/Tests/ApplicationTest.php:569:            $this->assertInstanceOf('Symfony\Component\Console\Exception\CommandNotFoundException', $e, '->find() throws a CommandNotFoundException if namespace does not exist');
vendor/symfony/console/Tests/ApplicationTest.php:570:            $this->assertSame(array(), $e->getAlternatives());
vendor/symfony/console/Tests/ApplicationTest.php:571:            $this->assertEquals('There are no commands defined in the "Unknown-namespace" namespace.', $e->getMessage(), '->find() throws a CommandNotFoundException if namespace does not exist, without alternatives');
vendor/symfony/console/Tests/ApplicationTest.php:575:            $application->find('foo2:command');
vendor/symfony/console/Tests/ApplicationTest.php:576:            $this->fail('->find() throws a CommandNotFoundException if namespace does not exist');
vendor/symfony/console/Tests/ApplicationTest.php:578:            $this->assertInstanceOf('Symfony\Component\Console\Exception\CommandNotFoundException', $e, '->find() throws a CommandNotFoundException if namespace does not exist');
vendor/symfony/console/Tests/ApplicationTest.php:579:            $this->assertCount(3, $e->getAlternatives());
vendor/symfony/console/Tests/ApplicationTest.php:580:            $this->assertContains('foo', $e->getAlternatives());
vendor/symfony/console/Tests/ApplicationTest.php:581:            $this->assertContains('foo1', $e->getAlternatives());
vendor/symfony/console/Tests/ApplicationTest.php:582:            $this->assertContains('foo3', $e->getAlternatives());
vendor/symfony/console/Tests/ApplicationTest.php:583:            $this->assertRegExp('/There are no commands defined in the "foo2" namespace./', $e->getMessage(), '->find() throws a CommandNotFoundException if namespace does not exist, with alternative');
vendor/symfony/console/Tests/ApplicationTest.php:584:            $this->assertRegExp('/foo/', $e->getMessage(), '->find() throws a CommandNotFoundException if namespace does not exist, with alternative : "foo"');
vendor/symfony/console/Tests/ApplicationTest.php:585:            $this->assertRegExp('/foo1/', $e->getMessage(), '->find() throws a CommandNotFoundException if namespace does not exist, with alternative : "foo1"');
vendor/symfony/console/Tests/ApplicationTest.php:586:            $this->assertRegExp('/foo3/', $e->getMessage(), '->find() throws a CommandNotFoundException if namespace does not exist, with alternative : "foo3"');
vendor/symfony/console/Tests/ApplicationTest.php:594:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:595:        $application->add(new \Foo1Command());
vendor/symfony/console/Tests/ApplicationTest.php:596:        $application->add(new \Foo2Command());
vendor/symfony/console/Tests/ApplicationTest.php:597:        $application->add(new \Foo3Command());
vendor/symfony/console/Tests/ApplicationTest.php:610:            $application->find('foo');
vendor/symfony/console/Tests/ApplicationTest.php:611:            $this->fail('->find() throws a CommandNotFoundException if command is not defined');
vendor/symfony/console/Tests/ApplicationTest.php:613:            $this->assertInstanceOf('Symfony\Component\Console\Exception\CommandNotFoundException', $e, '->find() throws a CommandNotFoundException if command is not defined');
vendor/symfony/console/Tests/ApplicationTest.php:614:            $this->assertSame($expectedAlternatives, $e->getAlternatives());
vendor/symfony/console/Tests/ApplicationTest.php:616:            $this->assertRegExp('/Command "foo" is not defined\..*Did you mean one of these\?.*/Ums', $e->getMessage());
vendor/symfony/console/Tests/ApplicationTest.php:622:        $application = $this->getMockBuilder('Symfony\Component\Console\Application')->setMethods(array('getNamespaces'))->getMock();
vendor/symfony/console/Tests/ApplicationTest.php:623:        $application->expects($this->once())
vendor/symfony/console/Tests/ApplicationTest.php:624:            ->method('getNamespaces')
vendor/symfony/console/Tests/ApplicationTest.php:625:            ->will($this->returnValue(array('foo:sublong', 'bar:sub')));
vendor/symfony/console/Tests/ApplicationTest.php:627:        $this->assertEquals('foo:sublong', $application->findNamespace('f:sub'));
vendor/symfony/console/Tests/ApplicationTest.php:637:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:638:        $application->add(new \Foo4Command());
vendor/symfony/console/Tests/ApplicationTest.php:639:        $application->find('foo::bar');
vendor/symfony/console/Tests/ApplicationTest.php:645:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:649:        $application->setCatchExceptions(true);
vendor/symfony/console/Tests/ApplicationTest.php:650:        $this->assertTrue($application->areExceptionsCaught());
vendor/symfony/console/Tests/ApplicationTest.php:652:        $tester->run(array('command' => 'foo'), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:653:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_renderexception1.txt', $tester->getDisplay(true), '->setCatchExceptions() sets the catch exception flag');
vendor/symfony/console/Tests/ApplicationTest.php:655:        $tester->run(array('command' => 'foo'), array('decorated' => false, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:656:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_renderexception1.txt', $tester->getErrorOutput(true), '->setCatchExceptions() sets the catch exception flag');
vendor/symfony/console/Tests/ApplicationTest.php:657:        $this->assertSame('', $tester->getDisplay(true));
vendor/symfony/console/Tests/ApplicationTest.php:659:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:661:            $tester->run(array('command' => 'foo'), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:662:            $this->fail('->setCatchExceptions() sets the catch exception flag');
vendor/symfony/console/Tests/ApplicationTest.php:664:            $this->assertInstanceOf('\Exception', $e, '->setCatchExceptions() sets the catch exception flag');
vendor/symfony/console/Tests/ApplicationTest.php:665:            $this->assertEquals('Command "foo" is not defined.', $e->getMessage(), '->setCatchExceptions() sets the catch exception flag');
vendor/symfony/console/Tests/ApplicationTest.php:672:        $this->assertTrue($application->isAutoExitEnabled());
vendor/symfony/console/Tests/ApplicationTest.php:674:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:675:        $this->assertFalse($application->isAutoExitEnabled());
vendor/symfony/console/Tests/ApplicationTest.php:681:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:685:        $tester->run(array('command' => 'foo'), array('decorated' => false, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:686:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_renderexception1.txt', $tester->getErrorOutput(true), '->renderException() renders a pretty exception');
vendor/symfony/console/Tests/ApplicationTest.php:688:        $tester->run(array('command' => 'foo'), array('decorated' => false, 'verbosity' => Output::VERBOSITY_VERBOSE, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:689:        $this->assertContains('Exception trace', $tester->getErrorOutput(), '->renderException() renders a pretty exception with a stack trace when verbosity is verbose');
vendor/symfony/console/Tests/ApplicationTest.php:691:        $tester->run(array('command' => 'list', '--foo' => true), array('decorated' => false, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:692:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_renderexception2.txt', $tester->getErrorOutput(true), '->renderException() renders the command synopsis when an exception occurs in the context of a command');
vendor/symfony/console/Tests/ApplicationTest.php:694:        $application->add(new \Foo3Command());
vendor/symfony/console/Tests/ApplicationTest.php:696:        $tester->run(array('command' => 'foo3:bar'), array('decorated' => false, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:697:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_renderexception3.txt', $tester->getErrorOutput(true), '->renderException() renders a pretty exceptions with previous exceptions');
vendor/symfony/console/Tests/ApplicationTest.php:699:        $tester->run(array('command' => 'foo3:bar'), array('decorated' => false, 'verbosity' => Output::VERBOSITY_VERBOSE));
vendor/symfony/console/Tests/ApplicationTest.php:700:        $this->assertRegExp('/\[Exception\]\s*First exception/', $tester->getDisplay(), '->renderException() renders a pretty exception without code exception when code exception is default and verbosity is verbose');
vendor/symfony/console/Tests/ApplicationTest.php:701:        $this->assertRegExp('/\[Exception\]\s*Second exception/', $tester->getDisplay(), '->renderException() renders a pretty exception without code exception when code exception is 0 and verbosity is verbose');
vendor/symfony/console/Tests/ApplicationTest.php:702:        $this->assertRegExp('/\[Exception \(404\)\]\s*Third exception/', $tester->getDisplay(), '->renderException() renders a pretty exception with code exception when code exception is 404 and verbosity is verbose');
vendor/symfony/console/Tests/ApplicationTest.php:704:        $tester->run(array('command' => 'foo3:bar'), array('decorated' => true));
vendor/symfony/console/Tests/ApplicationTest.php:705:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_renderexception3decorated.txt', $tester->getDisplay(true), '->renderException() renders a pretty exceptions with previous exceptions');
vendor/symfony/console/Tests/ApplicationTest.php:707:        $tester->run(array('command' => 'foo3:bar'), array('decorated' => true, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:708:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_renderexception3decorated.txt', $tester->getErrorOutput(true), '->renderException() renders a pretty exceptions with previous exceptions');
vendor/symfony/console/Tests/ApplicationTest.php:711:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:715:        $tester->run(array('command' => 'foo'), array('decorated' => false,  'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:716:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_renderexception4.txt', $tester->getErrorOutput(true), '->renderException() wraps messages when they are bigger than the terminal');
vendor/symfony/console/Tests/ApplicationTest.php:723:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:725:        $application->register('foo')->setCode(function () {
vendor/symfony/console/Tests/ApplicationTest.php:730:        $tester->run(array('command' => 'foo'), array('decorated' => false, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:731:        $this->assertStringMatchesFormatFile(self::$fixturesPath.'/application_renderexception_doublewidth1.txt', $tester->getErrorOutput(true), '->renderException() renders a pretty exceptions with previous exceptions');
vendor/symfony/console/Tests/ApplicationTest.php:733:        $tester->run(array('command' => 'foo'), array('decorated' => true, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:734:        $this->assertStringMatchesFormatFile(self::$fixturesPath.'/application_renderexception_doublewidth1decorated.txt', $tester->getErrorOutput(true), '->renderException() renders a pretty exceptions with previous exceptions');
vendor/symfony/console/Tests/ApplicationTest.php:737:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:739:        $application->register('foo')->setCode(function () {
vendor/symfony/console/Tests/ApplicationTest.php:743:        $tester->run(array('command' => 'foo'), array('decorated' => false, 'capture_stderr_separately' => true));
vendor/symfony/console/Tests/ApplicationTest.php:744:        $this->assertStringMatchesFormatFile(self::$fixturesPath.'/application_renderexception_doublewidth2.txt', $tester->getErrorOutput(true), '->renderException() wraps messages when they are bigger than the terminal');
vendor/symfony/console/Tests/ApplicationTest.php:751:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:753:        $application->register('foo')->setCode(function () {
vendor/symfony/console/Tests/ApplicationTest.php:758:        $tester->run(array('command' => 'foo'), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:759:        $this->assertStringMatchesFormatFile(self::$fixturesPath.'/application_renderexception_escapeslines.txt', $tester->getDisplay(true), '->renderException() escapes lines containing formatting');
vendor/symfony/console/Tests/ApplicationTest.php:765:        $application = $this->getMockBuilder('Symfony\Component\Console\Application')->setMethods(array('getTerminalWidth'))->getMock();
vendor/symfony/console/Tests/ApplicationTest.php:766:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:767:        $application->expects($this->any())
vendor/symfony/console/Tests/ApplicationTest.php:768:            ->method('getTerminalWidth')
vendor/symfony/console/Tests/ApplicationTest.php:769:            ->will($this->returnValue(120));
vendor/symfony/console/Tests/ApplicationTest.php:770:        $application->register('foo')->setCode(function () {
vendor/symfony/console/Tests/ApplicationTest.php:775:        $tester->run(array('command' => 'foo'), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:776:        $this->assertStringMatchesFormatFile(self::$fixturesPath.'/application_renderexception_linebreaks.txt', $tester->getDisplay(true), '->renderException() keep multiple line breaks');
vendor/symfony/console/Tests/ApplicationTest.php:782:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:783:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:784:        $application->add($command = new \Foo1Command());
vendor/symfony/console/Tests/ApplicationTest.php:788:        $application->run();
vendor/symfony/console/Tests/ApplicationTest.php:791:        $this->assertInstanceOf('Symfony\Component\Console\Input\ArgvInput', $command->input, '->run() creates an ArgvInput by default if none is given');
vendor/symfony/console/Tests/ApplicationTest.php:792:        $this->assertInstanceOf('Symfony\Component\Console\Output\ConsoleOutput', $command->output, '->run() creates a ConsoleOutput by default if none is given');
vendor/symfony/console/Tests/ApplicationTest.php:795:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:796:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:798:        $this->ensureStaticCommandHelp($application);
vendor/symfony/console/Tests/ApplicationTest.php:801:        $tester->run(array(), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:802:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_run1.txt', $tester->getDisplay(true), '->run() runs the list command if no argument is passed');
vendor/symfony/console/Tests/ApplicationTest.php:804:        $tester->run(array('--help' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:805:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_run2.txt', $tester->getDisplay(true), '->run() runs the help command if --help is passed');
vendor/symfony/console/Tests/ApplicationTest.php:807:        $tester->run(array('-h' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:808:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_run2.txt', $tester->getDisplay(true), '->run() runs the help command if -h is passed');
vendor/symfony/console/Tests/ApplicationTest.php:810:        $tester->run(array('command' => 'list', '--help' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:811:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_run3.txt', $tester->getDisplay(true), '->run() displays the help if --help is passed');
vendor/symfony/console/Tests/ApplicationTest.php:813:        $tester->run(array('command' => 'list', '-h' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:814:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_run3.txt', $tester->getDisplay(true), '->run() displays the help if -h is passed');
vendor/symfony/console/Tests/ApplicationTest.php:816:        $tester->run(array('--ansi' => true));
vendor/symfony/console/Tests/ApplicationTest.php:817:        $this->assertTrue($tester->getOutput()->isDecorated(), '->run() forces color output if --ansi is passed');
vendor/symfony/console/Tests/ApplicationTest.php:819:        $tester->run(array('--no-ansi' => true));
vendor/symfony/console/Tests/ApplicationTest.php:820:        $this->assertFalse($tester->getOutput()->isDecorated(), '->run() forces color output to be disabled if --no-ansi is passed');
vendor/symfony/console/Tests/ApplicationTest.php:822:        $tester->run(array('--version' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:823:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_run4.txt', $tester->getDisplay(true), '->run() displays the program version if --version is passed');
vendor/symfony/console/Tests/ApplicationTest.php:825:        $tester->run(array('-V' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:826:        $this->assertStringEqualsFile(self::$fixturesPath.'/application_run4.txt', $tester->getDisplay(true), '->run() displays the program version if -v is passed');
vendor/symfony/console/Tests/ApplicationTest.php:828:        $tester->run(array('command' => 'list', '--quiet' => true));
vendor/symfony/console/Tests/ApplicationTest.php:829:        $this->assertSame('', $tester->getDisplay(), '->run() removes all output if --quiet is passed');
vendor/symfony/console/Tests/ApplicationTest.php:830:        $this->assertFalse($tester->getInput()->isInteractive(), '->run() sets off the interactive mode if --quiet is passed');
vendor/symfony/console/Tests/ApplicationTest.php:832:        $tester->run(array('command' => 'list', '-q' => true));
vendor/symfony/console/Tests/ApplicationTest.php:833:        $this->assertSame('', $tester->getDisplay(), '->run() removes all output if -q is passed');
vendor/symfony/console/Tests/ApplicationTest.php:834:        $this->assertFalse($tester->getInput()->isInteractive(), '->run() sets off the interactive mode if -q is passed');
vendor/symfony/console/Tests/ApplicationTest.php:836:        $tester->run(array('command' => 'list', '--verbose' => true));
vendor/symfony/console/Tests/ApplicationTest.php:837:        $this->assertSame(Output::VERBOSITY_VERBOSE, $tester->getOutput()->getVerbosity(), '->run() sets the output to verbose if --verbose is passed');
vendor/symfony/console/Tests/ApplicationTest.php:839:        $tester->run(array('command' => 'list', '--verbose' => 1));
vendor/symfony/console/Tests/ApplicationTest.php:840:        $this->assertSame(Output::VERBOSITY_VERBOSE, $tester->getOutput()->getVerbosity(), '->run() sets the output to verbose if --verbose=1 is passed');
vendor/symfony/console/Tests/ApplicationTest.php:842:        $tester->run(array('command' => 'list', '--verbose' => 2));
vendor/symfony/console/Tests/ApplicationTest.php:843:        $this->assertSame(Output::VERBOSITY_VERY_VERBOSE, $tester->getOutput()->getVerbosity(), '->run() sets the output to very verbose if --verbose=2 is passed');
vendor/symfony/console/Tests/ApplicationTest.php:845:        $tester->run(array('command' => 'list', '--verbose' => 3));
vendor/symfony/console/Tests/ApplicationTest.php:846:        $this->assertSame(Output::VERBOSITY_DEBUG, $tester->getOutput()->getVerbosity(), '->run() sets the output to debug if --verbose=3 is passed');
vendor/symfony/console/Tests/ApplicationTest.php:848:        $tester->run(array('command' => 'list', '--verbose' => 4));
vendor/symfony/console/Tests/ApplicationTest.php:849:        $this->assertSame(Output::VERBOSITY_VERBOSE, $tester->getOutput()->getVerbosity(), '->run() sets the output to verbose if unknown --verbose level is passed');
vendor/symfony/console/Tests/ApplicationTest.php:851:        $tester->run(array('command' => 'list', '-v' => true));
vendor/symfony/console/Tests/ApplicationTest.php:852:        $this->assertSame(Output::VERBOSITY_VERBOSE, $tester->getOutput()->getVerbosity(), '->run() sets the output to verbose if -v is passed');
vendor/symfony/console/Tests/ApplicationTest.php:854:        $tester->run(array('command' => 'list', '-vv' => true));
vendor/symfony/console/Tests/ApplicationTest.php:855:        $this->assertSame(Output::VERBOSITY_VERY_VERBOSE, $tester->getOutput()->getVerbosity(), '->run() sets the output to verbose if -v is passed');
vendor/symfony/console/Tests/ApplicationTest.php:857:        $tester->run(array('command' => 'list', '-vvv' => true));
vendor/symfony/console/Tests/ApplicationTest.php:858:        $this->assertSame(Output::VERBOSITY_DEBUG, $tester->getOutput()->getVerbosity(), '->run() sets the output to verbose if -v is passed');
vendor/symfony/console/Tests/ApplicationTest.php:861:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:862:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:863:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:866:        $tester->run(array('command' => 'foo:bar', '--no-interaction' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:867:        $this->assertSame('called'.PHP_EOL, $tester->getDisplay(), '->run() does not call interact() if --no-interaction is passed');
vendor/symfony/console/Tests/ApplicationTest.php:869:        $tester->run(array('command' => 'foo:bar', '-n' => true), array('decorated' => false));
vendor/symfony/console/Tests/ApplicationTest.php:870:        $this->assertSame('called'.PHP_EOL, $tester->getDisplay(), '->run() does not call interact() if -n is passed');
vendor/symfony/console/Tests/ApplicationTest.php:883:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:884:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:885:        $application->add(new \FooCommand());
vendor/symfony/console/Tests/ApplicationTest.php:889:        $input = new ArgvInput(array('cli.php', '-v', 'foo:bar'));
vendor/symfony/console/Tests/ApplicationTest.php:890:        $application->run($input, $output);
vendor/symfony/console/Tests/ApplicationTest.php:892:        $this->addToAssertionCount(1);
vendor/symfony/console/Tests/ApplicationTest.php:894:        $input = new ArgvInput(array('cli.php', '--verbose', 'foo:bar'));
vendor/symfony/console/Tests/ApplicationTest.php:895:        $application->run($input, $output);
vendor/symfony/console/Tests/ApplicationTest.php:897:        $this->addToAssertionCount(1);
vendor/symfony/console/Tests/ApplicationTest.php:904:        $application = $this->getMockBuilder('Symfony\Component\Console\Application')->setMethods(array('doRun'))->getMock();
vendor/symfony/console/Tests/ApplicationTest.php:905:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:906:        $application->expects($this->once())
vendor/symfony/console/Tests/ApplicationTest.php:907:            ->method('doRun')
vendor/symfony/console/Tests/ApplicationTest.php:908:            ->will($this->throwException($exception));
vendor/symfony/console/Tests/ApplicationTest.php:910:        $exitCode = $application->run(new ArrayInput(array()), new NullOutput());
vendor/symfony/console/Tests/ApplicationTest.php:912:        $this->assertSame(4, $exitCode, '->run() returns integer exit code extracted from raised exception');
vendor/symfony/console/Tests/ApplicationTest.php:919:        $application = $this->getMockBuilder('Symfony\Component\Console\Application')->setMethods(array('doRun'))->getMock();
vendor/symfony/console/Tests/ApplicationTest.php:920:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:921:        $application->expects($this->once())
vendor/symfony/console/Tests/ApplicationTest.php:922:            ->method('doRun')
vendor/symfony/console/Tests/ApplicationTest.php:923:            ->will($this->throwException($exception));
vendor/symfony/console/Tests/ApplicationTest.php:925:        $exitCode = $application->run(new ArrayInput(array()), new NullOutput());
vendor/symfony/console/Tests/ApplicationTest.php:927:        $this->assertSame(1, $exitCode, '->run() returns exit code 1 when exception code is 0');
vendor/symfony/console/Tests/ApplicationTest.php:938:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:939:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:940:        $application->setDispatcher($dispatcher);
vendor/symfony/console/Tests/ApplicationTest.php:942:        $application->getDefinition()->addOption(new InputOption('--env', '-e', InputOption::VALUE_REQUIRED, 'Environment'));
vendor/symfony/console/Tests/ApplicationTest.php:945:            ->register('foo')
vendor/symfony/console/Tests/ApplicationTest.php:946:            ->setAliases(array('f'))
vendor/symfony/console/Tests/ApplicationTest.php:947:            ->setDefinition(array(new InputOption('survey', 'e', InputOption::VALUE_REQUIRED, 'My option with a shortcut.')))
vendor/symfony/console/Tests/ApplicationTest.php:948:            ->setCode(function (InputInterface $input, OutputInterface $output) {})
vendor/symfony/console/Tests/ApplicationTest.php:954:        $application->run($input, $output);
vendor/symfony/console/Tests/ApplicationTest.php:964:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:965:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:967:            ->register('foo')
vendor/symfony/console/Tests/ApplicationTest.php:968:            ->setDefinition(array($def))
vendor/symfony/console/Tests/ApplicationTest.php:969:            ->setCode(function (InputInterface $input, OutputInterface $output) {})
vendor/symfony/console/Tests/ApplicationTest.php:974:        $application->run($input, $output);
vendor/symfony/console/Tests/ApplicationTest.php:989:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:990:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:992:        $helperSet = $application->getHelperSet();
vendor/symfony/console/Tests/ApplicationTest.php:994:        $this->assertTrue($helperSet->has('formatter'));
vendor/symfony/console/Tests/ApplicationTest.php:1000:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1001:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1003:        $application->setHelperSet(new HelperSet(array(new FormatterHelper())));
vendor/symfony/console/Tests/ApplicationTest.php:1005:        $helperSet = $application->getHelperSet();
vendor/symfony/console/Tests/ApplicationTest.php:1007:        $this->assertTrue($helperSet->has('formatter'));
vendor/symfony/console/Tests/ApplicationTest.php:1010:        $this->assertFalse($helperSet->has('dialog'));
vendor/symfony/console/Tests/ApplicationTest.php:1011:        $this->assertFalse($helperSet->has('progress'));
vendor/symfony/console/Tests/ApplicationTest.php:1017:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1018:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1020:        $application->setHelperSet(new HelperSet(array(new FormatterHelper())));
vendor/symfony/console/Tests/ApplicationTest.php:1022:        $helperSet = $application->getHelperSet();
vendor/symfony/console/Tests/ApplicationTest.php:1024:        $this->assertTrue($helperSet->has('formatter'));
vendor/symfony/console/Tests/ApplicationTest.php:1027:        $this->assertFalse($helperSet->has('dialog'));
vendor/symfony/console/Tests/ApplicationTest.php:1028:        $this->assertFalse($helperSet->has('progress'));
vendor/symfony/console/Tests/ApplicationTest.php:1034:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1035:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1037:        $inputDefinition = $application->getDefinition();
vendor/symfony/console/Tests/ApplicationTest.php:1039:        $this->assertTrue($inputDefinition->hasArgument('command'));
vendor/symfony/console/Tests/ApplicationTest.php:1041:        $this->assertTrue($inputDefinition->hasOption('help'));
vendor/symfony/console/Tests/ApplicationTest.php:1042:        $this->assertTrue($inputDefinition->hasOption('quiet'));
vendor/symfony/console/Tests/ApplicationTest.php:1043:        $this->assertTrue($inputDefinition->hasOption('verbose'));
vendor/symfony/console/Tests/ApplicationTest.php:1044:        $this->assertTrue($inputDefinition->hasOption('version'));
vendor/symfony/console/Tests/ApplicationTest.php:1045:        $this->assertTrue($inputDefinition->hasOption('ansi'));
vendor/symfony/console/Tests/ApplicationTest.php:1046:        $this->assertTrue($inputDefinition->hasOption('no-ansi'));
vendor/symfony/console/Tests/ApplicationTest.php:1047:        $this->assertTrue($inputDefinition->hasOption('no-interaction'));
vendor/symfony/console/Tests/ApplicationTest.php:1053:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1054:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1056:        $inputDefinition = $application->getDefinition();
vendor/symfony/console/Tests/ApplicationTest.php:1059:        $this->assertFalse($inputDefinition->hasArgument('command'));
vendor/symfony/console/Tests/ApplicationTest.php:1061:        $this->assertFalse($inputDefinition->hasOption('help'));
vendor/symfony/console/Tests/ApplicationTest.php:1062:        $this->assertFalse($inputDefinition->hasOption('quiet'));
vendor/symfony/console/Tests/ApplicationTest.php:1063:        $this->assertFalse($inputDefinition->hasOption('verbose'));
vendor/symfony/console/Tests/ApplicationTest.php:1064:        $this->assertFalse($inputDefinition->hasOption('version'));
vendor/symfony/console/Tests/ApplicationTest.php:1065:        $this->assertFalse($inputDefinition->hasOption('ansi'));
vendor/symfony/console/Tests/ApplicationTest.php:1066:        $this->assertFalse($inputDefinition->hasOption('no-ansi'));
vendor/symfony/console/Tests/ApplicationTest.php:1067:        $this->assertFalse($inputDefinition->hasOption('no-interaction'));
vendor/symfony/console/Tests/ApplicationTest.php:1069:        $this->assertTrue($inputDefinition->hasOption('custom'));
vendor/symfony/console/Tests/ApplicationTest.php:1075:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1076:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1078:        $application->setDefinition(new InputDefinition(array(new InputOption('--custom', '-c', InputOption::VALUE_NONE, 'Set the custom input definition.'))));
vendor/symfony/console/Tests/ApplicationTest.php:1080:        $inputDefinition = $application->getDefinition();
vendor/symfony/console/Tests/ApplicationTest.php:1083:        $this->assertFalse($inputDefinition->hasArgument('command'));
vendor/symfony/console/Tests/ApplicationTest.php:1085:        $this->assertFalse($inputDefinition->hasOption('help'));
vendor/symfony/console/Tests/ApplicationTest.php:1086:        $this->assertFalse($inputDefinition->hasOption('quiet'));
vendor/symfony/console/Tests/ApplicationTest.php:1087:        $this->assertFalse($inputDefinition->hasOption('verbose'));
vendor/symfony/console/Tests/ApplicationTest.php:1088:        $this->assertFalse($inputDefinition->hasOption('version'));
vendor/symfony/console/Tests/ApplicationTest.php:1089:        $this->assertFalse($inputDefinition->hasOption('ansi'));
vendor/symfony/console/Tests/ApplicationTest.php:1090:        $this->assertFalse($inputDefinition->hasOption('no-ansi'));
vendor/symfony/console/Tests/ApplicationTest.php:1091:        $this->assertFalse($inputDefinition->hasOption('no-interaction'));
vendor/symfony/console/Tests/ApplicationTest.php:1093:        $this->assertTrue($inputDefinition->hasOption('custom'));
vendor/symfony/console/Tests/ApplicationTest.php:1099:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1100:        $application->setDispatcher($this->getDispatcher());
vendor/symfony/console/Tests/ApplicationTest.php:1102:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1103:            $output->write('foo.');
vendor/symfony/console/Tests/ApplicationTest.php:1107:        $tester->run(array('command' => 'foo'));
vendor/symfony/console/Tests/ApplicationTest.php:1108:        $this->assertEquals('before.foo.after.'.PHP_EOL, $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1118:        $application->setDispatcher($this->getDispatcher());
vendor/symfony/console/Tests/ApplicationTest.php:1119:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1120:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1122:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1127:        $tester->run(array('command' => 'foo'));
vendor/symfony/console/Tests/ApplicationTest.php:1133:        $application->setDispatcher($this->getDispatcher());
vendor/symfony/console/Tests/ApplicationTest.php:1134:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1136:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1137:            $output->write('foo.');
vendor/symfony/console/Tests/ApplicationTest.php:1143:        $tester->run(array('command' => 'foo'));
vendor/symfony/console/Tests/ApplicationTest.php:1144:        $this->assertContains('before.foo.error.after.', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1149:        $dispatcher = $this->getDispatcher();
vendor/symfony/console/Tests/ApplicationTest.php:1150:        $dispatcher->addListener('console.command', function () {
vendor/symfony/console/Tests/ApplicationTest.php:1155:        $application->setDispatcher($dispatcher);
vendor/symfony/console/Tests/ApplicationTest.php:1156:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1158:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1159:            $output->write('foo.');
vendor/symfony/console/Tests/ApplicationTest.php:1163:        $tester->run(array('command' => 'foo'));
vendor/symfony/console/Tests/ApplicationTest.php:1164:        $this->assertContains('before.error.after.', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1173:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1174:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1176:        $application->register('dym')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1177:            $output->write('dym.');
vendor/symfony/console/Tests/ApplicationTest.php:1185:            $tester->run(array('command' => 'dym'));
vendor/symfony/console/Tests/ApplicationTest.php:1186:            $this->fail('Error expected.');
vendor/symfony/console/Tests/ApplicationTest.php:1188:            $this->assertSame('dymerr', $e->getMessage());
vendor/symfony/console/Tests/ApplicationTest.php:1194:        $dispatcher = $this->getDispatcher();
vendor/symfony/console/Tests/ApplicationTest.php:1195:        $dispatcher->addListener('console.error', function (ConsoleErrorEvent $event) {
vendor/symfony/console/Tests/ApplicationTest.php:1196:            $event->getOutput()->write('silenced.');
vendor/symfony/console/Tests/ApplicationTest.php:1198:            $event->setExitCode(0);
vendor/symfony/console/Tests/ApplicationTest.php:1201:        $dispatcher->addListener('console.command', function () {
vendor/symfony/console/Tests/ApplicationTest.php:1206:        $application->setDispatcher($dispatcher);
vendor/symfony/console/Tests/ApplicationTest.php:1207:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1209:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1210:            $output->write('foo.');
vendor/symfony/console/Tests/ApplicationTest.php:1214:        $tester->run(array('command' => 'foo'));
vendor/symfony/console/Tests/ApplicationTest.php:1215:        $this->assertContains('before.error.silenced.after.', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1216:        $this->assertEquals(ConsoleCommandEvent::RETURN_CODE_DISABLED, $tester->getStatusCode());
vendor/symfony/console/Tests/ApplicationTest.php:1222:        $dispatcher->addListener('console.error', function (ConsoleErrorEvent $event) {
vendor/symfony/console/Tests/ApplicationTest.php:1223:            $this->assertNull($event->getCommand());
vendor/symfony/console/Tests/ApplicationTest.php:1224:            $this->assertInstanceOf(CommandNotFoundException::class, $event->getError());
vendor/symfony/console/Tests/ApplicationTest.php:1225:            $event->getOutput()->write('silenced command not found');
vendor/symfony/console/Tests/ApplicationTest.php:1229:        $application->setDispatcher($dispatcher);
vendor/symfony/console/Tests/ApplicationTest.php:1230:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1233:        $tester->run(array('command' => 'unknown'));
vendor/symfony/console/Tests/ApplicationTest.php:1234:        $this->assertContains('silenced command not found', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1235:        $this->assertEquals(1, $tester->getStatusCode());
vendor/symfony/console/Tests/ApplicationTest.php:1244:        $dispatcher = $this->getDispatcher();
vendor/symfony/console/Tests/ApplicationTest.php:1245:        $dispatcher->addListener('console.exception', function (ConsoleExceptionEvent $event) {
vendor/symfony/console/Tests/ApplicationTest.php:1246:            $event->getOutput()->write('caught.');
vendor/symfony/console/Tests/ApplicationTest.php:1248:            $event->setException(new \RuntimeException('replaced in caught.'));
vendor/symfony/console/Tests/ApplicationTest.php:1252:        $application->setDispatcher($dispatcher);
vendor/symfony/console/Tests/ApplicationTest.php:1253:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1255:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1260:        $tester->run(array('command' => 'foo'));
vendor/symfony/console/Tests/ApplicationTest.php:1261:        $this->assertContains('before.caught.error.after.', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1262:        $this->assertContains('replaced in caught.', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1271:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1272:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1273:        $application->setDispatcher(new EventDispatcher());
vendor/symfony/console/Tests/ApplicationTest.php:1275:        $application->register('dym')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1282:            $tester->run(array('command' => 'dym'));
vendor/symfony/console/Tests/ApplicationTest.php:1283:            $this->fail('->run() should rethrow PHP errors if not handled via ConsoleErrorEvent.');
vendor/symfony/console/Tests/ApplicationTest.php:1285:            $this->assertSame($e->getMessage(), 'Class \'UnknownClass\' not found');
vendor/symfony/console/Tests/ApplicationTest.php:1297:        $application->setDispatcher($this->getDispatcher());
vendor/symfony/console/Tests/ApplicationTest.php:1298:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1299:        $application->setCatchExceptions(false);
vendor/symfony/console/Tests/ApplicationTest.php:1301:        $application->register('dym')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1302:            $output->write('dym.');
vendor/symfony/console/Tests/ApplicationTest.php:1308:        $tester->run(array('command' => 'dym'));
vendor/symfony/console/Tests/ApplicationTest.php:1309:        $this->assertContains('before.dym.error.after.', $tester->getDisplay(), 'The PHP Error did not dispached events');
vendor/symfony/console/Tests/ApplicationTest.php:1318:        $application->setDispatcher($this->getDispatcher());
vendor/symfony/console/Tests/ApplicationTest.php:1319:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1321:        $application->register('dym')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1322:            $output->write('dym.');
vendor/symfony/console/Tests/ApplicationTest.php:1328:        $tester->run(array('command' => 'dym'));
vendor/symfony/console/Tests/ApplicationTest.php:1329:        $this->assertContains('before.dym.error.after.', $tester->getDisplay(), 'The PHP Error did not dispached events');
vendor/symfony/console/Tests/ApplicationTest.php:1338:        $application->setDispatcher($this->getDispatcher());
vendor/symfony/console/Tests/ApplicationTest.php:1339:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1341:        $application->register('dus')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1342:            $output->write('dus.');
vendor/symfony/console/Tests/ApplicationTest.php:1348:        $tester->run(array('command' => 'dus'));
vendor/symfony/console/Tests/ApplicationTest.php:1349:        $this->assertSame(1, $tester->getStatusCode(), 'Status code should be 1');
vendor/symfony/console/Tests/ApplicationTest.php:1355:        $application->setDispatcher($this->getDispatcher(true));
vendor/symfony/console/Tests/ApplicationTest.php:1356:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1358:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1359:            $output->write('foo.');
vendor/symfony/console/Tests/ApplicationTest.php:1363:        $exitCode = $tester->run(array('command' => 'foo'));
vendor/symfony/console/Tests/ApplicationTest.php:1364:        $this->assertContains('before.after.', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1365:        $this->assertEquals(ConsoleCommandEvent::RETURN_CODE_DISABLED, $exitCode);
vendor/symfony/console/Tests/ApplicationTest.php:1373:        $dispatcher = $this->getDispatcher();
vendor/symfony/console/Tests/ApplicationTest.php:1374:        $dispatcher->addListener('console.command', function (ConsoleCommandEvent $event) use (&$noInteractionValue, &$quietValue) {
vendor/symfony/console/Tests/ApplicationTest.php:1375:            $input = $event->getInput();
vendor/symfony/console/Tests/ApplicationTest.php:1377:            $noInteractionValue = $input->getOption('no-interaction');
vendor/symfony/console/Tests/ApplicationTest.php:1378:            $quietValue = $input->getOption('quiet');
vendor/symfony/console/Tests/ApplicationTest.php:1382:        $application->setDispatcher($dispatcher);
vendor/symfony/console/Tests/ApplicationTest.php:1383:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1385:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1386:            $output->write('foo.');
vendor/symfony/console/Tests/ApplicationTest.php:1390:        $tester->run(array('command' => 'foo', '--no-interaction' => true));
vendor/symfony/console/Tests/ApplicationTest.php:1392:        $this->assertTrue($noInteractionValue);
vendor/symfony/console/Tests/ApplicationTest.php:1393:        $this->assertFalse($quietValue);
vendor/symfony/console/Tests/ApplicationTest.php:1400:        $dispatcher = $this->getDispatcher();
vendor/symfony/console/Tests/ApplicationTest.php:1401:        $dispatcher->addListener('console.command', function (ConsoleCommandEvent $event) use (&$extraValue) {
vendor/symfony/console/Tests/ApplicationTest.php:1402:            $definition = $event->getCommand()->getDefinition();
vendor/symfony/console/Tests/ApplicationTest.php:1403:            $input = $event->getInput();
vendor/symfony/console/Tests/ApplicationTest.php:1405:            $definition->addOption(new InputOption('extra', null, InputOption::VALUE_REQUIRED));
vendor/symfony/console/Tests/ApplicationTest.php:1406:            $input->bind($definition);
vendor/symfony/console/Tests/ApplicationTest.php:1408:            $extraValue = $input->getOption('extra');
vendor/symfony/console/Tests/ApplicationTest.php:1412:        $application->setDispatcher($dispatcher);
vendor/symfony/console/Tests/ApplicationTest.php:1413:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1415:        $application->register('foo')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1416:            $output->write('foo.');
vendor/symfony/console/Tests/ApplicationTest.php:1420:        $tester->run(array('command' => 'foo', '--extra' => 'some test value'));
vendor/symfony/console/Tests/ApplicationTest.php:1422:        $this->assertEquals('some test value', $extraValue);
vendor/symfony/console/Tests/ApplicationTest.php:1431:        $originalDimensions = $application->getTerminalDimensions();
vendor/symfony/console/Tests/ApplicationTest.php:1432:        $this->assertCount(2, $originalDimensions);
vendor/symfony/console/Tests/ApplicationTest.php:1439:        $application->setTerminalDimensions($width, 80);
vendor/symfony/console/Tests/ApplicationTest.php:1440:        $this->assertSame(array($width, 80), $application->getTerminalDimensions());
vendor/symfony/console/Tests/ApplicationTest.php:1448:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1449:        $application->add($command);
vendor/symfony/console/Tests/ApplicationTest.php:1450:        $application->setDefaultCommand($command->getName());
vendor/symfony/console/Tests/ApplicationTest.php:1453:        $tester->run(array(), array('interactive' => false));
vendor/symfony/console/Tests/ApplicationTest.php:1454:        $this->assertEquals('called'.PHP_EOL, $tester->getDisplay(), 'Application runs the default set command if different from \'list\' command');
vendor/symfony/console/Tests/ApplicationTest.php:1457:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1460:        $tester->run(array(), array('interactive' => false));
vendor/symfony/console/Tests/ApplicationTest.php:1462:        $this->assertEquals('called'.PHP_EOL, $tester->getDisplay(), 'Application runs the default set command if different from \'list\' command');
vendor/symfony/console/Tests/ApplicationTest.php:1470:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1471:        $application->add($command);
vendor/symfony/console/Tests/ApplicationTest.php:1472:        $application->setDefaultCommand($command->getName());
vendor/symfony/console/Tests/ApplicationTest.php:1475:        $tester->run(array('--fooopt' => 'opt'), array('interactive' => false));
vendor/symfony/console/Tests/ApplicationTest.php:1477:        $this->assertEquals('called'.PHP_EOL.'opt'.PHP_EOL, $tester->getDisplay(), 'Application runs the default set command if different from \'list\' command');
vendor/symfony/console/Tests/ApplicationTest.php:1485:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1486:        $application->add($command);
vendor/symfony/console/Tests/ApplicationTest.php:1487:        $application->setDefaultCommand($command->getName(), true);
vendor/symfony/console/Tests/ApplicationTest.php:1491:        $tester->run(array());
vendor/symfony/console/Tests/ApplicationTest.php:1492:        $this->assertContains('called', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1494:        $tester->run(array('--help' => true));
vendor/symfony/console/Tests/ApplicationTest.php:1495:        $this->assertContains('The foo:bar command', $tester->getDisplay());
vendor/symfony/console/Tests/ApplicationTest.php:1504:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1507:        $tester->run(array('command' => 'help'));
vendor/symfony/console/Tests/ApplicationTest.php:1509:        $this->assertFalse($tester->getInput()->hasParameterOption(array('--no-interaction', '-n')));
vendor/symfony/console/Tests/ApplicationTest.php:1511:        $inputStream = $tester->getInput()->getStream();
vendor/symfony/console/Tests/ApplicationTest.php:1512:        $this->assertEquals($tester->getInput()->isInteractive(), @posix_isatty($inputStream));
vendor/symfony/console/Tests/ApplicationTest.php:1518:        $container->addCompilerPass(new AddConsoleCommandPass());
vendor/symfony/console/Tests/ApplicationTest.php:1520:            ->register('lazy-command', LazyCommand::class)
vendor/symfony/console/Tests/ApplicationTest.php:1521:            ->addTag('console.command', array('command' => 'lazy:command'))
vendor/symfony/console/Tests/ApplicationTest.php:1522:            ->addTag('console.command', array('command' => 'lazy:alias'))
vendor/symfony/console/Tests/ApplicationTest.php:1523:            ->addTag('console.command', array('command' => 'lazy:alias2'));
vendor/symfony/console/Tests/ApplicationTest.php:1524:        $container->compile();
vendor/symfony/console/Tests/ApplicationTest.php:1527:        $application->setCommandLoader($container->get('console.command_loader'));
vendor/symfony/console/Tests/ApplicationTest.php:1528:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1532:        $tester->run(array('command' => 'lazy:command'));
vendor/symfony/console/Tests/ApplicationTest.php:1533:        $this->assertSame("lazy-command called\n", $tester->getDisplay(true));
vendor/symfony/console/Tests/ApplicationTest.php:1535:        $tester->run(array('command' => 'lazy:alias'));
vendor/symfony/console/Tests/ApplicationTest.php:1536:        $this->assertSame("lazy-command called\n", $tester->getDisplay(true));
vendor/symfony/console/Tests/ApplicationTest.php:1538:        $tester->run(array('command' => 'lazy:alias2'));
vendor/symfony/console/Tests/ApplicationTest.php:1539:        $this->assertSame("lazy-command called\n", $tester->getDisplay(true));
vendor/symfony/console/Tests/ApplicationTest.php:1541:        $command = $application->get('lazy:command');
vendor/symfony/console/Tests/ApplicationTest.php:1542:        $this->assertSame(array('lazy:alias', 'lazy:alias2'), $command->getAliases());
vendor/symfony/console/Tests/ApplicationTest.php:1551:        $application->setCommandLoader(new FactoryCommandLoader(array('disabled' => function () { return new DisabledCommand(); })));
vendor/symfony/console/Tests/ApplicationTest.php:1552:        $application->get('disabled');
vendor/symfony/console/Tests/ApplicationTest.php:1558:        $application->setCommandLoader(new FactoryCommandLoader(array('disabled' => function () { return new DisabledCommand(); })));
vendor/symfony/console/Tests/ApplicationTest.php:1559:        $this->assertFalse($application->has('disabled'));
vendor/symfony/console/Tests/ApplicationTest.php:1565:        $application->setCommandLoader(new FactoryCommandLoader(array('disabled' => function () { return new DisabledCommand(); })));
vendor/symfony/console/Tests/ApplicationTest.php:1566:        $this->assertArrayNotHasKey('disabled', $application->all());
vendor/symfony/console/Tests/ApplicationTest.php:1572:        $dispatcher->addListener('console.command', function (ConsoleCommandEvent $event) use ($skipCommand) {
vendor/symfony/console/Tests/ApplicationTest.php:1573:            $event->getOutput()->write('before.');
vendor/symfony/console/Tests/ApplicationTest.php:1576:                $event->disableCommand();
vendor/symfony/console/Tests/ApplicationTest.php:1579:        $dispatcher->addListener('console.terminate', function (ConsoleTerminateEvent $event) use ($skipCommand) {
vendor/symfony/console/Tests/ApplicationTest.php:1580:            $event->getOutput()->writeln('after.');
vendor/symfony/console/Tests/ApplicationTest.php:1583:                $event->setExitCode(ConsoleCommandEvent::RETURN_CODE_DISABLED);
vendor/symfony/console/Tests/ApplicationTest.php:1586:        $dispatcher->addListener('console.error', function (ConsoleErrorEvent $event) {
vendor/symfony/console/Tests/ApplicationTest.php:1587:            $event->getOutput()->write('error.');
vendor/symfony/console/Tests/ApplicationTest.php:1589:            $event->setError(new \LogicException('error.', $event->getExitCode(), $event->getError()));
vendor/symfony/console/Tests/ApplicationTest.php:1601:        $application->setAutoExit(false);
vendor/symfony/console/Tests/ApplicationTest.php:1602:        $application->setDispatcher(new EventDispatcher());
vendor/symfony/console/Tests/ApplicationTest.php:1604:        $application->register('dym')->setCode(function (InputInterface $input, OutputInterface $output) {
vendor/symfony/console/Tests/ApplicationTest.php:1611:            $tester->run(array('command' => 'dym'));
vendor/symfony/console/Tests/ApplicationTest.php:1612:            $this->fail('->run() should rethrow PHP errors if not handled via ConsoleErrorEvent.');
vendor/symfony/console/Tests/ApplicationTest.php:1614:            $this->assertSame($e->getMessage(), 'Class \'UnknownClass\' not found');
vendor/symfony/console/Tests/ApplicationTest.php:1635:        return new InputDefinition(array(new InputOption('--custom', '-c', InputOption::VALUE_NONE, 'Set the custom input definition.')));
vendor/symfony/console/Tests/ApplicationTest.php:1659:        $this->add($command);
vendor/symfony/console/Tests/ApplicationTest.php:1660:        $this->setDefaultCommand($command->getName());
vendor/symfony/console/Tests/ApplicationTest.php:1668:        $output->writeln('lazy-command called');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:25:        $this->assertNull($input->getFirstArgument(), '->getFirstArgument() returns null if no argument were passed');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:27:        $this->assertEquals('Fabien', $input->getFirstArgument(), '->getFirstArgument() returns the first passed argument');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:28:        $input = new ArrayInput(array('--foo' => 'bar', 'name' => 'Fabien'));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:29:        $this->assertEquals('Fabien', $input->getFirstArgument(), '->getFirstArgument() returns the first passed argument');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:34:        $input = new ArrayInput(array('name' => 'Fabien', '--foo' => 'bar'));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:35:        $this->assertTrue($input->hasParameterOption('--foo'), '->hasParameterOption() returns true if an option is present in the passed parameters');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:36:        $this->assertFalse($input->hasParameterOption('--bar'), '->hasParameterOption() returns false if an option is not present in the passed parameters');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:38:        $input = new ArrayInput(array('--foo'));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:39:        $this->assertTrue($input->hasParameterOption('--foo'), '->hasParameterOption() returns true if an option is present in the passed parameters');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:41:        $input = new ArrayInput(array('--foo', '--', '--bar'));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:42:        $this->assertTrue($input->hasParameterOption('--bar'), '->hasParameterOption() returns true if an option is present in the passed parameters');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:43:        $this->assertFalse($input->hasParameterOption('--bar', true), '->hasParameterOption() returns false if an option is present in the passed parameters after an end of options signal');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:48:        $input = new ArrayInput(array('name' => 'Fabien', '--foo' => 'bar'));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:49:        $this->assertEquals('bar', $input->getParameterOption('--foo'), '->getParameterOption() returns the option of specified name');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:50:        $this->assertFalse($input->getParameterOption('--bar'), '->getParameterOption() returns the default if an option is not present in the passed parameters');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:52:        $input = new ArrayInput(array('Fabien', '--foo' => 'bar'));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:53:        $this->assertEquals('bar', $input->getParameterOption('--foo'), '->getParameterOption() returns the option of specified name');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:55:        $input = new ArrayInput(array('--foo', '--', '--bar' => 'woop'));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:56:        $this->assertEquals('woop', $input->getParameterOption('--bar'), '->getParameterOption() returns the correct value if an option is present in the passed parameters');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:57:        $this->assertFalse($input->getParameterOption('--bar', false, true), '->getParameterOption() returns false if an option is present in the passed parameters after an end of options signal');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:64:        $this->assertEquals(array('name' => 'foo'), $input->getArguments(), '->parse() parses required arguments');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:74:        $this->assertEquals($expectedOptions, $input->getOptions(), $message);
vendor/symfony/console/Tests/Input/ArrayInputTest.php:81:                array('--foo' => 'bar'),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:84:                '->parse() parses long options',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:87:                array('--foo' => 'bar'),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:90:                '->parse() parses long options with a default value',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:96:                '->parse() uses the default value for long options with value optional which are not passed',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:99:                array('--foo' => null),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:102:                '->parse() parses long options with a default value',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:105:                array('-f' => 'bar'),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:108:                '->parse() parses short options',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:111:                array('--' => null, '-f' => 'bar'),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:114:                '->parse() does not parse opts after an end of options signal',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:117:                array('--' => null),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:120:                '->parse() does not choke on end of options signal',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:131:            $this->expectException('InvalidArgumentException');
vendor/symfony/console/Tests/Input/ArrayInputTest.php:132:            $this->expectExceptionMessage($expectedExceptionMessage);
vendor/symfony/console/Tests/Input/ArrayInputTest.php:134:            $this->setExpectedException('InvalidArgumentException', $expectedExceptionMessage);
vendor/symfony/console/Tests/Input/ArrayInputTest.php:149:                array('--foo' => null),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:151:                'The "--foo" option requires a value.',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:154:                array('--foo' => 'foo'),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:156:                'The "--foo" option does not exist.',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:159:                array('-o' => 'foo'),
vendor/symfony/console/Tests/Input/ArrayInputTest.php:161:                'The "-o" option does not exist.',
vendor/symfony/console/Tests/Input/ArrayInputTest.php:168:        $input = new ArrayInput(array('-f' => null, '-b' => 'bar', '--foo' => 'b a z', '--lala' => null, 'test' => 'Foo', 'test2' => "A\nB'C"));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:169:        $this->assertEquals('-f -b=bar --foo='.escapeshellarg('b a z').' --lala Foo '.escapeshellarg("A\nB'C"), (string) $input);
vendor/symfony/console/Tests/Input/ArrayInputTest.php:171:        $input = new ArrayInput(array('-b' => array('bval_1', 'bval_2'), '--f' => array('fval_1', 'fval_2')));
vendor/symfony/console/Tests/Input/ArrayInputTest.php:172:        $this->assertSame('-b=bval_1 -b=bval_2 --f=fval_1 --f=fval_2', (string) $input);
vendor/symfony/console/Tests/Input/ArrayInputTest.php:175:        $this->assertSame('val_1 val_2', (string) $input);
vendor/symfony/console/Tests/Input/StringInputTest.php:28:        $p = $r->getProperty('tokens');
vendor/symfony/console/Tests/Input/StringInputTest.php:29:        $p->setAccessible(true);
vendor/symfony/console/Tests/Input/StringInputTest.php:30:        $this->assertEquals($tokens, $p->getValue($input), $message);
vendor/symfony/console/Tests/Input/StringInputTest.php:40:        $input = new StringInput('--foo=bar');
vendor/symfony/console/Tests/Input/StringInputTest.php:41:        $input->bind($definition);
vendor/symfony/console/Tests/Input/StringInputTest.php:42:        $this->assertEquals('bar', $input->getOption('foo'));
vendor/symfony/console/Tests/Input/StringInputTest.php:48:            array('', array(), '->tokenize() parses an empty string'),
vendor/symfony/console/Tests/Input/StringInputTest.php:49:            array('foo', array('foo'), '->tokenize() parses arguments'),
vendor/symfony/console/Tests/Input/StringInputTest.php:50:            array('  foo  bar  ', array('foo', 'bar'), '->tokenize() ignores whitespaces between arguments'),
vendor/symfony/console/Tests/Input/StringInputTest.php:51:            array('"quoted"', array('quoted'), '->tokenize() parses quoted arguments'),
vendor/symfony/console/Tests/Input/StringInputTest.php:52:            array("'quoted'", array('quoted'), '->tokenize() parses quoted arguments'),
vendor/symfony/console/Tests/Input/StringInputTest.php:53:            array("'a\rb\nc\td'", array("a\rb\nc\td"), '->tokenize() parses whitespace chars in strings'),
vendor/symfony/console/Tests/Input/StringInputTest.php:54:            array("'a'\r'b'\n'c'\t'd'", array('a', 'b', 'c', 'd'), '->tokenize() parses whitespace chars between args as spaces'),
vendor/symfony/console/Tests/Input/StringInputTest.php:55:            array('\"quoted\"', array('"quoted"'), '->tokenize() parses escaped-quoted arguments'),
vendor/symfony/console/Tests/Input/StringInputTest.php:56:            array("\'quoted\'", array('\'quoted\''), '->tokenize() parses escaped-quoted arguments'),
vendor/symfony/console/Tests/Input/StringInputTest.php:57:            array('-a', array('-a'), '->tokenize() parses short options'),
vendor/symfony/console/Tests/Input/StringInputTest.php:58:            array('-azc', array('-azc'), '->tokenize() parses aggregated short options'),
vendor/symfony/console/Tests/Input/StringInputTest.php:59:            array('-awithavalue', array('-awithavalue'), '->tokenize() parses short options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:60:            array('-a"foo bar"', array('-afoo bar'), '->tokenize() parses short options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:61:            array('-a"foo bar""foo bar"', array('-afoo barfoo bar'), '->tokenize() parses short options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:62:            array('-a\'foo bar\'', array('-afoo bar'), '->tokenize() parses short options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:63:            array('-a\'foo bar\'\'foo bar\'', array('-afoo barfoo bar'), '->tokenize() parses short options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:64:            array('-a\'foo bar\'"foo bar"', array('-afoo barfoo bar'), '->tokenize() parses short options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:65:            array('--long-option', array('--long-option'), '->tokenize() parses long options'),
vendor/symfony/console/Tests/Input/StringInputTest.php:66:            array('--long-option=foo', array('--long-option=foo'), '->tokenize() parses long options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:67:            array('--long-option="foo bar"', array('--long-option=foo bar'), '->tokenize() parses long options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:68:            array('--long-option="foo bar""another"', array('--long-option=foo baranother'), '->tokenize() parses long options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:69:            array('--long-option=\'foo bar\'', array('--long-option=foo bar'), '->tokenize() parses long options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:70:            array("--long-option='foo bar''another'", array('--long-option=foo baranother'), '->tokenize() parses long options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:71:            array("--long-option='foo bar'\"another\"", array('--long-option=foo baranother'), '->tokenize() parses long options with a value'),
vendor/symfony/console/Tests/Input/StringInputTest.php:72:            array('foo -a -ffoo --long bar', array('foo', '-a', '-ffoo', '--long', 'bar'), '->tokenize() parses when several arguments and options'),
vendor/symfony/console/Tests/Input/StringInputTest.php:78:        $input = new StringInput('-f foo');
vendor/symfony/console/Tests/Input/StringInputTest.php:79:        $this->assertEquals('-f foo', (string) $input);
vendor/symfony/console/Tests/Input/StringInputTest.php:81:        $input = new StringInput('-f --bar=foo "a b c d"');
vendor/symfony/console/Tests/Input/StringInputTest.php:82:        $this->assertEquals('-f --bar=foo '.escapeshellarg('a b c d'), (string) $input);
vendor/symfony/console/Tests/Input/StringInputTest.php:84:        $input = new StringInput('-f --bar=foo \'a b c d\' '."'A\nB\\'C'");
vendor/symfony/console/Tests/Input/StringInputTest.php:85:        $this->assertEquals('-f --bar=foo '.escapeshellarg('a b c d').' '.escapeshellarg("A\nB'C"), (string) $input);
vendor/symfony/console/Tests/Input/InputTest.php:25:        $this->assertEquals('foo', $input->getArgument('name'), '->__construct() takes a InputDefinition as an argument');
vendor/symfony/console/Tests/Input/InputTest.php:30:        $input = new ArrayInput(array('--name' => 'foo'), new InputDefinition(array(new InputOption('name'))));
vendor/symfony/console/Tests/Input/InputTest.php:31:        $this->assertEquals('foo', $input->getOption('name'), '->getOption() returns the value for the given option');
vendor/symfony/console/Tests/Input/InputTest.php:33:        $input->setOption('name', 'bar');
vendor/symfony/console/Tests/Input/InputTest.php:34:        $this->assertEquals('bar', $input->getOption('name'), '->setOption() sets the value for a given option');
vendor/symfony/console/Tests/Input/InputTest.php:35:        $this->assertEquals(array('name' => 'bar'), $input->getOptions(), '->getOptions() returns all option values');
vendor/symfony/console/Tests/Input/InputTest.php:37:        $input = new ArrayInput(array('--name' => 'foo'), new InputDefinition(array(new InputOption('name'), new InputOption('bar', '', InputOption::VALUE_OPTIONAL, '', 'default'))));
vendor/symfony/console/Tests/Input/InputTest.php:38:        $this->assertEquals('default', $input->getOption('bar'), '->getOption() returns the default value for optional options');
vendor/symfony/console/Tests/Input/InputTest.php:39:        $this->assertEquals(array('name' => 'foo', 'bar' => 'default'), $input->getOptions(), '->getOptions() returns all option values, even optional ones');
vendor/symfony/console/Tests/Input/InputTest.php:41:        $input = new ArrayInput(array('--name' => 'foo', '--bar' => ''), new InputDefinition(array(new InputOption('name'), new InputOption('bar', '', InputOption::VALUE_OPTIONAL, '', 'default'))));
vendor/symfony/console/Tests/Input/InputTest.php:42:        $this->assertEquals('', $input->getOption('bar'), '->getOption() returns null for options explicitly passed without value (or an empty value)');
vendor/symfony/console/Tests/Input/InputTest.php:43:        $this->assertEquals(array('name' => 'foo', 'bar' => ''), $input->getOptions(), '->getOptions() returns all option values.');
vendor/symfony/console/Tests/Input/InputTest.php:45:        $input = new ArrayInput(array('--name' => 'foo', '--bar' => null), new InputDefinition(array(new InputOption('name'), new InputOption('bar', '', InputOption::VALUE_OPTIONAL, '', 'default'))));
vendor/symfony/console/Tests/Input/InputTest.php:46:        $this->assertNull($input->getOption('bar'), '->getOption() returns null for options explicitly passed without value (or an empty value)');
vendor/symfony/console/Tests/Input/InputTest.php:47:        $this->assertEquals(array('name' => 'foo', 'bar' => null), $input->getOptions(), '->getOptions() returns all option values');
vendor/symfony/console/Tests/Input/InputTest.php:56:        $input = new ArrayInput(array('--name' => 'foo'), new InputDefinition(array(new InputOption('name'), new InputOption('bar', '', InputOption::VALUE_OPTIONAL, '', 'default'))));
vendor/symfony/console/Tests/Input/InputTest.php:57:        $input->setOption('foo', 'bar');
vendor/symfony/console/Tests/Input/InputTest.php:66:        $input = new ArrayInput(array('--name' => 'foo'), new InputDefinition(array(new InputOption('name'), new InputOption('bar', '', InputOption::VALUE_OPTIONAL, '', 'default'))));
vendor/symfony/console/Tests/Input/InputTest.php:67:        $input->getOption('foo');
vendor/symfony/console/Tests/Input/InputTest.php:73:        $this->assertEquals('foo', $input->getArgument('name'), '->getArgument() returns the value for the given argument');
vendor/symfony/console/Tests/Input/InputTest.php:75:        $input->setArgument('name', 'bar');
vendor/symfony/console/Tests/Input/InputTest.php:76:        $this->assertEquals('bar', $input->getArgument('name'), '->setArgument() sets the value for a given argument');
vendor/symfony/console/Tests/Input/InputTest.php:77:        $this->assertEquals(array('name' => 'bar'), $input->getArguments(), '->getArguments() returns all argument values');
vendor/symfony/console/Tests/Input/InputTest.php:80:        $this->assertEquals('default', $input->getArgument('bar'), '->getArgument() returns the default value for optional arguments');
vendor/symfony/console/Tests/Input/InputTest.php:81:        $this->assertEquals(array('name' => 'foo', 'bar' => 'default'), $input->getArguments(), '->getArguments() returns all argument values, even optional ones');
vendor/symfony/console/Tests/Input/InputTest.php:91:        $input->setArgument('foo', 'bar');
vendor/symfony/console/Tests/Input/InputTest.php:101:        $input->getArgument('foo');
vendor/symfony/console/Tests/Input/InputTest.php:111:        $input->bind(new InputDefinition(array(new InputArgument('name', InputArgument::REQUIRED))));
vendor/symfony/console/Tests/Input/InputTest.php:112:        $input->validate();
vendor/symfony/console/Tests/Input/InputTest.php:122:        $input->bind(new InputDefinition(array(new InputArgument('name', InputArgument::REQUIRED), new InputArgument('bar', InputArgument::OPTIONAL))));
vendor/symfony/console/Tests/Input/InputTest.php:123:        $input->validate();
vendor/symfony/console/Tests/Input/InputTest.php:129:        $input->bind(new InputDefinition(array(new InputArgument('name', InputArgument::REQUIRED))));
vendor/symfony/console/Tests/Input/InputTest.php:131:        $this->assertNull($input->validate());
vendor/symfony/console/Tests/Input/InputTest.php:137:        $this->assertTrue($input->isInteractive(), '->isInteractive() returns whether the input should be interactive or not');
vendor/symfony/console/Tests/Input/InputTest.php:138:        $input->setInteractive(false);
vendor/symfony/console/Tests/Input/InputTest.php:139:        $this->assertFalse($input->isInteractive(), '->setInteractive() changes the interactive flag');
vendor/symfony/console/Tests/Input/InputTest.php:146:        $input->setStream($stream);
vendor/symfony/console/Tests/Input/InputTest.php:147:        $this->assertSame($stream, $input->getStream());
vendor/symfony/console/Tests/Input/InputArgumentTest.php:22:        $this->assertEquals('foo', $argument->getName(), '__construct() takes a name as its first argument');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:28:        $this->assertFalse($argument->isRequired(), '__construct() gives a "InputArgument::OPTIONAL" mode by default');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:31:        $this->assertFalse($argument->isRequired(), '__construct() can take "InputArgument::OPTIONAL" as its mode');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:34:        $this->assertFalse($argument->isRequired(), '__construct() can take "InputArgument::OPTIONAL" as its mode');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:37:        $this->assertTrue($argument->isRequired(), '__construct() can take "InputArgument::REQUIRED" as its mode');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:46:            $this->expectException('InvalidArgumentException');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:47:            $this->expectExceptionMessage(sprintf('Argument mode "%s" is not valid.', $mode));
vendor/symfony/console/Tests/Input/InputArgumentTest.php:49:            $this->setExpectedException('InvalidArgumentException', sprintf('Argument mode "%s" is not valid.', $mode));
vendor/symfony/console/Tests/Input/InputArgumentTest.php:59:            array(-1),
vendor/symfony/console/Tests/Input/InputArgumentTest.php:66:        $this->assertTrue($argument->isArray(), '->isArray() returns true if the argument can be an array');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:68:        $this->assertTrue($argument->isArray(), '->isArray() returns true if the argument can be an array');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:70:        $this->assertFalse($argument->isArray(), '->isArray() returns false if the argument can not be an array');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:76:        $this->assertEquals('Some description', $argument->getDescription(), '->getDescription() return the message description');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:82:        $this->assertEquals('default', $argument->getDefault(), '->getDefault() return the default value');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:88:        $argument->setDefault(null);
vendor/symfony/console/Tests/Input/InputArgumentTest.php:89:        $this->assertNull($argument->getDefault(), '->setDefault() can reset the default value by passing null');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:90:        $argument->setDefault('another');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:91:        $this->assertEquals('another', $argument->getDefault(), '->setDefault() changes the default value');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:94:        $argument->setDefault(array(1, 2));
vendor/symfony/console/Tests/Input/InputArgumentTest.php:95:        $this->assertEquals(array(1, 2), $argument->getDefault(), '->setDefault() changes the default value');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:105:        $argument->setDefault('default');
vendor/symfony/console/Tests/Input/InputArgumentTest.php:115:        $argument->setDefault('default');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:35:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:38:        $this->assertEquals(array(), $definition->getArguments(), '__construct() creates a new InputDefinition object');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:40:        $definition = new InputDefinition(array($this->foo, $this->bar));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:41:        $this->assertEquals(array('foo' => $this->foo, 'bar' => $this->bar), $definition->getArguments(), '__construct() takes an array of InputArgument objects as its first argument');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:46:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:49:        $this->assertEquals(array(), $definition->getOptions(), '__construct() creates a new InputDefinition object');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:51:        $definition = new InputDefinition(array($this->foo, $this->bar));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:52:        $this->assertEquals(array('foo' => $this->foo, 'bar' => $this->bar), $definition->getOptions(), '__construct() takes an array of InputOption objects as its first argument');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:57:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:60:        $definition->setArguments(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:61:        $this->assertEquals(array('foo' => $this->foo), $definition->getArguments(), '->setArguments() sets the array of InputArgument objects');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:62:        $definition->setArguments(array($this->bar));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:64:        $this->assertEquals(array('bar' => $this->bar), $definition->getArguments(), '->setArguments() clears all InputArgument objects');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:69:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:72:        $definition->addArguments(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:73:        $this->assertEquals(array('foo' => $this->foo), $definition->getArguments(), '->addArguments() adds an array of InputArgument objects');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:74:        $definition->addArguments(array($this->bar));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:75:        $this->assertEquals(array('foo' => $this->foo, 'bar' => $this->bar), $definition->getArguments(), '->addArguments() does not clear existing InputArgument objects');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:80:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:83:        $definition->addArgument($this->foo);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:84:        $this->assertEquals(array('foo' => $this->foo), $definition->getArguments(), '->addArgument() adds a InputArgument object');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:85:        $definition->addArgument($this->bar);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:86:        $this->assertEquals(array('foo' => $this->foo, 'bar' => $this->bar), $definition->getArguments(), '->addArgument() adds a InputArgument object');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:95:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:98:        $definition->addArgument($this->foo);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:99:        $definition->addArgument($this->foo1);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:108:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:111:        $definition->addArgument(new InputArgument('fooarray', InputArgument::IS_ARRAY));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:112:        $definition->addArgument(new InputArgument('anotherbar'));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:121:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:124:        $definition->addArgument($this->foo);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:125:        $definition->addArgument($this->foo2);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:130:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:133:        $definition->addArguments(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:134:        $this->assertEquals($this->foo, $definition->getArgument('foo'), '->getArgument() returns a InputArgument by its name');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:143:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:146:        $definition->addArguments(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:147:        $definition->getArgument('bar');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:152:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:155:        $definition->addArguments(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:157:        $this->assertTrue($definition->hasArgument('foo'), '->hasArgument() returns true if a InputArgument exists for the given name');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:158:        $this->assertFalse($definition->hasArgument('bar'), '->hasArgument() returns false if a InputArgument exists for the given name');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:163:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:166:        $definition->addArgument($this->foo2);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:167:        $this->assertEquals(1, $definition->getArgumentRequiredCount(), '->getArgumentRequiredCount() returns the number of required arguments');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:168:        $definition->addArgument($this->foo);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:169:        $this->assertEquals(1, $definition->getArgumentRequiredCount(), '->getArgumentRequiredCount() returns the number of required arguments');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:174:        $this->initializeArguments();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:177:        $definition->addArgument($this->foo2);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:178:        $this->assertEquals(1, $definition->getArgumentCount(), '->getArgumentCount() returns the number of arguments');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:179:        $definition->addArgument($this->foo);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:180:        $this->assertEquals(2, $definition->getArgumentCount(), '->getArgumentCount() returns the number of arguments');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:191:        $this->assertEquals(array('foo1' => null, 'foo2' => 'default', 'foo3' => array()), $definition->getArgumentDefaults(), '->getArgumentDefaults() return the default values for each argument');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:196:        $this->assertEquals(array('foo4' => array(1, 2)), $definition->getArgumentDefaults(), '->getArgumentDefaults() return the default values for each argument');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:201:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:203:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:204:        $this->assertEquals(array('foo' => $this->foo), $definition->getOptions(), '->setOptions() sets the array of InputOption objects');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:205:        $definition->setOptions(array($this->bar));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:206:        $this->assertEquals(array('bar' => $this->bar), $definition->getOptions(), '->setOptions() clears all InputOption objects');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:211:     * @expectedExceptionMessage The "-f" option does not exist.
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:215:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:217:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:218:        $definition->setOptions(array($this->bar));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:219:        $definition->getOptionForShortcut('f');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:224:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:226:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:227:        $this->assertEquals(array('foo' => $this->foo), $definition->getOptions(), '->addOptions() adds an array of InputOption objects');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:228:        $definition->addOptions(array($this->bar));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:229:        $this->assertEquals(array('foo' => $this->foo, 'bar' => $this->bar), $definition->getOptions(), '->addOptions() does not clear existing InputOption objects');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:234:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:237:        $definition->addOption($this->foo);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:238:        $this->assertEquals(array('foo' => $this->foo), $definition->getOptions(), '->addOption() adds a InputOption object');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:239:        $definition->addOption($this->bar);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:240:        $this->assertEquals(array('foo' => $this->foo, 'bar' => $this->bar), $definition->getOptions(), '->addOption() adds a InputOption object');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:249:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:252:        $definition->addOption($this->foo);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:253:        $definition->addOption($this->foo2);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:262:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:265:        $definition->addOption($this->foo);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:266:        $definition->addOption($this->foo1);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:271:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:273:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:274:        $this->assertEquals($this->foo, $definition->getOption('foo'), '->getOption() returns a InputOption by its name');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:279:     * @expectedExceptionMessage The "--bar" option does not exist.
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:283:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:285:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:286:        $definition->getOption('bar');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:291:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:293:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:294:        $this->assertTrue($definition->hasOption('foo'), '->hasOption() returns true if a InputOption exists for the given name');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:295:        $this->assertFalse($definition->hasOption('bar'), '->hasOption() returns false if a InputOption exists for the given name');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:300:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:302:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:303:        $this->assertTrue($definition->hasShortcut('f'), '->hasShortcut() returns true if a InputOption exists for the given shortcut');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:304:        $this->assertFalse($definition->hasShortcut('b'), '->hasShortcut() returns false if a InputOption exists for the given shortcut');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:309:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:311:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:312:        $this->assertEquals($this->foo, $definition->getOptionForShortcut('f'), '->getOptionForShortcut() returns a InputOption by its shortcut');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:317:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:319:        $definition = new InputDefinition(array($this->multi));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:320:        $this->assertEquals($this->multi, $definition->getOptionForShortcut('m'), '->getOptionForShortcut() returns a InputOption by its shortcut');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:321:        $this->assertEquals($this->multi, $definition->getOptionForShortcut('mmm'), '->getOptionForShortcut() returns a InputOption by its shortcut');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:326:     * @expectedExceptionMessage The "-l" option does not exist.
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:330:        $this->initializeOptions();
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:332:        $definition = new InputDefinition(array($this->foo));
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:333:        $definition->getOptionForShortcut('l');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:356:        $this->assertSame($defaults, $definition->getOptionDefaults(), '->getOptionDefaults() returns the default values for all options');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:364:        $this->assertEquals($expectedSynopsis, $definition->getSynopsis(), $message ? '->getSynopsis() '.$message : '');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:370:            array(new InputDefinition(array(new InputOption('foo'))), '[--foo]', 'puts optional options in square brackets'),
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:371:            array(new InputDefinition(array(new InputOption('foo', 'f'))), '[-f|--foo]', 'separates shortcut with a pipe'),
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:372:            array(new InputDefinition(array(new InputOption('foo', 'f', InputOption::VALUE_REQUIRED))), '[-f|--foo FOO]', 'uses shortcut as value placeholder'),
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:373:            array(new InputDefinition(array(new InputOption('foo', 'f', InputOption::VALUE_OPTIONAL))), '[-f|--foo [FOO]]', 'puts optional values in square brackets'),
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:380:            array(new InputDefinition(array(new InputOption('foo'), new InputArgument('foo', InputArgument::REQUIRED))), '[--foo] [--] <foo>', 'puts [--] between options and arguments'),
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:387:        $this->assertEquals('[options] [--] [<cat>]', $definition->getSynopsis(true), '->getSynopsis(true) groups options in [options]');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:392:        $this->foo = new InputArgument('foo');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:393:        $this->bar = new InputArgument('bar');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:394:        $this->foo1 = new InputArgument('foo');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:395:        $this->foo2 = new InputArgument('foo2', InputArgument::REQUIRED);
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:400:        $this->foo = new InputOption('foo', 'f');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:401:        $this->bar = new InputOption('bar', 'b');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:402:        $this->foo1 = new InputOption('fooBis', 'f');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:403:        $this->foo2 = new InputOption('foo', 'p');
vendor/symfony/console/Tests/Input/InputDefinitionTest.php:404:        $this->multi = new InputOption('multi', 'm|mm|mmm');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:27:        $p = $r->getProperty('tokens');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:28:        $p->setAccessible(true);
vendor/symfony/console/Tests/Input/ArgvInputTest.php:30:        $this->assertEquals(array('foo'), $p->getValue($input), '__construct() automatically get its input from the argv server variable');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:36:        $input->bind(new InputDefinition(array(new InputArgument('name'))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:37:        $this->assertEquals(array('name' => 'foo'), $input->getArguments(), '->parse() parses required arguments');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:39:        $input->bind(new InputDefinition(array(new InputArgument('name'))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:40:        $this->assertEquals(array('name' => 'foo'), $input->getArguments(), '->parse() is stateless');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:49:        $input->bind(new InputDefinition($options));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:51:        $this->assertSame($expectedOptions, $input->getOptions(), $message);
vendor/symfony/console/Tests/Input/ArgvInputTest.php:58:                array('cli.php', '--foo'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:61:                '->parse() parses long options without a value',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:64:                array('cli.php', '--foo=bar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:67:                '->parse() parses long options with a required value (with a = separator)',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:70:                array('cli.php', '--foo', 'bar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:73:                '->parse() parses long options with a required value (with a space separator)',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:76:                array('cli.php', '--foo='),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:79:                '->parse() parses long options with optional value which is empty (with a = separator) as empty string',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:82:                array('cli.php', '--foo=', 'bar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:85:                '->parse() parses long options with optional value without value specified or an empty string (with a = separator) followed by an argument as empty string',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:88:                array('cli.php', 'bar', '--foo'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:91:                '->parse() parses long options with optional value which is empty (with a = separator) preceded by an argument',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:94:                array('cli.php', '--foo', '', 'bar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:97:                '->parse() parses long options with optional value which is empty as empty string even followed by an argument',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:100:                array('cli.php', '--foo'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:103:                '->parse() parses long options with optional value specified with no separator and no value as null',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:106:                array('cli.php', '-f'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:109:                '->parse() parses short options without a value',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:112:                array('cli.php', '-fbar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:115:                '->parse() parses short options with a required value (with no separator)',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:118:                array('cli.php', '-f', 'bar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:121:                '->parse() parses short options with a required value (with a space separator)',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:124:                array('cli.php', '-f', ''),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:127:                '->parse() parses short options with an optional empty value',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:130:                array('cli.php', '-f', '', 'foo'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:133:                '->parse() parses short options with an optional empty value followed by an argument',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:136:                array('cli.php', '-f', '', '-b'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:139:                '->parse() parses short options with an optional empty value followed by an option',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:142:                array('cli.php', '-f', '-b', 'foo'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:145:                '->parse() parses short options with an optional value which is not present',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:148:                array('cli.php', '-fb'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:151:                '->parse() parses short options when they are aggregated as a single one',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:154:                array('cli.php', '-fb', 'bar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:157:                '->parse() parses short options when they are aggregated as a single one and the last one has a required value',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:160:                array('cli.php', '-fb', 'bar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:163:                '->parse() parses short options when they are aggregated as a single one and the last one has an optional value',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:166:                array('cli.php', '-fbbar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:169:                '->parse() parses short options when they are aggregated as a single one and the last one has an optional value with no separator',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:172:                array('cli.php', '-fbbar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:175:                '->parse() parses short options when they are aggregated as a single one and one of them takes a value',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:186:            $this->expectException('RuntimeException');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:187:            $this->expectExceptionMessage($expectedExceptionMessage);
vendor/symfony/console/Tests/Input/ArgvInputTest.php:189:            $this->setExpectedException('RuntimeException', $expectedExceptionMessage);
vendor/symfony/console/Tests/Input/ArgvInputTest.php:193:        $input->bind($definition);
vendor/symfony/console/Tests/Input/ArgvInputTest.php:200:                array('cli.php', '--foo'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:202:                'The "--foo" option requires a value.',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:205:                array('cli.php', '-f'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:207:                'The "--foo" option requires a value.',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:210:                array('cli.php', '-ffoo'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:212:                'The "-o" option does not exist.',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:215:                array('cli.php', '--foo=bar'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:217:                'The "--foo" option does not accept a value.',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:235:                array('cli.php', '--foo'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:237:                'The "--foo" option does not exist.',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:240:                array('cli.php', '-f'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:242:                'The "-f" option does not exist.',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:245:                array('cli.php', '-1'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:247:                'The "-1" option does not exist.',
vendor/symfony/console/Tests/Input/ArgvInputTest.php:255:        $input->bind(new InputDefinition(array(new InputArgument('name', InputArgument::IS_ARRAY))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:257:        $this->assertEquals(array('name' => array('foo', 'bar', 'baz', 'bat')), $input->getArguments(), '->parse() parses array arguments');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:262:        $input = new ArgvInput(array('cli.php', '--name=foo', '--name=bar', '--name=baz'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:263:        $input->bind(new InputDefinition(array(new InputOption('name', null, InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:265:        $this->assertEquals(array('name' => array('foo', 'bar', 'baz')), $input->getOptions(), '->parse() parses array options ("--option=value" syntax)');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:267:        $input = new ArgvInput(array('cli.php', '--name', 'foo', '--name', 'bar', '--name', 'baz'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:268:        $input->bind(new InputDefinition(array(new InputOption('name', null, InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:269:        $this->assertEquals(array('name' => array('foo', 'bar', 'baz')), $input->getOptions(), '->parse() parses array options ("--option value" syntax)');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:271:        $input = new ArgvInput(array('cli.php', '--name=foo', '--name=bar', '--name='));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:272:        $input->bind(new InputDefinition(array(new InputOption('name', null, InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:273:        $this->assertSame(array('name' => array('foo', 'bar', '')), $input->getOptions(), '->parse() parses empty array options as null ("--option=value" syntax)');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:275:        $input = new ArgvInput(array('cli.php', '--name', 'foo', '--name', 'bar', '--name', '--anotherOption'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:276:        $input->bind(new InputDefinition(array(
vendor/symfony/console/Tests/Input/ArgvInputTest.php:280:        $this->assertSame(array('name' => array('foo', 'bar', null), 'anotherOption' => true), $input->getOptions(), '->parse() parses empty array options ("--option value" syntax)');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:285:        $input = new ArgvInput(array('cli.php', '--', '-1'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:286:        $input->bind(new InputDefinition(array(new InputArgument('number'))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:287:        $this->assertEquals(array('number' => '-1'), $input->getArguments(), '->parse() parses arguments with leading dashes as arguments after having encountered a double-dash sequence');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:289:        $input = new ArgvInput(array('cli.php', '-f', 'bar', '--', '-1'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:290:        $input->bind(new InputDefinition(array(new InputArgument('number'), new InputOption('foo', 'f', InputOption::VALUE_OPTIONAL))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:291:        $this->assertEquals(array('foo' => 'bar'), $input->getOptions(), '->parse() parses arguments with leading dashes as options before having encountered a double-dash sequence');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:292:        $this->assertEquals(array('number' => '-1'), $input->getArguments(), '->parse() parses arguments with leading dashes as arguments after having encountered a double-dash sequence');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:297:        $input = new ArgvInput(array('cli.php', '-f', 'bar', ''));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:298:        $input->bind(new InputDefinition(array(new InputArgument('empty'), new InputOption('foo', 'f', InputOption::VALUE_OPTIONAL))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:300:        $this->assertEquals(array('empty' => ''), $input->getArguments(), '->parse() parses empty string arguments');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:305:        $input = new ArgvInput(array('cli.php', '-fbbar'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:306:        $this->assertNull($input->getFirstArgument(), '->getFirstArgument() returns null when there is no arguments');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:308:        $input = new ArgvInput(array('cli.php', '-fbbar', 'foo'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:309:        $this->assertEquals('foo', $input->getFirstArgument(), '->getFirstArgument() returns the first argument from the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:314:        $input = new ArgvInput(array('cli.php', '-f', 'foo'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:315:        $this->assertTrue($input->hasParameterOption('-f'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:317:        $input = new ArgvInput(array('cli.php', '-etest'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:318:        $this->assertTrue($input->hasParameterOption('-e'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:319:        $this->assertFalse($input->hasParameterOption('-s'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:321:        $input = new ArgvInput(array('cli.php', '--foo', 'foo'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:322:        $this->assertTrue($input->hasParameterOption('--foo'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:325:        $this->assertFalse($input->hasParameterOption('--foo'), '->hasParameterOption() returns false if the given short option is not in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:327:        $input = new ArgvInput(array('cli.php', '--foo=bar'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:328:        $this->assertTrue($input->hasParameterOption('--foo'), '->hasParameterOption() returns true if the given option with provided value is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:333:        $input = new ArgvInput(array('cli.php', '-f', 'foo'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:334:        $this->assertTrue($input->hasParameterOption('-f', true), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:336:        $input = new ArgvInput(array('cli.php', '--foo', '--', 'foo'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:337:        $this->assertTrue($input->hasParameterOption('--foo', true), '->hasParameterOption() returns true if the given long option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:339:        $input = new ArgvInput(array('cli.php', '--foo=bar', 'foo'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:340:        $this->assertTrue($input->hasParameterOption('--foo', true), '->hasParameterOption() returns true if the given long option with provided value is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:342:        $input = new ArgvInput(array('cli.php', '--', '--foo'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:343:        $this->assertFalse($input->hasParameterOption('--foo', true), '->hasParameterOption() returns false if the given option is in the raw input but after an end of options signal');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:348:        $input = new ArgvInput(array('cli.php', '-fh'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:349:        // hasParameterOption does not know if the previous short option, -f,
vendor/symfony/console/Tests/Input/ArgvInputTest.php:350:        // takes a value or not. If -f takes a value, then -fh does NOT include
vendor/symfony/console/Tests/Input/ArgvInputTest.php:351:        // -h; Otherwise it does. Since we do not know which short options take
vendor/symfony/console/Tests/Input/ArgvInputTest.php:352:        // values, hasParameterOption does not support this use-case.
vendor/symfony/console/Tests/Input/ArgvInputTest.php:353:        $this->assertFalse($input->hasParameterOption('-h'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:354:        // hasParameterOption does detect that `-fh` contains `-f`, since
vendor/symfony/console/Tests/Input/ArgvInputTest.php:355:        // `-f` is the first short option in the set.
vendor/symfony/console/Tests/Input/ArgvInputTest.php:356:        $this->assertTrue($input->hasParameterOption('-f'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:359:        // $input->hasParameterOption('-f') && $input->hasParameterOption('-h')
vendor/symfony/console/Tests/Input/ArgvInputTest.php:361:        $this->assertTrue($input->hasParameterOption('-fh'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:362:        // In theory, if -fh is supported, then -hf should also work.
vendor/symfony/console/Tests/Input/ArgvInputTest.php:364:        $this->assertFalse($input->hasParameterOption('-hf'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:366:        $input = new ArgvInput(array('cli.php', '-f', '-h'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:367:        // If hasParameterOption('-fh') is supported for 'cli.php -fh', then
vendor/symfony/console/Tests/Input/ArgvInputTest.php:369:        // 'cli.php -f -h'. However, this is not supported.
vendor/symfony/console/Tests/Input/ArgvInputTest.php:370:        $this->assertFalse($input->hasParameterOption('-fh'), '->hasParameterOption() returns true if the given short option is in the raw input');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:375:        $input = new ArgvInput(array('cli.php', '-edev'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:377:        $this->assertTrue($input->hasParameterOption(array('-e', '')));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:379:        $this->assertFalse($input->hasParameterOption(array('-m', '')));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:381:        $this->assertEquals('dev', $input->getParameterOption(array('-e', '')));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:383:        $this->assertFalse($input->getParameterOption(array('-m', '')));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:388:        $input = new ArgvInput(array('cli.php', '-f', 'foo'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:389:        $this->assertEquals('-f foo', (string) $input);
vendor/symfony/console/Tests/Input/ArgvInputTest.php:391:        $input = new ArgvInput(array('cli.php', '-f', '--bar=foo', 'a b c d', "A\nB'C"));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:392:        $this->assertEquals('-f --bar=foo '.escapeshellarg('a b c d').' '.escapeshellarg("A\nB'C"), (string) $input);
vendor/symfony/console/Tests/Input/ArgvInputTest.php:401:        $this->assertEquals($expected, $input->getParameterOption($key, false, $onlyParams), '->getParameterOption() returns the expected value');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:407:            array(array('app/console', 'foo:bar', '-e', 'dev'), '-e', false, 'dev'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:408:            array(array('app/console', 'foo:bar', '--env=dev'), '--env', false, 'dev'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:409:            array(array('app/console', 'foo:bar', '-e', 'dev'), array('-e', '--env'), false, 'dev'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:410:            array(array('app/console', 'foo:bar', '--env=dev'), array('-e', '--env'), false, 'dev'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:411:            array(array('app/console', 'foo:bar', '--env=dev', '--en=1'), array('--en'), false, '1'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:412:            array(array('app/console', 'foo:bar', '--env=dev', '', '--en=1'), array('--en'), false, '1'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:413:            array(array('app/console', 'foo:bar', '--env', 'val'), '--env', false, 'val'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:414:            array(array('app/console', 'foo:bar', '--env', 'val', '--dummy'), '--env', false, 'val'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:415:            array(array('app/console', 'foo:bar', '--', '--env=dev'), '--env', false, 'dev'),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:416:            array(array('app/console', 'foo:bar', '--', '--env=dev'), '--env', true, false),
vendor/symfony/console/Tests/Input/ArgvInputTest.php:422:        $input = new ArgvInput(array('cli.php', '-'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:423:        $input->bind(new InputDefinition(array(new InputArgument('file'))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:424:        $this->assertEquals(array('file' => '-'), $input->getArguments(), '->parse() parses single dash as an argument');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:429:        $input = new ArgvInput(array('cli.php', '--foo=', 'bar'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:430:        $input->bind(new InputDefinition(array(new InputOption('foo', 'f', InputOption::VALUE_OPTIONAL), new InputArgument('name', InputArgument::REQUIRED))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:431:        $this->assertEquals(array('foo' => null), $input->getOptions(), '->parse() parses optional options with empty value as null');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:432:        $this->assertEquals(array('name' => 'bar'), $input->getArguments(), '->parse() parses required arguments');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:434:        $input = new ArgvInput(array('cli.php', '--foo=0', 'bar'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:435:        $input->bind(new InputDefinition(array(new InputOption('foo', 'f', InputOption::VALUE_OPTIONAL), new InputArgument('name', InputArgument::REQUIRED))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:436:        $this->assertEquals(array('foo' => '0'), $input->getOptions(), '->parse() parses optional options with empty value as null');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:437:        $this->assertEquals(array('name' => 'bar'), $input->getArguments(), '->parse() parses required arguments');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:442:        $input = new ArgvInput(array('cli.php', '--foo=', 'bar'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:443:        $input->bind(new InputDefinition(array(new InputOption('foo', 'f', InputOption::VALUE_OPTIONAL), new InputArgument('name', InputArgument::OPTIONAL))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:444:        $this->assertEquals(array('foo' => null), $input->getOptions(), '->parse() parses optional options with empty value as null');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:445:        $this->assertEquals(array('name' => 'bar'), $input->getArguments(), '->parse() parses optional arguments');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:447:        $input = new ArgvInput(array('cli.php', '--foo=0', 'bar'));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:448:        $input->bind(new InputDefinition(array(new InputOption('foo', 'f', InputOption::VALUE_OPTIONAL), new InputArgument('name', InputArgument::OPTIONAL))));
vendor/symfony/console/Tests/Input/ArgvInputTest.php:449:        $this->assertEquals(array('foo' => '0'), $input->getOptions(), '->parse() parses optional options with empty value as null');
vendor/symfony/console/Tests/Input/ArgvInputTest.php:450:        $this->assertEquals(array('name' => 'bar'), $input->getArguments(), '->parse() parses optional arguments');
vendor/symfony/console/Tests/Input/InputOptionTest.php:22:        $this->assertEquals('foo', $option->getName(), '__construct() takes a name as its first argument');
vendor/symfony/console/Tests/Input/InputOptionTest.php:23:        $option = new InputOption('--foo');
vendor/symfony/console/Tests/Input/InputOptionTest.php:24:        $this->assertEquals('foo', $option->getName(), '__construct() removes the leading -- of the option name');
vendor/symfony/console/Tests/Input/InputOptionTest.php:39:        $this->assertEquals('f', $option->getShortcut(), '__construct() can take a shortcut as its second argument');
vendor/symfony/console/Tests/Input/InputOptionTest.php:40:        $option = new InputOption('foo', '-f|-ff|fff');
vendor/symfony/console/Tests/Input/InputOptionTest.php:41:        $this->assertEquals('f|ff|fff', $option->getShortcut(), '__construct() removes the leading - of the shortcuts');
vendor/symfony/console/Tests/Input/InputOptionTest.php:42:        $option = new InputOption('foo', array('f', 'ff', '-fff'));
vendor/symfony/console/Tests/Input/InputOptionTest.php:43:        $this->assertEquals('f|ff|fff', $option->getShortcut(), '__construct() removes the leading - of the shortcuts');
vendor/symfony/console/Tests/Input/InputOptionTest.php:45:        $this->assertNull($option->getShortcut(), '__construct() makes the shortcut null by default');
vendor/symfony/console/Tests/Input/InputOptionTest.php:51:        $this->assertFalse($option->acceptValue(), '__construct() gives a "InputOption::VALUE_NONE" mode by default');
vendor/symfony/console/Tests/Input/InputOptionTest.php:52:        $this->assertFalse($option->isValueRequired(), '__construct() gives a "InputOption::VALUE_NONE" mode by default');
vendor/symfony/console/Tests/Input/InputOptionTest.php:53:        $this->assertFalse($option->isValueOptional(), '__construct() gives a "InputOption::VALUE_NONE" mode by default');
vendor/symfony/console/Tests/Input/InputOptionTest.php:56:        $this->assertFalse($option->acceptValue(), '__construct() can take "InputOption::VALUE_NONE" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:57:        $this->assertFalse($option->isValueRequired(), '__construct() can take "InputOption::VALUE_NONE" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:58:        $this->assertFalse($option->isValueOptional(), '__construct() can take "InputOption::VALUE_NONE" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:61:        $this->assertFalse($option->acceptValue(), '__construct() can take "InputOption::VALUE_NONE" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:62:        $this->assertFalse($option->isValueRequired(), '__construct() can take "InputOption::VALUE_NONE" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:63:        $this->assertFalse($option->isValueOptional(), '__construct() can take "InputOption::VALUE_NONE" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:66:        $this->assertTrue($option->acceptValue(), '__construct() can take "InputOption::VALUE_REQUIRED" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:67:        $this->assertTrue($option->isValueRequired(), '__construct() can take "InputOption::VALUE_REQUIRED" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:68:        $this->assertFalse($option->isValueOptional(), '__construct() can take "InputOption::VALUE_REQUIRED" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:71:        $this->assertTrue($option->acceptValue(), '__construct() can take "InputOption::VALUE_OPTIONAL" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:72:        $this->assertFalse($option->isValueRequired(), '__construct() can take "InputOption::VALUE_OPTIONAL" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:73:        $this->assertTrue($option->isValueOptional(), '__construct() can take "InputOption::VALUE_OPTIONAL" as its mode');
vendor/symfony/console/Tests/Input/InputOptionTest.php:82:            $this->expectException('InvalidArgumentException');
vendor/symfony/console/Tests/Input/InputOptionTest.php:83:            $this->expectExceptionMessage(sprintf('Option mode "%s" is not valid.', $mode));
vendor/symfony/console/Tests/Input/InputOptionTest.php:85:            $this->setExpectedException('InvalidArgumentException', sprintf('Option mode "%s" is not valid.', $mode));
vendor/symfony/console/Tests/Input/InputOptionTest.php:95:            array(-1),
vendor/symfony/console/Tests/Input/InputOptionTest.php:112:        new InputOption('--');
vendor/symfony/console/Tests/Input/InputOptionTest.php:120:        new InputOption('foo', '-');
vendor/symfony/console/Tests/Input/InputOptionTest.php:126:        $this->assertTrue($option->isArray(), '->isArray() returns true if the option can be an array');
vendor/symfony/console/Tests/Input/InputOptionTest.php:128:        $this->assertFalse($option->isArray(), '->isArray() returns false if the option can not be an array');
vendor/symfony/console/Tests/Input/InputOptionTest.php:134:        $this->assertEquals('Some description', $option->getDescription(), '->getDescription() returns the description message');
vendor/symfony/console/Tests/Input/InputOptionTest.php:140:        $this->assertEquals('default', $option->getDefault(), '->getDefault() returns the default value');
vendor/symfony/console/Tests/Input/InputOptionTest.php:143:        $this->assertEquals('default', $option->getDefault(), '->getDefault() returns the default value');
vendor/symfony/console/Tests/Input/InputOptionTest.php:146:        $this->assertNull($option->getDefault(), '->getDefault() returns null if no default value is configured');
vendor/symfony/console/Tests/Input/InputOptionTest.php:149:        $this->assertEquals(array(), $option->getDefault(), '->getDefault() returns an empty array if option is an array');
vendor/symfony/console/Tests/Input/InputOptionTest.php:152:        $this->assertFalse($option->getDefault(), '->getDefault() returns false if the option does not take a value');
vendor/symfony/console/Tests/Input/InputOptionTest.php:158:        $option->setDefault(null);
vendor/symfony/console/Tests/Input/InputOptionTest.php:159:        $this->assertNull($option->getDefault(), '->setDefault() can reset the default value by passing null');
vendor/symfony/console/Tests/Input/InputOptionTest.php:160:        $option->setDefault('another');
vendor/symfony/console/Tests/Input/InputOptionTest.php:161:        $this->assertEquals('another', $option->getDefault(), '->setDefault() changes the default value');
vendor/symfony/console/Tests/Input/InputOptionTest.php:164:        $option->setDefault(array(1, 2));
vendor/symfony/console/Tests/Input/InputOptionTest.php:165:        $this->assertEquals(array(1, 2), $option->getDefault(), '->setDefault() changes the default value');
vendor/symfony/console/Tests/Input/InputOptionTest.php:175:        $option->setDefault('default');
vendor/symfony/console/Tests/Input/InputOptionTest.php:185:        $option->setDefault('default');
vendor/symfony/console/Tests/Input/InputOptionTest.php:192:        $this->assertTrue($option->equals($option2));
vendor/symfony/console/Tests/Input/InputOptionTest.php:196:        $this->assertFalse($option->equals($option2));
vendor/symfony/console/Tests/Input/InputOptionTest.php:200:        $this->assertFalse($option->equals($option2));
vendor/symfony/console/Tests/Input/InputOptionTest.php:204:        $this->assertFalse($option->equals($option2));
vendor/symfony/console/Tests/Input/InputOptionTest.php:208:        $this->assertFalse($option->equals($option2));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:23:        $this->assertEquals('foo<>bar', $formatter->format('foo<>bar'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:30:        $this->assertEquals('foo<bar', $formatter->format('foo\\<bar'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:31:        $this->assertEquals('foo << bar', $formatter->format('foo << bar'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:32:        $this->assertEquals('foo << bar \\', $formatter->format('foo << bar \\'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:33:        $this->assertEquals("foo << \033[32mbar \\ baz\033[39m \\", $formatter->format('foo << <info>bar \\ baz</info> \\'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:34:        $this->assertEquals('<info>some info</info>', $formatter->format('\\<info>some info\\</info>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:35:        $this->assertEquals('\\<info>some info\\</info>', OutputFormatter::escape('<info>some info</info>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:37:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:39:            $formatter->format('<comment>Symfony\Component\Console does work very well!</comment>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:47:        $this->assertTrue($formatter->hasStyle('error'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:48:        $this->assertTrue($formatter->hasStyle('info'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:49:        $this->assertTrue($formatter->hasStyle('comment'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:50:        $this->assertTrue($formatter->hasStyle('question'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:52:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:54:            $formatter->format('<error>some error</error>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:56:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:58:            $formatter->format('<info>some info</info>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:60:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:62:            $formatter->format('<comment>some comment</comment>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:64:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:66:            $formatter->format('<question>some question</question>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:74:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:76:            $formatter->format('<error>some <info>some info</info> error</error>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:84:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:86:            $formatter->format('<error>some error</error><info>some info</info>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:94:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:96:            $formatter->format('(<info>>=2.0,<2.3</info>)')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:104:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:106:            $formatter->format('(<info>'.$formatter->escape('z>=2.0,<\\<<a2.3\\').'</info>)')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:109:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:111:            $formatter->format('<info>'.$formatter->escape('<error>some error</error>').'</info>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:119:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:121:            $formatter->format('<error>error<info>info<comment>comment</info>error</error>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:130:        $formatter->setStyle('test', $style);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:132:        $this->assertEquals($style, $formatter->getStyle('test'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:133:        $this->assertNotEquals($style, $formatter->getStyle('info'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:136:        $formatter->setStyle('b', $style);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:138:        $this->assertEquals("\033[34;47msome \033[39;49m\033[34;47mcustom\033[39;49m\033[34;47m msg\033[39;49m", $formatter->format('<test>some <b>custom</b> msg</test>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:146:        $formatter->setStyle('info', $style);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:148:        $this->assertEquals("\033[34;47msome custom msg\033[39;49m", $formatter->format('<info>some custom msg</info>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:155:        $this->assertEquals("\033[34;41msome text\033[39;49m", $formatter->format('<fg=blue;bg=red>some text</>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:156:        $this->assertEquals("\033[34;41msome text\033[39;49m", $formatter->format('<fg=blue;bg=red>some text</fg=blue;bg=red>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:168:        $styleString = substr($tag, 1, -1);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:171:        $method->setAccessible(true);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:172:        $result = $method->invoke($formatter, $styleString);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:174:            $this->assertFalse($result);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:176:            $this->assertSame($expected, $formatter->format($expected));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:179:            $this->assertInstanceOf(OutputFormatterStyle::class, $result);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:180:            $this->assertSame($expected, $formatter->format($tag.$input.'</>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:181:            $this->assertSame($expected, $formatter->format($tag.$input.'</'.$styleString.'>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:207:        $formatter->format($tag);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:224:        $this->assertEquals("\033[32msome \033[39m\033[32m<tag>\033[39m\033[32m \033[39m\033[32m<setting=value>\033[39m\033[32m styled \033[39m\033[32m<p>\033[39m\033[32msingle-char tag\033[39m\033[32m</p>\033[39m", $formatter->format('<info>some <tag> <setting=value> styled <p>single-char tag</p></info>'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:231:        $this->assertEquals("\033[37;41msome error\033[39;49m".$long, $formatter->format('<error>some error</error>'.$long));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:237:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:238:            'some info', $formatter->format(new TableCell())
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:246:        $this->assertTrue($formatter->hasStyle('error'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:247:        $this->assertTrue($formatter->hasStyle('info'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:248:        $this->assertTrue($formatter->hasStyle('comment'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:249:        $this->assertTrue($formatter->hasStyle('question'));
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:251:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:252:            'some error', $formatter->format('<error>some error</error>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:254:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:255:            'some info', $formatter->format('<info>some info</info>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:257:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:258:            'some comment', $formatter->format('<comment>some comment</comment>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:260:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:261:            'some question', $formatter->format('<question>some question</question>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:263:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:264:            'some text with inline style', $formatter->format('<fg=red>some text with inline style</>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:267:        $formatter->setDecorated(true);
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:269:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:270:            "\033[37;41msome error\033[39;49m", $formatter->format('<error>some error</error>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:272:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:273:            "\033[32msome info\033[39m", $formatter->format('<info>some info</info>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:275:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:276:            "\033[33msome comment\033[39m", $formatter->format('<comment>some comment</comment>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:278:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:279:            "\033[30;46msome question\033[39;49m", $formatter->format('<question>some question</question>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:281:        $this->assertEquals(
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:282:            "\033[31msome text with inline style\033[39m", $formatter->format('<fg=red>some text with inline style</>')
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:290:        $this->assertEquals(<<<EOF
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:294:            , $formatter->format(<<<'EOF'
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:300:        $this->assertEquals(<<<EOF
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:304:            , $formatter->format(<<<'EOF'
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:310:        $this->assertEquals(<<<EOF
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:315:            , $formatter->format(<<<'EOF'
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:322:        $this->assertEquals(<<<EOF
vendor/symfony/console/Tests/Formatter/OutputFormatterTest.php:328:            , $formatter->format(<<<'EOF'
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:22:        $this->assertEquals("\033[32;40;1;4mfoo\033[39;49;22;24m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:25:        $this->assertEquals("\033[31;5mfoo\033[39;25m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:28:        $this->assertEquals("\033[47mfoo\033[49m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:35:        $style->setForeground('black');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:36:        $this->assertEquals("\033[30mfoo\033[39m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:38:        $style->setForeground('blue');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:39:        $this->assertEquals("\033[34mfoo\033[39m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:41:        $style->setForeground('default');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:42:        $this->assertEquals("\033[39mfoo\033[39m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:44:        $this->{method_exists($this, $_ = 'expectException') ? $_ : 'setExpectedException'}('InvalidArgumentException');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:45:        $style->setForeground('undefined-color');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:52:        $style->setBackground('black');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:53:        $this->assertEquals("\033[40mfoo\033[49m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:55:        $style->setBackground('yellow');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:56:        $this->assertEquals("\033[43mfoo\033[49m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:58:        $style->setBackground('default');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:59:        $this->assertEquals("\033[49mfoo\033[49m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:61:        $this->{method_exists($this, $_ = 'expectException') ? $_ : 'setExpectedException'}('InvalidArgumentException');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:62:        $style->setBackground('undefined-color');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:69:        $style->setOptions(array('reverse', 'conceal'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:70:        $this->assertEquals("\033[7;8mfoo\033[27;28m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:72:        $style->setOption('bold');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:73:        $this->assertEquals("\033[7;8;1mfoo\033[27;28;22m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:75:        $style->unsetOption('reverse');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:76:        $this->assertEquals("\033[8;1mfoo\033[28;22m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:78:        $style->setOption('bold');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:79:        $this->assertEquals("\033[8;1mfoo\033[28;22m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:81:        $style->setOptions(array('bold'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:82:        $this->assertEquals("\033[1mfoo\033[22m", $style->apply('foo'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:85:            $style->setOption('foo');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:86:            $this->fail('->setOption() throws an \InvalidArgumentException when the option does not exist in the available options');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:88:            $this->assertInstanceOf('\InvalidArgumentException', $e, '->setOption() throws an \InvalidArgumentException when the option does not exist in the available options');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:89:            $this->assertContains('Invalid option specified: "foo"', $e->getMessage(), '->setOption() throws an \InvalidArgumentException when the option does not exist in the available options');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:93:            $style->unsetOption('foo');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:94:            $this->fail('->unsetOption() throws an \InvalidArgumentException when the option does not exist in the available options');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:96:            $this->assertInstanceOf('\InvalidArgumentException', $e, '->unsetOption() throws an \InvalidArgumentException when the option does not exist in the available options');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleTest.php:97:            $this->assertContains('Invalid option specified: "foo"', $e->getMessage(), '->unsetOption() throws an \InvalidArgumentException when the option does not exist in the available options');
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:23:        $stack->push($s1 = new OutputFormatterStyle('white', 'black'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:24:        $stack->push($s2 = new OutputFormatterStyle('yellow', 'blue'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:26:        $this->assertEquals($s2, $stack->getCurrent());
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:28:        $stack->push($s3 = new OutputFormatterStyle('green', 'red'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:30:        $this->assertEquals($s3, $stack->getCurrent());
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:36:        $stack->push($s1 = new OutputFormatterStyle('white', 'black'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:37:        $stack->push($s2 = new OutputFormatterStyle('yellow', 'blue'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:39:        $this->assertEquals($s2, $stack->pop());
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:40:        $this->assertEquals($s1, $stack->pop());
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:48:        $this->assertEquals($style, $stack->pop());
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:54:        $stack->push($s1 = new OutputFormatterStyle('white', 'black'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:55:        $stack->push($s2 = new OutputFormatterStyle('yellow', 'blue'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:56:        $stack->push($s3 = new OutputFormatterStyle('green', 'red'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:58:        $this->assertEquals($s2, $stack->pop($s2));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:59:        $this->assertEquals($s1, $stack->pop());
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:68:        $stack->push(new OutputFormatterStyle('white', 'black'));
vendor/symfony/console/Tests/Formatter/OutputFormatterStyleStackTest.php:69:        $stack->pop(new OutputFormatterStyle('yellow', 'blue'));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:33:        $logger = $this->getLogger();
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:35:            ->expects($this->once())
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:36:            ->method('error')
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:37:            ->with('Error thrown while running command "{command}". Message: "{message}"', array('exception' => $error, 'command' => 'test:run --foo=baz buzz', 'message' => 'An error occurred'))
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:41:        $listener->onConsoleError(new ConsoleErrorEvent(new ArgvInput(array('console.php', 'test:run', '--foo=baz', 'buzz')), $this->getOutput(), $error, new Command('test:run')));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:48:        $logger = $this->getLogger();
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:50:            ->expects($this->once())
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:51:            ->method('error')
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:52:            ->with('An error occurred while using the console. Message: "{message}"', array('exception' => $error, 'message' => 'An error occurred'))
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:56:        $listener->onConsoleError(new ConsoleErrorEvent(new NonStringInput(), $this->getOutput(), $error));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:61:        $logger = $this->getLogger();
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:63:            ->expects($this->once())
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:64:            ->method('debug')
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:65:            ->with('Command "{command}" exited with code "{code}"', array('command' => 'test:run', 'code' => 255))
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:69:        $listener->onConsoleTerminate($this->getConsoleTerminateEvent(new ArgvInput(array('console.php', 'test:run')), 255));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:74:        $logger = $this->getLogger();
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:76:            ->expects($this->never())
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:77:            ->method('debug')
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:81:        $listener->onConsoleTerminate($this->getConsoleTerminateEvent(new ArgvInput(array('console.php', 'test:run')), 0));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:86:        $this->assertEquals(
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:88:                'console.error' => array('onConsoleError', -128),
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:89:                'console.terminate' => array('onConsoleTerminate', -128),
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:97:        $logger = $this->getLogger();
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:99:            ->expects($this->exactly(3))
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:100:            ->method('debug')
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:101:            ->with('Command "{command}" exited with code "{code}"', array('command' => 'test:run --foo=bar', 'code' => 255))
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:105:        $listener->onConsoleTerminate($this->getConsoleTerminateEvent(new ArgvInput(array('console.php', 'test:run', '--foo=bar')), 255));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:106:        $listener->onConsoleTerminate($this->getConsoleTerminateEvent(new ArrayInput(array('name' => 'test:run', '--foo' => 'bar')), 255));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:107:        $listener->onConsoleTerminate($this->getConsoleTerminateEvent(new StringInput('test:run --foo=bar'), 255));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:112:        $logger = $this->getLogger();
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:114:            ->expects($this->once())
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:115:            ->method('debug')
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:116:            ->with('Command "{command}" exited with code "{code}"', array('command' => 'test:run', 'code' => 255))
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:120:        $listener->onConsoleTerminate($this->getConsoleTerminateEvent($this->getMockBuilder(InputInterface::class)->getMock(), 255));
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:125:        return $this->getMockForAbstractClass(LoggerInterface::class);
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:130:        return new ConsoleTerminateEvent(new Command('test:run'), $input, $this->getOutput(), $exitCode);
vendor/symfony/console/Tests/EventListener/ErrorListenerTest.php:135:        return $this->getMockBuilder(OutputInterface::class)->getMock();
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:34:        $this->commandLoaderServiceId = $commandLoaderServiceId;
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:35:        $this->commandTag = $commandTag;
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:40:        $commandServices = $container->findTaggedServiceIds($this->commandTag, true);
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:47:            $definition = $container->getDefinition($id);
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:48:            $class = $container->getParameterBag()->resolveValue($definition->getClass());
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:55:                if (!$r = $container->getReflectionClass($class)) {
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:58:                if (!$r->isSubclassOf(Command::class)) {
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:59:                    throw new InvalidArgumentException(sprintf('The service "%s" tagged "%s" must be a subclass of "%s".', $id, $this->commandTag, Command::class));
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:65:                if (isset($serviceIds[$commandId]) || $container->hasAlias($commandId)) {
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:68:                if (!$definition->isPublic() || $definition->isPrivate()) {
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:69:                    $container->setAlias($commandId, $id)->setPublic(true);
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:91:            $definition->addMethodCall('setName', array($commandName));
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:94:                $definition->addMethodCall('setAliases', array($aliases));
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:99:            ->register($this->commandLoaderServiceId, ContainerCommandLoader::class)
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:100:            ->setPublic(true)
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:101:            ->setArguments(array(ServiceLocatorTagPass::register($container, $lazyCommandRefs), $lazyCommandMap));
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:103:        $container->setParameter('console.command.ids', $serviceIds);
vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:104:        $container->setParameter('console.lazy_command.ids', $lazyServiceIds);
vendor/symfony/console/Style/OutputStyle.php:30:        $this->output = $output;
vendor/symfony/console/Style/OutputStyle.php:38:        $this->output->write(str_repeat(PHP_EOL, $count));
vendor/symfony/console/Style/OutputStyle.php:48:        return new ProgressBar($this->output, $max);
vendor/symfony/console/Style/OutputStyle.php:56:        $this->output->write($messages, $newline, $type);
vendor/symfony/console/Style/OutputStyle.php:64:        $this->output->writeln($messages, $type);
vendor/symfony/console/Style/OutputStyle.php:72:        $this->output->setVerbosity($level);
vendor/symfony/console/Style/OutputStyle.php:80:        return $this->output->getVerbosity();
vendor/symfony/console/Style/OutputStyle.php:88:        $this->output->setDecorated($decorated);
vendor/symfony/console/Style/OutputStyle.php:96:        return $this->output->isDecorated();
vendor/symfony/console/Style/OutputStyle.php:104:        $this->output->setFormatter($formatter);
vendor/symfony/console/Style/OutputStyle.php:112:        return $this->output->getFormatter();
vendor/symfony/console/Style/OutputStyle.php:120:        return $this->output->isQuiet();
vendor/symfony/console/Style/OutputStyle.php:128:        return $this->output->isVerbose();
vendor/symfony/console/Style/OutputStyle.php:136:        return $this->output->isVeryVerbose();
vendor/symfony/console/Style/OutputStyle.php:144:        return $this->output->isDebug();
vendor/symfony/console/Style/OutputStyle.php:149:        if (!$this->output instanceof ConsoleOutputInterface) {
vendor/symfony/console/Style/OutputStyle.php:150:            return $this->output;
vendor/symfony/console/Style/OutputStyle.php:153:        return $this->output->getErrorOutput();
vendor/symfony/console/Style/SymfonyStyle.php:45:        $this->input = $input;
vendor/symfony/console/Style/SymfonyStyle.php:46:        $this->bufferedOutput = new BufferedOutput($output->getVerbosity(), false, clone $output->getFormatter());
vendor/symfony/console/Style/SymfonyStyle.php:48:        $width = (new Terminal())->getWidth() ?: self::MAX_LINE_LENGTH;
vendor/symfony/console/Style/SymfonyStyle.php:49:        $this->lineLength = min($width - (int) (DIRECTORY_SEPARATOR === '\\'), self::MAX_LINE_LENGTH);
vendor/symfony/console/Style/SymfonyStyle.php:68:        $this->autoPrependBlock();
vendor/symfony/console/Style/SymfonyStyle.php:69:        $this->writeln($this->createBlock($messages, $type, $style, $prefix, $padding, $escape));
vendor/symfony/console/Style/SymfonyStyle.php:70:        $this->newLine();
vendor/symfony/console/Style/SymfonyStyle.php:78:        $this->autoPrependBlock();
vendor/symfony/console/Style/SymfonyStyle.php:79:        $this->writeln(array(
vendor/symfony/console/Style/SymfonyStyle.php:81:            sprintf('<comment>%s</>', str_repeat('=', Helper::strlenWithoutDecoration($this->getFormatter(), $message))),
vendor/symfony/console/Style/SymfonyStyle.php:83:        $this->newLine();
vendor/symfony/console/Style/SymfonyStyle.php:91:        $this->autoPrependBlock();
vendor/symfony/console/Style/SymfonyStyle.php:92:        $this->writeln(array(
vendor/symfony/console/Style/SymfonyStyle.php:94:            sprintf('<comment>%s</>', str_repeat('-', Helper::strlenWithoutDecoration($this->getFormatter(), $message))),
vendor/symfony/console/Style/SymfonyStyle.php:96:        $this->newLine();
vendor/symfony/console/Style/SymfonyStyle.php:104:        $this->autoPrependText();
vendor/symfony/console/Style/SymfonyStyle.php:109:        $this->writeln($elements);
vendor/symfony/console/Style/SymfonyStyle.php:110:        $this->newLine();
vendor/symfony/console/Style/SymfonyStyle.php:118:        $this->autoPrependText();
vendor/symfony/console/Style/SymfonyStyle.php:122:            $this->writeln(sprintf(' %s', $message));
vendor/symfony/console/Style/SymfonyStyle.php:133:        $this->block($message, null, null, '<fg=default;bg=default> // </>', false, false);
vendor/symfony/console/Style/SymfonyStyle.php:141:        $this->block($message, 'OK', 'fg=black;bg=green', ' ', true);
vendor/symfony/console/Style/SymfonyStyle.php:149:        $this->block($message, 'ERROR', 'fg=white;bg=red', ' ', true);
vendor/symfony/console/Style/SymfonyStyle.php:157:        $this->block($message, 'WARNING', 'fg=white;bg=red', ' ', true);
vendor/symfony/console/Style/SymfonyStyle.php:165:        $this->block($message, 'NOTE', 'fg=yellow', ' ! ');
vendor/symfony/console/Style/SymfonyStyle.php:173:        $this->block($message, 'CAUTION', 'fg=white;bg=red', ' ! ', true);
vendor/symfony/console/Style/SymfonyStyle.php:181:        $style = clone Table::getStyleDefinition('symfony-style-guide');
vendor/symfony/console/Style/SymfonyStyle.php:182:        $style->setCellHeaderFormat('<info>%s</info>');
vendor/symfony/console/Style/SymfonyStyle.php:185:        $table->setHeaders($headers);
vendor/symfony/console/Style/SymfonyStyle.php:186:        $table->setRows($rows);
vendor/symfony/console/Style/SymfonyStyle.php:187:        $table->setStyle($style);
vendor/symfony/console/Style/SymfonyStyle.php:189:        $table->render();
vendor/symfony/console/Style/SymfonyStyle.php:190:        $this->newLine();
vendor/symfony/console/Style/SymfonyStyle.php:199:        $question->setValidator($validator);
vendor/symfony/console/Style/SymfonyStyle.php:201:        return $this->askQuestion($question);
vendor/symfony/console/Style/SymfonyStyle.php:211:        $question->setHidden(true);
vendor/symfony/console/Style/SymfonyStyle.php:212:        $question->setValidator($validator);
vendor/symfony/console/Style/SymfonyStyle.php:214:        return $this->askQuestion($question);
vendor/symfony/console/Style/SymfonyStyle.php:222:        return $this->askQuestion(new ConfirmationQuestion($question, $default));
vendor/symfony/console/Style/SymfonyStyle.php:235:        return $this->askQuestion(new ChoiceQuestion($question, $choices, $default));
vendor/symfony/console/Style/SymfonyStyle.php:243:        $this->progressBar = $this->createProgressBar($max);
vendor/symfony/console/Style/SymfonyStyle.php:244:        $this->progressBar->start();
vendor/symfony/console/Style/SymfonyStyle.php:252:        $this->getProgressBar()->advance($step);
vendor/symfony/console/Style/SymfonyStyle.php:260:        $this->getProgressBar()->finish();
vendor/symfony/console/Style/SymfonyStyle.php:261:        $this->newLine(2);
vendor/symfony/console/Style/SymfonyStyle.php:262:        $this->progressBar = null;
vendor/symfony/console/Style/SymfonyStyle.php:273:            $progressBar->setEmptyBarCharacter('░'); // light shade character \u2591
vendor/symfony/console/Style/SymfonyStyle.php:274:            $progressBar->setProgressCharacter('');
vendor/symfony/console/Style/SymfonyStyle.php:275:            $progressBar->setBarCharacter('▓'); // dark shade character \u2593
vendor/symfony/console/Style/SymfonyStyle.php:286:        if ($this->input->isInteractive()) {
vendor/symfony/console/Style/SymfonyStyle.php:287:            $this->autoPrependBlock();
vendor/symfony/console/Style/SymfonyStyle.php:290:        if (!$this->questionHelper) {
vendor/symfony/console/Style/SymfonyStyle.php:291:            $this->questionHelper = new SymfonyQuestionHelper();
vendor/symfony/console/Style/SymfonyStyle.php:294:        $answer = $this->questionHelper->ask($this->input, $this, $question);
vendor/symfony/console/Style/SymfonyStyle.php:296:        if ($this->input->isInteractive()) {
vendor/symfony/console/Style/SymfonyStyle.php:297:            $this->newLine();
vendor/symfony/console/Style/SymfonyStyle.php:298:            $this->bufferedOutput->write("\n");
vendor/symfony/console/Style/SymfonyStyle.php:310:        $this->bufferedOutput->writeln($this->reduceBuffer($messages), $type);
vendor/symfony/console/Style/SymfonyStyle.php:319:        $this->bufferedOutput->write($this->reduceBuffer($messages), $newline, $type);
vendor/symfony/console/Style/SymfonyStyle.php:328:        $this->bufferedOutput->write(str_repeat("\n", $count));
vendor/symfony/console/Style/SymfonyStyle.php:338:        return new self($this->input, $this->getErrorOutput());
vendor/symfony/console/Style/SymfonyStyle.php:346:        if (!$this->progressBar) {
vendor/symfony/console/Style/SymfonyStyle.php:350:        return $this->progressBar;
vendor/symfony/console/Style/SymfonyStyle.php:355:        $chars = substr(str_replace(PHP_EOL, "\n", $this->bufferedOutput->fetch()), -2);
vendor/symfony/console/Style/SymfonyStyle.php:358:            return $this->newLine(); //empty history, so we should start with a new line.
vendor/symfony/console/Style/SymfonyStyle.php:361:        $this->newLine(2 - substr_count($chars, "\n"));
vendor/symfony/console/Style/SymfonyStyle.php:366:        $fetched = $this->bufferedOutput->fetch();
vendor/symfony/console/Style/SymfonyStyle.php:368:        if ("\n" !== substr($fetched, -1)) {
vendor/symfony/console/Style/SymfonyStyle.php:369:            $this->newLine();
vendor/symfony/console/Style/SymfonyStyle.php:378:            return substr($value, -4);
vendor/symfony/console/Style/SymfonyStyle.php:379:        }, array_merge(array($this->bufferedOutput->fetch()), (array) $messages));
vendor/symfony/console/Style/SymfonyStyle.php:385:        $prefixLength = Helper::strlenWithoutDecoration($this->getFormatter(), $prefix);
vendor/symfony/console/Style/SymfonyStyle.php:400:            $lines = array_merge($lines, explode(PHP_EOL, wordwrap($message, $this->lineLength - $prefixLength - $indentLength, PHP_EOL, true)));
vendor/symfony/console/Style/SymfonyStyle.php:402:            if (count($messages) > 1 && $key < count($messages) - 1) {
vendor/symfony/console/Style/SymfonyStyle.php:408:        if ($padding && $this->isDecorated()) {
vendor/symfony/console/Style/SymfonyStyle.php:420:            $line .= str_repeat(' ', $this->lineLength - Helper::strlenWithoutDecoration($this->getFormatter(), $line));
vendor/symfony/console/Terminal.php:105:            if (preg_match('/--------+\r?\n.+?(\d+)\r?\n.+?(\d+)\r?\n/', $info, $matches)) {
vendor/symfony/console/Terminal.php:112:     * Runs and parses stty -a if it's available, suppressing any error output.
vendor/symfony/console/Terminal.php:127:        $process = proc_open('stty -a | grep columns', $descriptorspec, $pipes, null, null, array('suppress_errors' => true));
vendor/symfony/console/CommandLoader/ContainerCommandLoader.php:9: * Loads commands from a PSR-11 container.
vendor/symfony/console/CommandLoader/ContainerCommandLoader.php:24:        $this->container = $container;
vendor/symfony/console/CommandLoader/ContainerCommandLoader.php:25:        $this->commandMap = $commandMap;
vendor/symfony/console/CommandLoader/ContainerCommandLoader.php:33:        if (!$this->has($name)) {
vendor/symfony/console/CommandLoader/ContainerCommandLoader.php:37:        return $this->container->get($this->commandMap[$name]);
vendor/symfony/console/CommandLoader/ContainerCommandLoader.php:45:        return isset($this->commandMap[$name]) && $this->container->has($this->commandMap[$name]);
vendor/symfony/console/CommandLoader/ContainerCommandLoader.php:53:        return array_keys($this->commandMap);
vendor/symfony/console/CommandLoader/FactoryCommandLoader.php:30:        $this->factories = $factories;
vendor/symfony/console/CommandLoader/FactoryCommandLoader.php:38:        return isset($this->factories[$name]);
vendor/symfony/console/CommandLoader/FactoryCommandLoader.php:46:        if (!isset($this->factories[$name])) {
vendor/symfony/console/CommandLoader/FactoryCommandLoader.php:50:        $factory = $this->factories[$name];
vendor/symfony/console/CommandLoader/FactoryCommandLoader.php:60:        return array_keys($this->factories);
vendor/symfony/console/LICENSE:1:Copyright (c) 2004-2018 Fabien Potencier
vendor/symfony/console/Command/Command.php:61:        return $class === $r->class ? static::$defaultName : null;
vendor/symfony/console/Command/Command.php:71:        $this->definition = new InputDefinition();
vendor/symfony/console/Command/Command.php:74:            $this->setName($name);
vendor/symfony/console/Command/Command.php:77:        $this->configure();
vendor/symfony/console/Command/Command.php:87:        $this->ignoreValidationErrors = true;
vendor/symfony/console/Command/Command.php:92:        $this->application = $application;
vendor/symfony/console/Command/Command.php:94:            $this->setHelperSet($application->getHelperSet());
vendor/symfony/console/Command/Command.php:96:            $this->helperSet = null;
vendor/symfony/console/Command/Command.php:102:        $this->helperSet = $helperSet;
vendor/symfony/console/Command/Command.php:112:        return $this->helperSet;
vendor/symfony/console/Command/Command.php:122:        return $this->application;
vendor/symfony/console/Command/Command.php:190:     * in a sub-class.
vendor/symfony/console/Command/Command.php:202:        $this->getSynopsis(true);
vendor/symfony/console/Command/Command.php:203:        $this->getSynopsis(false);
vendor/symfony/console/Command/Command.php:206:        $this->mergeApplicationDefinition();
vendor/symfony/console/Command/Command.php:210:            $input->bind($this->definition);
vendor/symfony/console/Command/Command.php:212:            if (!$this->ignoreValidationErrors) {
vendor/symfony/console/Command/Command.php:217:        $this->initialize($input, $output);
vendor/symfony/console/Command/Command.php:219:        if (null !== $this->processTitle) {
vendor/symfony/console/Command/Command.php:221:                if (!@cli_set_process_title($this->processTitle)) {
vendor/symfony/console/Command/Command.php:223:                        $output->writeln('<comment>Running "cli_get_process_title" as an unprivileged user is not supported on MacOS.</comment>');
vendor/symfony/console/Command/Command.php:225:                        cli_set_process_title($this->processTitle);
vendor/symfony/console/Command/Command.php:229:                setproctitle($this->processTitle);
vendor/symfony/console/Command/Command.php:230:            } elseif (OutputInterface::VERBOSITY_VERY_VERBOSE === $output->getVerbosity()) {
vendor/symfony/console/Command/Command.php:231:                $output->writeln('<comment>Install the proctitle PECL to be able to change the process title.</comment>');
vendor/symfony/console/Command/Command.php:235:        if ($input->isInteractive()) {
vendor/symfony/console/Command/Command.php:236:            $this->interact($input, $output);
vendor/symfony/console/Command/Command.php:242:        if ($input->hasArgument('command') && null === $input->getArgument('command')) {
vendor/symfony/console/Command/Command.php:243:            $input->setArgument('command', $this->getName());
vendor/symfony/console/Command/Command.php:246:        $input->validate();
vendor/symfony/console/Command/Command.php:248:        if ($this->code) {
vendor/symfony/console/Command/Command.php:249:            $statusCode = call_user_func($this->code, $input, $output);
vendor/symfony/console/Command/Command.php:251:            $statusCode = $this->execute($input, $output);
vendor/symfony/console/Command/Command.php:275:            if (null === $r->getClosureThis()) {
vendor/symfony/console/Command/Command.php:288:        $this->code = $code;
vendor/symfony/console/Command/Command.php:302:        if (null === $this->application || (true === $this->applicationDefinitionMerged && ($this->applicationDefinitionMergedWithArgs || !$mergeArgs))) {
vendor/symfony/console/Command/Command.php:306:        $this->definition->addOptions($this->application->getDefinition()->getOptions());
vendor/symfony/console/Command/Command.php:309:            $currentArguments = $this->definition->getArguments();
vendor/symfony/console/Command/Command.php:310:            $this->definition->setArguments($this->application->getDefinition()->getArguments());
vendor/symfony/console/Command/Command.php:311:            $this->definition->addArguments($currentArguments);
vendor/symfony/console/Command/Command.php:314:        $this->applicationDefinitionMerged = true;
vendor/symfony/console/Command/Command.php:316:            $this->applicationDefinitionMergedWithArgs = true;
vendor/symfony/console/Command/Command.php:330:            $this->definition = $definition;
vendor/symfony/console/Command/Command.php:332:            $this->definition->setDefinition($definition);
vendor/symfony/console/Command/Command.php:335:        $this->applicationDefinitionMerged = false;
vendor/symfony/console/Command/Command.php:347:        return $this->definition;
vendor/symfony/console/Command/Command.php:362:        return $this->getDefinition();
vendor/symfony/console/Command/Command.php:377:        $this->definition->addArgument(new InputArgument($name, $mode, $description, $default));
vendor/symfony/console/Command/Command.php:395:        $this->definition->addOption(new InputOption($name, $shortcut, $mode, $description, $default));
vendor/symfony/console/Command/Command.php:406:     *     $command->setName('foo:bar');
vendor/symfony/console/Command/Command.php:416:        $this->validateName($name);
vendor/symfony/console/Command/Command.php:418:        $this->name = $name;
vendor/symfony/console/Command/Command.php:437:        $this->processTitle = $title;
vendor/symfony/console/Command/Command.php:449:        return $this->name;
vendor/symfony/console/Command/Command.php:459:        $this->hidden = (bool) $hidden;
vendor/symfony/console/Command/Command.php:469:        return $this->hidden;
vendor/symfony/console/Command/Command.php:481:        $this->description = $description;
vendor/symfony/console/Command/Command.php:493:        return $this->description;
vendor/symfony/console/Command/Command.php:505:        $this->help = $help;
vendor/symfony/console/Command/Command.php:517:        return $this->help;
vendor/symfony/console/Command/Command.php:528:        $name = $this->name;
vendor/symfony/console/Command/Command.php:539:        return str_replace($placeholders, $replacements, $this->getHelp() ?: $this->getDescription());
vendor/symfony/console/Command/Command.php:558:            $this->validateName($alias);
vendor/symfony/console/Command/Command.php:561:        $this->aliases = $aliases;
vendor/symfony/console/Command/Command.php:573:        return $this->aliases;
vendor/symfony/console/Command/Command.php:587:        if (!isset($this->synopsis[$key])) {
vendor/symfony/console/Command/Command.php:588:            $this->synopsis[$key] = trim(sprintf('%s %s', $this->name, $this->definition->getSynopsis($short)));
vendor/symfony/console/Command/Command.php:591:        return $this->synopsis[$key];
vendor/symfony/console/Command/Command.php:603:        if (0 !== strpos($usage, $this->name)) {
vendor/symfony/console/Command/Command.php:604:            $usage = sprintf('%s %s', $this->name, $usage);
vendor/symfony/console/Command/Command.php:607:        $this->usages[] = $usage;
vendor/symfony/console/Command/Command.php:619:        return $this->usages;
vendor/symfony/console/Command/Command.php:634:        if (null === $this->helperSet) {
vendor/symfony/console/Command/Command.php:638:        return $this->helperSet->get($name);
vendor/symfony/console/Command/Command.php:644:     * It must be non-empty and parts can optionally be separated by ":".
vendor/symfony/console/Command/HelpCommand.php:34:        $this->ignoreValidationErrors();
vendor/symfony/console/Command/HelpCommand.php:37:            ->setName('help')
vendor/symfony/console/Command/HelpCommand.php:38:            ->setDefinition(array(
vendor/symfony/console/Command/HelpCommand.php:43:            ->setDescription('Displays help for a command')
vendor/symfony/console/Command/HelpCommand.php:44:            ->setHelp(<<<'EOF'
vendor/symfony/console/Command/HelpCommand.php:49:You can also output the help in other formats by using the <comment>--format</comment> option:
vendor/symfony/console/Command/HelpCommand.php:51:  <info>php %command.full_name% --format=xml list</info>
vendor/symfony/console/Command/HelpCommand.php:61:        $this->command = $command;
vendor/symfony/console/Command/HelpCommand.php:69:        if (null === $this->command) {
vendor/symfony/console/Command/HelpCommand.php:70:            $this->command = $this->getApplication()->find($input->getArgument('command_name'));
vendor/symfony/console/Command/HelpCommand.php:74:        $helper->describe($output, $this->command, array(
vendor/symfony/console/Command/HelpCommand.php:75:            'format' => $input->getOption('format'),
vendor/symfony/console/Command/HelpCommand.php:76:            'raw_text' => $input->getOption('raw'),
vendor/symfony/console/Command/HelpCommand.php:79:        $this->command = null;
vendor/symfony/console/Command/ListCommand.php:34:            ->setName('list')
vendor/symfony/console/Command/ListCommand.php:35:            ->setDefinition($this->createDefinition())
vendor/symfony/console/Command/ListCommand.php:36:            ->setDescription('Lists commands')
vendor/symfony/console/Command/ListCommand.php:37:            ->setHelp(<<<'EOF'
vendor/symfony/console/Command/ListCommand.php:46:You can also output the information in other formats by using the <comment>--format</comment> option:
vendor/symfony/console/Command/ListCommand.php:48:  <info>php %command.full_name% --format=xml</info>
vendor/symfony/console/Command/ListCommand.php:52:  <info>php %command.full_name% --raw</info>
vendor/symfony/console/Command/ListCommand.php:63:        return $this->createDefinition();
vendor/symfony/console/Command/ListCommand.php:72:        $helper->describe($output, $this->getApplication(), array(
vendor/symfony/console/Command/ListCommand.php:73:            'format' => $input->getOption('format'),
vendor/symfony/console/Command/ListCommand.php:74:            'raw_text' => $input->getOption('raw'),
vendor/symfony/console/Command/ListCommand.php:75:            'namespace' => $input->getArgument('namespace'),
vendor/symfony/console/Command/LockableTrait.php:42:        if (null !== $this->lock) {
vendor/symfony/console/Command/LockableTrait.php:52:        $this->lock = (new Factory($store))->createLock($name ?: $this->getName());
vendor/symfony/console/Command/LockableTrait.php:53:        if (!$this->lock->acquire($blocking)) {
vendor/symfony/console/Command/LockableTrait.php:54:            $this->lock = null;
vendor/symfony/console/Command/LockableTrait.php:67:        if ($this->lock) {
vendor/symfony/console/Command/LockableTrait.php:68:            $this->lock->release();
vendor/symfony/console/Command/LockableTrait.php:69:            $this->lock = null;
vendor/symfony/console/Logger/ConsoleLogger.php:21: * PSR-3 compliant console logger.
vendor/symfony/console/Logger/ConsoleLogger.php:25: * @see http://www.php-fig.org/psr/psr-3/
vendor/symfony/console/Logger/ConsoleLogger.php:57:        $this->output = $output;
vendor/symfony/console/Logger/ConsoleLogger.php:58:        $this->verbosityLevelMap = $verbosityLevelMap + $this->verbosityLevelMap;
vendor/symfony/console/Logger/ConsoleLogger.php:59:        $this->formatLevelMap = $formatLevelMap + $this->formatLevelMap;
vendor/symfony/console/Logger/ConsoleLogger.php:67:        if (!isset($this->verbosityLevelMap[$level])) {
vendor/symfony/console/Logger/ConsoleLogger.php:71:        $output = $this->output;
vendor/symfony/console/Logger/ConsoleLogger.php:74:        if (self::ERROR === $this->formatLevelMap[$level]) {
vendor/symfony/console/Logger/ConsoleLogger.php:75:            if ($this->output instanceof ConsoleOutputInterface) {
vendor/symfony/console/Logger/ConsoleLogger.php:76:                $output = $output->getErrorOutput();
vendor/symfony/console/Logger/ConsoleLogger.php:78:            $this->errored = true;
vendor/symfony/console/Logger/ConsoleLogger.php:81:        // the if condition check isn't necessary -- it's the same one that $output will do internally anyway.
vendor/symfony/console/Logger/ConsoleLogger.php:83:        if ($output->getVerbosity() >= $this->verbosityLevelMap[$level]) {
vendor/symfony/console/Logger/ConsoleLogger.php:84:            $output->writeln(sprintf('<%1$s>[%2$s] %3$s</%1$s>', $this->formatLevelMap[$level], $level, $this->interpolate($message, $context)), $this->verbosityLevelMap[$level]);
vendor/symfony/console/Logger/ConsoleLogger.php:95:        return $this->errored;
vendor/symfony/console/Logger/ConsoleLogger.php:119:                $replacements["{{$key}}"] = $val->format(\DateTime::RFC3339);
vendor/symfony/console/Event/ConsoleErrorEvent.php:33:        $this->setError($error);
vendor/symfony/console/Event/ConsoleErrorEvent.php:43:        return $this->error;
vendor/symfony/console/Event/ConsoleErrorEvent.php:57:        $this->error = $error;
vendor/symfony/console/Event/ConsoleErrorEvent.php:67:        $this->exitCode = (int) $exitCode;
vendor/symfony/console/Event/ConsoleErrorEvent.php:69:        $r = new \ReflectionProperty($this->error, 'code');
vendor/symfony/console/Event/ConsoleErrorEvent.php:70:        $r->setAccessible(true);
vendor/symfony/console/Event/ConsoleErrorEvent.php:71:        $r->setValue($this->error, $this->exitCode);
vendor/symfony/console/Event/ConsoleErrorEvent.php:81:        return null !== $this->exitCode ? $this->exitCode : (is_int($this->error->getCode()) && 0 !== $this->error->getCode() ? $this->error->getCode() : 1);
vendor/symfony/console/Event/ConsoleTerminateEvent.php:36:        $this->setExitCode($exitCode);
vendor/symfony/console/Event/ConsoleTerminateEvent.php:46:        $this->exitCode = (int) $exitCode;
vendor/symfony/console/Event/ConsoleTerminateEvent.php:56:        return $this->exitCode;
vendor/symfony/console/Event/ConsoleCommandEvent.php:38:        return $this->commandShouldRun = false;
vendor/symfony/console/Event/ConsoleCommandEvent.php:48:        return $this->commandShouldRun = true;
vendor/symfony/console/Event/ConsoleCommandEvent.php:58:        return $this->commandShouldRun;
vendor/symfony/console/Event/ConsoleExceptionEvent.php:36:        $this->setException($exception);
vendor/symfony/console/Event/ConsoleExceptionEvent.php:37:        $this->exitCode = (int) $exitCode;
vendor/symfony/console/Event/ConsoleExceptionEvent.php:47:        return $this->exception;
vendor/symfony/console/Event/ConsoleExceptionEvent.php:59:        $this->exception = $exception;
vendor/symfony/console/Event/ConsoleExceptionEvent.php:69:        return $this->exitCode;
vendor/symfony/console/Event/ConsoleEvent.php:33:        $this->command = $command;
vendor/symfony/console/Event/ConsoleEvent.php:34:        $this->input = $input;
vendor/symfony/console/Event/ConsoleEvent.php:35:        $this->output = $output;
vendor/symfony/console/Event/ConsoleEvent.php:45:        return $this->command;
vendor/symfony/console/Event/ConsoleEvent.php:55:        return $this->input;
vendor/symfony/console/Event/ConsoleEvent.php:65:        return $this->output;
vendor/symfony/console/CHANGELOG.md:5:-----
vendor/symfony/console/CHANGELOG.md:8: * added `CommandLoaderInterface`, `FactoryCommandLoader` and PSR-11
vendor/symfony/console/CHANGELOG.md:9:   `ContainerCommandLoader` for commands lazy-loading
vendor/symfony/console/CHANGELOG.md:10: * added a case-insensitive command name matching fallback
vendor/symfony/console/CHANGELOG.md:17:-----
vendor/symfony/console/CHANGELOG.md:30:------
vendor/symfony/console/CHANGELOG.md:38:-----
vendor/symfony/console/CHANGELOG.md:44:-----
vendor/symfony/console/CHANGELOG.md:49:-----
vendor/symfony/console/CHANGELOG.md:55:-----
vendor/symfony/console/CHANGELOG.md:61:-----
vendor/symfony/console/CHANGELOG.md:72:-----
vendor/symfony/console/CHANGELOG.md:79:-----
vendor/symfony/console/CHANGELOG.md:86: * added support for multiple InputOption shortcuts, written as `'-a|-b|-c'`
vendor/symfony/console/CHANGELOG.md:90:-----
vendor/symfony/console/CHANGELOG.md:98:-----
vendor/symfony/console/CHANGELOG.md:103: * added a --raw option to the list command
vendor/symfony/console/CHANGELOG.md:110:   `--process-isolation` switch
vendor/symfony/console/CHANGELOG.md:111: * added support for `--`, which disables options parsing after that point
vendor/symfony/console/Input/InputArgument.php:49:        $this->name = $name;
vendor/symfony/console/Input/InputArgument.php:50:        $this->mode = $mode;
vendor/symfony/console/Input/InputArgument.php:51:        $this->description = $description;
vendor/symfony/console/Input/InputArgument.php:53:        $this->setDefault($default);
vendor/symfony/console/Input/InputArgument.php:63:        return $this->name;
vendor/symfony/console/Input/InputArgument.php:73:        return self::REQUIRED === (self::REQUIRED & $this->mode);
vendor/symfony/console/Input/InputArgument.php:83:        return self::IS_ARRAY === (self::IS_ARRAY & $this->mode);
vendor/symfony/console/Input/InputArgument.php:95:        if (self::REQUIRED === $this->mode && null !== $default) {
vendor/symfony/console/Input/InputArgument.php:99:        if ($this->isArray()) {
vendor/symfony/console/Input/InputArgument.php:107:        $this->default = $default;
vendor/symfony/console/Input/InputArgument.php:117:        return $this->default;
vendor/symfony/console/Input/InputArgument.php:127:        return $this->description;
vendor/symfony/console/Input/ArrayInput.php:22: *     $input = new ArrayInput(array('name' => 'foo', '--bar' => 'foobar'));
vendor/symfony/console/Input/ArrayInput.php:32:        $this->parameters = $parameters;
vendor/symfony/console/Input/ArrayInput.php:42:        foreach ($this->parameters as $key => $value) {
vendor/symfony/console/Input/ArrayInput.php:43:            if ($key && '-' === $key[0]) {
vendor/symfony/console/Input/ArrayInput.php:58:        foreach ($this->parameters as $k => $v) {
vendor/symfony/console/Input/ArrayInput.php:63:            if ($onlyParams && '--' === $v) {
vendor/symfony/console/Input/ArrayInput.php:82:        foreach ($this->parameters as $k => $v) {
vendor/symfony/console/Input/ArrayInput.php:83:            if ($onlyParams && ('--' === $k || (is_int($k) && '--' === $v))) {
vendor/symfony/console/Input/ArrayInput.php:107:        foreach ($this->parameters as $param => $val) {
vendor/symfony/console/Input/ArrayInput.php:108:            if ($param && '-' === $param[0]) {
vendor/symfony/console/Input/ArrayInput.php:111:                        $params[] = $param.('' != $v ? '='.$this->escapeToken($v) : '');
vendor/symfony/console/Input/ArrayInput.php:114:                    $params[] = $param.('' != $val ? '='.$this->escapeToken($val) : '');
vendor/symfony/console/Input/ArrayInput.php:117:                $params[] = is_array($val) ? implode(' ', array_map(array($this, 'escapeToken'), $val)) : $this->escapeToken($val);
vendor/symfony/console/Input/ArrayInput.php:129:        foreach ($this->parameters as $key => $value) {
vendor/symfony/console/Input/ArrayInput.php:130:            if ('--' === $key) {
vendor/symfony/console/Input/ArrayInput.php:133:            if (0 === strpos($key, '--')) {
vendor/symfony/console/Input/ArrayInput.php:134:                $this->addLongOption(substr($key, 2), $value);
vendor/symfony/console/Input/ArrayInput.php:135:            } elseif ('-' === $key[0]) {
vendor/symfony/console/Input/ArrayInput.php:136:                $this->addShortOption(substr($key, 1), $value);
vendor/symfony/console/Input/ArrayInput.php:138:                $this->addArgument($key, $value);
vendor/symfony/console/Input/ArrayInput.php:153:        if (!$this->definition->hasShortcut($shortcut)) {
vendor/symfony/console/Input/ArrayInput.php:154:            throw new InvalidOptionException(sprintf('The "-%s" option does not exist.', $shortcut));
vendor/symfony/console/Input/ArrayInput.php:157:        $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);
vendor/symfony/console/Input/ArrayInput.php:171:        if (!$this->definition->hasOption($name)) {
vendor/symfony/console/Input/ArrayInput.php:172:            throw new InvalidOptionException(sprintf('The "--%s" option does not exist.', $name));
vendor/symfony/console/Input/ArrayInput.php:175:        $option = $this->definition->getOption($name);
vendor/symfony/console/Input/ArrayInput.php:178:            if ($option->isValueRequired()) {
vendor/symfony/console/Input/ArrayInput.php:179:                throw new InvalidOptionException(sprintf('The "--%s" option requires a value.', $name));
vendor/symfony/console/Input/ArrayInput.php:182:            if (!$option->isValueOptional()) {
vendor/symfony/console/Input/ArrayInput.php:187:        $this->options[$name] = $value;
vendor/symfony/console/Input/ArrayInput.php:200:        if (!$this->definition->hasArgument($name)) {
vendor/symfony/console/Input/ArrayInput.php:204:        $this->arguments[$name] = $value;
vendor/symfony/console/Input/InputDefinition.php:43:        $this->setDefinition($definition);
vendor/symfony/console/Input/InputDefinition.php:61:        $this->setArguments($arguments);
vendor/symfony/console/Input/InputDefinition.php:62:        $this->setOptions($options);
vendor/symfony/console/Input/InputDefinition.php:72:        $this->arguments = array();
vendor/symfony/console/Input/InputDefinition.php:73:        $this->requiredCount = 0;
vendor/symfony/console/Input/InputDefinition.php:74:        $this->hasOptional = false;
vendor/symfony/console/Input/InputDefinition.php:75:        $this->hasAnArrayArgument = false;
vendor/symfony/console/Input/InputDefinition.php:76:        $this->addArguments($arguments);
vendor/symfony/console/Input/InputDefinition.php:88:                $this->addArgument($argument);
vendor/symfony/console/Input/InputDefinition.php:98:        if (isset($this->arguments[$argument->getName()])) {
vendor/symfony/console/Input/InputDefinition.php:99:            throw new LogicException(sprintf('An argument with name "%s" already exists.', $argument->getName()));
vendor/symfony/console/Input/InputDefinition.php:102:        if ($this->hasAnArrayArgument) {
vendor/symfony/console/Input/InputDefinition.php:106:        if ($argument->isRequired() && $this->hasOptional) {
vendor/symfony/console/Input/InputDefinition.php:110:        if ($argument->isArray()) {
vendor/symfony/console/Input/InputDefinition.php:111:            $this->hasAnArrayArgument = true;
vendor/symfony/console/Input/InputDefinition.php:114:        if ($argument->isRequired()) {
vendor/symfony/console/Input/InputDefinition.php:115:            ++$this->requiredCount;
vendor/symfony/console/Input/InputDefinition.php:117:            $this->hasOptional = true;
vendor/symfony/console/Input/InputDefinition.php:120:        $this->arguments[$argument->getName()] = $argument;
vendor/symfony/console/Input/InputDefinition.php:134:        if (!$this->hasArgument($name)) {
vendor/symfony/console/Input/InputDefinition.php:138:        $arguments = is_int($name) ? array_values($this->arguments) : $this->arguments;
vendor/symfony/console/Input/InputDefinition.php:152:        $arguments = is_int($name) ? array_values($this->arguments) : $this->arguments;
vendor/symfony/console/Input/InputDefinition.php:164:        return $this->arguments;
vendor/symfony/console/Input/InputDefinition.php:174:        return $this->hasAnArrayArgument ? PHP_INT_MAX : count($this->arguments);
vendor/symfony/console/Input/InputDefinition.php:184:        return $this->requiredCount;
vendor/symfony/console/Input/InputDefinition.php:195:        foreach ($this->arguments as $argument) {
vendor/symfony/console/Input/InputDefinition.php:196:            $values[$argument->getName()] = $argument->getDefault();
vendor/symfony/console/Input/InputDefinition.php:209:        $this->options = array();
vendor/symfony/console/Input/InputDefinition.php:210:        $this->shortcuts = array();
vendor/symfony/console/Input/InputDefinition.php:211:        $this->addOptions($options);
vendor/symfony/console/Input/InputDefinition.php:222:            $this->addOption($option);
vendor/symfony/console/Input/InputDefinition.php:231:        if (isset($this->options[$option->getName()]) && !$option->equals($this->options[$option->getName()])) {
vendor/symfony/console/Input/InputDefinition.php:232:            throw new LogicException(sprintf('An option named "%s" already exists.', $option->getName()));
vendor/symfony/console/Input/InputDefinition.php:235:        if ($option->getShortcut()) {
vendor/symfony/console/Input/InputDefinition.php:236:            foreach (explode('|', $option->getShortcut()) as $shortcut) {
vendor/symfony/console/Input/InputDefinition.php:237:                if (isset($this->shortcuts[$shortcut]) && !$option->equals($this->options[$this->shortcuts[$shortcut]])) {
vendor/symfony/console/Input/InputDefinition.php:243:        $this->options[$option->getName()] = $option;
vendor/symfony/console/Input/InputDefinition.php:244:        if ($option->getShortcut()) {
vendor/symfony/console/Input/InputDefinition.php:245:            foreach (explode('|', $option->getShortcut()) as $shortcut) {
vendor/symfony/console/Input/InputDefinition.php:246:                $this->shortcuts[$shortcut] = $option->getName();
vendor/symfony/console/Input/InputDefinition.php:262:        if (!$this->hasOption($name)) {
vendor/symfony/console/Input/InputDefinition.php:263:            throw new InvalidArgumentException(sprintf('The "--%s" option does not exist.', $name));
vendor/symfony/console/Input/InputDefinition.php:266:        return $this->options[$name];
vendor/symfony/console/Input/InputDefinition.php:281:        return isset($this->options[$name]);
vendor/symfony/console/Input/InputDefinition.php:291:        return $this->options;
vendor/symfony/console/Input/InputDefinition.php:303:        return isset($this->shortcuts[$name]);
vendor/symfony/console/Input/InputDefinition.php:315:        return $this->getOption($this->shortcutToName($shortcut));
vendor/symfony/console/Input/InputDefinition.php:326:        foreach ($this->options as $option) {
vendor/symfony/console/Input/InputDefinition.php:327:            $values[$option->getName()] = $option->getDefault();
vendor/symfony/console/Input/InputDefinition.php:344:        if (!isset($this->shortcuts[$shortcut])) {
vendor/symfony/console/Input/InputDefinition.php:345:            throw new InvalidArgumentException(sprintf('The "-%s" option does not exist.', $shortcut));
vendor/symfony/console/Input/InputDefinition.php:348:        return $this->shortcuts[$shortcut];
vendor/symfony/console/Input/InputDefinition.php:362:        if ($short && $this->getOptions()) {
vendor/symfony/console/Input/InputDefinition.php:365:            foreach ($this->getOptions() as $option) {
vendor/symfony/console/Input/InputDefinition.php:367:                if ($option->acceptValue()) {
vendor/symfony/console/Input/InputDefinition.php:370:                        $option->isValueOptional() ? '[' : '',
vendor/symfony/console/Input/InputDefinition.php:371:                        strtoupper($option->getName()),
vendor/symfony/console/Input/InputDefinition.php:372:                        $option->isValueOptional() ? ']' : ''
vendor/symfony/console/Input/InputDefinition.php:376:                $shortcut = $option->getShortcut() ? sprintf('-%s|', $option->getShortcut()) : '';
vendor/symfony/console/Input/InputDefinition.php:377:                $elements[] = sprintf('[%s--%s%s]', $shortcut, $option->getName(), $value);
vendor/symfony/console/Input/InputDefinition.php:381:        if (count($elements) && $this->getArguments()) {
vendor/symfony/console/Input/InputDefinition.php:382:            $elements[] = '[--]';
vendor/symfony/console/Input/InputDefinition.php:385:        foreach ($this->getArguments() as $argument) {
vendor/symfony/console/Input/InputDefinition.php:386:            $element = '<'.$argument->getName().'>';
vendor/symfony/console/Input/InputDefinition.php:387:            if (!$argument->isRequired()) {
vendor/symfony/console/Input/InputDefinition.php:389:            } elseif ($argument->isArray()) {
vendor/symfony/console/Input/InputDefinition.php:393:            if ($argument->isArray()) {
vendor/symfony/console/Input/ArgvInput.php:38: * @see http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
vendor/symfony/console/Input/ArgvInput.php:59:        $this->tokens = $argv;
vendor/symfony/console/Input/ArgvInput.php:66:        $this->tokens = $tokens;
vendor/symfony/console/Input/ArgvInput.php:75:        $this->parsed = $this->tokens;
vendor/symfony/console/Input/ArgvInput.php:76:        while (null !== $token = array_shift($this->parsed)) {
vendor/symfony/console/Input/ArgvInput.php:78:                $this->parseArgument($token);
vendor/symfony/console/Input/ArgvInput.php:79:            } elseif ($parseOptions && '--' == $token) {
vendor/symfony/console/Input/ArgvInput.php:81:            } elseif ($parseOptions && 0 === strpos($token, '--')) {
vendor/symfony/console/Input/ArgvInput.php:82:                $this->parseLongOption($token);
vendor/symfony/console/Input/ArgvInput.php:83:            } elseif ($parseOptions && '-' === $token[0] && '-' !== $token) {
vendor/symfony/console/Input/ArgvInput.php:84:                $this->parseShortOption($token);
vendor/symfony/console/Input/ArgvInput.php:86:                $this->parseArgument($token);
vendor/symfony/console/Input/ArgvInput.php:101:            if ($this->definition->hasShortcut($name[0]) && $this->definition->getOptionForShortcut($name[0])->acceptValue()) {
vendor/symfony/console/Input/ArgvInput.php:103:                $this->addShortOption($name[0], substr($name, 1));
vendor/symfony/console/Input/ArgvInput.php:105:                $this->parseShortOptionSet($name);
vendor/symfony/console/Input/ArgvInput.php:108:            $this->addShortOption($name, null);
vendor/symfony/console/Input/ArgvInput.php:123:            if (!$this->definition->hasShortcut($name[$i])) {
vendor/symfony/console/Input/ArgvInput.php:124:                throw new RuntimeException(sprintf('The "-%s" option does not exist.', $name[$i]));
vendor/symfony/console/Input/ArgvInput.php:127:            $option = $this->definition->getOptionForShortcut($name[$i]);
vendor/symfony/console/Input/ArgvInput.php:128:            if ($option->acceptValue()) {
vendor/symfony/console/Input/ArgvInput.php:129:                $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));
vendor/symfony/console/Input/ArgvInput.php:133:                $this->addLongOption($option->getName(), null);
vendor/symfony/console/Input/ArgvInput.php:154:                array_unshift($this->parsed, $value);
vendor/symfony/console/Input/ArgvInput.php:156:            $this->addLongOption(substr($name, 0, $pos), $value);
vendor/symfony/console/Input/ArgvInput.php:158:            $this->addLongOption($name, null);
vendor/symfony/console/Input/ArgvInput.php:171:        $c = count($this->arguments);
vendor/symfony/console/Input/ArgvInput.php:174:        if ($this->definition->hasArgument($c)) {
vendor/symfony/console/Input/ArgvInput.php:175:            $arg = $this->definition->getArgument($c);
vendor/symfony/console/Input/ArgvInput.php:176:            $this->arguments[$arg->getName()] = $arg->isArray() ? array($token) : $token;
vendor/symfony/console/Input/ArgvInput.php:179:        } elseif ($this->definition->hasArgument($c - 1) && $this->definition->getArgument($c - 1)->isArray()) {
vendor/symfony/console/Input/ArgvInput.php:180:            $arg = $this->definition->getArgument($c - 1);
vendor/symfony/console/Input/ArgvInput.php:181:            $this->arguments[$arg->getName()][] = $token;
vendor/symfony/console/Input/ArgvInput.php:185:            $all = $this->definition->getArguments();
vendor/symfony/console/Input/ArgvInput.php:204:        if (!$this->definition->hasShortcut($shortcut)) {
vendor/symfony/console/Input/ArgvInput.php:205:            throw new RuntimeException(sprintf('The "-%s" option does not exist.', $shortcut));
vendor/symfony/console/Input/ArgvInput.php:208:        $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);
vendor/symfony/console/Input/ArgvInput.php:221:        if (!$this->definition->hasOption($name)) {
vendor/symfony/console/Input/ArgvInput.php:222:            throw new RuntimeException(sprintf('The "--%s" option does not exist.', $name));
vendor/symfony/console/Input/ArgvInput.php:225:        $option = $this->definition->getOption($name);
vendor/symfony/console/Input/ArgvInput.php:227:        if (null !== $value && !$option->acceptValue()) {
vendor/symfony/console/Input/ArgvInput.php:228:            throw new RuntimeException(sprintf('The "--%s" option does not accept a value.', $name));
vendor/symfony/console/Input/ArgvInput.php:231:        if (in_array($value, array('', null), true) && $option->acceptValue() && count($this->parsed)) {
vendor/symfony/console/Input/ArgvInput.php:234:            $next = array_shift($this->parsed);
vendor/symfony/console/Input/ArgvInput.php:235:            if ((isset($next[0]) && '-' !== $next[0]) || in_array($next, array('', null), true)) {
vendor/symfony/console/Input/ArgvInput.php:238:                array_unshift($this->parsed, $next);
vendor/symfony/console/Input/ArgvInput.php:243:            if ($option->isValueRequired()) {
vendor/symfony/console/Input/ArgvInput.php:244:                throw new RuntimeException(sprintf('The "--%s" option requires a value.', $name));
vendor/symfony/console/Input/ArgvInput.php:247:            if (!$option->isArray() && !$option->isValueOptional()) {
vendor/symfony/console/Input/ArgvInput.php:252:        if ($option->isArray()) {
vendor/symfony/console/Input/ArgvInput.php:253:            $this->options[$name][] = $value;
vendor/symfony/console/Input/ArgvInput.php:255:            $this->options[$name] = $value;
vendor/symfony/console/Input/ArgvInput.php:264:        foreach ($this->tokens as $token) {
vendor/symfony/console/Input/ArgvInput.php:265:            if ($token && '-' === $token[0]) {
vendor/symfony/console/Input/ArgvInput.php:280:        foreach ($this->tokens as $token) {
vendor/symfony/console/Input/ArgvInput.php:281:            if ($onlyParams && '--' === $token) {
vendor/symfony/console/Input/ArgvInput.php:286:                //   For long options, test for '--option=' at beginning
vendor/symfony/console/Input/ArgvInput.php:287:                //   For short options, test for '-o' at beginning
vendor/symfony/console/Input/ArgvInput.php:288:                $leading = 0 === strpos($value, '--') ? $value.'=' : $value;
vendor/symfony/console/Input/ArgvInput.php:304:        $tokens = $this->tokens;
vendor/symfony/console/Input/ArgvInput.php:308:            if ($onlyParams && '--' === $token) {
vendor/symfony/console/Input/ArgvInput.php:317:                //   For long options, test for '--option=' at beginning
vendor/symfony/console/Input/ArgvInput.php:318:                //   For short options, test for '-o' at beginning
vendor/symfony/console/Input/ArgvInput.php:319:                $leading = 0 === strpos($value, '--') ? $value.'=' : $value;
vendor/symfony/console/Input/ArgvInput.php:337:            if (preg_match('{^(-[^=]+=)(.+)}', $token, $match)) {
vendor/symfony/console/Input/ArgvInput.php:338:                return $match[1].$this->escapeToken($match[2]);
vendor/symfony/console/Input/ArgvInput.php:341:            if ($token && '-' !== $token[0]) {
vendor/symfony/console/Input/ArgvInput.php:342:                return $this->escapeToken($token);
vendor/symfony/console/Input/ArgvInput.php:346:        }, $this->tokens);
vendor/symfony/console/Input/InputInterface.php:40:     * @param bool         $onlyParams Only check real parameters, skip those following an end of options (--) signal
vendor/symfony/console/Input/InputInterface.php:56:     * @param bool         $onlyParams Only check real parameters, skip those following an end of options (--) signal
vendor/symfony/console/Input/InputOption.php:46:        if (0 === strpos($name, '--')) {
vendor/symfony/console/Input/InputOption.php:62:            $shortcuts = preg_split('{(\|)-?}', ltrim($shortcut, '-'));
vendor/symfony/console/Input/InputOption.php:77:        $this->name = $name;
vendor/symfony/console/Input/InputOption.php:78:        $this->shortcut = $shortcut;
vendor/symfony/console/Input/InputOption.php:79:        $this->mode = $mode;
vendor/symfony/console/Input/InputOption.php:80:        $this->description = $description;
vendor/symfony/console/Input/InputOption.php:82:        if ($this->isArray() && !$this->acceptValue()) {
vendor/symfony/console/Input/InputOption.php:86:        $this->setDefault($default);
vendor/symfony/console/Input/InputOption.php:96:        return $this->shortcut;
vendor/symfony/console/Input/InputOption.php:106:        return $this->name;
vendor/symfony/console/Input/InputOption.php:116:        return $this->isValueRequired() || $this->isValueOptional();
vendor/symfony/console/Input/InputOption.php:126:        return self::VALUE_REQUIRED === (self::VALUE_REQUIRED & $this->mode);
vendor/symfony/console/Input/InputOption.php:136:        return self::VALUE_OPTIONAL === (self::VALUE_OPTIONAL & $this->mode);
vendor/symfony/console/Input/InputOption.php:146:        return self::VALUE_IS_ARRAY === (self::VALUE_IS_ARRAY & $this->mode);
vendor/symfony/console/Input/InputOption.php:158:        if (self::VALUE_NONE === (self::VALUE_NONE & $this->mode) && null !== $default) {
vendor/symfony/console/Input/InputOption.php:162:        if ($this->isArray()) {
vendor/symfony/console/Input/InputOption.php:170:        $this->default = $this->acceptValue() ? $default : false;
vendor/symfony/console/Input/InputOption.php:180:        return $this->default;
vendor/symfony/console/Input/InputOption.php:190:        return $this->description;
vendor/symfony/console/Input/InputOption.php:200:        return $option->getName() === $this->getName()
vendor/symfony/console/Input/InputOption.php:201:            && $option->getShortcut() === $this->getShortcut()
vendor/symfony/console/Input/InputOption.php:202:            && $option->getDefault() === $this->getDefault()
vendor/symfony/console/Input/InputOption.php:203:            && $option->isArray() === $this->isArray()
vendor/symfony/console/Input/InputOption.php:204:            && $option->isValueRequired() === $this->isValueRequired()
vendor/symfony/console/Input/InputOption.php:205:            && $option->isValueOptional() === $this->isValueOptional()
vendor/symfony/console/Input/StringInput.php:21: *     $input = new StringInput('foo --bar="foobar"');
vendor/symfony/console/Input/StringInput.php:37:        $this->setTokens($this->tokenize($input));
vendor/symfony/console/Input/StringInput.php:57:                $tokens[] = $match[1].$match[2].stripcslashes(str_replace(array('"\'', '\'"', '\'\'', '""'), '', substr($match[3], 1, strlen($match[3]) - 2)));
vendor/symfony/console/Input/StringInput.php:59:                $tokens[] = stripcslashes(substr($match[0], 1, strlen($match[0]) - 2));
vendor/symfony/console/Input/Input.php:39:            $this->definition = new InputDefinition();
vendor/symfony/console/Input/Input.php:41:            $this->bind($definition);
vendor/symfony/console/Input/Input.php:42:            $this->validate();
vendor/symfony/console/Input/Input.php:51:        $this->arguments = array();
vendor/symfony/console/Input/Input.php:52:        $this->options = array();
vendor/symfony/console/Input/Input.php:53:        $this->definition = $definition;
vendor/symfony/console/Input/Input.php:55:        $this->parse();
vendor/symfony/console/Input/Input.php:68:        $definition = $this->definition;
vendor/symfony/console/Input/Input.php:69:        $givenArguments = $this->arguments;
vendor/symfony/console/Input/Input.php:71:        $missingArguments = array_filter(array_keys($definition->getArguments()), function ($argument) use ($definition, $givenArguments) {
vendor/symfony/console/Input/Input.php:72:            return !array_key_exists($argument, $givenArguments) && $definition->getArgument($argument)->isRequired();
vendor/symfony/console/Input/Input.php:85:        return $this->interactive;
vendor/symfony/console/Input/Input.php:93:        $this->interactive = (bool) $interactive;
vendor/symfony/console/Input/Input.php:101:        return array_merge($this->definition->getArgumentDefaults(), $this->arguments);
vendor/symfony/console/Input/Input.php:109:        if (!$this->definition->hasArgument($name)) {
vendor/symfony/console/Input/Input.php:113:        return isset($this->arguments[$name]) ? $this->arguments[$name] : $this->definition->getArgument($name)->getDefault();
vendor/symfony/console/Input/Input.php:121:        if (!$this->definition->hasArgument($name)) {
vendor/symfony/console/Input/Input.php:125:        $this->arguments[$name] = $value;
vendor/symfony/console/Input/Input.php:133:        return $this->definition->hasArgument($name);
vendor/symfony/console/Input/Input.php:141:        return array_merge($this->definition->getOptionDefaults(), $this->options);
vendor/symfony/console/Input/Input.php:149:        if (!$this->definition->hasOption($name)) {
vendor/symfony/console/Input/Input.php:153:        return array_key_exists($name, $this->options) ? $this->options[$name] : $this->definition->getOption($name)->getDefault();
vendor/symfony/console/Input/Input.php:161:        if (!$this->definition->hasOption($name)) {
vendor/symfony/console/Input/Input.php:165:        $this->options[$name] = $value;
vendor/symfony/console/Input/Input.php:173:        return $this->definition->hasOption($name);
vendor/symfony/console/Input/Input.php:185:        return preg_match('{^[\w-]+$}', $token) ? $token : escapeshellarg($token);
vendor/symfony/console/Input/Input.php:193:        $this->stream = $stream;
vendor/symfony/console/Input/Input.php:201:        return $this->stream;
vendor/symfony/console/Formatter/OutputFormatter.php:52:        if ('\\' === substr($text, -1)) {
vendor/symfony/console/Formatter/OutputFormatter.php:56:            $text .= str_repeat("\0", $len - strlen($text));
vendor/symfony/console/Formatter/OutputFormatter.php:70:        $this->decorated = (bool) $decorated;
vendor/symfony/console/Formatter/OutputFormatter.php:72:        $this->setStyle('error', new OutputFormatterStyle('white', 'red'));
vendor/symfony/console/Formatter/OutputFormatter.php:73:        $this->setStyle('info', new OutputFormatterStyle('green'));
vendor/symfony/console/Formatter/OutputFormatter.php:74:        $this->setStyle('comment', new OutputFormatterStyle('yellow'));
vendor/symfony/console/Formatter/OutputFormatter.php:75:        $this->setStyle('question', new OutputFormatterStyle('black', 'cyan'));
vendor/symfony/console/Formatter/OutputFormatter.php:78:            $this->setStyle($name, $style);
vendor/symfony/console/Formatter/OutputFormatter.php:81:        $this->styleStack = new OutputFormatterStyleStack();
vendor/symfony/console/Formatter/OutputFormatter.php:89:        $this->decorated = (bool) $decorated;
vendor/symfony/console/Formatter/OutputFormatter.php:97:        return $this->decorated;
vendor/symfony/console/Formatter/OutputFormatter.php:105:        $this->styles[strtolower($name)] = $style;
vendor/symfony/console/Formatter/OutputFormatter.php:113:        return isset($this->styles[strtolower($name)]);
vendor/symfony/console/Formatter/OutputFormatter.php:121:        if (!$this->hasStyle($name)) {
vendor/symfony/console/Formatter/OutputFormatter.php:125:        return $this->styles[strtolower($name)];
vendor/symfony/console/Formatter/OutputFormatter.php:136:        $tagRegex = '[a-z][a-z0-9,_=;-]*+';
vendor/symfony/console/Formatter/OutputFormatter.php:142:            if (0 != $pos && '\\' == $message[$pos - 1]) {
vendor/symfony/console/Formatter/OutputFormatter.php:147:            $output .= $this->applyCurrentStyle(substr($message, $offset, $pos - $offset));
vendor/symfony/console/Formatter/OutputFormatter.php:159:                $this->styleStack->pop();
vendor/symfony/console/Formatter/OutputFormatter.php:160:            } elseif (false === $style = $this->createStyleFromString(strtolower($tag))) {
vendor/symfony/console/Formatter/OutputFormatter.php:161:                $output .= $this->applyCurrentStyle($text);
vendor/symfony/console/Formatter/OutputFormatter.php:163:                $this->styleStack->push($style);
vendor/symfony/console/Formatter/OutputFormatter.php:165:                $this->styleStack->pop($style);
vendor/symfony/console/Formatter/OutputFormatter.php:169:        $output .= $this->applyCurrentStyle(substr($message, $offset));
vendor/symfony/console/Formatter/OutputFormatter.php:183:        return $this->styleStack;
vendor/symfony/console/Formatter/OutputFormatter.php:195:        if (isset($this->styles[$string])) {
vendor/symfony/console/Formatter/OutputFormatter.php:196:            return $this->styles[$string];
vendor/symfony/console/Formatter/OutputFormatter.php:208:                $style->setForeground($match[1]);
vendor/symfony/console/Formatter/OutputFormatter.php:210:                $style->setBackground($match[1]);
vendor/symfony/console/Formatter/OutputFormatter.php:216:                        $style->setOption($option);
vendor/symfony/console/Formatter/OutputFormatter.php:218:                        @trigger_error(sprintf('Unknown style options are deprecated since Symfony 3.2 and will be removed in 4.0. Exception "%s".', $e->getMessage()), E_USER_DEPRECATED);
vendor/symfony/console/Formatter/OutputFormatter.php:240:        return $this->isDecorated() && strlen($text) > 0 ? $this->styleStack->getCurrent()->apply($text) : $text;
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:17: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:30:        $this->emptyStyle = $emptyStyle ?: new OutputFormatterStyle();
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:31:        $this->reset();
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:39:        $this->styles = array();
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:47:        $this->styles[] = $style;
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:59:        if (empty($this->styles)) {
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:60:            return $this->emptyStyle;
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:64:            return array_pop($this->styles);
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:67:        foreach (array_reverse($this->styles, true) as $index => $stackedStyle) {
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:68:            if ($style->apply('') === $stackedStyle->apply('')) {
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:69:                $this->styles = array_slice($this->styles, 0, $index);
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:85:        if (empty($this->styles)) {
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:86:            return $this->emptyStyle;
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:89:        return $this->styles[count($this->styles) - 1];
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:97:        $this->emptyStyle = $emptyStyle;
vendor/symfony/console/Formatter/OutputFormatterStyleStack.php:107:        return $this->emptyStyle;
vendor/symfony/console/Formatter/OutputFormatterStyle.php:67:            $this->setForeground($foreground);
vendor/symfony/console/Formatter/OutputFormatterStyle.php:70:            $this->setBackground($background);
vendor/symfony/console/Formatter/OutputFormatterStyle.php:73:            $this->setOptions($options);
vendor/symfony/console/Formatter/OutputFormatterStyle.php:87:            $this->foreground = null;
vendor/symfony/console/Formatter/OutputFormatterStyle.php:100:        $this->foreground = static::$availableForegroundColors[$color];
vendor/symfony/console/Formatter/OutputFormatterStyle.php:113:            $this->background = null;
vendor/symfony/console/Formatter/OutputFormatterStyle.php:126:        $this->background = static::$availableBackgroundColors[$color];
vendor/symfony/console/Formatter/OutputFormatterStyle.php:146:        if (!in_array(static::$availableOptions[$option], $this->options)) {
vendor/symfony/console/Formatter/OutputFormatterStyle.php:147:            $this->options[] = static::$availableOptions[$option];
vendor/symfony/console/Formatter/OutputFormatterStyle.php:168:        $pos = array_search(static::$availableOptions[$option], $this->options);
vendor/symfony/console/Formatter/OutputFormatterStyle.php:170:            unset($this->options[$pos]);
vendor/symfony/console/Formatter/OutputFormatterStyle.php:179:        $this->options = array();
vendor/symfony/console/Formatter/OutputFormatterStyle.php:182:            $this->setOption($option);
vendor/symfony/console/Formatter/OutputFormatterStyle.php:198:        if (null !== $this->foreground) {
vendor/symfony/console/Formatter/OutputFormatterStyle.php:199:            $setCodes[] = $this->foreground['set'];
vendor/symfony/console/Formatter/OutputFormatterStyle.php:200:            $unsetCodes[] = $this->foreground['unset'];
vendor/symfony/console/Formatter/OutputFormatterStyle.php:202:        if (null !== $this->background) {
vendor/symfony/console/Formatter/OutputFormatterStyle.php:203:            $setCodes[] = $this->background['set'];
vendor/symfony/console/Formatter/OutputFormatterStyle.php:204:            $unsetCodes[] = $this->background['unset'];
vendor/symfony/console/Formatter/OutputFormatterStyle.php:206:        if (count($this->options)) {
vendor/symfony/console/Formatter/OutputFormatterStyle.php:207:            foreach ($this->options as $option) {
vendor/symfony/console/Question/ConfirmationQuestion.php:32:        $this->trueAnswerRegex = $trueAnswerRegex;
vendor/symfony/console/Question/ConfirmationQuestion.php:33:        $this->setNormalizer($this->getDefaultNormalizer());
vendor/symfony/console/Question/ConfirmationQuestion.php:43:        $default = $this->getDefault();
vendor/symfony/console/Question/ConfirmationQuestion.php:44:        $regex = $this->trueAnswerRegex;
vendor/symfony/console/Question/ChoiceQuestion.php:41:        $this->choices = $choices;
vendor/symfony/console/Question/ChoiceQuestion.php:42:        $this->setValidator($this->getDefaultValidator());
vendor/symfony/console/Question/ChoiceQuestion.php:43:        $this->setAutocompleterValues($choices);
vendor/symfony/console/Question/ChoiceQuestion.php:53:        return $this->choices;
vendor/symfony/console/Question/ChoiceQuestion.php:67:        $this->multiselect = $multiselect;
vendor/symfony/console/Question/ChoiceQuestion.php:68:        $this->setValidator($this->getDefaultValidator());
vendor/symfony/console/Question/ChoiceQuestion.php:80:        return $this->multiselect;
vendor/symfony/console/Question/ChoiceQuestion.php:90:        return $this->prompt;
vendor/symfony/console/Question/ChoiceQuestion.php:102:        $this->prompt = $prompt;
vendor/symfony/console/Question/ChoiceQuestion.php:118:        $this->errorMessage = $errorMessage;
vendor/symfony/console/Question/ChoiceQuestion.php:119:        $this->setValidator($this->getDefaultValidator());
vendor/symfony/console/Question/ChoiceQuestion.php:131:        $choices = $this->choices;
vendor/symfony/console/Question/ChoiceQuestion.php:132:        $errorMessage = $this->errorMessage;
vendor/symfony/console/Question/ChoiceQuestion.php:133:        $multiselect = $this->multiselect;
vendor/symfony/console/Question/ChoiceQuestion.php:134:        $isAssoc = $this->isAssoc($choices);
vendor/symfony/console/Question/Question.php:39:        $this->question = $question;
vendor/symfony/console/Question/Question.php:40:        $this->default = $default;
vendor/symfony/console/Question/Question.php:50:        return $this->question;
vendor/symfony/console/Question/Question.php:60:        return $this->default;
vendor/symfony/console/Question/Question.php:70:        return $this->hidden;
vendor/symfony/console/Question/Question.php:84:        if ($this->autocompleterValues) {
vendor/symfony/console/Question/Question.php:88:        $this->hidden = (bool) $hidden;
vendor/symfony/console/Question/Question.php:94:     * In case the response can not be hidden, whether to fallback on non-hidden question or not.
vendor/symfony/console/Question/Question.php:100:        return $this->hiddenFallback;
vendor/symfony/console/Question/Question.php:104:     * Sets whether to fallback on non-hidden question if the response can not be hidden.
vendor/symfony/console/Question/Question.php:112:        $this->hiddenFallback = (bool) $fallback;
vendor/symfony/console/Question/Question.php:124:        return $this->autocompleterValues;
vendor/symfony/console/Question/Question.php:140:            $values = $this->isAssoc($values) ? array_merge(array_keys($values), array_values($values)) : array_values($values);
vendor/symfony/console/Question/Question.php:147:        if ($this->hidden) {
vendor/symfony/console/Question/Question.php:151:        $this->autocompleterValues = $values;
vendor/symfony/console/Question/Question.php:165:        $this->validator = $validator;
vendor/symfony/console/Question/Question.php:177:        return $this->validator;
vendor/symfony/console/Question/Question.php:197:        $this->attempts = $attempts;
vendor/symfony/console/Question/Question.php:211:        return $this->attempts;
vendor/symfony/console/Question/Question.php:225:        $this->normalizer = $normalizer;
vendor/symfony/console/Question/Question.php:239:        return $this->normalizer;
vendor/symfony/console/EventListener/ErrorListener.php:31:        $this->logger = $logger;
vendor/symfony/console/EventListener/ErrorListener.php:36:        if (null === $this->logger) {
vendor/symfony/console/EventListener/ErrorListener.php:40:        $error = $event->getError();
vendor/symfony/console/EventListener/ErrorListener.php:42:        if (!$inputString = $this->getInputString($event)) {
vendor/symfony/console/EventListener/ErrorListener.php:43:            return $this->logger->error('An error occurred while using the console. Message: "{message}"', array('exception' => $error, 'message' => $error->getMessage()));
vendor/symfony/console/EventListener/ErrorListener.php:46:        $this->logger->error('Error thrown while running command "{command}". Message: "{message}"', array('exception' => $error, 'command' => $inputString, 'message' => $error->getMessage()));
vendor/symfony/console/EventListener/ErrorListener.php:51:        if (null === $this->logger) {
vendor/symfony/console/EventListener/ErrorListener.php:55:        $exitCode = $event->getExitCode();
vendor/symfony/console/EventListener/ErrorListener.php:61:        if (!$inputString = $this->getInputString($event)) {
vendor/symfony/console/EventListener/ErrorListener.php:62:            return $this->logger->debug('The console exited with code "{code}"', array('code' => $exitCode));
vendor/symfony/console/EventListener/ErrorListener.php:65:        $this->logger->debug('Command "{command}" exited with code "{code}"', array('command' => $inputString, 'code' => $exitCode));
vendor/symfony/console/EventListener/ErrorListener.php:71:            ConsoleEvents::ERROR => array('onConsoleError', -128),
vendor/symfony/console/EventListener/ErrorListener.php:72:            ConsoleEvents::TERMINATE => array('onConsoleTerminate', -128),
vendor/symfony/console/EventListener/ErrorListener.php:78:        $commandName = $event->getCommand() ? $event->getCommand()->getName() : null;
vendor/symfony/console/EventListener/ErrorListener.php:79:        $input = $event->getInput();
vendor/symfony/debug/composer.json:23:        "symfony/http-kernel": ">=2.3,<2.3.24|~2.4.0|>=2.5,<2.5.9|>=2.6,<2.6.2"
vendor/symfony/debug/composer.json:25:    "require-dev": {
vendor/symfony/debug/composer.json:26:        "symfony/http-kernel": "~2.8|~3.0|~4.0"
vendor/symfony/debug/composer.json:29:        "psr-4": { "Symfony\\Component\\Debug\\": "" },
vendor/symfony/debug/composer.json:30:        "exclude-from-classmap": [
vendor/symfony/debug/composer.json:34:    "minimum-stability": "dev",
vendor/symfony/debug/composer.json:36:        "branch-alias": {
vendor/symfony/debug/composer.json:37:            "dev-master": "3.4-dev"
vendor/symfony/debug/Exception/FatalErrorException.php:17: * @author Konstanton Myakshin <koc-dp@yandex.ru>
vendor/symfony/debug/Exception/FatalErrorException.php:32:            $this->setTrace($trace);
vendor/symfony/debug/Exception/FatalErrorException.php:37:                    array_splice($trace, -$traceOffset);
vendor/symfony/debug/Exception/FatalErrorException.php:47:                        $frame['type'] = '->';
vendor/symfony/debug/Exception/FatalErrorException.php:72:            $this->setTrace($trace);
vendor/symfony/debug/Exception/FatalErrorException.php:79:        $traceReflector->setAccessible(true);
vendor/symfony/debug/Exception/FatalErrorException.php:80:        $traceReflector->setValue($this, $trace);
vendor/symfony/debug/Exception/UndefinedMethodException.php:25:            $previous->getCode(),
vendor/symfony/debug/Exception/UndefinedMethodException.php:26:            $previous->getSeverity(),
vendor/symfony/debug/Exception/UndefinedMethodException.php:27:            $previous->getFile(),
vendor/symfony/debug/Exception/UndefinedMethodException.php:28:            $previous->getLine(),
vendor/symfony/debug/Exception/UndefinedMethodException.php:29:            $previous->getPrevious()
vendor/symfony/debug/Exception/UndefinedMethodException.php:31:        $this->setTrace($previous->getTrace());
vendor/symfony/debug/Exception/ContextErrorException.php:28:        $this->context = $context;
vendor/symfony/debug/Exception/ContextErrorException.php:38:        return $this->context;
vendor/symfony/debug/Exception/SilencedErrorContext.php:30:        $this->severity = $severity;
vendor/symfony/debug/Exception/SilencedErrorContext.php:31:        $this->file = $file;
vendor/symfony/debug/Exception/SilencedErrorContext.php:32:        $this->line = $line;
vendor/symfony/debug/Exception/SilencedErrorContext.php:33:        $this->trace = $trace;
vendor/symfony/debug/Exception/SilencedErrorContext.php:34:        $this->count = $count;
vendor/symfony/debug/Exception/SilencedErrorContext.php:39:        return $this->severity;
vendor/symfony/debug/Exception/SilencedErrorContext.php:44:        return $this->file;
vendor/symfony/debug/Exception/SilencedErrorContext.php:49:        return $this->line;
vendor/symfony/debug/Exception/SilencedErrorContext.php:54:        return $this->trace;
vendor/symfony/debug/Exception/SilencedErrorContext.php:60:            'severity' => $this->severity,
vendor/symfony/debug/Exception/SilencedErrorContext.php:61:            'file' => $this->file,
vendor/symfony/debug/Exception/SilencedErrorContext.php:62:            'line' => $this->line,
vendor/symfony/debug/Exception/SilencedErrorContext.php:63:            'trace' => $this->trace,
vendor/symfony/debug/Exception/SilencedErrorContext.php:64:            'count' => $this->count,
vendor/symfony/debug/Exception/FatalThrowableError.php:24:            $message = 'Parse error: '.$e->getMessage();
vendor/symfony/debug/Exception/FatalThrowableError.php:27:            $message = 'Type error: '.$e->getMessage();
vendor/symfony/debug/Exception/FatalThrowableError.php:30:            $message = $e->getMessage();
vendor/symfony/debug/Exception/FatalThrowableError.php:36:            $e->getCode(),
vendor/symfony/debug/Exception/FatalThrowableError.php:38:            $e->getFile(),
vendor/symfony/debug/Exception/FatalThrowableError.php:39:            $e->getLine(),
vendor/symfony/debug/Exception/FatalThrowableError.php:40:            $e->getPrevious()
vendor/symfony/debug/Exception/FatalThrowableError.php:43:        $this->setTrace($e->getTrace());
vendor/symfony/debug/Exception/FlattenException.php:39:        $e->setMessage($exception->getMessage());
vendor/symfony/debug/Exception/FlattenException.php:40:        $e->setCode($exception->getCode());
vendor/symfony/debug/Exception/FlattenException.php:43:            $statusCode = $exception->getStatusCode();
vendor/symfony/debug/Exception/FlattenException.php:44:            $headers = array_merge($headers, $exception->getHeaders());
vendor/symfony/debug/Exception/FlattenException.php:53:        $e->setStatusCode($statusCode);
vendor/symfony/debug/Exception/FlattenException.php:54:        $e->setHeaders($headers);
vendor/symfony/debug/Exception/FlattenException.php:55:        $e->setTraceFromException($exception);
vendor/symfony/debug/Exception/FlattenException.php:56:        $e->setClass(get_class($exception));
vendor/symfony/debug/Exception/FlattenException.php:57:        $e->setFile($exception->getFile());
vendor/symfony/debug/Exception/FlattenException.php:58:        $e->setLine($exception->getLine());
vendor/symfony/debug/Exception/FlattenException.php:60:        $previous = $exception->getPrevious();
vendor/symfony/debug/Exception/FlattenException.php:63:            $e->setPrevious(static::create($previous));
vendor/symfony/debug/Exception/FlattenException.php:65:            $e->setPrevious(static::create(new FatalThrowableError($previous)));
vendor/symfony/debug/Exception/FlattenException.php:74:        foreach (array_merge(array($this), $this->getAllPrevious()) as $exception) {
vendor/symfony/debug/Exception/FlattenException.php:76:                'message' => $exception->getMessage(),
vendor/symfony/debug/Exception/FlattenException.php:77:                'class' => $exception->getClass(),
vendor/symfony/debug/Exception/FlattenException.php:78:                'trace' => $exception->getTrace(),
vendor/symfony/debug/Exception/FlattenException.php:87:        return $this->statusCode;
vendor/symfony/debug/Exception/FlattenException.php:92:        $this->statusCode = $code;
vendor/symfony/debug/Exception/FlattenException.php:97:        return $this->headers;
vendor/symfony/debug/Exception/FlattenException.php:102:        $this->headers = $headers;
vendor/symfony/debug/Exception/FlattenException.php:107:        return $this->class;
vendor/symfony/debug/Exception/FlattenException.php:112:        $this->class = $class;
vendor/symfony/debug/Exception/FlattenException.php:117:        return $this->file;
vendor/symfony/debug/Exception/FlattenException.php:122:        $this->file = $file;
vendor/symfony/debug/Exception/FlattenException.php:127:        return $this->line;
vendor/symfony/debug/Exception/FlattenException.php:132:        $this->line = $line;
vendor/symfony/debug/Exception/FlattenException.php:137:        return $this->message;
vendor/symfony/debug/Exception/FlattenException.php:142:        $this->message = $message;
vendor/symfony/debug/Exception/FlattenException.php:147:        return $this->code;
vendor/symfony/debug/Exception/FlattenException.php:152:        $this->code = $code;
vendor/symfony/debug/Exception/FlattenException.php:157:        return $this->previous;
vendor/symfony/debug/Exception/FlattenException.php:162:        $this->previous = $previous;
vendor/symfony/debug/Exception/FlattenException.php:169:        while ($e = $e->getPrevious()) {
vendor/symfony/debug/Exception/FlattenException.php:178:        return $this->trace;
vendor/symfony/debug/Exception/FlattenException.php:183:        $this->setTrace($exception->getTrace(), $exception->getFile(), $exception->getLine());
vendor/symfony/debug/Exception/FlattenException.php:188:        $this->trace = array();
vendor/symfony/debug/Exception/FlattenException.php:189:        $this->trace[] = array(
vendor/symfony/debug/Exception/FlattenException.php:208:            $this->trace[] = array(
vendor/symfony/debug/Exception/FlattenException.php:216:                'args' => isset($entry['args']) ? $this->flattenArgs($entry['args']) : array(),
vendor/symfony/debug/Exception/FlattenException.php:230:                $result[$key] = array('incomplete-object', $this->getClassNameFromIncomplete($value));
vendor/symfony/debug/Exception/FlattenException.php:237:                    $result[$key] = array('array', $this->flattenArgs($value, $level + 1, $count));
vendor/symfony/debug/Exception/UndefinedFunctionException.php:17: * @author Konstanton Myakshin <koc-dp@yandex.ru>
vendor/symfony/debug/Exception/UndefinedFunctionException.php:25:            $previous->getCode(),
vendor/symfony/debug/Exception/UndefinedFunctionException.php:26:            $previous->getSeverity(),
vendor/symfony/debug/Exception/UndefinedFunctionException.php:27:            $previous->getFile(),
vendor/symfony/debug/Exception/UndefinedFunctionException.php:28:            $previous->getLine(),
vendor/symfony/debug/Exception/UndefinedFunctionException.php:29:            $previous->getPrevious()
vendor/symfony/debug/Exception/UndefinedFunctionException.php:31:        $this->setTrace($previous->getTrace());
vendor/symfony/debug/Exception/ClassNotFoundException.php:17: * @author Konstanton Myakshin <koc-dp@yandex.ru>
vendor/symfony/debug/Exception/ClassNotFoundException.php:25:            $previous->getCode(),
vendor/symfony/debug/Exception/ClassNotFoundException.php:26:            $previous->getSeverity(),
vendor/symfony/debug/Exception/ClassNotFoundException.php:27:            $previous->getFile(),
vendor/symfony/debug/Exception/ClassNotFoundException.php:28:            $previous->getLine(),
vendor/symfony/debug/Exception/ClassNotFoundException.php:29:            $previous->getPrevious()
vendor/symfony/debug/Exception/ClassNotFoundException.php:31:        $this->setTrace($previous->getTrace());
vendor/symfony/debug/DebugClassLoader.php:42:        $this->classLoader = $classLoader;
vendor/symfony/debug/DebugClassLoader.php:43:        $this->isFinder = is_array($classLoader) && method_exists($classLoader[0], 'findFile');
vendor/symfony/debug/DebugClassLoader.php:56:            } elseif (substr($test, -strlen($file)) === $file) {
vendor/symfony/debug/DebugClassLoader.php:76:        return $this->classLoader;
vendor/symfony/debug/DebugClassLoader.php:120:                $function = $function[0]->getClassLoader();
vendor/symfony/debug/DebugClassLoader.php:141:            if ($this->isFinder && !isset($this->loaded[$class])) {
vendor/symfony/debug/DebugClassLoader.php:142:                $this->loaded[$class] = true;
vendor/symfony/debug/DebugClassLoader.php:143:                if ($file = $this->classLoader[0]->findFile($class) ?: false) {
vendor/symfony/debug/DebugClassLoader.php:153:                call_user_func($this->classLoader, $class);
vendor/symfony/debug/DebugClassLoader.php:160:        $this->checkClass($class, $file);
vendor/symfony/debug/DebugClassLoader.php:178:            if (null === $file && $refl->isInternal()) {
vendor/symfony/debug/DebugClassLoader.php:181:            $name = $refl->getName();
vendor/symfony/debug/DebugClassLoader.php:196:            if (false !== $doc = $refl->getDocComment()) {
vendor/symfony/debug/DebugClassLoader.php:209:                    $this->checkClass($parent);
vendor/symfony/debug/DebugClassLoader.php:218:            foreach ($parentAndTraits + $this->getOwnInterfaces($name, $parent) as $use) {
vendor/symfony/debug/DebugClassLoader.php:220:                    $this->checkClass($use);
vendor/symfony/debug/DebugClassLoader.php:245:            foreach ($refl->getMethods(\ReflectionMethod::IS_PUBLIC | \ReflectionMethod::IS_PROTECTED) as $method) {
vendor/symfony/debug/DebugClassLoader.php:246:                if ($method->class !== $name) {
vendor/symfony/debug/DebugClassLoader.php:251:                if ($method->getFilename() !== $refl->getFileName()) {
vendor/symfony/debug/DebugClassLoader.php:255:                if ($isClass && $parent && isset(self::$finalMethods[$parent][$method->name])) {
vendor/symfony/debug/DebugClassLoader.php:256:                    list($declaringClass, $message) = self::$finalMethods[$parent][$method->name];
vendor/symfony/debug/DebugClassLoader.php:257:                    @trigger_error(sprintf('The "%s::%s()" method is considered final%s. It may change without further notice as of its next major version. You should not extend it from "%s".', $declaringClass, $method->name, $message, $name), E_USER_DEPRECATED);
vendor/symfony/debug/DebugClassLoader.php:261:                    if (isset(self::$internalMethods[$use][$method->name])) {
vendor/symfony/debug/DebugClassLoader.php:262:                        list($declaringClass, $message) = self::$internalMethods[$use][$method->name];
vendor/symfony/debug/DebugClassLoader.php:264:                            @trigger_error(sprintf('The "%s::%s()" method is considered internal%s. It may change without further notice. You should not extend it from "%s".', $declaringClass, $method->name, $message, $name), E_USER_DEPRECATED);
vendor/symfony/debug/DebugClassLoader.php:270:                if (false === $doc = $method->getDocComment()) {
vendor/symfony/debug/DebugClassLoader.php:277:                        self::${$annotation.'Methods'}[$name][$method->name] = array($name, $message);
vendor/symfony/debug/DebugClassLoader.php:282:            if (isset(self::$php7Reserved[\strtolower($refl->getShortName())])) {
vendor/symfony/debug/DebugClassLoader.php:283:                @trigger_error(sprintf('The "%s" class uses the reserved name "%s", it will break on PHP 7 and higher', $name, $refl->getShortName()), E_USER_DEPRECATED);
vendor/symfony/debug/DebugClassLoader.php:299:                $i = count($tail) - 1;
vendor/symfony/debug/DebugClassLoader.php:300:                $j = count($real) - 1;
vendor/symfony/debug/DebugClassLoader.php:303:                    --$i;
vendor/symfony/debug/DebugClassLoader.php:304:                    --$j;
vendor/symfony/debug/DebugClassLoader.php:312:                $real = $refl->getFileName();
vendor/symfony/debug/DebugClassLoader.php:336:                            $i = strlen($dir) - 1;
vendor/symfony/debug/DebugClassLoader.php:341:                                while ('/' !== $dir[--$i]) {
vendor/symfony/debug/DebugClassLoader.php:344:                                $dir = substr($dir, 0, $i--);
vendor/symfony/debug/DebugClassLoader.php:374:                if (0 === substr_compare($real, $tail, -$tailLen, $tailLen, true)
vendor/symfony/debug/DebugClassLoader.php:375:                  && 0 !== substr_compare($real, $tail, -$tailLen, $tailLen, false)
vendor/symfony/debug/DebugClassLoader.php:377:                    throw new \RuntimeException(sprintf('Case mismatch between class and real file names: "%s" vs "%s" in "%s".', substr($tail, -$tailLen + 1), substr($real, -$tailLen + 1), substr($real, 0, -$tailLen + 1)));
vendor/symfony/debug/README.md:7:---------
vendor/symfony/debug/ErrorHandler.php:30: * - thrownErrors: errors thrown as \ErrorException
vendor/symfony/debug/ErrorHandler.php:31: * - loggedErrors: logged errors, when not @-silenced
vendor/symfony/debug/ErrorHandler.php:32: * - scopedErrors: errors thrown or logged with their local context
vendor/symfony/debug/ErrorHandler.php:33: * - tracedErrors: errors logged with their stack trace
vendor/symfony/debug/ErrorHandler.php:34: * - screamedErrors: never @-silenced errors
vendor/symfony/debug/ErrorHandler.php:36: * Each error level can be logged by a dedicated PSR-3 logger object.
vendor/symfony/debug/ErrorHandler.php:87:    private $thrownErrors = 0x1FFF; // E_ALL - E_DEPRECATED - E_USER_DEPRECATED
vendor/symfony/debug/ErrorHandler.php:88:    private $scopedErrors = 0x1FFF; // E_ALL - E_DEPRECATED - E_USER_DEPRECATED
vendor/symfony/debug/ErrorHandler.php:89:    private $tracedErrors = 0x77FB; // E_ALL - E_STRICT - E_PARSE
vendor/symfony/debug/ErrorHandler.php:129:            set_error_handler(array($handler, 'handleError'), $handler->thrownErrors | $handler->loggedErrors);
vendor/symfony/debug/ErrorHandler.php:130:            $handler->isRoot = true;
vendor/symfony/debug/ErrorHandler.php:149:                $p = $prev[0]->setExceptionHandler(null);
vendor/symfony/debug/ErrorHandler.php:150:                $handler->setExceptionHandler($p);
vendor/symfony/debug/ErrorHandler.php:151:                $prev[0]->setExceptionHandler($p);
vendor/symfony/debug/ErrorHandler.php:154:            $handler->setExceptionHandler($prev);
vendor/symfony/debug/ErrorHandler.php:157:        $handler->throwAt(E_ALL & $handler->thrownErrors, true);
vendor/symfony/debug/ErrorHandler.php:165:            $this->bootstrappingLogger = $bootstrappingLogger;
vendor/symfony/debug/ErrorHandler.php:166:            $this->setDefaultLogger($bootstrappingLogger);
vendor/symfony/debug/ErrorHandler.php:168:        $this->traceReflector = new \ReflectionProperty('Exception', 'trace');
vendor/symfony/debug/ErrorHandler.php:169:        $this->traceReflector->setAccessible(true);
vendor/symfony/debug/ErrorHandler.php:175:     * @param LoggerInterface $logger  A PSR-3 logger to put as default for the given levels
vendor/symfony/debug/ErrorHandler.php:185:                if (empty($this->loggers[$type][0]) || $replace || $this->loggers[$type][0] === $this->bootstrappingLogger) {
vendor/symfony/debug/ErrorHandler.php:193:            foreach ($this->loggers as $type => $log) {
vendor/symfony/debug/ErrorHandler.php:194:                if (($type & $levels) && (empty($log[0]) || $replace || $log[0] === $this->bootstrappingLogger)) {
vendor/symfony/debug/ErrorHandler.php:201:        $this->setLoggers($loggers);
vendor/symfony/debug/ErrorHandler.php:215:        $prevLogged = $this->loggedErrors;
vendor/symfony/debug/ErrorHandler.php:216:        $prev = $this->loggers;
vendor/symfony/debug/ErrorHandler.php:229:                $this->loggedErrors &= ~$type;
vendor/symfony/debug/ErrorHandler.php:231:                $this->loggedErrors |= $type;
vendor/symfony/debug/ErrorHandler.php:235:            $this->loggers[$type] = $log + $prev[$type];
vendor/symfony/debug/ErrorHandler.php:237:            if ($this->bootstrappingLogger && $prev[$type][0] === $this->bootstrappingLogger) {
vendor/symfony/debug/ErrorHandler.php:241:        $this->reRegister($prevLogged | $this->thrownErrors);
vendor/symfony/debug/ErrorHandler.php:244:            foreach ($this->bootstrappingLogger->cleanLogs() as $log) {
vendor/symfony/debug/ErrorHandler.php:245:                $type = $log[2]['exception'] instanceof \ErrorException ? $log[2]['exception']->getSeverity() : E_ERROR;
vendor/symfony/debug/ErrorHandler.php:247:                    $this->bootstrappingLogger->log($log[0], $log[1], $log[2]);
vendor/symfony/debug/ErrorHandler.php:248:                } elseif ($this->loggers[$type][0]) {
vendor/symfony/debug/ErrorHandler.php:249:                    $this->loggers[$type][0]->log($this->loggers[$type][1], $log[1], $log[2]);
vendor/symfony/debug/ErrorHandler.php:266:        $prev = $this->exceptionHandler;
vendor/symfony/debug/ErrorHandler.php:267:        $this->exceptionHandler = $handler;
vendor/symfony/debug/ErrorHandler.php:282:        $prev = $this->thrownErrors;
vendor/symfony/debug/ErrorHandler.php:283:        $this->thrownErrors = ($levels | E_RECOVERABLE_ERROR | E_USER_ERROR) & ~E_USER_DEPRECATED & ~E_DEPRECATED;
vendor/symfony/debug/ErrorHandler.php:285:            $this->thrownErrors |= $prev;
vendor/symfony/debug/ErrorHandler.php:287:        $this->reRegister($prev | $this->loggedErrors);
vendor/symfony/debug/ErrorHandler.php:302:        $prev = $this->scopedErrors;
vendor/symfony/debug/ErrorHandler.php:303:        $this->scopedErrors = (int) $levels;
vendor/symfony/debug/ErrorHandler.php:305:            $this->scopedErrors |= $prev;
vendor/symfony/debug/ErrorHandler.php:321:        $prev = $this->tracedErrors;
vendor/symfony/debug/ErrorHandler.php:322:        $this->tracedErrors = (int) $levels;
vendor/symfony/debug/ErrorHandler.php:324:            $this->tracedErrors |= $prev;
vendor/symfony/debug/ErrorHandler.php:331:     * Sets the error levels where the @-operator is ignored.
vendor/symfony/debug/ErrorHandler.php:340:        $prev = $this->screamedErrors;
vendor/symfony/debug/ErrorHandler.php:341:        $this->screamedErrors = (int) $levels;
vendor/symfony/debug/ErrorHandler.php:343:            $this->screamedErrors |= $prev;
vendor/symfony/debug/ErrorHandler.php:350:     * Re-registers as a PHP error handler if levels changed.
vendor/symfony/debug/ErrorHandler.php:354:        if ($prev !== $this->thrownErrors | $this->loggedErrors) {
vendor/symfony/debug/ErrorHandler.php:360:                if ($this->isRoot) {
vendor/symfony/debug/ErrorHandler.php:361:                    set_error_handler(array($this, 'handleError'), $this->thrownErrors | $this->loggedErrors);
vendor/symfony/debug/ErrorHandler.php:379:     * @throws \ErrorException When $this->thrownErrors requests so
vendor/symfony/debug/ErrorHandler.php:390:        $log = $this->loggedErrors & $type;
vendor/symfony/debug/ErrorHandler.php:391:        $throw = $this->thrownErrors & $type & $level;
vendor/symfony/debug/ErrorHandler.php:392:        $type &= $level | $this->screamedErrors;
vendor/symfony/debug/ErrorHandler.php:397:        $scope = $this->scopedErrors & $type;
vendor/symfony/debug/ErrorHandler.php:417:            $this->handleFatalError(compact('type', 'message', 'file', 'line', 'backtrace'));
vendor/symfony/debug/ErrorHandler.php:422:        $logMessage = $this->levels[$type].': '.$message;
vendor/symfony/debug/ErrorHandler.php:429:                $lightTrace = $this->tracedErrors & $type ? $this->cleanTrace(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 3), $type, $file, $line, false) : array();
vendor/symfony/debug/ErrorHandler.php:434:                ++$errorAsException->count;
vendor/symfony/debug/ErrorHandler.php:458:            if ($throw || $this->tracedErrors & $type) {
vendor/symfony/debug/ErrorHandler.php:459:                $backtrace = $backtrace ?: $errorAsException->getTrace();
vendor/symfony/debug/ErrorHandler.php:460:                $lightTrace = $this->cleanTrace($backtrace, $type, $file, $line, $throw);
vendor/symfony/debug/ErrorHandler.php:461:                $this->traceReflector->setValue($errorAsException, $lightTrace);
vendor/symfony/debug/ErrorHandler.php:463:                $this->traceReflector->setValue($errorAsException, array());
vendor/symfony/debug/ErrorHandler.php:470:                    if (isset($backtrace[$i]['function'], $backtrace[$i]['type'], $backtrace[$i - 1]['function'])
vendor/symfony/debug/ErrorHandler.php:472:                        && '->' === $backtrace[$i]['type']
vendor/symfony/debug/ErrorHandler.php:473:                        && !isset($backtrace[$i - 1]['class'])
vendor/symfony/debug/ErrorHandler.php:474:                        && ('trigger_error' === $backtrace[$i - 1]['function'] || 'user_error' === $backtrace[$i - 1]['function'])
vendor/symfony/debug/ErrorHandler.php:484:                            if (($e instanceof \Exception || $e instanceof \Throwable) && $e->__toString() === $message) {
vendor/symfony/debug/ErrorHandler.php:498:                            $this->handleException($errorAsException);
vendor/symfony/debug/ErrorHandler.php:510:        if ($this->isRecursive) {
vendor/symfony/debug/ErrorHandler.php:514:                $this->loggers[$type][0],
vendor/symfony/debug/ErrorHandler.php:515:                ($type & $level) ? $this->loggers[$type][1] : LogLevel::DEBUG,
vendor/symfony/debug/ErrorHandler.php:521:                $this->isRecursive = true;
vendor/symfony/debug/ErrorHandler.php:522:                $level = ($type & $level) ? $this->loggers[$type][1] : LogLevel::DEBUG;
vendor/symfony/debug/ErrorHandler.php:523:                $this->loggers[$type][0]->log($level, $logMessage, $errorAsException ? array('exception' => $errorAsException) : array());
vendor/symfony/debug/ErrorHandler.php:525:                $this->isRecursive = false;
vendor/symfony/debug/ErrorHandler.php:548:        $type = $exception instanceof FatalErrorException ? $exception->getSeverity() : E_ERROR;
vendor/symfony/debug/ErrorHandler.php:551:        if (($this->loggedErrors & $type) || $exception instanceof FatalThrowableError) {
vendor/symfony/debug/ErrorHandler.php:556:                        'message' => $message = $exception->getMessage(),
vendor/symfony/debug/ErrorHandler.php:557:                        'file' => $exception->getFile(),
vendor/symfony/debug/ErrorHandler.php:558:                        'line' => $exception->getLine(),
vendor/symfony/debug/ErrorHandler.php:561:                    $message = 'Fatal '.$exception->getMessage();
vendor/symfony/debug/ErrorHandler.php:564:                $message = 'Uncaught '.$exception->getMessage();
vendor/symfony/debug/ErrorHandler.php:566:                $message = 'Uncaught Exception: '.$exception->getMessage();
vendor/symfony/debug/ErrorHandler.php:569:        if ($this->loggedErrors & $type) {
vendor/symfony/debug/ErrorHandler.php:571:                $this->loggers[$type][0]->log($this->loggers[$type][1], $message, array('exception' => $exception));
vendor/symfony/debug/ErrorHandler.php:577:            foreach ($this->getFatalErrorHandlers() as $handler) {
vendor/symfony/debug/ErrorHandler.php:578:                if ($e = $handler->handleError($error, $exception)) {
vendor/symfony/debug/ErrorHandler.php:584:        $exceptionHandler = $this->exceptionHandler;
vendor/symfony/debug/ErrorHandler.php:585:        $this->exceptionHandler = null;
vendor/symfony/debug/ErrorHandler.php:598:        $this->handleException($handlerException);
vendor/symfony/debug/ErrorHandler.php:631:            } elseif (0 === --$sameHandlerLimit) {
vendor/symfony/debug/ErrorHandler.php:643:            $handler[0]->setExceptionHandler($h);
vendor/symfony/debug/ErrorHandler.php:664:            $handler->throwAt(0, true);
vendor/symfony/debug/ErrorHandler.php:668:                $exception = new OutOfMemoryException($handler->levels[$error['type']].': '.$error['message'], 0, $error['type'], $error['file'], $error['line'], 2, false, $trace);
vendor/symfony/debug/ErrorHandler.php:670:                $exception = new FatalErrorException($handler->levels[$error['type']].': '.$error['message'], 0, $error['type'], $error['file'], $error['line'], 2, true, $trace);
vendor/symfony/debug/ErrorHandler.php:677:                $handler->handleException($exception, $error);
vendor/symfony/debug/ErrorHandler.php:680:            // Ignore this re-throw
vendor/symfony/debug/ErrorHandler.php:691:     * Ensures also that non-catchable fatal errors are never silenced.
vendor/symfony/debug/ErrorHandler.php:733:                $error[0]->log($error[1], $error[2], $error[3]);
vendor/symfony/debug/ErrorHandler.php:764:        if (!($throw || $this->scopedErrors & $type)) {
vendor/symfony/debug/Resources/ext/README.md:5:It is compatible with PHP 5.3, 5.4, 5.5 and 5.6; with ZTS and non-ZTS modes.
vendor/symfony/debug/Resources/ext/README.md:9:-------------------
vendor/symfony/debug/Resources/ext/README.md:11:- exposes zval_hash/refcounts, allowing e.g. efficient exploration of arbitrary structures in PHP,
vendor/symfony/debug/Resources/ext/README.md:12:- does work with references, preventing memory copying.
vendor/symfony/debug/Resources/ext/README.md:71:-------------------------
vendor/symfony/debug/Resources/ext/README.md:125:-----
vendor/symfony/debug/Resources/ext/tests/002_1.phpt:1:--TEST--
vendor/symfony/debug/Resources/ext/tests/002_1.phpt:3:--SKIPIF--
vendor/symfony/debug/Resources/ext/tests/002_1.phpt:7:--FILE--
vendor/symfony/debug/Resources/ext/tests/002_1.phpt:23:--EXPECTF--
vendor/symfony/debug/Resources/ext/tests/001.phpt:1:--TEST--
vendor/symfony/debug/Resources/ext/tests/001.phpt:3:--SKIPIF--
vendor/symfony/debug/Resources/ext/tests/001.phpt:7:--FILE--
vendor/symfony/debug/Resources/ext/tests/001.phpt:44:var_dump(symfony_zval_info('not-exist', $var));
vendor/symfony/debug/Resources/ext/tests/001.phpt:46:--EXPECTF--
vendor/symfony/debug/Resources/ext/tests/002.phpt:1:--TEST--
vendor/symfony/debug/Resources/ext/tests/002.phpt:3:--SKIPIF--
vendor/symfony/debug/Resources/ext/tests/002.phpt:7:--FILE--
vendor/symfony/debug/Resources/ext/tests/002.phpt:30:--EXPECTF--
vendor/symfony/debug/Resources/ext/tests/003.phpt:1:--TEST--
vendor/symfony/debug/Resources/ext/tests/003.phpt:3:--SKIPIF--
vendor/symfony/debug/Resources/ext/tests/003.phpt:7:--FILE--
vendor/symfony/debug/Resources/ext/tests/003.phpt:46:$handler->setExceptionHandler('print_r');
vendor/symfony/debug/Resources/ext/tests/003.phpt:54:--EXPECTF--
vendor/symfony/debug/Resources/ext/symfony_debug.c:102:		add_assoc_stringl(return_value, "object_class", (char *)Z_OBJCE_P(arg)->name, Z_OBJCE_P(arg)->name_length, 1);
vendor/symfony/debug/Resources/ext/symfony_debug.c:158:		return le->refcount;
vendor/symfony/debug/Resources/ext/config.m4:12:dnl [  --with-symfony_debug             Include symfony_debug support])
vendor/symfony/debug/Resources/ext/config.m4:18:[  --enable-symfony_debug           Enable symfony_debug support])
vendor/symfony/debug/Resources/ext/config.m4:23:  dnl # --with-symfony_debug -> check with-path
vendor/symfony/debug/Resources/ext/config.m4:26:  dnl if test -r $PHP_SYMFONY_DEBUG/$SEARCH_FOR; then # path given as parameter
vendor/symfony/debug/Resources/ext/config.m4:31:  dnl     if test -r $i/$SEARCH_FOR; then
vendor/symfony/debug/Resources/ext/config.m4:38:  dnl if test -z "$SYMFONY_DEBUG_DIR"; then
vendor/symfony/debug/Resources/ext/config.m4:43:  dnl # --with-symfony_debug -> add include path
vendor/symfony/debug/Resources/ext/config.m4:46:  dnl # --with-symfony_debug -> check for lib and symbol presence
vendor/symfony/debug/Resources/ext/config.m4:57:  dnl   -L$SYMFONY_DEBUG_DIR/lib -lm
vendor/symfony/debug/phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/debug/phpunit.xml.dist:3:<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
vendor/symfony/debug/phpunit.xml.dist:12:        <ini name="error_reporting" value="-1" />
vendor/symfony/debug/ExceptionHandler.php:41:        $this->debug = $debug;
vendor/symfony/debug/ExceptionHandler.php:42:        $this->charset = $charset ?: ini_get('default_charset') ?: 'UTF-8';
vendor/symfony/debug/ExceptionHandler.php:43:        $this->fileLinkFormat = $fileLinkFormat;
vendor/symfony/debug/ExceptionHandler.php:62:            $prev[0]->setExceptionHandler(array($handler, 'handle'));
vendor/symfony/debug/ExceptionHandler.php:77:        $old = $this->handler;
vendor/symfony/debug/ExceptionHandler.php:78:        $this->handler = $handler;
vendor/symfony/debug/ExceptionHandler.php:92:        $old = $this->fileLinkFormat;
vendor/symfony/debug/ExceptionHandler.php:93:        $this->fileLinkFormat = $fileLinkFormat;
vendor/symfony/debug/ExceptionHandler.php:101:     * To be as fail-safe as possible, the exception is first handled
vendor/symfony/debug/ExceptionHandler.php:108:        if (null === $this->handler || $exception instanceof OutOfMemoryException) {
vendor/symfony/debug/ExceptionHandler.php:109:            $this->sendPhpResponse($exception);
vendor/symfony/debug/ExceptionHandler.php:114:        $caughtLength = $this->caughtLength = 0;
vendor/symfony/debug/ExceptionHandler.php:117:            $this->caughtBuffer = $buffer;
vendor/symfony/debug/ExceptionHandler.php:122:        $this->sendPhpResponse($exception);
vendor/symfony/debug/ExceptionHandler.php:123:        while (null === $this->caughtBuffer && ob_end_flush()) {
vendor/symfony/debug/ExceptionHandler.php:126:        if (isset($this->caughtBuffer[0])) {
vendor/symfony/debug/ExceptionHandler.php:128:                if ($this->caughtLength) {
vendor/symfony/debug/ExceptionHandler.php:130:                    $cleanBuffer = substr_replace($buffer, '', 0, $this->caughtLength);
vendor/symfony/debug/ExceptionHandler.php:139:            echo $this->caughtBuffer;
vendor/symfony/debug/ExceptionHandler.php:142:        $this->caughtBuffer = null;
vendor/symfony/debug/ExceptionHandler.php:145:            call_user_func($this->handler, $exception);
vendor/symfony/debug/ExceptionHandler.php:146:            $this->caughtLength = $caughtLength;
vendor/symfony/debug/ExceptionHandler.php:170:            header(sprintf('HTTP/1.0 %s', $exception->getStatusCode()));
vendor/symfony/debug/ExceptionHandler.php:171:            foreach ($exception->getHeaders() as $name => $value) {
vendor/symfony/debug/ExceptionHandler.php:174:            header('Content-Type: text/html; charset='.$this->charset);
vendor/symfony/debug/ExceptionHandler.php:177:        echo $this->decorate($this->getContent($exception), $this->getStylesheet($exception));
vendor/symfony/debug/ExceptionHandler.php:193:        return $this->decorate($this->getContent($exception), $this->getStylesheet($exception));
vendor/symfony/debug/ExceptionHandler.php:203:        switch ($exception->getStatusCode()) {
vendor/symfony/debug/ExceptionHandler.php:212:        if ($this->debug) {
vendor/symfony/debug/ExceptionHandler.php:214:                $count = count($exception->getAllPrevious());
vendor/symfony/debug/ExceptionHandler.php:216:                foreach ($exception->toArray() as $position => $e) {
vendor/symfony/debug/ExceptionHandler.php:217:                    $ind = $count - $position + 1;
vendor/symfony/debug/ExceptionHandler.php:218:                    $class = $this->formatClass($e['class']);
vendor/symfony/debug/ExceptionHandler.php:219:                    $message = nl2br($this->escapeHtml($e['message']));
vendor/symfony/debug/ExceptionHandler.php:221:                        <div class="trace trace-as-html">
vendor/symfony/debug/ExceptionHandler.php:222:                            <table class="trace-details">
vendor/symfony/debug/ExceptionHandler.php:223:                                <thead class="trace-head"><tr><th>
vendor/symfony/debug/ExceptionHandler.php:224:                                    <h3 class="trace-class">
vendor/symfony/debug/ExceptionHandler.php:225:                                        <span class="text-muted">(%d/%d)</span>
vendor/symfony/debug/ExceptionHandler.php:228:                                    <p class="break-long-words trace-message">%s</p>
vendor/symfony/debug/ExceptionHandler.php:236:                            $content .= sprintf('at <span class="trace-class">%s</span><span class="trace-type">%s</span><span class="trace-method">%s</span>(<span class="trace-arguments">%s</span>)', $this->formatClass($trace['class']), $trace['type'], $trace['function'], $this->formatArgs($trace['args']));
vendor/symfony/debug/ExceptionHandler.php:239:                            $content .= $this->formatPath($trace['file'], $trace['line']);
vendor/symfony/debug/ExceptionHandler.php:248:                if ($this->debug) {
vendor/symfony/debug/ExceptionHandler.php:249:                    $title = sprintf('Exception thrown when handling an exception (%s: %s)', get_class($e), $this->escapeHtml($e->getMessage()));
vendor/symfony/debug/ExceptionHandler.php:256:        $symfonyGhostImageContents = $this->getSymfonyGhostAsSvg();
vendor/symfony/debug/ExceptionHandler.php:259:            <div class="exception-summary">
vendor/symfony/debug/ExceptionHandler.php:261:                    <div class="exception-message-wrapper">
vendor/symfony/debug/ExceptionHandler.php:262:                        <h1 class="break-long-words exception-message">$title</h1>
vendor/symfony/debug/ExceptionHandler.php:263:                        <div class="exception-illustration hidden-xs-down">$symfonyGhostImageContents</div>
vendor/symfony/debug/ExceptionHandler.php:282:            body { background-color: #F9F9F9; color: #222; font: 14px/1.4 Helvetica, Arial, sans-serif; margin: 0; padding-bottom: 45px; }
vendor/symfony/debug/ExceptionHandler.php:284:            a { cursor: pointer; text-decoration: none; }
vendor/symfony/debug/ExceptionHandler.php:285:            a:hover { text-decoration: underline; }
vendor/symfony/debug/ExceptionHandler.php:286:            abbr[title] { border-bottom: none; cursor: help; text-decoration: none; }
vendor/symfony/debug/ExceptionHandler.php:290:            table, tr, th, td { background: #FFF; border-collapse: collapse; vertical-align: top; }
vendor/symfony/debug/ExceptionHandler.php:291:            table { background: #FFF; border: 1px solid #E0E0E0; box-shadow: 0px 0px 1px rgba(128, 128, 128, .2); margin: 1em 0; width: 100%; }
vendor/symfony/debug/ExceptionHandler.php:292:            table th, table td { border: solid #E0E0E0; border-width: 1px 0; padding: 8px 10px; }
vendor/symfony/debug/ExceptionHandler.php:293:            table th { background-color: #E0E0E0; font-weight: bold; text-align: left; }
vendor/symfony/debug/ExceptionHandler.php:295:            .hidden-xs-down { display: none; }
vendor/symfony/debug/ExceptionHandler.php:297:            .break-long-words { -ms-word-break: break-all; word-break: break-all; word-break: break-word; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; }
vendor/symfony/debug/ExceptionHandler.php:298:            .text-muted { color: #999; }
vendor/symfony/debug/ExceptionHandler.php:300:            .container { max-width: 1024px; margin: 0 auto; padding: 0 15px; }
vendor/symfony/debug/ExceptionHandler.php:303:            .exception-summary { background: #B0413E; border-bottom: 2px solid rgba(0, 0, 0, 0.1); border-top: 1px solid rgba(0, 0, 0, .3); flex: 0 0 auto; margin-bottom: 30px; }
vendor/symfony/debug/ExceptionHandler.php:305:            .exception-message-wrapper { display: flex; align-items: center; min-height: 70px; }
vendor/symfony/debug/ExceptionHandler.php:306:            .exception-message { flex-grow: 1; padding: 30px 0; }
vendor/symfony/debug/ExceptionHandler.php:307:            .exception-message, .exception-message a { color: #FFF; font-size: 21px; font-weight: 400; margin: 0; }
vendor/symfony/debug/ExceptionHandler.php:308:            .exception-message.long { font-size: 18px; }
vendor/symfony/debug/ExceptionHandler.php:309:            .exception-message a { border-bottom: 1px solid rgba(255, 255, 255, 0.5); font-size: inherit; text-decoration: none; }
vendor/symfony/debug/ExceptionHandler.php:310:            .exception-message a:hover { border-bottom-color: #ffffff; }
vendor/symfony/debug/ExceptionHandler.php:312:            .exception-illustration { flex-basis: 111px; flex-shrink: 0; height: 66px; margin-left: 15px; opacity: .7; }
vendor/symfony/debug/ExceptionHandler.php:314:            .trace + .trace { margin-top: 30px; }
vendor/symfony/debug/ExceptionHandler.php:315:            .trace-head .trace-class { color: #222; font-size: 18px; font-weight: bold; line-height: 1.3; margin: 0; position: relative; }
vendor/symfony/debug/ExceptionHandler.php:317:            .trace-message { font-size: 14px; font-weight: normal; margin: .5em 0 0; }
vendor/symfony/debug/ExceptionHandler.php:319:            .trace-file-path, .trace-file-path a { color: #222; margin-top: 3px; font-size: 13px; }
vendor/symfony/debug/ExceptionHandler.php:320:            .trace-class { color: #B0413E; }
vendor/symfony/debug/ExceptionHandler.php:321:            .trace-type { padding: 0 2px; }
vendor/symfony/debug/ExceptionHandler.php:322:            .trace-method { color: #B0413E; font-weight: bold; }
vendor/symfony/debug/ExceptionHandler.php:323:            .trace-arguments { color: #777; font-weight: normal; padding-left: 2px; }
vendor/symfony/debug/ExceptionHandler.php:325:            @media (min-width: 575px) {
vendor/symfony/debug/ExceptionHandler.php:326:                .hidden-xs-down { display: initial; }
vendor/symfony/debug/ExceptionHandler.php:337:        <meta charset="{$this->charset}" />
vendor/symfony/debug/ExceptionHandler.php:357:        $file = $this->escapeHtml(preg_match('#[^/\\\\]*+$#', $path, $file) ? $file[0] : $path);
vendor/symfony/debug/ExceptionHandler.php:358:        $fmt = $this->fileLinkFormat ?: ini_get('xdebug.file_link_format') ?: get_cfg_var('xdebug.file_link_format');
vendor/symfony/debug/ExceptionHandler.php:361:            return sprintf('<span class="block trace-file-path">in <a title="%s%3$s"><strong>%s</strong>%s</a></span>', $this->escapeHtml($path), $file, 0 < $line ? ' line '.$line : '');
vendor/symfony/debug/ExceptionHandler.php:366:            $fmt = array(substr($f, 0, $i)) + preg_split('/&([^>]++)>/', substr($f, $i), -1, PREG_SPLIT_DELIM_CAPTURE);
vendor/symfony/debug/ExceptionHandler.php:377:            $link = $fmt->format($path, $line);
vendor/symfony/debug/ExceptionHandler.php:380:        return sprintf('<span class="block trace-file-path">in <a href="%s" title="Go to source"><strong>%s</string>%s</a></span>', $this->escapeHtml($link), $file, 0 < $line ? ' line '.$line : '');
vendor/symfony/debug/ExceptionHandler.php:395:                $formattedValue = sprintf('<em>object</em>(%s)', $this->formatClass($item[1]));
vendor/symfony/debug/ExceptionHandler.php:397:                $formattedValue = sprintf('<em>array</em>(%s)', is_array($item[1]) ? $this->formatArgs($item[1]) : $item[1]);
vendor/symfony/debug/ExceptionHandler.php:405:                $formattedValue = str_replace("\n", '', $this->escapeHtml(var_export($item[1], true)));
vendor/symfony/debug/ExceptionHandler.php:408:            $result[] = is_int($key) ? $formattedValue : sprintf("'%s' => %s", $this->escapeHtml($key), $formattedValue);
vendor/symfony/debug/ExceptionHandler.php:415:     * HTML-encodes a string.
vendor/symfony/debug/ExceptionHandler.php:419:        return htmlspecialchars($str, ENT_COMPAT | ENT_SUBSTITUTE, $this->charset);
vendor/symfony/debug/ExceptionHandler.php:424:        return '<svg viewBox="0 0 136 81" xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="1.414"><path d="M92.358 20.403a23.168 23.168 0 0 1 9.003 1.881 23.67 23.67 0 0 1 5.197 3.079 24.257 24.257 0 0 1 3.457 3.296 24.771 24.771 0 0 1 5.042 9.396c.486 1.72.78 3.492.895 5.28l.008.142.028.158.015.246v13.875c.116.034.232.065.348.098.193.054.383.116.577.168.487.125.989.191 1.49.215.338.016.689.023 1.021-.059.021-.005.032-.029.048-.044l.095-.1c.243-.265.461-.552.663-.851.277-.408.523-.837.746-1.279l.042-.087c-.066-.012-.131-.026-.197-.04l-.099-.023a5.536 5.536 0 0 1-.694-.242 5.649 5.649 0 0 1-2.374-1.845 5.694 5.694 0 0 1-.824-1.594 6.514 6.514 0 0 1-.267-2.781c.045-.394.126-.779.233-1.159.079-.278.162-.562.307-.812.094-.163.129-.196.247-.341l.79-.882c.143-.143.174-.186.34-.303.249-.174.536-.289.834-.333.074-.011.15-.014.224-.02l1.188-.037c.173.004.217-.002.388.028s.211.05.375.105l.018.007c.059.026.119.05.176.079.151.076.179.104.313.2l.006-.021c.073-.187.084-.238.187-.41.077-.129.167-.249.27-.357.051-.054.108-.103.162-.154l1.124-.95c.14-.107.172-.14.327-.224.155-.085.199-.094.363-.154l.019-.006c.169-.043.211-.06.385-.077.174-.016.218-.007.392.003l1.446.158c.193.033.244.033.43.098.278.097.534.259.744.47.053.053.1.112.149.167l.923 1.158.149.213.028.054.017-.014.184-.125c.196-.104.196-.104.402-.184l1.386-.451c.064-.018.126-.038.19-.052.129-.028.259-.042.39-.043.16-.002.321.017.478.047.364.069.711.21 1.032.396.162.094.316.199.469.308.088.063.176.132.27.188l.021.011c.19.123.245.146.409.305.185.178.336.393.443.63.035.079.061.162.091.243l.439 1.428c.045.175.062.219.081.4.02.193.006.381-.015.573a7.79 7.79 0 0 1-.101.645c-.09.455-.212.901-.365 1.339-.128.366-.273.73-.445 1.077-.658 1.335-1.652 2.512-2.917 3.265a6.399 6.399 0 0 1-1.019.489 6.097 6.097 0 0 1-.631.203c-.226.058-.455.1-.686.134l-.096.012-.061.007c-.01.176-.022.352-.036.528-.034.39-.082.778-.153 1.163a14.258 14.258 0 0 1-.574 2.114c-.229.654-.484 1.306-.806 1.918a9.16 9.16 0 0 1-.386.656c-.219.348-.451.686-.697 1.013-.448.594-.946 1.148-1.521 1.614-.255.207-.52.397-.808.553-.9.489-1.919.648-2.921.735-.493.038-.986.059-1.478.099-.162.015-.324.033-.486.049-.145.011-.289.022-.434.03a15.768 15.768 0 0 1-2.778-.118c0 1.416.007 2.832-.001 4.248a9.737 9.737 0 0 1-.684 3.479 9.615 9.615 0 0 1-1.72 2.804 9.326 9.326 0 0 1-3.04 2.279 9.046 9.046 0 0 1-5.33.715 9.064 9.064 0 0 1-2.988-1.079 9.363 9.363 0 0 1-2.761-2.429 10.078 10.078 0 0 1-1.05 1.16 9.281 9.281 0 0 1-1.871 1.358 9.033 9.033 0 0 1-2.495.926 9.04 9.04 0 0 1-6.462-1.072 9.395 9.395 0 0 1-2.602-2.292l-.062-.08a10.896 10.896 0 0 1-.53.635 9.266 9.266 0 0 1-2.671 2.032 9.028 9.028 0 0 1-6.044.751 9.048 9.048 0 0 1-2.436-.934 9.343 9.343 0 0 1-2.286-1.803 9.572 9.572 0 0 1-1.783-2.757 9.705 9.705 0 0 1-.773-3.693V67.244c-.157.024-.314.047-.472.067-.487.06-.977.103-1.469.109-.313.004-.627-.009-.94-.028-.426-.025-.85-.065-1.273-.125-1.833-.264-3.65-.92-5.109-2.117a8.172 8.172 0 0 1-1.064-1.049 10.155 10.155 0 0 1-.878-1.236 15.277 15.277 0 0 1-.7-1.274 20.835 20.835 0 0 1-1.889-6.194l-.018-.142-.008-.061a6.47 6.47 0 0 1-.99-.297 6.135 6.135 0 0 1-.61-.285 6.587 6.587 0 0 1-.889-.562c-1.228-.924-2.124-2.259-2.668-3.711a9.947 9.947 0 0 1-.307-.99 10.288 10.288 0 0 1-.318-1.923c-.009-.147-.011-.293-.015-.44v-.037c.008-.175.004-.22.037-.393.033-.173.053-.213.11-.378l.561-1.417c.031-.068.06-.139.095-.206a2.028 2.028 0 0 1 .771-.803c.093-.054.194-.095.289-.145l.311-.179c.352-.194.714-.358 1.107-.44.213-.044.426-.061.643-.061l.034.001c.177.014.223.01.396.052.174.041.214.065.379.132l1.347.635c.073.04.15.076.221.121.142.091.272.2.388.325.154.166.176.222.297.414l.022.047.722-.762.168-.158c.165-.122.202-.161.385-.253.206-.102.429-.168.656-.193.076-.008.152-.008.228-.011l1.46.013c.177.011.223.007.397.046.175.038.215.061.381.126l.018.008c.154.08.196.094.338.196.142.102.169.137.294.259l.853.912.152-.067.191-.063.019-.005.196-.042c.177-.019.222-.031.401-.022.066.003.133.013.199.02l1.185.182c.073.016.147.027.219.047.288.08.558.227.784.428.151.135.177.181.303.339l.714 1.004c.097.152.127.187.201.352.077.172.123.352.164.536.029.134.056.269.08.404.063.361.102.725.112 1.091.021.78-.08 1.566-.321 2.307a5.906 5.906 0 0 1-.532 1.183 5.463 5.463 0 0 1-3.257 2.489l-.03.008c.195.584.433 1.155.712 1.701.215.422.453.833.735 1.211.026.035.026.034.053.068l.058.072c.056.024.113.042.171.06.319.09.653.121.982.14.488.027.978.013 1.461-.06.167-.028.333-.062.499-.089.134-.022.267-.042.401-.066l.28-.056c.154-.023.308-.049.462-.076l.115-.021V43.881c.011-.203.006-.203.042-.404a26.66 26.66 0 0 1 .226-2.241 24.737 24.737 0 0 1 5.72-12.577 24.204 24.204 0 0 1 3.457-3.296 23.653 23.653 0 0 1 4.937-2.966 23.215 23.215 0 0 1 5.604-1.681 23.703 23.703 0 0 1 3.958-.313zm-.287 2.042a21.169 21.169 0 0 0-8.012 1.622 21.636 21.636 0 0 0-4.799 2.766 22.233 22.233 0 0 0-3.205 2.985 22.705 22.705 0 0 0-4.897 9.196 23.383 23.383 0 0 0-.737 4.867h-.025v15.744c-.258.053-.258.052-.517.101-.28.051-.56.1-.841.144-.211.04-.421.079-.632.115l-.232.037-.411.078c-.116.02-.233.035-.348.057-.305.056-.609.11-.917.14a9.929 9.929 0 0 1-1.883-.017c-.514-.056-1.044-.155-1.51-.397a1.762 1.762 0 0 1-.33-.218 1.925 1.925 0 0 1-.234-.252 5.248 5.248 0 0 1-.174-.22 8.97 8.97 0 0 1-.582-.883 13.806 13.806 0 0 1-.941-1.971 14.348 14.348 0 0 1-.608-1.954 14.04 14.04 0 0 1-.169-.86l-.015-.11-.015-.109c.161-.007.16-.007.321-.016a12.793 12.793 0 0 0 1.413-.182 4.43 4.43 0 0 0 .28-.074 3.56 3.56 0 0 0 1.199-.616c.309-.244.576-.543.786-.88.163-.261.292-.544.387-.838.123-.378.192-.774.214-1.172a5.102 5.102 0 0 0-.024-.865 7.192 7.192 0 0 0-.145-.799l-.714-1.005-1.184-.182-.019.005-.946.758-.12 1.229a4.953 4.953 0 0 1 .111.455c.032.181.052.36.043.544a1.04 1.04 0 0 1-.056.303c-.11.301-.419.451-.696.548-.402.142-.813.25-1.229.339l.07-.648c.022-.191.047-.381.08-.57.036-.207.079-.413.152-.61.077-.211.182-.412.296-.605.044-.074.092-.146.135-.222.029-.048.031-.047.055-.098.016-.033.031-.064.045-.098l-.026-1.551-1.042-1.116-.018-.008-1.459-.014-1.022 1.079c-.049.128-.08.258-.111.393a5.274 5.274 0 0 0-.1.651 5.55 5.55 0 0 0-.031.466c-.009.687.104 1.37.294 2.028.11.382.262.753.402 1.123-.115-.029-.228-.06-.342-.092a9.526 9.526 0 0 1-1.176-.446c-.108-.05-.111-.048-.191-.097a1.921 1.921 0 0 1-.327-.249c-.416-.4-.589-.986-.671-1.55a5.643 5.643 0 0 1-.057-.549c-.007-.143-.006-.286-.007-.429-.001-.186.005-.372.011-.558l.001-.039-.567-1.446-1.347-.634c-.316-.008-.599.144-.867.299-.109.063-.218.126-.33.185a2.058 2.058 0 0 1-.125.061l-.042.019-.561 1.416c0 .209.014.416.036.624.04.377.106.75.196 1.118.076.309.164.616.275.913.415 1.109 1.093 2.146 2.043 2.838.234.171.485.317.746.442.183.088.371.161.565.22.263.079.532.13.803.17.296.045.594.075.892.095l.108.007c.004.151.01.302.017.453.011.177.023.353.038.529a18.13 18.13 0 0 0 .762 3.752c.239.76.522 1.505.857 2.225.23.494.483.977.767 1.44.288.469.608.915.989 1.308 1.001 1.028 2.324 1.648 3.687 1.976.643.155 1.298.243 1.955.287.311.021.622.036.933.033.418-.006.835-.041 1.25-.094.238-.03.477-.064.713-.11.117-.023.232-.053.348-.081.196-.048.392-.097.586-.151.147-.041.291-.094.436-.144.204-.069.408-.139.608-.217l.006-.003c0 2.207-.013 4.414.001 6.62a7.942 7.942 0 0 0 .13 1.32 7.545 7.545 0 0 0 2.383 4.243 7.23 7.23 0 0 0 2.258 1.372 7.094 7.094 0 0 0 7.012-1.164 7.504 7.504 0 0 0 2.035-2.613 7.727 7.727 0 0 0 .676-2.401l.009-.088.038-.765a8.16 8.16 0 0 0 .113 1.324c.121.694.338 1.37.643 2.001a7.49 7.49 0 0 0 1.692 2.275 7.266 7.266 0 0 0 2.24 1.399 7.11 7.11 0 0 0 4.615.19 7.212 7.212 0 0 0 2.351-1.218 7.501 7.501 0 0 0 2.128-2.64 7.763 7.763 0 0 0 .702-2.39l.01-.088.009-.088.038-.765a9.339 9.339 0 0 0 .021.575 7.626 7.626 0 0 0 .621 2.504 7.507 7.507 0 0 0 2.35 2.972 7.1 7.1 0 0 0 7.026.881 7.275 7.275 0 0 0 2.268-1.515 7.525 7.525 0 0 0 1.612-2.338 7.58 7.58 0 0 0 .572-2.033c.048-.347.069-.696.071-1.046v-6.721c.136.051.271.101.408.148a12.153 12.153 0 0 0 1.976.443c.264.035.529.055.794.071.33.02.66.031.991.027.245-.002.49-.012.735-.031.245-.018.49-.048.735-.068.407-.03.814-.051 1.221-.079a9.493 9.493 0 0 0 1.384-.188c.315-.073.626-.174.912-.329a3.53 3.53 0 0 0 .586-.418c.46-.386.85-.85 1.205-1.337a12.178 12.178 0 0 0 .801-1.246c.122-.232.229-.471.33-.712a15.873 15.873 0 0 0 .681-1.988c.136-.525.23-1.058.282-1.598.035-.41.052-.822.088-1.232.03-.317.078-.632.121-.947l.018-.145.016-.145c.144.009.287.016.431.021.459.009.924.007 1.378-.07a4.456 4.456 0 0 0 1.353-.482c.989-.55 1.752-1.466 2.258-2.488.116-.235.214-.48.304-.727a7.58 7.58 0 0 0 .377-1.43c.016-.109.027-.218.039-.328l.001-.009-.438-1.428a5.206 5.206 0 0 1-.16-.096c-.158-.105-.311-.219-.467-.326a3.829 3.829 0 0 0-.159-.1 1.356 1.356 0 0 0-.509-.18l-.01-.001-1.386.452-.681 1.323c-.016.212-.023.424-.043.636a5.66 5.66 0 0 1-.139.873c-.118.494-.316.999-.702 1.338a1.865 1.865 0 0 1-.496.301l-.272.087a9.57 9.57 0 0 1-.83.205 8.797 8.797 0 0 1-.582.091l.229-.462c.079-.163.158-.325.229-.492.051-.118.096-.239.139-.36.036-.103.076-.209.103-.315.019-.075.031-.153.041-.229.017-.132.031-.263.043-.395.035-.368.06-.737.094-1.104.02-.187.048-.372.067-.559.015-.167.015-.336.012-.505a4.76 4.76 0 0 0-.074-.826c-.012-.065-.03-.13-.045-.194l-.003-.009-.923-1.157-1.446-.159-.019.006-1.124.95-.154 1.489c.011.034.024.066.037.099.044.115.107.221.161.331.046.096.088.193.13.29l.031.076c.013.033.017.07.023.105.012.096.022.191.031.287.031.364.047.73.081 1.093.013.102.028.202.04.303.014.145.027.29.033.435.014.28.016.561.023.841a9.588 9.588 0 0 1-.862-.323c-.063-.027-.128-.062-.193-.084a1.325 1.325 0 0 0-.067-.013c-.081-.01-.162-.017-.243-.025-.245-.02-.49-.037-.734-.061-.066-.007-.132-.014-.198-.028l-.017-.005c-.03-.013-.029-.014-.067-.038a1.614 1.614 0 0 1-.161-.108.863.863 0 0 1-.22-.242c-.089-.155-.102-.34-.09-.517.02-.299.117-.591.228-.866l.004-.009-.018-1.197-.874-.84-.018-.007-1.188.036-.79.882c-.037.112-.074.224-.106.338a4.756 4.756 0 0 0-.171 1.906c.039.329.115.654.233.963a3.542 3.542 0 0 0 1.263 1.636c.313.222.659.393 1.019.517.237.082.487.111.734.145.479.06.959.106 1.438.166.121.017.241.037.362.058l.158.026a12.12 12.12 0 0 1-.923 2.565 13.221 13.221 0 0 1-.829 1.474 9.474 9.474 0 0 1-.984 1.286c-.08.087-.163.17-.248.252a1.655 1.655 0 0 1-.329.262 2.376 2.376 0 0 1-.722.247c-.457.089-.927.093-1.39.071-.391-.018-.781-.06-1.168-.123a7.817 7.817 0 0 1-.609-.124c-.226-.056-.448-.124-.671-.191-.065-.019-.131-.035-.197-.054a14.75 14.75 0 0 1-.543-.165 23.384 23.384 0 0 1-.453-.128c-.196-.059-.195-.059-.39-.12l-.276-.077V43.881h-.025a34.633 34.633 0 0 0-.031-.557 23.606 23.606 0 0 0-.4-2.994 22.743 22.743 0 0 0-1.492-4.708 22.567 22.567 0 0 0-4.593-6.748 21.865 21.865 0 0 0-6.882-4.706 21.175 21.175 0 0 0-8.115-1.722l-.411-.001zm9.15 33.69c.109.015.214.038.315.085a1.012 1.012 0 0 1 .574.771c.021.132.013.268.009.4a8.38 8.38 0 0 1-.026.476 8.767 8.767 0 0 1-1.564 4.282c-.306.437-.65.846-1.024 1.222a10.09 10.09 0 0 1-4.612 2.627c-1.32.343-2.704.427-4.055.254a10.422 10.422 0 0 1-2.67-.709 9.917 9.917 0 0 1-3.57-2.503 9.312 9.312 0 0 1-.775-.984 8.933 8.933 0 0 1-.731-1.288 8.648 8.648 0 0 1-.795-3.377c-.003-.104-.008-.211 0-.316a1.042 1.042 0 0 1 .254-.609.98.98 0 0 1 1.337-.125 1.023 1.023 0 0 1 .385.719c.007.151.006.303.014.454a6.547 6.547 0 0 0 .524 2.217c.257.595.599 1.15 1.006 1.648.325.398.691.759 1.087 1.081.312.253.642.482.987.684 2.592 1.522 5.945 1.538 8.553.047a7.982 7.982 0 0 0 1.069-.731 7.619 7.619 0 0 0 1.142-1.15 6.949 6.949 0 0 0 1.018-1.741 6.538 6.538 0 0 0 .467-2.425l.004-.084a1.012 1.012 0 0 1 .672-.876c.08-.028.158-.04.241-.05.082-.003.082-.003.164.001zm-70.51-12.426c-15.5.93-28.544-5.922-30.126-16.443C-1.156 15.689 11.64 4.024 29.14 1.235c17.501-2.79 33.123 4.345 34.864 15.922 1.575 10.475-8.749 21.021-23.691 25.001l.001.099a31.185 31.185 0 0 0 .042.833c.007.094.019.188.021.282.006.178.013.356.024.534.011.16.024.32.039.48.017.154.038.306.058.459.036.273.077.544.144.811a4.723 4.723 0 0 0 .449 1.128c.192.332.434.628.702.898l.047.05c.151.139.302.275.461.403.24.192.492.367.748.537.474.314.962.6 1.457.877l.041.023.588.735-.729.586c-.376.112-.755.216-1.135.309a11.193 11.193 0 0 1-2.562.355 8.575 8.575 0 0 1-2.995-.486 8.461 8.461 0 0 1-.96-.413 11.194 11.194 0 0 1-1.836-1.152 13.345 13.345 0 0 1-1.07-.934c-.23-.221-.454-.448-.672-.681-.121-.129-.246-.258-.36-.395a23.448 23.448 0 0 1-1.328-1.773c-.051-.076-.049-.077-.095-.155l-.277-.477-.072-.13c-.081-.177-.159-.357-.238-.535l-.003-.01-.092-.707zm52.409-7.804c3.557 0 6.444 3.201 6.444 7.145 0 3.944-2.887 7.146-6.444 7.146s-6.444-3.202-6.444-7.146 2.887-7.145 6.444-7.145zm18.062 0c3.557 0 6.444 3.201 6.444 7.145 0 3.944-2.887 7.146-6.444 7.146s-6.444-3.202-6.444-7.146 2.887-7.145 6.444-7.145zM83.12 42.029c1.915 0 3.47 1.601 3.47 3.573s-1.555 3.573-3.47 3.573c-1.915 0-3.47-1.601-3.47-3.573s1.555-3.573 3.47-3.573zm17.846 0c1.915 0 3.47 1.601 3.47 3.573s-1.555 3.573-3.47 3.573c-1.915 0-3.47-1.601-3.47-3.573s1.555-3.573 3.47-3.573zM17.019 28c-.368 1.65-1.848 5.008-5.178 5.799-2.572.611-4.153-.815-4.544-2.559-.424-1.891.722-3.532 2.121-4.575a3.473 3.473 0 0 1-1.446-2.099c-.421-1.875.867-3.637 3.184-4.187 1.917-.455 3.185.248 3.462 1.482.265 1.184-.534 2.275-1.828 2.582-.878.209-1.574-.042-1.718-.683a1.4 1.4 0 0 1 .044-.704s.287.227.894.083c.751-.179 1.086-.709.972-1.219-.14-.625-.892-.827-1.739-.626-1.054.25-2.06 1.096-1.713 2.642.232 1.036.871 1.56 1.483 1.813.245-.11.481-.183.688-.233.943-.224 1.48-.005 1.587.472.092.411-.144.935-1.166 1.178a3.255 3.255 0 0 1-1.548.004c-.837.771-1.58 1.883-1.27 3.264.276 1.234 1.267 2.125 2.944 1.726 2.598-.617 3.861-3.638 4.277-4.883-.353-.574-.615-1.153-.732-1.676-.107-.477.145-1.005.863-1.175.48-.114.702.127.846.769a2.77 2.77 0 0 1-.03.995c.209.331.443.622.735.951.616-1.983 1.369-3.877 1.737-3.964.591-.141 1.492.65 1.492.65-.815.644-1.689 2.376-2.333 4.158.804.658 1.627 1.103 2.139.982.43-.102.735-.577.95-1.151-.323-2.226.975-4.331 2.31-4.648.703-.167 1.257.204 1.39.796.114.51-.044 1.379-.854 1.745-.236-1.053-.672-1.348-.944-1.283-.495.117-.844 1.413-.538 2.778.232 1.037.712 1.529 1.351 1.377.756-.179 1.333-1.176 1.699-2.128-.265-2.095.877-4.166 2.221-4.486.671-.159 1.214.162 1.391.952.332 1.48-.986 2.885-2.173 3.444.265.734.673 1.053 1.281.909.96-.229 1.578-1.465 1.923-2.506-.125-1.267-.26-2.385-.406-3.035l-.055-.247s1.568-.286 1.778.652l.019.082c.238-.663.67-1.216 1.309-1.368.83-.197 1.526.504 1.755 1.524.497 2.22-.556 4.428-1.834 4.732-.368.087-.642.066-.883-.033.121 1.288.292 2.651.542 3.77.126.559.272 1.061.448 1.47-.464.11-1.797.392-1.978-.414-.16-.716-.342-3.206-.554-5.612-.504 1.107-1.311 2.192-2.441 2.46-1.008.24-1.685-.303-2.055-1.182-.491 1.082-1.281 2.148-2.381 2.409-.817.194-1.554-.117-1.988-1.013-.36.843-.875 1.555-1.54 1.713-.639.152-1.53-.295-2.4-1.024-.239.888-.384 1.668-.39 2.241 0 0-.701.028-.804-.433-.096-.427.065-1.436.341-2.61a10.315 10.315 0 0 1-.713-.848zm38.163-17.803c.068.157.185.527.266.889.424 1.892.37 4.451.739 6.42-.065.61-.387 3.077-1.352 3.307-.192.045-.333-.06-.422-.454-.14-.626-.091-1.607-.293-2.512-.258-1.152-.782-1.686-1.517-1.511-.767.182-1.287 1.016-1.643 2.054-.022-.099-.053-.386-.093-.567-.211-.938-1.779-.652-1.779-.652a6.2 6.2 0 0 1 .457 1.364c.07.31.119.618.155.921-.246.495-.637.996-1.225 1.135-.064.015-.128.031-.195.029a6.977 6.977 0 0 0-.126-.784c-.258-1.152-.871-2.011-1.526-1.855a.712.712 0 0 0-.423.291c-1.337.317-2.358 2.107-2.118 3.919-.214.889-.551 1.757-1.059 1.877-.415.099-.724-.452-1.03-1.817-.059-.263-.09-.706-.122-1.149.142-.64.177-1.237.081-1.665-.107-.477-.417-.733-.816-.638-.715.17-.909 1.75-.52 3.801-.238.92-.639 1.915-1.278 2.067-.464.11-.835-.27-1.012-1.059-.158-.708-.196-1.929-.236-3.08 1.201-.424 1.911-1.009 1.775-1.617-.114-.51-.739-.743-.739-.743s-.124.722-1.064 1.258c-.029-.582-.064-1.111-.137-1.44-.137-.609-.458-.914-1.688-.622.158.327.274.698.359 1.076.103.46.162.949.189 1.445-.611.128-.947.052-.947.052s-.1.457-.041.72c.078.345.432.348 1.026.224.02 1.364-.067 2.701.143 3.639.306 1.365 1.231 1.89 2.046 1.697.907-.216 1.539-1.275 1.914-2.36.407 1.245 1.031 1.955 1.951 1.736.731-.174 1.261-1.142 1.587-2.195.431.765 1.15 1.129 1.983.931 1.214-.289 1.742-1.54 1.835-2.775 0 0 .147-.018.243-.04.526-.125.949-.488 1.26-.915.04.788.053 1.518.194 2.146.111.493.339.612.595.552.495-.118 1.081-.881 1.081-.881a3.93 3.93 0 0 1-.383-1.035c-.284-1.267.317-3.541.988-3.7.208-.049.377.257.492.767.057.255.092.504.115.751l.098 1.469c.024.246.059.496.116.751.158.707.63 1.236 1.381 1.058 1.317-.313 2.07-2.634 2.178-3.956.228.157.536.175.909.086-.505-2.253.089-6.136-.298-7.864-.1-.444-1.001-.58-1.607-.583l-.467.037zM33.729 22.293c.415-.099.711.246.885 1.02.287 1.283-.222 2.616-.797 2.753-.191.045-.695-.025-.961-1.21-.025-.115-.051-.23-.061-.349.05-1.277.439-2.097.934-2.214zm-5.187.955c.271-.065.511.104.588.449.137.609-.338 1.345-1.275 1.966-.255-1.36.159-2.29.687-2.415zm18.032-.403c-.607.144-1.062-.458-1.239-1.248-.217-.97.001-2.097.644-2.457.001.155.038.32.075.484.147.658.554 1.497 1.268 1.83-.017.749-.253 1.273-.748 1.391zm9.877-1.654c.103.461.496.714 1.039.585.799-.19.973-.993.847-1.553-.125-.559-.461-.93-.988-.805-.543.13-1.108.836-.898 1.773zm-14.21-5.442c-.104-.461-.497-.714-1.056-.581-.783.186-.972.993-.847 1.552.126.56.461.93.908.824.56-.133 1.172-1.006.995-1.795z" fill="#fff" fill-opacity=".6"></path></svg>';
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:39:        $handler->sendPhpResponse(new \RuntimeException('Foo'));
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:42:        $this->assertContains('Whoops, looks like something went wrong.', $response);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:43:        $this->assertNotContains('<div class="trace trace-as-html">', $response);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:48:        $handler->sendPhpResponse(new \RuntimeException('Foo'));
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:51:        $this->assertContains('Whoops, looks like something went wrong.', $response);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:52:        $this->assertContains('<div class="trace trace-as-html">', $response);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:57:        $handler = new ExceptionHandler(false, 'iso8859-1');
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:60:        $handler->sendPhpResponse(new NotFoundHttpException('Foo'));
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:63:        $this->assertContains('Sorry, the page you are looking for could not be found.', $response);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:67:            array('Content-Type: text/html; charset=iso8859-1', true, null),
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:70:        $this->assertSame($expectedHeaders, testHeader());
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:75:        $handler = new ExceptionHandler(false, 'iso8859-1');
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:78:        $handler->sendPhpResponse(new MethodNotAllowedHttpException(array('POST')));
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:84:            array('Content-Type: text/html; charset=iso8859-1', true, null),
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:87:        $this->assertSame($expectedHeaders, testHeader());
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:94:        $handler->sendPhpResponse(new \RuntimeException('Foo', 0, new \RuntimeException('Bar')));
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:97:        $this->assertStringMatchesFormat('%A<p class="break-long-words trace-message">Foo</p>%A<p class="break-long-words trace-message">Bar</p>%A', $response);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:104:        $handler = $this->getMockBuilder('Symfony\Component\Debug\ExceptionHandler')->setMethods(array('sendPhpResponse'))->getMock();
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:106:            ->expects($this->exactly(2))
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:107:            ->method('sendPhpResponse');
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:109:        $handler->handle($exception);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:111:        $handler->setHandler(function ($e) use ($exception) {
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:112:            $this->assertSame($exception, $e);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:115:        $handler->handle($exception);
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:122:        $handler = $this->getMockBuilder('Symfony\Component\Debug\ExceptionHandler')->setMethods(array('sendPhpResponse'))->getMock();
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:124:            ->expects($this->once())
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:125:            ->method('sendPhpResponse');
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:127:        $handler->setHandler(function ($e) {
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:128:            $this->fail('OutOfMemoryException should bypass the handler');
vendor/symfony/debug/Tests/ExceptionHandlerTest.php:131:        $handler->handle($exception);
vendor/symfony/debug/Tests/Fixtures/ToStringThrower.php:11:        $this->exception = $e;
vendor/symfony/debug/Tests/Fixtures/ToStringThrower.php:17:            throw $this->exception;
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:37:        $this->assertEquals('403', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:40:        $this->assertEquals('500', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:43:        $this->assertEquals('404', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:46:        $this->assertEquals('401', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:49:        $this->assertEquals('400', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:52:        $this->assertEquals('406', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:55:        $this->assertEquals('409', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:58:        $this->assertEquals('405', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:61:        $this->assertEquals('403', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:64:        $this->assertEquals('410', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:67:        $this->assertEquals('411', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:70:        $this->assertEquals('412', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:73:        $this->assertEquals('428', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:76:        $this->assertEquals('503', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:79:        $this->assertEquals('429', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:82:        $this->assertEquals('415', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:86:            $this->assertEquals('400', $flattened->getStatusCode());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:93:        $this->assertEquals(array('Allow' => 'POST'), $flattened->getHeaders());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:96:        $this->assertEquals(array('WWW-Authenticate' => 'Basic realm="My Realm"'), $flattened->getHeaders());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:99:        $this->assertEquals(array('Retry-After' => 'Fri, 31 Dec 1999 23:59:59 GMT'), $flattened->getHeaders());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:102:        $this->assertEquals(array('Retry-After' => 120), $flattened->getHeaders());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:105:        $this->assertEquals(array('Retry-After' => 'Fri, 31 Dec 1999 23:59:59 GMT'), $flattened->getHeaders());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:108:        $this->assertEquals(array('Retry-After' => 120), $flattened->getHeaders());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:119:        $flattened->setPrevious($flattened2);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:121:        $this->assertEquals($exception->getMessage(), $flattened->getMessage(), 'The message is copied from the original exception.');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:122:        $this->assertEquals($exception->getCode(), $flattened->getCode(), 'The code is copied from the original exception.');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:123:        $this->assertInstanceOf($flattened->getClass(), $exception, 'The class is set to the class of the original exception');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:134:        $flattened->setPrevious($flattened2);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:136:        $this->assertSame($flattened2, $flattened->getPrevious());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:138:        $this->assertSame(array($flattened2), $flattened->getAllPrevious());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:148:        $flattened = FlattenException::create($exception)->getPrevious();
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:150:        $this->assertEquals($flattened->getMessage(), 'Parse error: Oh noes!', 'The message is copied from the original exception.');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:151:        $this->assertEquals($flattened->getCode(), 42, 'The code is copied from the original exception.');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:152:        $this->assertEquals($flattened->getClass(), 'Symfony\Component\Debug\Exception\FatalThrowableError', 'The class is set to the class of the original exception');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:161:        $this->assertSame($exception->getLine(), $flattened->getLine());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:170:        $this->assertSame($exception->getFile(), $flattened->getFile());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:179:        $flattened->setTrace(array(), 'foo.php', 123);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:181:        $this->assertEquals(array(
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:190:        ), $flattened->toArray());
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:207:        $exception = $this->createException(array(
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:228:        $trace = $flattened->getTrace();
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:236:        $this->assertSame(array('object', 'stdClass'), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:237:        $this->assertSame(array('object', 'Symfony\Component\HttpKernel\Exception\NotFoundHttpException'), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:238:        $this->assertSame(array('incomplete-object', 'BogusTestClass'), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:239:        $this->assertSame(array('resource', defined('HHVM_VERSION') ? 'Directory' : 'stream'), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:240:        $this->assertSame(array('resource', 'stream'), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:243:        $this->assertSame($args[0], 'object');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:244:        $this->assertTrue('Closure' === $args[1] || is_subclass_of($args[1], '\Closure'), 'Expect object class name to be Closure or a subclass of Closure.');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:246:        $this->assertSame(array('array', array(array('integer', 1), array('integer', 2))), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:247:        $this->assertSame(array('array', array('foo' => array('integer', 123))), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:248:        $this->assertSame(array('null', null), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:249:        $this->assertSame(array('boolean', true), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:250:        $this->assertSame(array('boolean', false), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:251:        $this->assertSame(array('integer', 0), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:252:        $this->assertSame(array('float', 0.0), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:253:        $this->assertSame(array('string', '0'), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:254:        $this->assertSame(array('string', ''), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:255:        $this->assertSame(array('float', INF), $array[$i++]);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:258:        $this->assertEquals($array[$i][0], 'float');
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:259:        $this->assertTrue(is_nan($array[$i++][1]));
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:266:        $exception = $this->createException($a);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:269:        $trace = $flattened->getTrace();
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:270:        $this->assertContains('*DEEP NESTED ARRAY*', serialize($trace));
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:285:        $exception = $this->createException($a);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:288:        $trace = $flattened->getTrace();
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:290:        $this->assertSame($trace[1]['args'][0], array('array', array('array', '*SKIPPED over 10000 entries*')));
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:294:        $this->assertContains('*SKIPPED over 10000 entries*', $serializeTrace);
vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:295:        $this->assertNotContains('*value1*', $serializeTrace);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:29:        $this->errorReporting = error_reporting(E_ALL);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:30:        $this->loader = new ClassLoader();
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:31:        spl_autoload_register(array($this->loader, 'loadClass'), true, true);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:38:        spl_autoload_unregister(array($this->loader, 'loadClass'));
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:39:        error_reporting($this->errorReporting);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:50:                $reflProp = $reflClass->getProperty('classLoader');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:51:                $reflProp->setAccessible(true);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:53:                $this->assertNotInstanceOf('Symfony\Component\Debug\DebugClassLoader', $reflProp->getValue($function[0]));
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:59:        $this->fail('DebugClassLoader did not register');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:70:            $this->fail('Exception expected');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:72:            $this->assertSame('boo', $e->getMessage());
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:82:            $this->markTestSkipped('PHP7 throws exceptions, unsilencing is not required anymore.');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:85:            $this->markTestSkipped('HHVM is not handled in this test case.');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:90:        $this->iniSet('log_errors', 0);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:91:        $this->iniSet('display_errors', 1);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:94:        // but this should not be @-silenced.
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:99:        $this->assertStringMatchesFormat('%aParse error%a', $output);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:107:            $this->markTestSkipped('The ContextErrorException class is already loaded.');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:110:            $this->markTestSkipped('HHVM is not handled in this test case.');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:117:            // which in turn triggers $errorHandler->handle()
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:125:            $this->fail('ContextErrorException expected');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:128:            $this->assertStringStartsWith(__FILE__, $exception->getFile());
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:130:                $this->assertRegExp('/^Runtime Notice: Declaration/', $exception->getMessage());
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:131:                $this->assertEquals(E_STRICT, $exception->getSeverity());
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:133:                $this->assertRegExp('/^Warning: Declaration/', $exception->getMessage());
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:134:                $this->assertEquals(E_WARNING, $exception->getSeverity());
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:158:            $this->markTestSkipped('Can only be run on case insensitive filesystems');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:175:        $this->assertTrue(class_exists(__NAMESPACE__.'\Fixtures\NotPSR0', true));
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:180:        $this->assertTrue(class_exists(__NAMESPACE__.'\Fixtures\NotPSR0bis', true));
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:185:        $this->assertTrue(class_exists(__NAMESPACE__.'\Fixtures\ClassAlias', true));
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:210:        $this->assertSame($xError, $lastError);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:240:        $this->assertSame($xError, $lastError);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:262:        $this->assertSame($xError, $lastError);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:268:            $this->markTestSkipped('PHP7 already prevents using reserved names.');
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:288:        $this->assertSame($xError, $lastError);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:310:        $this->assertSame($xError, $lastError);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:332:        $this->assertSame($xError, $lastError);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:349:        $this->assertSame(array('type' => E_USER_NOTICE, 'message' => ''), $lastError);
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:363:        $this->assertSame($deprecations, array(
vendor/symfony/debug/Tests/DebugClassLoaderTest.php:388:            eval('-- parse error --');
vendor/symfony/debug/Tests/MockExceptionHandler.php:22:        $this->e = $e;
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:31:                $function = $function[0]->getClassLoader();
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:35:                $function[0]->add('Symfony_Component_Debug_Tests_Fixtures', dirname(dirname(dirname(dirname(dirname(__DIR__))))));
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:56:        $exception = $handler->handleError($error, new FatalErrorException('', 0, $error['type'], $error['file'], $error['line']));
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:63:        $this->assertInstanceOf('Symfony\Component\Debug\Exception\ClassNotFoundException', $exception);
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:64:        $this->assertSame($translatedMessage, $exception->getMessage());
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:65:        $this->assertSame($error['type'], $exception->getSeverity());
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:66:        $this->assertSame($error['file'], $exception->getFile());
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:67:        $this->assertSame($error['line'], $exception->getLine());
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:73:        $autoloader->add('Symfony\Component\Debug\Exception\\', realpath(__DIR__.'/../../Exception'));
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:159:            $this->markTestSkipped('Can only be run on case insensitive filesystems');
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:172:        $exception = $handler->handleError($error, new FatalErrorException('', 0, $error['type'], $error['file'], $error['line']));
vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:174:        $this->assertInstanceOf('Symfony\Component\Debug\Exception\ClassNotFoundException', $exception);
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php:26:        $exception = $handler->handleError($error, new FatalErrorException('', 0, $error['type'], $error['file'], $error['line']));
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php:28:        $this->assertInstanceOf('Symfony\Component\Debug\Exception\UndefinedMethodException', $exception);
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php:29:        $this->assertSame($translatedMessage, $exception->getMessage());
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php:30:        $this->assertSame($error['type'], $exception->getSeverity());
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php:31:        $this->assertSame($error['file'], $exception->getFile());
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php:32:        $this->assertSame($error['line'], $exception->getLine());
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php:26:        $exception = $handler->handleError($error, new FatalErrorException('', 0, $error['type'], $error['file'], $error['line']));
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php:28:        $this->assertInstanceOf('Symfony\Component\Debug\Exception\UndefinedFunctionException', $exception);
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php:30:        $this->assertSame(strtolower($translatedMessage), strtolower($exception->getMessage()));
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php:31:        $this->assertSame($error['type'], $exception->getSeverity());
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php:32:        $this->assertSame($error['file'], $exception->getFile());
vendor/symfony/debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php:33:        $this->assertSame($error['line'], $exception->getLine());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:33:            $this->assertInstanceOf('Symfony\Component\Debug\ErrorHandler', $handler);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:34:            $this->assertSame($handler, ErrorHandler::register());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:38:            $this->assertSame($handler, ErrorHandler::register($newHandler, false));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:41:            $this->assertSame(array($handler, 'handleError'), $h);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:44:                $this->assertSame($newHandler, ErrorHandler::register($newHandler, true));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:47:                $this->assertSame(array($newHandler, 'handleError'), $h);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:71:        $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:72:        $handler->setDefaultLogger($logger);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:73:        $handler->screamAt(E_ALL);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:81:                'line' => __LINE__ - 5,
vendor/symfony/debug/Tests/ErrorHandlerTest.php:83:            $this->assertSame($expected, error_get_last());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:98:            $this->fail('ErrorException expected');
vendor/symfony/debug/Tests/ErrorHandlerTest.php:101:            $this->assertEquals(E_NOTICE, $exception->getSeverity());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:102:            $this->assertEquals(__FILE__, $exception->getFile());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:103:            $this->assertRegExp('/^Notice: Undefined variable: (foo|bar)/', $exception->getMessage());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:105:            $trace = $exception->getTrace();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:107:            $this->assertEquals(__FILE__, $trace[0]['file']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:108:            $this->assertEquals(__CLASS__, $trace[0]['class']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:109:            $this->assertEquals('triggerNotice', $trace[0]['function']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:110:            $this->assertEquals('::', $trace[0]['type']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:112:            $this->assertEquals(__FILE__, $trace[0]['file']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:113:            $this->assertEquals(__CLASS__, $trace[1]['class']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:114:            $this->assertEquals(__FUNCTION__, $trace[1]['function']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:115:            $this->assertEquals('->', $trace[1]['type']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:125:        $that->assertSame('', $foo.$foo.$bar);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:132:            $handler->throwAt(3, true);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:133:            $this->assertEquals(3 | E_RECOVERABLE_ERROR | E_USER_ERROR, $handler->throwAt(0));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:145:            $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:147:            $handler->setDefaultLogger($logger, E_NOTICE);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:148:            $handler->setDefaultLogger($logger, array(E_USER_NOTICE => LogLevel::CRITICAL));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:167:            $this->assertSame($loggers, $handler->setLoggers(array()));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:178:            $handler->throwAt(0, true);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:179:            $this->assertFalse($handler->handleError(0, 'foo', 'foo.php', 12, array()));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:185:            $handler->throwAt(3, true);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:186:            $this->assertFalse($handler->handleError(4, 'foo', 'foo.php', 12, array()));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:192:            $handler->throwAt(3, true);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:194:                $handler->handleError(4, 'foo', 'foo.php', 12, array());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:196:                $this->assertSame('Parse Error: foo', $e->getMessage());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:197:                $this->assertSame(4, $e->getSeverity());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:198:                $this->assertSame('foo.php', $e->getFile());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:199:                $this->assertSame(12, $e->getLine());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:206:            $handler->throwAt(E_USER_DEPRECATED, true);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:207:            $this->assertFalse($handler->handleError(E_USER_DEPRECATED, 'foo', 'foo.php', 12, array()));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:213:            $handler->throwAt(E_DEPRECATED, true);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:214:            $this->assertFalse($handler->handleError(E_DEPRECATED, 'foo', 'foo.php', 12, array()));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:219:            $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:222:                $this->assertEquals('info', $logLevel);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:223:                $this->assertEquals('User Deprecated: foo', $message);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:224:                $this->assertArrayHasKey('exception', $context);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:226:                $this->assertInstanceOf(\ErrorException::class, $exception);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:227:                $this->assertSame('User Deprecated: foo', $exception->getMessage());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:228:                $this->assertSame(E_USER_DEPRECATED, $exception->getSeverity());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:232:                ->expects($this->once())
vendor/symfony/debug/Tests/ErrorHandlerTest.php:233:                ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:234:                ->will($this->returnCallback($warnArgCheck))
vendor/symfony/debug/Tests/ErrorHandlerTest.php:238:            $handler->setDefaultLogger($logger, E_USER_DEPRECATED);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:239:            $this->assertTrue($handler->handleError(E_USER_DEPRECATED, 'foo', 'foo.php', 12, array()));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:244:            $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:248:                $this->assertEquals('Notice: Undefined variable: undefVar', $message);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:249:                $this->assertArrayHasKey('exception', $context);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:251:                $this->assertInstanceOf(SilencedErrorContext::class, $exception);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:252:                $this->assertSame(E_NOTICE, $exception->getSeverity());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:253:                $this->assertSame(__FILE__, $exception->getFile());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:254:                $this->assertSame($line, $exception->getLine());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:255:                $this->assertNotEmpty($exception->getTrace());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:256:                $this->assertSame(1, $exception->count);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:260:                ->expects($this->once())
vendor/symfony/debug/Tests/ErrorHandlerTest.php:261:                ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:262:                ->will($this->returnCallback($logArgCheck))
vendor/symfony/debug/Tests/ErrorHandlerTest.php:266:            $handler->setDefaultLogger($logger, E_NOTICE);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:267:            $handler->screamAt(E_NOTICE);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:286:            $handler->throwAt(0, true);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:293:                $f .= ''; // Trigger $f->__toString()
vendor/symfony/debug/Tests/ErrorHandlerTest.php:297:            $this->assertSame($x, $e);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:307:            $this->assertEquals(LogLevel::INFO, $level);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:308:            $this->assertArrayHasKey('exception', $context);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:310:            $this->assertInstanceOf(\ErrorException::class, $exception);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:311:            $this->assertSame('User Deprecated: Foo deprecation', $exception->getMessage());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:314:        $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:316:            ->expects($this->once())
vendor/symfony/debug/Tests/ErrorHandlerTest.php:317:            ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:318:            ->will($this->returnCallback($logArgCheck))
vendor/symfony/debug/Tests/ErrorHandlerTest.php:322:        $handler->setDefaultLogger($logger);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:323:        @$handler->handleError(E_USER_DEPRECATED, 'Foo deprecation', __FILE__, __LINE__, array());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:327:     * @group no-hhvm
vendor/symfony/debug/Tests/ErrorHandlerTest.php:336:            $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:339:                $this->assertSame('Uncaught Exception: foo', $message);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:340:                $this->assertArrayHasKey('exception', $context);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:341:                $this->assertInstanceOf(\Exception::class, $context['exception']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:345:                ->expects($this->exactly(2))
vendor/symfony/debug/Tests/ErrorHandlerTest.php:346:                ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:347:                ->will($this->returnCallback($logArgCheck))
vendor/symfony/debug/Tests/ErrorHandlerTest.php:350:            $handler->setDefaultLogger($logger, E_ERROR);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:353:                $handler->handleException($exception);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:354:                $this->fail('Exception expected');
vendor/symfony/debug/Tests/ErrorHandlerTest.php:356:                $this->assertSame($exception, $e);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:359:            $handler->setExceptionHandler(function ($e) use ($exception) {
vendor/symfony/debug/Tests/ErrorHandlerTest.php:360:                $this->assertSame($exception, $e);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:363:            $handler->handleException($exception);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:377:            $handler->screamAt(E_USER_WARNING);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:379:            $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:382:                ->expects($this->exactly(2))
vendor/symfony/debug/Tests/ErrorHandlerTest.php:383:                ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:384:                ->withConsecutive(
vendor/symfony/debug/Tests/ErrorHandlerTest.php:385:                    array($this->equalTo(LogLevel::WARNING), $this->equalTo('Dummy log')),
vendor/symfony/debug/Tests/ErrorHandlerTest.php:386:                    array($this->equalTo(LogLevel::DEBUG), $this->equalTo('User Warning: Silenced warning'))
vendor/symfony/debug/Tests/ErrorHandlerTest.php:390:            $handler->setDefaultLogger($logger, array(E_USER_WARNING => LogLevel::WARNING));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:394:            $logger->log(LogLevel::WARNING, 'Dummy log');
vendor/symfony/debug/Tests/ErrorHandlerTest.php:425:        $this->assertSame($loggers, $handler->setLoggers(array()));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:427:        $handler->handleError(E_DEPRECATED, 'Foo message', __FILE__, 123, array());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:429:        $logs = $bootLogger->cleanLogs();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:431:        $this->assertCount(1, $logs);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:433:        $this->assertSame('info', $log[0]);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:434:        $this->assertSame('Deprecated: Foo message', $log[1]);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:435:        $this->assertArrayHasKey('exception', $log[2]);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:437:        $this->assertInstanceOf(\ErrorException::class, $exception);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:438:        $this->assertSame('Deprecated: Foo message', $exception->getMessage());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:439:        $this->assertSame(__FILE__, $exception->getFile());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:440:        $this->assertSame(123, $exception->getLine());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:441:        $this->assertSame(E_DEPRECATED, $exception->getSeverity());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:443:        $bootLogger->log(LogLevel::WARNING, 'Foo message', array('exception' => $exception));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:445:        $mockLogger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:446:        $mockLogger->expects($this->once())
vendor/symfony/debug/Tests/ErrorHandlerTest.php:447:            ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:448:            ->with(LogLevel::WARNING, 'Foo message', array('exception' => $exception));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:450:        $handler->setLoggers(array(E_DEPRECATED => array($mockLogger, LogLevel::WARNING)));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:454:     * @group no-hhvm
vendor/symfony/debug/Tests/ErrorHandlerTest.php:463:        $mockLogger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:464:        $mockLogger->expects($this->once())
vendor/symfony/debug/Tests/ErrorHandlerTest.php:465:            ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:466:            ->with(LogLevel::CRITICAL, 'Uncaught Exception: Foo message', array('exception' => $exception));
vendor/symfony/debug/Tests/ErrorHandlerTest.php:468:        $handler->setExceptionHandler(function () use ($handler, $mockLogger) {
vendor/symfony/debug/Tests/ErrorHandlerTest.php:469:            $handler->setDefaultLogger($mockLogger);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:472:        $handler->handleException($exception);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:476:     * @group no-hhvm
vendor/symfony/debug/Tests/ErrorHandlerTest.php:490:            $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:493:                $this->assertEquals('Fatal Parse Error: foo', $message);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:494:                $this->assertArrayHasKey('exception', $context);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:495:                $this->assertInstanceOf(\Exception::class, $context['exception']);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:499:                ->expects($this->once())
vendor/symfony/debug/Tests/ErrorHandlerTest.php:500:                ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:501:                ->will($this->returnCallback($logArgCheck))
vendor/symfony/debug/Tests/ErrorHandlerTest.php:504:            $handler->setDefaultLogger($logger, E_PARSE);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:506:            $handler->handleFatalError($error);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:526:        $handler->setExceptionHandler(function () use (&$args) {
vendor/symfony/debug/Tests/ErrorHandlerTest.php:530:        $handler->handleException($exception);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:532:        $this->assertInstanceOf('Symfony\Component\Debug\Exception\ClassNotFoundException', $args[0]);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:533:        $this->assertStringStartsWith("Attempted to load class \"Foo\" from the global namespace.\nDid you forget a \"use\" statement", $args[0]->getMessage());
vendor/symfony/debug/Tests/ErrorHandlerTest.php:537:     * @group no-hhvm
vendor/symfony/debug/Tests/ErrorHandlerTest.php:544:            $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')->getMock();
vendor/symfony/debug/Tests/ErrorHandlerTest.php:546:                ->expects($this->once())
vendor/symfony/debug/Tests/ErrorHandlerTest.php:547:                ->method('log')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:548:                ->with(
vendor/symfony/debug/Tests/ErrorHandlerTest.php:549:                    $this->equalTo(LogLevel::CRITICAL),
vendor/symfony/debug/Tests/ErrorHandlerTest.php:550:                    $this->equalTo('Fatal Error: foo')
vendor/symfony/debug/Tests/ErrorHandlerTest.php:554:            $handler->setDefaultLogger($logger, E_ERROR);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:566:            $handler->handleFatalError($error);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:575:     * @group no-hhvm
vendor/symfony/debug/Tests/ErrorHandlerTest.php:580:        $handler->setExceptionHandler(function ($e) use ($handler) {
vendor/symfony/debug/Tests/ErrorHandlerTest.php:581:            $handler->handleException($e);
vendor/symfony/debug/Tests/ErrorHandlerTest.php:584:        $handler->handleException(new \Exception());
vendor/symfony/debug/Tests/phpt/fatal_with_nested_handlers.phpt:1:--TEST--
vendor/symfony/debug/Tests/phpt/fatal_with_nested_handlers.phpt:3:--FILE--
vendor/symfony/debug/Tests/phpt/fatal_with_nested_handlers.phpt:24:$eHandler[0]->setExceptionHandler('print_r');
vendor/symfony/debug/Tests/phpt/fatal_with_nested_handlers.phpt:33:--EXPECTF--
vendor/symfony/debug/Tests/phpt/exception_rethrown.phpt:1:--TEST--
vendor/symfony/debug/Tests/phpt/exception_rethrown.phpt:3:--FILE--
vendor/symfony/debug/Tests/phpt/exception_rethrown.phpt:25:ErrorHandler::register()->setDefaultLogger(new TestLogger());
vendor/symfony/debug/Tests/phpt/exception_rethrown.phpt:30:--EXPECTF--
vendor/symfony/debug/Tests/phpt/debug_class_loader.phpt:1:--TEST--
vendor/symfony/debug/Tests/phpt/debug_class_loader.phpt:3:--FILE--
vendor/symfony/debug/Tests/phpt/debug_class_loader.phpt:25:--EXPECTF--
vendor/symfony/debug/Tests/phpt/decorate_exception_hander.phpt:1:--TEST--
vendor/symfony/debug/Tests/phpt/decorate_exception_hander.phpt:3:--FILE--
vendor/symfony/debug/Tests/phpt/decorate_exception_hander.phpt:26:--EXPECTF--
vendor/symfony/debug/FatalErrorHandler/UndefinedFunctionFatalErrorHandler.php:36:        if (0 !== substr_compare($error['message'], $notFoundSuffix, -$notFoundSuffixLen)) {
vendor/symfony/debug/FatalErrorHandler/UndefinedFunctionFatalErrorHandler.php:46:        $fullyQualifiedFunctionName = substr($error['message'], $prefixLen, -$notFoundSuffixLen);
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:39:        if (0 !== substr_compare($error['message'], $notFoundSuffix, -$notFoundSuffixLen)) {
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:50:            $fullyQualifiedClassName = substr($error['message'], $prefixLen, -$notFoundSuffixLen);
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:62:            if ($candidates = $this->getClassCandidates($className)) {
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:79:     * By default, it looks for PSR-0 and PSR-4 classes registered via a Symfony or a Composer
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:101:                $function = $function[0]->getClassLoader();
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:109:                foreach ($function[0]->getPrefixes() as $prefix => $paths) {
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:111:                        $classes = array_merge($classes, $this->findClassInPath($path, $class, $prefix));
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:116:                foreach ($function[0]->getPrefixesPsr4() as $prefix => $paths) {
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:118:                        $classes = array_merge($classes, $this->findClassInPath($path, $class, $prefix));
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:143:            if ($filename == $file->getFileName() && $class = $this->convertFileToClass($path, $file->getPathName(), $prefix)) {
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:183:            if ($this->classExists($candidate)) {
vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:191:            if ($this->classExists($candidate)) {
vendor/symfony/debug/LICENSE:1:Copyright (c) 2004-2018 Fabien Potencier
vendor/symfony/debug/CHANGELOG.md:5:-----
vendor/symfony/debug/CHANGELOG.md:10:-----
vendor/symfony/debug/CHANGELOG.md:15:-----
vendor/symfony/debug/CHANGELOG.md:22:-----
vendor/symfony/debug/CHANGELOG.md:27:-----
vendor/symfony/debug/CHANGELOG.md:34:-----
vendor/symfony/debug/CHANGELOG.md:42:-----
vendor/symfony/debug/CHANGELOG.md:49:-----
vendor/symfony/debug/CHANGELOG.md:56:-----
vendor/symfony/debug/CHANGELOG.md:62:-----
vendor/symfony/debug/BufferingLogger.php:27:        $this->logs[] = array($level, $message, $context);
vendor/symfony/debug/BufferingLogger.php:32:        $logs = $this->logs;
vendor/symfony/debug/BufferingLogger.php:33:        $this->logs = array();
vendor/symfony/debug/Debug.php:52:            // CLI - display errors only if they're not already logged to STDERR
vendor/symfony/debug/Debug.php:58:            ErrorHandler::register()->throwAt(0, true);
vendor/symfony/polyfill-mbstring/composer.json:2:    "name": "symfony/polyfill-mbstring",
vendor/symfony/polyfill-mbstring/composer.json:22:        "psr-4": { "Symfony\\Polyfill\\Mbstring\\": "" },
vendor/symfony/polyfill-mbstring/composer.json:26:        "ext-mbstring": "For best performance"
vendor/symfony/polyfill-mbstring/composer.json:28:    "minimum-stability": "dev",
vendor/symfony/polyfill-mbstring/composer.json:30:        "branch-alias": {
vendor/symfony/polyfill-mbstring/composer.json:31:            "dev-master": "1.8-dev"
vendor/symfony/polyfill-mbstring/Mbstring.php:15: * Partial mbstring implementation in PHP, iconv based, UTF-8 centric.
vendor/symfony/polyfill-mbstring/Mbstring.php:18: * - mb_chr                  - Returns a specific character from its Unicode code point
vendor/symfony/polyfill-mbstring/Mbstring.php:19: * - mb_convert_encoding     - Convert character encoding
vendor/symfony/polyfill-mbstring/Mbstring.php:20: * - mb_convert_variables    - Convert character code in variable(s)
vendor/symfony/polyfill-mbstring/Mbstring.php:21: * - mb_decode_mimeheader    - Decode string in MIME header field
vendor/symfony/polyfill-mbstring/Mbstring.php:22: * - mb_encode_mimeheader    - Encode string for MIME header XXX NATIVE IMPLEMENTATION IS REALLY BUGGED
vendor/symfony/polyfill-mbstring/Mbstring.php:23: * - mb_decode_numericentity - Decode HTML numeric string reference to character
vendor/symfony/polyfill-mbstring/Mbstring.php:24: * - mb_encode_numericentity - Encode character to HTML numeric string reference
vendor/symfony/polyfill-mbstring/Mbstring.php:25: * - mb_convert_case         - Perform case folding on a string
vendor/symfony/polyfill-mbstring/Mbstring.php:26: * - mb_detect_encoding      - Detect character encoding
vendor/symfony/polyfill-mbstring/Mbstring.php:27: * - mb_get_info             - Get internal settings of mbstring
vendor/symfony/polyfill-mbstring/Mbstring.php:28: * - mb_http_input           - Detect HTTP input character encoding
vendor/symfony/polyfill-mbstring/Mbstring.php:29: * - mb_http_output          - Set/Get HTTP output character encoding
vendor/symfony/polyfill-mbstring/Mbstring.php:30: * - mb_internal_encoding    - Set/Get internal character encoding
vendor/symfony/polyfill-mbstring/Mbstring.php:31: * - mb_list_encodings       - Returns an array of all supported encodings
vendor/symfony/polyfill-mbstring/Mbstring.php:32: * - mb_ord                  - Returns the Unicode code point of a character
vendor/symfony/polyfill-mbstring/Mbstring.php:33: * - mb_output_handler       - Callback function converts character encoding in output buffer
vendor/symfony/polyfill-mbstring/Mbstring.php:34: * - mb_scrub                - Replaces ill-formed byte sequences with substitute characters
vendor/symfony/polyfill-mbstring/Mbstring.php:35: * - mb_strlen               - Get string length
vendor/symfony/polyfill-mbstring/Mbstring.php:36: * - mb_strpos               - Find position of first occurrence of string in a string
vendor/symfony/polyfill-mbstring/Mbstring.php:37: * - mb_strrpos              - Find position of last occurrence of a string in a string
vendor/symfony/polyfill-mbstring/Mbstring.php:38: * - mb_strtolower           - Make a string lowercase
vendor/symfony/polyfill-mbstring/Mbstring.php:39: * - mb_strtoupper           - Make a string uppercase
vendor/symfony/polyfill-mbstring/Mbstring.php:40: * - mb_substitute_character - Set/Get substitution character
vendor/symfony/polyfill-mbstring/Mbstring.php:41: * - mb_substr               - Get part of string
vendor/symfony/polyfill-mbstring/Mbstring.php:42: * - mb_stripos              - Finds position of first occurrence of a string within another, case insensitive
vendor/symfony/polyfill-mbstring/Mbstring.php:43: * - mb_stristr              - Finds first occurrence of a string within another, case insensitive
vendor/symfony/polyfill-mbstring/Mbstring.php:44: * - mb_strrchr              - Finds the last occurrence of a character in a string within another
vendor/symfony/polyfill-mbstring/Mbstring.php:45: * - mb_strrichr             - Finds the last occurrence of a character in a string within another, case insensitive
vendor/symfony/polyfill-mbstring/Mbstring.php:46: * - mb_strripos             - Finds position of last occurrence of a string within another, case insensitive
vendor/symfony/polyfill-mbstring/Mbstring.php:47: * - mb_strstr               - Finds first occurrence of a string within anothers
vendor/symfony/polyfill-mbstring/Mbstring.php:48: * - mb_strwidth             - Return width of string
vendor/symfony/polyfill-mbstring/Mbstring.php:49: * - mb_substr_count         - Count the number of substring occurrences
vendor/symfony/polyfill-mbstring/Mbstring.php:52: * - mb_convert_kana         - Convert "kana" one from another ("zen-kaku", "han-kaku" and more)
vendor/symfony/polyfill-mbstring/Mbstring.php:53: * - mb_ereg_*               - Regular expression with multibyte support
vendor/symfony/polyfill-mbstring/Mbstring.php:54: * - mb_parse_str            - Parse GET/POST/COOKIE data and set global variable
vendor/symfony/polyfill-mbstring/Mbstring.php:55: * - mb_preferred_mime_name  - Get MIME charset string
vendor/symfony/polyfill-mbstring/Mbstring.php:56: * - mb_regex_encoding       - Returns current encoding for multibyte regex as string
vendor/symfony/polyfill-mbstring/Mbstring.php:57: * - mb_regex_set_options    - Set/Get the default options for mbregex functions
vendor/symfony/polyfill-mbstring/Mbstring.php:58: * - mb_send_mail            - Send encoded mail
vendor/symfony/polyfill-mbstring/Mbstring.php:59: * - mb_split                - Split multibyte string using regular expression
vendor/symfony/polyfill-mbstring/Mbstring.php:60: * - mb_strcut               - Get part of string
vendor/symfony/polyfill-mbstring/Mbstring.php:61: * - mb_strimwidth           - Get truncated string with specified width
vendor/symfony/polyfill-mbstring/Mbstring.php:71:    private static $encodingList = array('ASCII', 'UTF-8');
vendor/symfony/polyfill-mbstring/Mbstring.php:73:    private static $internalEncoding = 'UTF-8';
vendor/symfony/polyfill-mbstring/Mbstring.php:98:        if ('HTML-ENTITIES' === $toEncoding || 'HTML' === $toEncoding) {
vendor/symfony/polyfill-mbstring/Mbstring.php:99:            if ('HTML-ENTITIES' === $fromEncoding || 'HTML' === $fromEncoding) {
vendor/symfony/polyfill-mbstring/Mbstring.php:100:                $fromEncoding = 'Windows-1252';
vendor/symfony/polyfill-mbstring/Mbstring.php:102:            if ('UTF-8' !== $fromEncoding) {
vendor/symfony/polyfill-mbstring/Mbstring.php:103:                $s = iconv($fromEncoding, 'UTF-8//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:106:            return preg_replace_callback('/[\x80-\xFF]+/', array(__CLASS__, 'html_encoding_callback'), $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:109:        if ('HTML-ENTITIES' === $fromEncoding) {
vendor/symfony/polyfill-mbstring/Mbstring.php:110:            $s = html_entity_decode($s, ENT_COMPAT, 'UTF-8');
vendor/symfony/polyfill-mbstring/Mbstring.php:111:            $fromEncoding = 'UTF-8';
vendor/symfony/polyfill-mbstring/Mbstring.php:164:        if ('UTF-8' === $encoding) {
vendor/symfony/polyfill-mbstring/Mbstring.php:167:                $s = @iconv('UTF-8', 'UTF-8//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:170:            $s = iconv($encoding, 'UTF-8//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:181:        $s = preg_replace_callback('/&#(?:0*([0-9]+)|x0*([0-9a-fA-F]+))(?!&);?/', function (array $m) use ($cnt, $convmap) {
vendor/symfony/polyfill-mbstring/Mbstring.php:185:                    return Mbstring::mb_chr($c - $convmap[$i + 2]);
vendor/symfony/polyfill-mbstring/Mbstring.php:195:        return iconv('UTF-8', $encoding.'//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:226:        if ('UTF-8' === $encoding) {
vendor/symfony/polyfill-mbstring/Mbstring.php:229:                $s = @iconv('UTF-8', 'UTF-8//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:232:            $s = iconv($encoding, 'UTF-8//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:262:        return iconv('UTF-8', $encoding.'//IGNORE', $result);
vendor/symfony/polyfill-mbstring/Mbstring.php:274:        if ('UTF-8' === $encoding) {
vendor/symfony/polyfill-mbstring/Mbstring.php:277:                $s = @iconv('UTF-8', 'UTF-8//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:280:            $s = iconv($encoding, 'UTF-8//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:322:                            $s[--$nlen] = $uchr[--$ulen];
vendor/symfony/polyfill-mbstring/Mbstring.php:325:                        $s = substr_replace($s, $uchr, $i - $ulen, $ulen);
vendor/symfony/polyfill-mbstring/Mbstring.php:326:                        $len += $nlen - $ulen;
vendor/symfony/polyfill-mbstring/Mbstring.php:327:                        $i   += $nlen - $ulen;
vendor/symfony/polyfill-mbstring/Mbstring.php:337:        return iconv('UTF-8', $encoding.'//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:348:        if ('UTF-8' === $encoding || false !== @iconv($encoding, $encoding, ' ')) {
vendor/symfony/polyfill-mbstring/Mbstring.php:376:        return array('UTF-8');
vendor/symfony/polyfill-mbstring/Mbstring.php:383:            case 'UTF-8':
vendor/symfony/polyfill-mbstring/Mbstring.php:416:                    if (!preg_match('/[\x80-\xFF]/', $str)) {
vendor/symfony/polyfill-mbstring/Mbstring.php:422:                case 'UTF-8':
vendor/symfony/polyfill-mbstring/Mbstring.php:424:                        return 'UTF-8';
vendor/symfony/polyfill-mbstring/Mbstring.php:429:                    if (0 === strncmp($enc, 'ISO-8859-', 9)) {
vendor/symfony/polyfill-mbstring/Mbstring.php:452:                    if (strncmp($enc, 'ISO-8859-', 9)) {
vendor/symfony/polyfill-mbstring/Mbstring.php:457:                case 'UTF-8':
vendor/symfony/polyfill-mbstring/Mbstring.php:552:            $length = iconv_strlen($s, $encoding) + $length - $start;
vendor/symfony/polyfill-mbstring/Mbstring.php:625:            'mail_charset' => 'UTF-8',
vendor/symfony/polyfill-mbstring/Mbstring.php:660:        if ('UTF-8' !== $encoding) {
vendor/symfony/polyfill-mbstring/Mbstring.php:661:            $s = iconv($encoding, 'UTF-8//IGNORE', $s);
vendor/symfony/polyfill-mbstring/Mbstring.php:664:        $s = preg_replace('/[\x{1100}-\x{115F}\x{2329}\x{232A}\x{2E80}-\x{303E}\x{3040}-\x{A4CF}\x{AC00}-\x{D7A3}\x{F900}-\x{FAFF}\x{FE10}-\x{FE19}\x{FE30}-\x{FE6F}\x{FF00}-\x{FF60}\x{FFE0}-\x{FFE6}\x{20000}-\x{2FFFD}\x{30000}-\x{3FFFD}]/u', '', $s, -1, $wide);
vendor/symfony/polyfill-mbstring/Mbstring.php:666:        return ($wide << 1) + iconv_strlen($s, 'UTF-8');
vendor/symfony/polyfill-mbstring/Mbstring.php:691:        if ('UTF-8' !== $encoding = self::getEncoding($encoding)) {
vendor/symfony/polyfill-mbstring/Mbstring.php:692:            $s = mb_convert_encoding($s, $encoding, 'UTF-8');
vendor/symfony/polyfill-mbstring/Mbstring.php:700:        if ('UTF-8' !== $encoding = self::getEncoding($encoding)) {
vendor/symfony/polyfill-mbstring/Mbstring.php:701:            $s = mb_convert_encoding($s, 'UTF-8', $encoding);
vendor/symfony/polyfill-mbstring/Mbstring.php:706:            return (($code - 0xF0) << 18) + (($s[2] - 0x80) << 12) + (($s[3] - 0x80) << 6) + $s[4] - 0x80;
vendor/symfony/polyfill-mbstring/Mbstring.php:709:            return (($code - 0xE0) << 12) + (($s[2] - 0x80) << 6) + $s[3] - 0x80;
vendor/symfony/polyfill-mbstring/Mbstring.php:712:            return (($code - 0xC0) << 6) + $s[2] - 0x80;
vendor/symfony/polyfill-mbstring/Mbstring.php:734:        $m = unpack('C*', htmlentities($m[0], ENT_COMPAT, 'UTF-8'));
vendor/symfony/polyfill-mbstring/Mbstring.php:742:                $c = (($m[$i++] - 0xF0) << 18) + (($m[$i++] - 0x80) << 12) + (($m[$i++] - 0x80) << 6) + $m[$i++] - 0x80;
vendor/symfony/polyfill-mbstring/Mbstring.php:744:                $c = (($m[$i++] - 0xE0) << 12) + (($m[$i++] - 0x80) << 6) + $m[$i++] - 0x80;
vendor/symfony/polyfill-mbstring/Mbstring.php:746:                $c = (($m[$i++] - 0xC0) << 6) + $m[$i++] - 0x80;
vendor/symfony/polyfill-mbstring/Mbstring.php:757:        return self::mb_convert_case($s[0], MB_CASE_LOWER, 'UTF-8');
vendor/symfony/polyfill-mbstring/Mbstring.php:762:        return self::mb_convert_case($s[0], MB_CASE_UPPER, 'UTF-8');
vendor/symfony/polyfill-mbstring/Mbstring.php:786:            return 'UTF-8';
vendor/symfony/polyfill-mbstring/LICENSE:1:Copyright (c) 2015-2018 Fabien Potencier
vendor/symfony/finder/composer.json:22:        "psr-4": { "Symfony\\Component\\Finder\\": "" },
vendor/symfony/finder/composer.json:23:        "exclude-from-classmap": [
vendor/symfony/finder/composer.json:27:    "minimum-stability": "dev",
vendor/symfony/finder/composer.json:29:        "branch-alias": {
vendor/symfony/finder/composer.json:30:            "dev-master": "3.4-dev"
vendor/symfony/finder/Glob.php:33: * @copyright  2004-2005 Fabien Potencier <fabien@symfony.com>
vendor/symfony/finder/Glob.php:95:                    --$inCurlies;
vendor/symfony/finder/Exception/AccessDeniedException.php:15: * @author Jean-François Simon <jeanfrancois.simon@sensiolabs.com>
vendor/symfony/finder/Exception/ExceptionInterface.php:15: * @author Jean-François Simon <contact@jfsimon.fr>
vendor/symfony/finder/README.md:8:---------
vendor/symfony/finder/Finder.php:34: * $finder = Finder::create()->files()->name('*.php')->in(__DIR__);
vendor/symfony/finder/Finder.php:62:    private static $vcsPatterns = array('.svn', '_svn', 'CVS', '_darcs', '.arch-params', '.monotone', '.bzr', '.git', '.hg');
vendor/symfony/finder/Finder.php:66:        $this->ignore = static::IGNORE_VCS_FILES | static::IGNORE_DOT_FILES;
vendor/symfony/finder/Finder.php:86:        $this->mode = Iterator\FileTypeFilterIterator::ONLY_DIRECTORIES;
vendor/symfony/finder/Finder.php:98:        $this->mode = Iterator\FileTypeFilterIterator::ONLY_FILES;
vendor/symfony/finder/Finder.php:108:     *   $finder->depth('> 1') // the Finder will start matching at level 1.
vendor/symfony/finder/Finder.php:109:     *   $finder->depth('< 3') // the Finder will descend at most 3 levels of directories below the starting point.
vendor/symfony/finder/Finder.php:120:        $this->depths[] = new Comparator\NumberComparator($level);
vendor/symfony/finder/Finder.php:130:     *   $finder->date('since yesterday');
vendor/symfony/finder/Finder.php:131:     *   $finder->date('until 2 days ago');
vendor/symfony/finder/Finder.php:132:     *   $finder->date('> now - 2 hours');
vendor/symfony/finder/Finder.php:133:     *   $finder->date('>= 2005-10-15');
vendor/symfony/finder/Finder.php:145:        $this->dates[] = new Comparator\DateComparator($date);
vendor/symfony/finder/Finder.php:155:     * $finder->name('*.php')
vendor/symfony/finder/Finder.php:156:     * $finder->name('/\.php$/') // same as above
vendor/symfony/finder/Finder.php:157:     * $finder->name('test.php')
vendor/symfony/finder/Finder.php:167:        $this->names[] = $pattern;
vendor/symfony/finder/Finder.php:183:        $this->notNames[] = $pattern;
vendor/symfony/finder/Finder.php:193:     * $finder->contains('Lorem ipsum')
vendor/symfony/finder/Finder.php:194:     * $finder->contains('/Lorem ipsum/i')
vendor/symfony/finder/Finder.php:204:        $this->contains[] = $pattern;
vendor/symfony/finder/Finder.php:214:     * $finder->notContains('Lorem ipsum')
vendor/symfony/finder/Finder.php:215:     * $finder->notContains('/Lorem ipsum/i')
vendor/symfony/finder/Finder.php:225:        $this->notContains[] = $pattern;
vendor/symfony/finder/Finder.php:235:     * $finder->path('some/special/dir')
vendor/symfony/finder/Finder.php:236:     * $finder->path('/some\/special\/dir/') // same as above
vendor/symfony/finder/Finder.php:248:        $this->paths[] = $pattern;
vendor/symfony/finder/Finder.php:258:     * $finder->notPath('some/special/dir')
vendor/symfony/finder/Finder.php:259:     * $finder->notPath('/some\/special\/dir/') // same as above
vendor/symfony/finder/Finder.php:271:        $this->notPaths[] = $pattern;
vendor/symfony/finder/Finder.php:279:     * $finder->size('> 10K');
vendor/symfony/finder/Finder.php:280:     * $finder->size('<= 1Ki');
vendor/symfony/finder/Finder.php:281:     * $finder->size(4);
vendor/symfony/finder/Finder.php:292:        $this->sizes[] = new Comparator\NumberComparator($size);
vendor/symfony/finder/Finder.php:302:     *     $finder->in(__DIR__)->exclude('ruby');
vendor/symfony/finder/Finder.php:312:        $this->exclude = array_merge($this->exclude, (array) $dirs);
vendor/symfony/finder/Finder.php:331:            $this->ignore |= static::IGNORE_DOT_FILES;
vendor/symfony/finder/Finder.php:333:            $this->ignore &= ~static::IGNORE_DOT_FILES;
vendor/symfony/finder/Finder.php:353:            $this->ignore |= static::IGNORE_VCS_FILES;
vendor/symfony/finder/Finder.php:355:            $this->ignore &= ~static::IGNORE_VCS_FILES;
vendor/symfony/finder/Finder.php:390:        $this->sort = $closure;
vendor/symfony/finder/Finder.php:406:        $this->sort = Iterator\SortableIterator::SORT_BY_NAME;
vendor/symfony/finder/Finder.php:422:        $this->sort = Iterator\SortableIterator::SORT_BY_TYPE;
vendor/symfony/finder/Finder.php:440:        $this->sort = Iterator\SortableIterator::SORT_BY_ACCESSED_TIME;
vendor/symfony/finder/Finder.php:460:        $this->sort = Iterator\SortableIterator::SORT_BY_CHANGED_TIME;
vendor/symfony/finder/Finder.php:478:        $this->sort = Iterator\SortableIterator::SORT_BY_MODIFIED_TIME;
vendor/symfony/finder/Finder.php:495:        $this->filters[] = $closure;
vendor/symfony/finder/Finder.php:507:        $this->followLinks = true;
vendor/symfony/finder/Finder.php:523:        $this->ignoreUnreadableDirs = (bool) $ignore;
vendor/symfony/finder/Finder.php:543:                $resolvedDirs[] = $this->normalizeDir($dir);
vendor/symfony/finder/Finder.php:551:        $this->dirs = array_merge($this->dirs, $resolvedDirs);
vendor/symfony/finder/Finder.php:567:        if (0 === count($this->dirs) && 0 === count($this->iterators)) {
vendor/symfony/finder/Finder.php:571:        if (1 === count($this->dirs) && 0 === count($this->iterators)) {
vendor/symfony/finder/Finder.php:572:            return $this->searchInDirectory($this->dirs[0]);
vendor/symfony/finder/Finder.php:576:        foreach ($this->dirs as $dir) {
vendor/symfony/finder/Finder.php:577:            $iterator->append($this->searchInDirectory($dir));
vendor/symfony/finder/Finder.php:580:        foreach ($this->iterators as $it) {
vendor/symfony/finder/Finder.php:581:            $iterator->append($it);
vendor/symfony/finder/Finder.php:601:            $this->iterators[] = $iterator->getIterator();
vendor/symfony/finder/Finder.php:603:            $this->iterators[] = $iterator;
vendor/symfony/finder/Finder.php:607:                $it->append($file instanceof \SplFileInfo ? $file : new \SplFileInfo($file));
vendor/symfony/finder/Finder.php:609:            $this->iterators[] = $it;
vendor/symfony/finder/Finder.php:624:        foreach ($this->getIterator() as $_) {
vendor/symfony/finder/Finder.php:638:        return iterator_count($this->getIterator());
vendor/symfony/finder/Finder.php:648:        if (static::IGNORE_VCS_FILES === (static::IGNORE_VCS_FILES & $this->ignore)) {
vendor/symfony/finder/Finder.php:649:            $this->exclude = array_merge($this->exclude, self::$vcsPatterns);
vendor/symfony/finder/Finder.php:652:        if (static::IGNORE_DOT_FILES === (static::IGNORE_DOT_FILES & $this->ignore)) {
vendor/symfony/finder/Finder.php:653:            $this->notPaths[] = '#(^|/)\..+(/|$)#';
vendor/symfony/finder/Finder.php:659:        foreach ($this->depths as $comparator) {
vendor/symfony/finder/Finder.php:660:            switch ($comparator->getOperator()) {
vendor/symfony/finder/Finder.php:662:                    $minDepth = $comparator->getTarget() + 1;
vendor/symfony/finder/Finder.php:665:                    $minDepth = $comparator->getTarget();
vendor/symfony/finder/Finder.php:668:                    $maxDepth = $comparator->getTarget() - 1;
vendor/symfony/finder/Finder.php:671:                    $maxDepth = $comparator->getTarget();
vendor/symfony/finder/Finder.php:674:                    $minDepth = $maxDepth = $comparator->getTarget();
vendor/symfony/finder/Finder.php:680:        if ($this->followLinks) {
vendor/symfony/finder/Finder.php:684:        $iterator = new Iterator\RecursiveDirectoryIterator($dir, $flags, $this->ignoreUnreadableDirs);
vendor/symfony/finder/Finder.php:686:        if ($this->exclude) {
vendor/symfony/finder/Finder.php:687:            $iterator = new Iterator\ExcludeDirectoryFilterIterator($iterator, $this->exclude);
vendor/symfony/finder/Finder.php:696:        if ($this->mode) {
vendor/symfony/finder/Finder.php:697:            $iterator = new Iterator\FileTypeFilterIterator($iterator, $this->mode);
vendor/symfony/finder/Finder.php:700:        if ($this->names || $this->notNames) {
vendor/symfony/finder/Finder.php:701:            $iterator = new Iterator\FilenameFilterIterator($iterator, $this->names, $this->notNames);
vendor/symfony/finder/Finder.php:704:        if ($this->contains || $this->notContains) {
vendor/symfony/finder/Finder.php:705:            $iterator = new Iterator\FilecontentFilterIterator($iterator, $this->contains, $this->notContains);
vendor/symfony/finder/Finder.php:708:        if ($this->sizes) {
vendor/symfony/finder/Finder.php:709:            $iterator = new Iterator\SizeRangeFilterIterator($iterator, $this->sizes);
vendor/symfony/finder/Finder.php:712:        if ($this->dates) {
vendor/symfony/finder/Finder.php:713:            $iterator = new Iterator\DateRangeFilterIterator($iterator, $this->dates);
vendor/symfony/finder/Finder.php:716:        if ($this->filters) {
vendor/symfony/finder/Finder.php:717:            $iterator = new Iterator\CustomFilterIterator($iterator, $this->filters);
vendor/symfony/finder/Finder.php:720:        if ($this->paths || $this->notPaths) {
vendor/symfony/finder/Finder.php:721:            $iterator = new Iterator\PathFilterIterator($iterator, $this->paths, $this->notPaths);
vendor/symfony/finder/Finder.php:724:        if ($this->sort) {
vendor/symfony/finder/Finder.php:725:            $iteratorAggregate = new Iterator\SortableIterator($iterator, $this->sort);
vendor/symfony/finder/Finder.php:726:            $iterator = $iteratorAggregate->getIterator();
vendor/symfony/finder/SplFileInfo.php:32:        $this->relativePath = $relativePath;
vendor/symfony/finder/SplFileInfo.php:33:        $this->relativePathname = $relativePathname;
vendor/symfony/finder/SplFileInfo.php:45:        return $this->relativePath;
vendor/symfony/finder/SplFileInfo.php:57:        return $this->relativePathname;
vendor/symfony/finder/SplFileInfo.php:70:        $content = file_get_contents($this->getPathname());
vendor/symfony/finder/phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/finder/phpunit.xml.dist:3:<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
vendor/symfony/finder/phpunit.xml.dist:12:        <ini name="error_reporting" value="-1" />
vendor/symfony/finder/Comparator/NumberComparator.php:30: * @copyright 2004-2005 Fabien Potencier <fabien@symfony.com>
vendor/symfony/finder/Comparator/NumberComparator.php:44:        if (!preg_match('#^\s*(==|!=|[<>]=?)?\s*([0-9\.]+)\s*([kmg]i?)?\s*$#i', $test, $matches)) {
vendor/symfony/finder/Comparator/NumberComparator.php:76:        $this->setTarget($target);
vendor/symfony/finder/Comparator/NumberComparator.php:77:        $this->setOperator(isset($matches[1]) ? $matches[1] : '==');
vendor/symfony/finder/Comparator/Comparator.php:31:        return $this->target;
vendor/symfony/finder/Comparator/Comparator.php:41:        $this->target = $target;
vendor/symfony/finder/Comparator/Comparator.php:51:        return $this->operator;
vendor/symfony/finder/Comparator/Comparator.php:71:        $this->operator = $operator;
vendor/symfony/finder/Comparator/Comparator.php:83:        switch ($this->operator) {
vendor/symfony/finder/Comparator/Comparator.php:85:                return $test > $this->target;
vendor/symfony/finder/Comparator/Comparator.php:87:                return $test >= $this->target;
vendor/symfony/finder/Comparator/Comparator.php:89:                return $test < $this->target;
vendor/symfony/finder/Comparator/Comparator.php:91:                return $test <= $this->target;
vendor/symfony/finder/Comparator/Comparator.php:93:                return $test != $this->target;
vendor/symfony/finder/Comparator/Comparator.php:96:        return $test == $this->target;
vendor/symfony/finder/Comparator/DateComparator.php:34:            $target = $date->format('U');
vendor/symfony/finder/Comparator/DateComparator.php:48:        $this->setOperator($operator);
vendor/symfony/finder/Comparator/DateComparator.php:49:        $this->setTarget($target);
vendor/symfony/finder/Tests/FinderTest.php:20:        $this->assertInstanceOf('Symfony\Component\Finder\Finder', Finder::create());
vendor/symfony/finder/Tests/FinderTest.php:25:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:26:        $this->assertSame($finder, $finder->directories());
vendor/symfony/finder/Tests/FinderTest.php:27:        $this->assertIterator($this->toAbsolute(array('foo', 'toto')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:29:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:30:        $finder->directories();
vendor/symfony/finder/Tests/FinderTest.php:31:        $finder->files();
vendor/symfony/finder/Tests/FinderTest.php:32:        $finder->directories();
vendor/symfony/finder/Tests/FinderTest.php:33:        $this->assertIterator($this->toAbsolute(array('foo', 'toto')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:38:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:39:        $this->assertSame($finder, $finder->files());
vendor/symfony/finder/Tests/FinderTest.php:40:        $this->assertIterator($this->toAbsolute(array('foo/bar.tmp', 'test.php', 'test.py', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:42:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:43:        $finder->files();
vendor/symfony/finder/Tests/FinderTest.php:44:        $finder->directories();
vendor/symfony/finder/Tests/FinderTest.php:45:        $finder->files();
vendor/symfony/finder/Tests/FinderTest.php:46:        $this->assertIterator($this->toAbsolute(array('foo/bar.tmp', 'test.php', 'test.py', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:51:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:53:        $expected = $this->toAbsolute(array('foo/bar.tmp', 'test.php', 'test.py', 'foo bar'));
vendor/symfony/finder/Tests/FinderTest.php:56:        $this->assertIterator($expected, $finder->in($in)->files()->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:62:            $this->markTestSkipped('symlinks are not supported on Windows');
vendor/symfony/finder/Tests/FinderTest.php:65:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:67:        symlink($this->toAbsolute('foo'), $this->toAbsolute('baz'));
vendor/symfony/finder/Tests/FinderTest.php:68:        $expected = $this->toAbsolute(array('baz/bar.tmp'));
vendor/symfony/finder/Tests/FinderTest.php:71:            $this->assertIterator($expected, $finder->in($in)->files()->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:72:            unlink($this->toAbsolute('baz'));
vendor/symfony/finder/Tests/FinderTest.php:74:            unlink($this->toAbsolute('baz'));
vendor/symfony/finder/Tests/FinderTest.php:81:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:83:        $expected = $this->toAbsolute(array('foo/../foo/bar.tmp'));
vendor/symfony/finder/Tests/FinderTest.php:85:        $this->assertIterator($expected, $finder->in($in)->files()->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:90:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:91:        $this->assertSame($finder, $finder->depth('< 1'));
vendor/symfony/finder/Tests/FinderTest.php:92:        $this->assertIterator($this->toAbsolute(array('foo', 'test.php', 'test.py', 'toto', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:94:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:95:        $this->assertSame($finder, $finder->depth('<= 0'));
vendor/symfony/finder/Tests/FinderTest.php:96:        $this->assertIterator($this->toAbsolute(array('foo', 'test.php', 'test.py', 'toto', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:98:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:99:        $this->assertSame($finder, $finder->depth('>= 1'));
vendor/symfony/finder/Tests/FinderTest.php:100:        $this->assertIterator($this->toAbsolute(array('foo/bar.tmp')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:102:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:103:        $finder->depth('< 1')->depth('>= 1');
vendor/symfony/finder/Tests/FinderTest.php:104:        $this->assertIterator(array(), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:109:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:110:        $this->assertSame($finder, $finder->name('*.php'));
vendor/symfony/finder/Tests/FinderTest.php:111:        $this->assertIterator($this->toAbsolute(array('test.php')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:113:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:114:        $finder->name('test.ph*');
vendor/symfony/finder/Tests/FinderTest.php:115:        $finder->name('test.py');
vendor/symfony/finder/Tests/FinderTest.php:116:        $this->assertIterator($this->toAbsolute(array('test.php', 'test.py')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:118:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:119:        $finder->name('~^test~i');
vendor/symfony/finder/Tests/FinderTest.php:120:        $this->assertIterator($this->toAbsolute(array('test.php', 'test.py')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:122:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:123:        $finder->name('~\\.php$~i');
vendor/symfony/finder/Tests/FinderTest.php:124:        $this->assertIterator($this->toAbsolute(array('test.php')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:126:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:127:        $finder->name('test.p{hp,y}');
vendor/symfony/finder/Tests/FinderTest.php:128:        $this->assertIterator($this->toAbsolute(array('test.php', 'test.py')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:133:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:134:        $this->assertSame($finder, $finder->notName('*.php'));
vendor/symfony/finder/Tests/FinderTest.php:135:        $this->assertIterator($this->toAbsolute(array('foo', 'foo/bar.tmp', 'test.py', 'toto', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:137:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:138:        $finder->notName('*.php');
vendor/symfony/finder/Tests/FinderTest.php:139:        $finder->notName('*.py');
vendor/symfony/finder/Tests/FinderTest.php:140:        $this->assertIterator($this->toAbsolute(array('foo', 'foo/bar.tmp', 'toto', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:142:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:143:        $finder->name('test.ph*');
vendor/symfony/finder/Tests/FinderTest.php:144:        $finder->name('test.py');
vendor/symfony/finder/Tests/FinderTest.php:145:        $finder->notName('*.php');
vendor/symfony/finder/Tests/FinderTest.php:146:        $finder->notName('*.py');
vendor/symfony/finder/Tests/FinderTest.php:147:        $this->assertIterator(array(), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:149:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:150:        $finder->name('test.ph*');
vendor/symfony/finder/Tests/FinderTest.php:151:        $finder->name('test.py');
vendor/symfony/finder/Tests/FinderTest.php:152:        $finder->notName('*.p{hp,y}');
vendor/symfony/finder/Tests/FinderTest.php:153:        $this->assertIterator(array(), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:161:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:162:        $finder->name($regex);
vendor/symfony/finder/Tests/FinderTest.php:163:        $this->assertIterator($this->toAbsolute(array('test.py', 'test.php')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:168:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:169:        $this->assertSame($finder, $finder->files()->size('< 1K')->size('> 500'));
vendor/symfony/finder/Tests/FinderTest.php:170:        $this->assertIterator($this->toAbsolute(array('test.php')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:175:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:176:        $this->assertSame($finder, $finder->files()->date('until last month'));
vendor/symfony/finder/Tests/FinderTest.php:177:        $this->assertIterator($this->toAbsolute(array('foo/bar.tmp', 'test.php')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:182:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:183:        $this->assertSame($finder, $finder->exclude('foo'));
vendor/symfony/finder/Tests/FinderTest.php:184:        $this->assertIterator($this->toAbsolute(array('test.php', 'test.py', 'toto', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:189:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:190:        $this->assertSame($finder, $finder->ignoreVCS(false)->ignoreDotFiles(false));
vendor/symfony/finder/Tests/FinderTest.php:191:        $this->assertIterator($this->toAbsolute(array('.git', 'foo', 'foo/bar.tmp', 'test.php', 'test.py', 'toto', 'toto/.git', '.bar', '.foo', '.foo/.bar', '.foo/bar', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:193:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:194:        $finder->ignoreVCS(false)->ignoreVCS(false)->ignoreDotFiles(false);
vendor/symfony/finder/Tests/FinderTest.php:195:        $this->assertIterator($this->toAbsolute(array('.git', 'foo', 'foo/bar.tmp', 'test.php', 'test.py', 'toto', 'toto/.git', '.bar', '.foo', '.foo/.bar', '.foo/bar', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:197:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:198:        $this->assertSame($finder, $finder->ignoreVCS(true)->ignoreDotFiles(false));
vendor/symfony/finder/Tests/FinderTest.php:199:        $this->assertIterator($this->toAbsolute(array('foo', 'foo/bar.tmp', 'test.php', 'test.py', 'toto', '.bar', '.foo', '.foo/.bar', '.foo/bar', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:204:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:205:        $this->assertSame($finder, $finder->ignoreDotFiles(false)->ignoreVCS(false));
vendor/symfony/finder/Tests/FinderTest.php:206:        $this->assertIterator($this->toAbsolute(array('.git', '.bar', '.foo', '.foo/.bar', '.foo/bar', 'foo', 'foo/bar.tmp', 'test.php', 'test.py', 'toto', 'toto/.git', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:208:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:209:        $finder->ignoreDotFiles(false)->ignoreDotFiles(false)->ignoreVCS(false);
vendor/symfony/finder/Tests/FinderTest.php:210:        $this->assertIterator($this->toAbsolute(array('.git', '.bar', '.foo', '.foo/.bar', '.foo/bar', 'foo', 'foo/bar.tmp', 'test.php', 'test.py', 'toto', 'toto/.git', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:212:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:213:        $this->assertSame($finder, $finder->ignoreDotFiles(true)->ignoreVCS(false));
vendor/symfony/finder/Tests/FinderTest.php:214:        $this->assertIterator($this->toAbsolute(array('foo', 'foo/bar.tmp', 'test.php', 'test.py', 'toto', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:219:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:220:        $this->assertSame($finder, $finder->sortByName());
vendor/symfony/finder/Tests/FinderTest.php:221:        $this->assertIterator($this->toAbsolute(array('foo', 'foo bar', 'foo/bar.tmp', 'test.php', 'test.py', 'toto')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:226:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:227:        $this->assertSame($finder, $finder->sortByType());
vendor/symfony/finder/Tests/FinderTest.php:228:        $this->assertIterator($this->toAbsolute(array('foo', 'foo bar', 'toto', 'foo/bar.tmp', 'test.php', 'test.py')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:233:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:234:        $this->assertSame($finder, $finder->sortByAccessedTime());
vendor/symfony/finder/Tests/FinderTest.php:235:        $this->assertIterator($this->toAbsolute(array('foo/bar.tmp', 'test.php', 'toto', 'test.py', 'foo', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:240:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:241:        $this->assertSame($finder, $finder->sortByChangedTime());
vendor/symfony/finder/Tests/FinderTest.php:242:        $this->assertIterator($this->toAbsolute(array('toto', 'test.py', 'test.php', 'foo/bar.tmp', 'foo', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:247:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:248:        $this->assertSame($finder, $finder->sortByModifiedTime());
vendor/symfony/finder/Tests/FinderTest.php:249:        $this->assertIterator($this->toAbsolute(array('foo/bar.tmp', 'test.php', 'toto', 'test.py', 'foo', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:254:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:255:        $this->assertSame($finder, $finder->sort(function (\SplFileInfo $a, \SplFileInfo $b) { return strcmp($a->getRealPath(), $b->getRealPath()); }));
vendor/symfony/finder/Tests/FinderTest.php:256:        $this->assertIterator($this->toAbsolute(array('foo', 'foo bar', 'foo/bar.tmp', 'test.php', 'test.py', 'toto')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:261:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:262:        $this->assertSame($finder, $finder->filter(function (\SplFileInfo $f) { return false !== strpos($f, 'test'); }));
vendor/symfony/finder/Tests/FinderTest.php:263:        $this->assertIterator($this->toAbsolute(array('test.php', 'test.py')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:269:            $this->markTestSkipped('symlinks are not supported on Windows');
vendor/symfony/finder/Tests/FinderTest.php:272:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:273:        $this->assertSame($finder, $finder->followLinks());
vendor/symfony/finder/Tests/FinderTest.php:274:        $this->assertIterator($this->toAbsolute(array('foo', 'foo/bar.tmp', 'test.php', 'test.py', 'toto', 'foo bar')), $finder->in(self::$tmpDir)->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:279:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:280:        $iterator = $finder->files()->name('*.php')->depth('< 1')->in(array(self::$tmpDir, __DIR__))->getIterator();
vendor/symfony/finder/Tests/FinderTest.php:288:        $this->assertIterator($expected, $iterator);
vendor/symfony/finder/Tests/FinderTest.php:297:        $finder->in('foobar');
vendor/symfony/finder/Tests/FinderTest.php:302:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:303:        $finder->in(array(__DIR__.'/Fixtures/*/B/C/', __DIR__.'/Fixtures/*/*/B/C/'))->getIterator();
vendor/symfony/finder/Tests/FinderTest.php:305:        $this->assertIterator($this->toAbsoluteFixtures(array('A/B/C/abc.dat', 'copy/A/B/C/abc.dat.copy')), $finder);
vendor/symfony/finder/Tests/FinderTest.php:314:        $finder->in(__DIR__.'/Fixtures/A/a*');
vendor/symfony/finder/Tests/FinderTest.php:319:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:320:        $finder->in(array(__DIR__.'/Fixtures/{A,copy/A}/B/C'))->getIterator();
vendor/symfony/finder/Tests/FinderTest.php:322:        $this->assertIterator($this->toAbsoluteFixtures(array('A/B/C/abc.dat', 'copy/A/B/C/abc.dat.copy')), $finder);
vendor/symfony/finder/Tests/FinderTest.php:331:        $finder->getIterator();
vendor/symfony/finder/Tests/FinderTest.php:336:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:338:        foreach ($finder->directories()->in(self::$tmpDir) as $dir) {
vendor/symfony/finder/Tests/FinderTest.php:342:        $expected = $this->toAbsolute(array('foo', 'toto'));
vendor/symfony/finder/Tests/FinderTest.php:347:        $this->assertEquals($expected, $dirs, 'implements the \IteratorAggregate interface');
vendor/symfony/finder/Tests/FinderTest.php:349:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:350:        $this->assertEquals(2, iterator_count($finder->directories()->in(self::$tmpDir)), 'implements the \IteratorAggregate interface');
vendor/symfony/finder/Tests/FinderTest.php:352:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:353:        $a = iterator_to_array($finder->directories()->in(self::$tmpDir));
vendor/symfony/finder/Tests/FinderTest.php:356:        $this->assertEquals($expected, $a, 'implements the \IteratorAggregate interface');
vendor/symfony/finder/Tests/FinderTest.php:361:        $finder = $this->buildFinder()->in(self::$tmpDir);
vendor/symfony/finder/Tests/FinderTest.php:366:            $paths[] = $file->getRelativePath();
vendor/symfony/finder/Tests/FinderTest.php:374:        $this->assertEquals($ref, $paths);
vendor/symfony/finder/Tests/FinderTest.php:379:        $finder = $this->buildFinder()->in(self::$tmpDir)->sortByName();
vendor/symfony/finder/Tests/FinderTest.php:384:            $paths[] = $file->getRelativePathname();
vendor/symfony/finder/Tests/FinderTest.php:392:        $this->assertEquals($ref, $paths);
vendor/symfony/finder/Tests/FinderTest.php:397:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:398:        $finder->files()->in(self::$tmpDir.DIRECTORY_SEPARATOR.'foo');
vendor/symfony/finder/Tests/FinderTest.php:400:        $finder1 = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:401:        $finder1->directories()->in(self::$tmpDir);
vendor/symfony/finder/Tests/FinderTest.php:403:        $finder = $finder->append($finder1);
vendor/symfony/finder/Tests/FinderTest.php:405:        $this->assertIterator($this->toAbsolute(array('foo', 'foo/bar.tmp', 'toto')), $finder->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:410:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:411:        $finder->files()->in(self::$tmpDir.DIRECTORY_SEPARATOR.'foo');
vendor/symfony/finder/Tests/FinderTest.php:413:        $finder->append($this->toAbsolute(array('foo', 'toto')));
vendor/symfony/finder/Tests/FinderTest.php:415:        $this->assertIterator($this->toAbsolute(array('foo', 'foo/bar.tmp', 'toto')), $finder->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:420:        $this->assertInstanceOf('Symfony\\Component\\Finder\\Finder', Finder::create()->append(array()));
vendor/symfony/finder/Tests/FinderTest.php:425:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:426:        $finder->in(self::$tmpDir.DIRECTORY_SEPARATOR.'foo');
vendor/symfony/finder/Tests/FinderTest.php:428:        $finder1 = Finder::create()->append($finder);
vendor/symfony/finder/Tests/FinderTest.php:430:        $this->assertIterator(iterator_to_array($finder->getIterator()), $finder1->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:435:        $directory = Finder::create()->directories()->in(self::$tmpDir);
vendor/symfony/finder/Tests/FinderTest.php:442:        $this->assertCount($i, $directory);
vendor/symfony/finder/Tests/FinderTest.php:447:        $files = Finder::create()->files()->in(__DIR__.DIRECTORY_SEPARATOR.'Fixtures');
vendor/symfony/finder/Tests/FinderTest.php:454:        $this->assertCount($i, $files);
vendor/symfony/finder/Tests/FinderTest.php:462:        $finder = Finder::create()->files();
vendor/symfony/finder/Tests/FinderTest.php:468:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:469:        $finder->in(__DIR__);
vendor/symfony/finder/Tests/FinderTest.php:470:        $this->assertTrue($finder->hasResults());
vendor/symfony/finder/Tests/FinderTest.php:475:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:476:        $finder->in(__DIR__)->name('DoesNotExist');
vendor/symfony/finder/Tests/FinderTest.php:477:        $this->assertFalse($finder->hasResults());
vendor/symfony/finder/Tests/FinderTest.php:485:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:486:        $finder->in(__DIR__.DIRECTORY_SEPARATOR.'Fixtures')
vendor/symfony/finder/Tests/FinderTest.php:487:            ->name('*.txt')->sortByName()
vendor/symfony/finder/Tests/FinderTest.php:488:            ->contains($matchPatterns)
vendor/symfony/finder/Tests/FinderTest.php:489:            ->notContains($noMatchPatterns);
vendor/symfony/finder/Tests/FinderTest.php:491:        $this->assertIterator($this->toAbsoluteFixtures($expected), $finder);
vendor/symfony/finder/Tests/FinderTest.php:496:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:497:        $finder->in(__DIR__)
vendor/symfony/finder/Tests/FinderTest.php:498:            ->directories()
vendor/symfony/finder/Tests/FinderTest.php:499:            ->name('Fixtures')
vendor/symfony/finder/Tests/FinderTest.php:500:            ->contains('abc');
vendor/symfony/finder/Tests/FinderTest.php:501:        $this->assertIterator(array(), $finder);
vendor/symfony/finder/Tests/FinderTest.php:506:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:507:        $finder->in(__DIR__)
vendor/symfony/finder/Tests/FinderTest.php:508:            ->directories()
vendor/symfony/finder/Tests/FinderTest.php:509:            ->name('Fixtures')
vendor/symfony/finder/Tests/FinderTest.php:510:            ->notContains('abc');
vendor/symfony/finder/Tests/FinderTest.php:511:        $this->assertIterator(array(), $finder);
vendor/symfony/finder/Tests/FinderTest.php:529:        $finder->in($locations)
vendor/symfony/finder/Tests/FinderTest.php:532:            ->ignoreDotFiles(false)
vendor/symfony/finder/Tests/FinderTest.php:533:            ->depth('< 1')->name('test.php');
vendor/symfony/finder/Tests/FinderTest.php:535:        $this->assertCount(1, $finder);
vendor/symfony/finder/Tests/FinderTest.php:552:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:553:        $finder->in($locations)->depth('< 10')->name('*.neon');
vendor/symfony/finder/Tests/FinderTest.php:560:        $this->assertIterator($expected, $finder);
vendor/symfony/finder/Tests/FinderTest.php:561:        $this->assertIteratorInForeach($expected, $finder);
vendor/symfony/finder/Tests/FinderTest.php:569:        $finder = $this->buildFinder()->in(self::$tmpDir);
vendor/symfony/finder/Tests/FinderTest.php:571:            $this->assertEquals($file->getPathname(), $key);
vendor/symfony/finder/Tests/FinderTest.php:577:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:578:        $finder->in(__DIR__.DIRECTORY_SEPARATOR.'Fixtures'.DIRECTORY_SEPARATOR.'r+e.gex[c]a(r)s')
vendor/symfony/finder/Tests/FinderTest.php:579:            ->path('/^dir/');
vendor/symfony/finder/Tests/FinderTest.php:582:        $this->assertIterator($this->toAbsoluteFixtures($expected), $finder);
vendor/symfony/finder/Tests/FinderTest.php:614:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:615:        $finder->in(__DIR__.DIRECTORY_SEPARATOR.'Fixtures')
vendor/symfony/finder/Tests/FinderTest.php:616:            ->path($matchPatterns)
vendor/symfony/finder/Tests/FinderTest.php:617:            ->notPath($noMatchPatterns);
vendor/symfony/finder/Tests/FinderTest.php:619:        $this->assertIterator($this->toAbsoluteFixtures($expected), $finder);
vendor/symfony/finder/Tests/FinderTest.php:670:            $this->markTestSkipped('chmod is not supported on Windows');
vendor/symfony/finder/Tests/FinderTest.php:673:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:674:        $finder->files()->in(self::$tmpDir);
vendor/symfony/finder/Tests/FinderTest.php:676:        // make 'foo' directory non-readable
vendor/symfony/finder/Tests/FinderTest.php:682:                $this->assertIterator($this->toAbsolute(array('foo bar', 'test.php', 'test.py')), $finder->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:683:                $this->fail('Finder should throw an exception when opening a non-readable directory.');
vendor/symfony/finder/Tests/FinderTest.php:687:                    $this->fail(sprintf("Expected exception:\n%s\nGot:\n%s\nWith comparison failure:\n%s", $expectedExceptionClass, 'PHPUnit_Framework_ExpectationFailedException', $e->getComparisonFailure()->getExpectedAsString()));
vendor/symfony/finder/Tests/FinderTest.php:691:                    $this->fail(sprintf("Expected exception:\n%s\nGot:\n%s\nWith comparison failure:\n%s", $expectedExceptionClass, '\PHPUnit\Framework\ExpectationFailedException', $e->getComparisonFailure()->getExpectedAsString()));
vendor/symfony/finder/Tests/FinderTest.php:694:                $this->assertInstanceOf($expectedExceptionClass, $e);
vendor/symfony/finder/Tests/FinderTest.php:703:            $this->markTestSkipped('could read test files while test requires unreadable');
vendor/symfony/finder/Tests/FinderTest.php:710:            $this->markTestSkipped('chmod is not supported on Windows');
vendor/symfony/finder/Tests/FinderTest.php:713:        $finder = $this->buildFinder();
vendor/symfony/finder/Tests/FinderTest.php:714:        $finder->files()->ignoreUnreadableDirs()->in(self::$tmpDir);
vendor/symfony/finder/Tests/FinderTest.php:716:        // make 'foo' directory non-readable
vendor/symfony/finder/Tests/FinderTest.php:721:            $this->assertIterator($this->toAbsolute(array('foo bar', 'test.php', 'test.py')), $finder->getIterator());
vendor/symfony/finder/Tests/FinderTest.php:729:            $this->markTestSkipped('could read test files while test requires unreadable');
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:23:            $this->fail('__construct() throws an \InvalidArgumentException if the test expression is not valid.');
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:25:            $this->assertInstanceOf('InvalidArgumentException', $e, '__construct() throws an \InvalidArgumentException if the test expression is not valid.');
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:30:            $this->fail('__construct() throws an \InvalidArgumentException if the test expression is not valid.');
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:32:            $this->assertInstanceOf('InvalidArgumentException', $e, '__construct() throws an \InvalidArgumentException if the test expression is not valid.');
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:44:            $this->assertTrue($c->test($m), '->test() tests a string against the expression');
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:48:            $this->assertFalse($c->test($m), '->test() tests a string against the expression');
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:55:            array('< 2005-10-10', array(strtotime('2005-10-09')), array(strtotime('2005-10-15'))),
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:56:            array('until 2005-10-10', array(strtotime('2005-10-09')), array(strtotime('2005-10-15'))),
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:57:            array('before 2005-10-10', array(strtotime('2005-10-09')), array(strtotime('2005-10-15'))),
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:58:            array('> 2005-10-10', array(strtotime('2005-10-15')), array(strtotime('2005-10-09'))),
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:59:            array('after 2005-10-10', array(strtotime('2005-10-15')), array(strtotime('2005-10-09'))),
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:60:            array('since 2005-10-10', array(strtotime('2005-10-15')), array(strtotime('2005-10-09'))),
vendor/symfony/finder/Tests/Comparator/DateComparatorTest.php:61:            array('!= 2005-10-10', array(strtotime('2005-10-11')), array(strtotime('2005-10-10'))),
vendor/symfony/finder/Tests/Comparator/NumberComparatorTest.php:31:                $this->fail('__construct() throws an \InvalidArgumentException if the test expression is not valid.');
vendor/symfony/finder/Tests/Comparator/NumberComparatorTest.php:33:                $this->assertInstanceOf('InvalidArgumentException', $e, '__construct() throws an \InvalidArgumentException if the test expression is not valid.');
vendor/symfony/finder/Tests/Comparator/NumberComparatorTest.php:46:            $this->assertTrue($c->test($m), '->test() tests a string against the expression');
vendor/symfony/finder/Tests/Comparator/NumberComparatorTest.php:50:            $this->assertFalse($c->test($m), '->test() tests a string against the expression');
vendor/symfony/finder/Tests/Comparator/NumberComparatorTest.php:75:            array('==1mi', array(1024 * 1024), array(1024 * 1024 - 1, 1024 * 1024 + 1)),
vendor/symfony/finder/Tests/Comparator/NumberComparatorTest.php:78:            array('==1gi', array(1024 * 1024 * 1024), array(1024 * 1024 * 1024 - 1, 1024 * 1024 * 1024 + 1)),
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:23:            $comparator->setOperator('foo');
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:24:            $this->fail('->setOperator() throws an \InvalidArgumentException if the operator is not valid.');
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:26:            $this->assertInstanceOf('InvalidArgumentException', $e, '->setOperator() throws an \InvalidArgumentException if the operator is not valid.');
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:30:        $comparator->setOperator('>');
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:31:        $this->assertEquals('>', $comparator->getOperator(), '->getOperator() returns the current operator');
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:37:        $comparator->setTarget(8);
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:38:        $this->assertEquals(8, $comparator->getTarget(), '->getTarget() returns the target');
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:47:        $c->setOperator($operator);
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:48:        $c->setTarget($target);
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:51:            $this->assertTrue($c->test($m), '->test() tests a string against the expression');
vendor/symfony/finder/Tests/Comparator/ComparatorTest.php:55:            $this->assertFalse($c->test($m), '->test() tests a string against the expression');
vendor/symfony/finder/Tests/GlobTest.php:22:        $this->assertEquals('#^(?=[^\.])\#$#', Glob::toRegex('#'));
vendor/symfony/finder/Tests/GlobTest.php:23:        $this->assertEquals('#^\.[^/]*$#', Glob::toRegex('.*'));
vendor/symfony/finder/Tests/GlobTest.php:24:        $this->assertEquals('^\.[^/]*$', Glob::toRegex('.*', true, true, ''));
vendor/symfony/finder/Tests/GlobTest.php:25:        $this->assertEquals('/^\.[^/]*$/', Glob::toRegex('.*', true, true, '/'));
vendor/symfony/finder/Tests/GlobTest.php:31:        $finder->ignoreDotFiles(false);
vendor/symfony/finder/Tests/GlobTest.php:34:        foreach ($finder->in(__DIR__) as $k => $v) {
vendor/symfony/finder/Tests/GlobTest.php:42:        $this->assertSame(array('one/b/c.neon', 'one/b/d.neon'), $match);
vendor/symfony/finder/Tests/GlobTest.php:48:        $finder->ignoreDotFiles(false);
vendor/symfony/finder/Tests/GlobTest.php:51:        foreach ($finder->in(__DIR__) as $k => $v) {
vendor/symfony/finder/Tests/GlobTest.php:59:        $this->assertSame(array('.dot/b/c.neon', '.dot/b/d.neon', 'one/b/c.neon', 'one/b/d.neon'), $match);
vendor/symfony/finder/Tests/GlobTest.php:65:        $finder->ignoreDotFiles(false);
vendor/symfony/finder/Tests/GlobTest.php:68:        foreach ($finder->in(__DIR__) as $k => $v) {
vendor/symfony/finder/Tests/GlobTest.php:76:        $this->assertSame(array('one/a', 'one/b', 'one/b/c.neon', 'one/b/d.neon'), $match);
vendor/symfony/finder/Tests/GlobTest.php:82:        $finder->ignoreDotFiles(false);
vendor/symfony/finder/Tests/GlobTest.php:85:        foreach ($finder->in(__DIR__) as $k => $v) {
vendor/symfony/finder/Tests/GlobTest.php:93:        $this->assertSame(array('one/.dot', 'one/a', 'one/b', 'one/b/c.neon', 'one/b/d.neon'), $match);
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:23:        $i = new \FilesystemIterator($this->toAbsolute());
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:26:        $i = $this->getMockForAbstractClass('Symfony\Component\Finder\Iterator\FilterIterator', array($i));
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:27:        $i->expects($this->any())
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:28:            ->method('accept')
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:29:            ->will($this->returnCallback(function () use ($i) {
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:30:                return (bool) preg_match('/\.php/', (string) $i->current());
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:39:        $this->assertEquals(1, $c);
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:41:        $i->rewind();
vendor/symfony/finder/Tests/Iterator/FilterIteratorTest.php:51:        $this->assertEquals(1, $c);
vendor/symfony/finder/Tests/Iterator/ExcludeDirectoryFilterIteratorTest.php:24:        $inner = new \RecursiveIteratorIterator(new RecursiveDirectoryIterator($this->toAbsolute(), \FilesystemIterator::SKIP_DOTS), \RecursiveIteratorIterator::SELF_FIRST);
vendor/symfony/finder/Tests/Iterator/ExcludeDirectoryFilterIteratorTest.php:28:        $this->assertIterator($expected, $iterator);
vendor/symfony/finder/Tests/Iterator/ExcludeDirectoryFilterIteratorTest.php:75:            array(array('foo'), $this->toAbsolute($foo)),
vendor/symfony/finder/Tests/Iterator/ExcludeDirectoryFilterIteratorTest.php:76:            array(array('fo'), $this->toAbsolute($fo)),
vendor/symfony/finder/Tests/Iterator/ExcludeDirectoryFilterIteratorTest.php:77:            array(array('toto/'), $this->toAbsolute($toto)),
vendor/symfony/finder/Tests/Iterator/CustomFilterIteratorTest.php:35:        $this->assertIterator($expected, $iterator);
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:22:        $values = array_map(function (\SplFileInfo $fileinfo) { return str_replace('/', DIRECTORY_SEPARATOR, $fileinfo->getPathname()); }, iterator_to_array($iterator, false));
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:29:        $this->assertEquals($expected, array_values($values));
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:34:        $values = array_map(function (\SplFileInfo $fileinfo) { return $fileinfo->getPathname(); }, iterator_to_array($iterator));
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:36:        $this->assertEquals($expected, array_values($values));
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:43:     *  @param array $expected - an array of arrays. For any two subarrays
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:51:        $values = array_values(array_map(function (\SplFileInfo $fileinfo) { return $fileinfo->getPathname(); }, iterator_to_array($iterator)));
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:60:            $this->assertEquals($subarray, $temp);
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:74:            $this->assertInstanceOf('Symfony\\Component\\Finder\\SplFileInfo', $file);
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:75:            $values[] = $file->getPathname();
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:81:        $this->assertEquals($expected, array_values($values));
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:94:            $this->assertInstanceOf('Symfony\\Component\\Finder\\SplFileInfo', $file);
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:95:            $values[] = $file->getPathname();
vendor/symfony/finder/Tests/Iterator/IteratorTestCase.php:98:        $this->assertEquals($expected, array_values($values));
vendor/symfony/finder/Tests/Iterator/PathFilterIteratorTest.php:24:        $this->assertIterator($resultArray, $iterator);
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:26:            $this->markTestSkipped('Unsupported stream "ftp".');
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:29:        $i->rewind();
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:31:        $this->assertTrue(true);
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:42:            $this->markTestSkipped('Unsupported stream "ftp".');
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:51:        $i->seek(0);
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:52:        $actual[] = $i->getPathname();
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:54:        $i->seek(1);
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:55:        $actual[] = $i->getPathname();
vendor/symfony/finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php:57:        $this->assertEquals($contains, $actual);
vendor/symfony/finder/Tests/Iterator/RealIteratorTestCase.php:47:            if (DIRECTORY_SEPARATOR === $file[strlen($file) - 1]) {
vendor/symfony/finder/Tests/Iterator/RealIteratorTestCase.php:57:        touch(self::toAbsolute('foo/bar.tmp'), strtotime('2005-10-15'));
vendor/symfony/finder/Tests/Iterator/RealIteratorTestCase.php:58:        touch(self::toAbsolute('test.php'), strtotime('2005-10-15'));
vendor/symfony/finder/Tests/Iterator/RealIteratorTestCase.php:64:            if (DIRECTORY_SEPARATOR === $file[strlen($file) - 1]) {
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:22:            $this->fail('__construct() throws an \InvalidArgumentException exception if the mode is not valid');
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:24:            $this->assertInstanceOf('InvalidArgumentException', $e, '__construct() throws an \InvalidArgumentException exception if the mode is not valid');
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:66:                $this->markTestSkipped('Sorting by atime or ctime is not supported on Windows');
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:68:            $this->assertOrderedIteratorForGroups($expected, $iterator);
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:70:            $this->assertOrderedIterator($expected, $iterator);
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:122:            // For these two files the access time was set to 2005-10-15
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:175:            array(SortableIterator::SORT_BY_NAME, $this->toAbsolute($sortByName)),
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:176:            array(SortableIterator::SORT_BY_TYPE, $this->toAbsolute($sortByType)),
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:177:            array(SortableIterator::SORT_BY_ACCESSED_TIME, $this->toAbsolute($sortByAccessedTime)),
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:178:            array(SortableIterator::SORT_BY_CHANGED_TIME, $this->toAbsolute($sortByChangedTime)),
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:179:            array(SortableIterator::SORT_BY_MODIFIED_TIME, $this->toAbsolute($sortByModifiedTime)),
vendor/symfony/finder/Tests/Iterator/SortableIteratorTest.php:180:            array(function (\SplFileInfo $a, \SplFileInfo $b) { return strcmp($a->getRealPath(), $b->getRealPath()); }, $this->toAbsolute($customComparison)),
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:41:            $this->setContents($defaults['contents']);
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:42:            $this->setMode($defaults['mode']);
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:43:            $this->setType($defaults['type']);
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:44:            $this->setRelativePath($defaults['relativePath']);
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:45:            $this->setRelativePathname($defaults['relativePathname']);
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:53:        if (null === $this->type) {
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:54:            return false !== strpos($this->getFilename(), 'file');
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:57:        return self::TYPE_FILE === $this->type;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:62:        if (null === $this->type) {
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:63:            return false !== strpos($this->getFilename(), 'directory');
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:66:        return self::TYPE_DIRECTORY === $this->type;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:71:        if (null === $this->mode) {
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:72:            return preg_match('/r\+/', $this->getFilename());
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:75:        return preg_match('/r\+/', $this->mode);
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:80:        return $this->contents;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:85:        $this->contents = $contents;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:90:        $this->mode = $mode;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:99:                    $this->type = self::TYPE_DIRECTORY;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:103:                    $this->type = self::TYPE_FILE;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:106:                    $this->type = self::TYPE_UNKNOWN;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:109:            $this->type = $type;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:115:        $this->relativePath = $relativePath;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:120:        $this->relativePathname = $relativePathname;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:125:        return $this->relativePath;
vendor/symfony/finder/Tests/Iterator/MockSplFileInfo.php:130:        return $this->relativePathname;
vendor/symfony/finder/Tests/Iterator/FilecontentFilterIteratorTest.php:22:        $this->assertIterator(array('test.txt'), $iterator);
vendor/symfony/finder/Tests/Iterator/FilecontentFilterIteratorTest.php:29:        $this->assertIterator(array(), $iterator);
vendor/symfony/finder/Tests/Iterator/FilecontentFilterIteratorTest.php:34:        $inner = new MockFileListIterator(array('file r-'));
vendor/symfony/finder/Tests/Iterator/FilecontentFilterIteratorTest.php:35:        $iterator = new FilecontentFilterIterator($inner, array('file r-'), array());
vendor/symfony/finder/Tests/Iterator/FilecontentFilterIteratorTest.php:36:        $this->assertIterator(array(), $iterator);
vendor/symfony/finder/Tests/Iterator/FilecontentFilterIteratorTest.php:45:        $this->assertIterator($resultArray, $iterator);
vendor/symfony/finder/Tests/Iterator/FilecontentFilterIteratorTest.php:74:            'name' => 'unreadable-file.txt',
vendor/symfony/finder/Tests/Iterator/DepthRangeFilterIteratorTest.php:23:        $inner = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($this->toAbsolute(), \FilesystemIterator::SKIP_DOTS), \RecursiveIteratorIterator::SELF_FIRST);
vendor/symfony/finder/Tests/Iterator/DepthRangeFilterIteratorTest.php:30:        $this->assertEquals($expected, $actual);
vendor/symfony/finder/Tests/Iterator/DepthRangeFilterIteratorTest.php:76:            array(0, 0, $this->toAbsolute($lessThan1)),
vendor/symfony/finder/Tests/Iterator/DepthRangeFilterIteratorTest.php:77:            array(0, 1, $this->toAbsolute($lessThanOrEqualTo1)),
vendor/symfony/finder/Tests/Iterator/DepthRangeFilterIteratorTest.php:79:            array(1, PHP_INT_MAX, $this->toAbsolute($graterThanOrEqualTo1)),
vendor/symfony/finder/Tests/Iterator/DepthRangeFilterIteratorTest.php:80:            array(1, 1, $this->toAbsolute($equalTo1)),
vendor/symfony/finder/Tests/Iterator/MultiplePcreFilterIteratorTest.php:25:        $this->assertEquals($isRegex, $testIterator->isRegex($string), $message);
vendor/symfony/finder/Tests/Iterator/Iterator.php:21:            $this->attach(new \SplFileInfo($value));
vendor/symfony/finder/Tests/Iterator/Iterator.php:23:        $this->rewind();
vendor/symfony/finder/Tests/Iterator/Iterator.php:28:        $this->values[] = $fileinfo;
vendor/symfony/finder/Tests/Iterator/Iterator.php:33:        reset($this->values);
vendor/symfony/finder/Tests/Iterator/Iterator.php:38:        return false !== $this->current();
vendor/symfony/finder/Tests/Iterator/Iterator.php:43:        next($this->values);
vendor/symfony/finder/Tests/Iterator/Iterator.php:48:        return current($this->values);
vendor/symfony/finder/Tests/Iterator/Iterator.php:53:        return key($this->values);
vendor/symfony/finder/Tests/Iterator/SizeRangeFilterIteratorTest.php:28:        $this->assertIterator($expected, $iterator);
vendor/symfony/finder/Tests/Iterator/SizeRangeFilterIteratorTest.php:43:            array(array(new NumberComparator('< 1K'), new NumberComparator('> 0.5K')), $this->toAbsolute($lessThan1KGreaterThan05K)),
vendor/symfony/finder/Tests/Iterator/SizeRangeFilterIteratorTest.php:62:        return $this->current()->isFile();
vendor/symfony/finder/Tests/Iterator/SizeRangeFilterIteratorTest.php:67:        return $this->current()->getSize();
vendor/symfony/finder/Tests/Iterator/FilenameFilterIteratorTest.php:27:        $this->assertIterator($expected, $iterator);
vendor/symfony/finder/Tests/Iterator/DateRangeFilterIteratorTest.php:30:        $this->assertIterator($expected, $iterator);
vendor/symfony/finder/Tests/Iterator/DateRangeFilterIteratorTest.php:69:            array(array(new DateComparator('since 20 years ago')), $this->toAbsolute($since20YearsAgo)),
vendor/symfony/finder/Tests/Iterator/DateRangeFilterIteratorTest.php:70:            array(array(new DateComparator('since 2 months ago')), $this->toAbsolute($since2MonthsAgo)),
vendor/symfony/finder/Tests/Iterator/DateRangeFilterIteratorTest.php:71:            array(array(new DateComparator('until last month')), $this->toAbsolute($untilLastMonth)),
vendor/symfony/finder/Tests/Iterator/FileTypeFilterIteratorTest.php:27:        $this->assertIterator($expected, $iterator);
vendor/symfony/finder/Tests/Iterator/FileTypeFilterIteratorTest.php:51:            array(FileTypeFilterIterator::ONLY_FILES, $this->toAbsolute($onlyFiles)),
vendor/symfony/finder/Tests/Iterator/FileTypeFilterIteratorTest.php:52:            array(FileTypeFilterIterator::ONLY_DIRECTORIES, $this->toAbsolute($onlyDirectories)),
vendor/symfony/finder/Tests/Iterator/FileTypeFilterIteratorTest.php:66:        return $this->current()->isFile();
vendor/symfony/finder/Tests/Iterator/FileTypeFilterIteratorTest.php:71:        return $this->current()->isDir();
vendor/symfony/finder/LICENSE:1:Copyright (c) 2004-2018 Fabien Potencier
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:32:        $this->iterator = $iterator;
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:33:        $this->isRecursive = $iterator instanceof \RecursiveIterator;
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:37:            if (!$this->isRecursive || false !== strpos($directory, '/')) {
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:40:                $this->excludedDirs[$directory] = true;
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:44:            $this->excludedPattern = '#(?:^|/)(?:'.implode('|', $patterns).')(?:/|$)#';
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:57:        if ($this->isRecursive && isset($this->excludedDirs[$this->getFilename()]) && $this->isDir()) {
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:61:        if ($this->excludedPattern) {
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:62:            $path = $this->isDir() ? $this->current()->getRelativePathname() : $this->current()->getRelativePath();
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:65:            return !preg_match($this->excludedPattern, $path);
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:73:        return $this->isRecursive && $this->iterator->hasChildren();
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:78:        $children = new self($this->iterator->getChildren(), array());
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:79:        $children->excludedDirs = $this->excludedDirs;
vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:80:        $children->excludedPattern = $this->excludedPattern;
vendor/symfony/finder/Iterator/PathFilterIterator.php:29:        $filename = $this->current()->getRelativePathname();
vendor/symfony/finder/Iterator/PathFilterIterator.php:35:        return $this->isAccepted($filename);
vendor/symfony/finder/Iterator/PathFilterIterator.php:54:        return $this->isRegex($str) ? $str : '/'.preg_quote($str, '/').'/';
vendor/symfony/finder/Iterator/MultiplePcreFilterIterator.php:32:            $this->matchRegexps[] = $this->toRegex($pattern);
vendor/symfony/finder/Iterator/MultiplePcreFilterIterator.php:36:            $this->noMatchRegexps[] = $this->toRegex($pattern);
vendor/symfony/finder/Iterator/MultiplePcreFilterIterator.php:56:        foreach ($this->noMatchRegexps as $regex) {
vendor/symfony/finder/Iterator/MultiplePcreFilterIterator.php:63:        if ($this->matchRegexps) {
vendor/symfony/finder/Iterator/MultiplePcreFilterIterator.php:64:            foreach ($this->matchRegexps as $regex) {
vendor/symfony/finder/Iterator/MultiplePcreFilterIterator.php:88:            $end = substr($m[1], -1);
vendor/symfony/finder/Iterator/FilecontentFilterIterator.php:29:        if (!$this->matchRegexps && !$this->noMatchRegexps) {
vendor/symfony/finder/Iterator/FilecontentFilterIterator.php:33:        $fileinfo = $this->current();
vendor/symfony/finder/Iterator/FilecontentFilterIterator.php:35:        if ($fileinfo->isDir() || !$fileinfo->isReadable()) {
vendor/symfony/finder/Iterator/FilecontentFilterIterator.php:39:        $content = $fileinfo->getContents();
vendor/symfony/finder/Iterator/FilecontentFilterIterator.php:44:        return $this->isAccepted($content);
vendor/symfony/finder/Iterator/FilecontentFilterIterator.php:56:        return $this->isRegex($str) ? $str : '/'.preg_quote($str, '/').'/';
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:53:        $this->ignoreUnreadableDirs = $ignoreUnreadableDirs;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:54:        $this->rootPath = $path;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:56:            $this->directorySeparator = DIRECTORY_SEPARATOR;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:69:        if (null === $subPathname = $this->subPath) {
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:70:            $subPathname = $this->subPath = (string) $this->getSubPath();
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:73:            $subPathname .= $this->directorySeparator;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:75:        $subPathname .= $this->getFilename();
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:77:        return new SplFileInfo($this->rootPath.$this->directorySeparator.$subPathname, $this->subPath, $subPathname);
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:92:                $children->ignoreUnreadableDirs = $this->ignoreUnreadableDirs;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:95:                $children->rewindable = &$this->rewindable;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:96:                $children->rootPath = $this->rootPath;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:101:            if ($this->ignoreUnreadableDirs) {
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:105:                throw new AccessDeniedException($e->getMessage(), $e->getCode(), $e);
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:115:        if (false === $this->isRewindable()) {
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:134:        if (null !== $this->rewindable) {
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:135:            return $this->rewindable;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:139:        if ('' === $this->getPath()) {
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:140:            return $this->rewindable = false;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:143:        if (false !== $stream = @opendir($this->getPath())) {
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:148:                return $this->rewindable = true;
vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:152:        return $this->rewindable = false;
vendor/symfony/finder/Iterator/DateRangeFilterIterator.php:31:        $this->comparators = $comparators;
vendor/symfony/finder/Iterator/DateRangeFilterIterator.php:43:        $fileinfo = $this->current();
vendor/symfony/finder/Iterator/DateRangeFilterIterator.php:45:        if (!file_exists($fileinfo->getPathname())) {
vendor/symfony/finder/Iterator/DateRangeFilterIterator.php:49:        $filedate = $fileinfo->getMTime();
vendor/symfony/finder/Iterator/DateRangeFilterIterator.php:50:        foreach ($this->comparators as $compare) {
vendor/symfony/finder/Iterator/DateRangeFilterIterator.php:51:            if (!$compare->test($filedate)) {
vendor/symfony/finder/Iterator/SizeRangeFilterIterator.php:31:        $this->comparators = $comparators;
vendor/symfony/finder/Iterator/SizeRangeFilterIterator.php:43:        $fileinfo = $this->current();
vendor/symfony/finder/Iterator/SizeRangeFilterIterator.php:44:        if (!$fileinfo->isFile()) {
vendor/symfony/finder/Iterator/SizeRangeFilterIterator.php:48:        $filesize = $fileinfo->getSize();
vendor/symfony/finder/Iterator/SizeRangeFilterIterator.php:49:        foreach ($this->comparators as $compare) {
vendor/symfony/finder/Iterator/SizeRangeFilterIterator.php:50:            if (!$compare->test($filesize)) {
vendor/symfony/finder/Iterator/DepthRangeFilterIterator.php:30:        $this->minDepth = $minDepth;
vendor/symfony/finder/Iterator/DepthRangeFilterIterator.php:31:        $iterator->setMaxDepth(PHP_INT_MAX === $maxDepth ? -1 : $maxDepth);
vendor/symfony/finder/Iterator/DepthRangeFilterIterator.php:43:        return $this->getInnerIterator()->getDepth() >= $this->minDepth;
vendor/symfony/finder/Iterator/CustomFilterIterator.php:39:        $this->filters = $filters;
vendor/symfony/finder/Iterator/CustomFilterIterator.php:51:        $fileinfo = $this->current();
vendor/symfony/finder/Iterator/CustomFilterIterator.php:53:        foreach ($this->filters as $filter) {
vendor/symfony/finder/Iterator/FilenameFilterIterator.php:30:        return $this->isAccepted($this->current()->getFilename());
vendor/symfony/finder/Iterator/FilenameFilterIterator.php:45:        return $this->isRegex($str) ? $str : Glob::toRegex($str);
vendor/symfony/finder/Iterator/FileTypeFilterIterator.php:32:        $this->mode = $mode;
vendor/symfony/finder/Iterator/FileTypeFilterIterator.php:44:        $fileinfo = $this->current();
vendor/symfony/finder/Iterator/FileTypeFilterIterator.php:45:        if (self::ONLY_DIRECTORIES === (self::ONLY_DIRECTORIES & $this->mode) && $fileinfo->isFile()) {
vendor/symfony/finder/Iterator/FileTypeFilterIterator.php:47:        } elseif (self::ONLY_FILES === (self::ONLY_FILES & $this->mode) && $fileinfo->isDir()) {
vendor/symfony/finder/Iterator/SortableIterator.php:38:        $this->iterator = $iterator;
vendor/symfony/finder/Iterator/SortableIterator.php:41:            $this->sort = function ($a, $b) {
vendor/symfony/finder/Iterator/SortableIterator.php:42:                return strcmp($a->getRealpath() ?: $a->getPathname(), $b->getRealpath() ?: $b->getPathname());
vendor/symfony/finder/Iterator/SortableIterator.php:45:            $this->sort = function ($a, $b) {
vendor/symfony/finder/Iterator/SortableIterator.php:46:                if ($a->isDir() && $b->isFile()) {
vendor/symfony/finder/Iterator/SortableIterator.php:47:                    return -1;
vendor/symfony/finder/Iterator/SortableIterator.php:48:                } elseif ($a->isFile() && $b->isDir()) {
vendor/symfony/finder/Iterator/SortableIterator.php:52:                return strcmp($a->getRealpath() ?: $a->getPathname(), $b->getRealpath() ?: $b->getPathname());
vendor/symfony/finder/Iterator/SortableIterator.php:55:            $this->sort = function ($a, $b) {
vendor/symfony/finder/Iterator/SortableIterator.php:56:                return $a->getATime() - $b->getATime();
vendor/symfony/finder/Iterator/SortableIterator.php:59:            $this->sort = function ($a, $b) {
vendor/symfony/finder/Iterator/SortableIterator.php:60:                return $a->getCTime() - $b->getCTime();
vendor/symfony/finder/Iterator/SortableIterator.php:63:            $this->sort = function ($a, $b) {
vendor/symfony/finder/Iterator/SortableIterator.php:64:                return $a->getMTime() - $b->getMTime();
vendor/symfony/finder/Iterator/SortableIterator.php:67:            $this->sort = $sort;
vendor/symfony/finder/Iterator/SortableIterator.php:69:            throw new \InvalidArgumentException('The SortableIterator takes a PHP callable or a valid built-in sort algorithm as an argument.');
vendor/symfony/finder/Iterator/SortableIterator.php:75:        $array = iterator_to_array($this->iterator, true);
vendor/symfony/finder/Iterator/SortableIterator.php:76:        uasort($array, $this->sort);
vendor/symfony/finder/Iterator/FilterIterator.php:42:            $innerIterator = $iterator->getInnerIterator();
vendor/symfony/finder/Iterator/FilterIterator.php:45:                // this condition is necessary for iterators to work properly with non-local filesystems like ftp
vendor/symfony/finder/Iterator/FilterIterator.php:46:                if ($innerIterator->isRewindable()) {
vendor/symfony/finder/Iterator/FilterIterator.php:47:                    $innerIterator->next();
vendor/symfony/finder/Iterator/FilterIterator.php:48:                    $innerIterator->rewind();
vendor/symfony/finder/Iterator/FilterIterator.php:51:                $innerIterator->next();
vendor/symfony/finder/Iterator/FilterIterator.php:52:                $innerIterator->rewind();
vendor/symfony/finder/CHANGELOG.md:5:-----
vendor/symfony/finder/CHANGELOG.md:11:-----
vendor/symfony/finder/CHANGELOG.md:13: * added double-star matching to Glob::toRegex()
vendor/symfony/finder/CHANGELOG.md:16:-----
vendor/symfony/finder/CHANGELOG.md:21:-----
vendor/symfony/finder/CHANGELOG.md:26:-----
vendor/symfony/finder/CHANGELOG.md:30:-----
vendor/symfony/finder/CHANGELOG.md:36:-----
vendor/symfony/finder/CHANGELOG.md:44:-----
vendor/symfony/var-dumper/composer.json:2:    "name": "symfony/var-dumper",
vendor/symfony/var-dumper/composer.json:20:        "symfony/polyfill-mbstring": "~1.0"
vendor/symfony/var-dumper/composer.json:22:    "require-dev": {
vendor/symfony/var-dumper/composer.json:23:        "ext-iconv": "*",
vendor/symfony/var-dumper/composer.json:30:        "ext-iconv": "To convert non-UTF-8 strings to UTF-8 (or symfony/polyfill-iconv in case ext-iconv cannot be used).",
vendor/symfony/var-dumper/composer.json:31:        "ext-intl": "To show region name in time zone dump",
vendor/symfony/var-dumper/composer.json:32:        "ext-symfony_debug": ""
vendor/symfony/var-dumper/composer.json:36:        "psr-4": { "Symfony\\Component\\VarDumper\\": "" },
vendor/symfony/var-dumper/composer.json:37:        "exclude-from-classmap": [
vendor/symfony/var-dumper/composer.json:41:    "minimum-stability": "dev",
vendor/symfony/var-dumper/composer.json:43:        "branch-alias": {
vendor/symfony/var-dumper/composer.json:44:            "dev-master": "3.4-dev"
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:130:        ':stream-context' => array('Symfony\Component\VarDumper\Caster\ResourceCaster', 'castStreamContext'),
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:135:    protected $maxString = -1;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:154:        $this->addCasters($casters);
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:155:        $this->useExt = extension_loaded('symfony_debug');
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:171:            $this->casters[strtolower($type)][] = is_string($callback) && false !== strpos($callback, '::') ? explode('::', $callback, 2) : $callback;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:182:        $this->maxItems = (int) $maxItems;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:192:        $this->maxString = (int) $maxString;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:203:        $this->minDepth = (int) $minDepth;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:216:        $this->prevErrorHandler = set_error_handler(function ($type, $msg, $file, $line, $context = array()) {
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:222:            if ($this->prevErrorHandler) {
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:223:                return call_user_func($this->prevErrorHandler, $type, $msg, $file, $line, $context);
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:228:        $this->filter = $filter;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:234:            return new Data($this->doClone($var));
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:240:            $this->prevErrorHandler = null;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:263:        $obj = $stub->value;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:264:        $class = $stub->class;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:267:            $stub->class = get_parent_class($class).'@anonymous';
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:269:        if (isset($this->classInfo[$class])) {
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:270:            list($i, $parents, $hasDebugInfo) = $this->classInfo[$class];
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:286:            $this->classInfo[$class] = array($i, $parents, $hasDebugInfo);
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:292:            while ($i--) {
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:293:                if (!empty($this->casters[$p = $parents[$i]])) {
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:294:                    foreach ($this->casters[$p] as $callback) {
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:295:                        $a = $callback($obj, $a, $stub, $isNested, $this->filter);
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:300:            $a = array((Stub::TYPE_OBJECT === $stub->type ? Caster::PREFIX_VIRTUAL : '').'⚠' => new ThrowingCasterException($e)) + $a;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:317:        $res = $stub->value;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:318:        $type = $stub->class;
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:321:            if (!empty($this->casters[':'.$type])) {
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:322:                foreach ($this->casters[':'.$type] as $callback) {
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:323:                    $a = $callback($res, $a, $stub, $isNested, $this->filter);
vendor/symfony/var-dumper/Cloner/AbstractCloner.php:327:            $a = array((Stub::TYPE_OBJECT === $stub->type ? Caster::PREFIX_VIRTUAL : '').'⚠' => new ThrowingCasterException($e)) + $a;
vendor/symfony/var-dumper/Cloner/Data.php:25:    private $maxItemsPerDepth = -1;
vendor/symfony/var-dumper/Cloner/Data.php:26:    private $useRefHandles = -1;
vendor/symfony/var-dumper/Cloner/Data.php:33:        $this->data = $data;
vendor/symfony/var-dumper/Cloner/Data.php:41:        $item = $this->data[$this->position][$this->key];
vendor/symfony/var-dumper/Cloner/Data.php:43:        if ($item instanceof Stub && Stub::TYPE_REF === $item->type && !$item->position) {
vendor/symfony/var-dumper/Cloner/Data.php:44:            $item = $item->value;
vendor/symfony/var-dumper/Cloner/Data.php:49:        if (Stub::TYPE_STRING === $item->type) {
vendor/symfony/var-dumper/Cloner/Data.php:52:        if (Stub::TYPE_ARRAY === $item->type) {
vendor/symfony/var-dumper/Cloner/Data.php:55:        if (Stub::TYPE_OBJECT === $item->type) {
vendor/symfony/var-dumper/Cloner/Data.php:56:            return $item->class;
vendor/symfony/var-dumper/Cloner/Data.php:58:        if (Stub::TYPE_RESOURCE === $item->type) {
vendor/symfony/var-dumper/Cloner/Data.php:59:            return $item->class.' resource';
vendor/symfony/var-dumper/Cloner/Data.php:70:        $item = $this->data[$this->position][$this->key];
vendor/symfony/var-dumper/Cloner/Data.php:72:        if ($item instanceof Stub && Stub::TYPE_REF === $item->type && !$item->position) {
vendor/symfony/var-dumper/Cloner/Data.php:73:            $item = $item->value;
vendor/symfony/var-dumper/Cloner/Data.php:75:        if (!($item = $this->getStub($item)) instanceof Stub) {
vendor/symfony/var-dumper/Cloner/Data.php:78:        if (Stub::TYPE_STRING === $item->type) {
vendor/symfony/var-dumper/Cloner/Data.php:79:            return $item->value;
vendor/symfony/var-dumper/Cloner/Data.php:82:        $children = $item->position ? $this->data[$item->position] : array();
vendor/symfony/var-dumper/Cloner/Data.php:85:            if ($recursive && !($v = $this->getStub($v)) instanceof Stub) {
vendor/symfony/var-dumper/Cloner/Data.php:89:            $children[$k]->key = $k;
vendor/symfony/var-dumper/Cloner/Data.php:90:            $children[$k]->position = $item->position;
vendor/symfony/var-dumper/Cloner/Data.php:93:                if (Stub::TYPE_REF === $v->type && ($v = $this->getStub($v->value)) instanceof Stub) {
vendor/symfony/var-dumper/Cloner/Data.php:95:                    if (isset($recursive[$v->position])) {
vendor/symfony/var-dumper/Cloner/Data.php:98:                    $recursive[$v->position] = true;
vendor/symfony/var-dumper/Cloner/Data.php:100:                $children[$k] = $children[$k]->getValue($recursive);
vendor/symfony/var-dumper/Cloner/Data.php:109:        return count($this->getValue());
vendor/symfony/var-dumper/Cloner/Data.php:114:        if (!is_array($value = $this->getValue())) {
vendor/symfony/var-dumper/Cloner/Data.php:115:            throw new \LogicException(sprintf('%s object holds non-iterable type "%s".', self::class, gettype($value)));
vendor/symfony/var-dumper/Cloner/Data.php:125:        if (null !== $data = $this->seek($key)) {
vendor/symfony/var-dumper/Cloner/Data.php:126:            $item = $this->getStub($data->data[$data->position][$data->key]);
vendor/symfony/var-dumper/Cloner/Data.php:134:        return null !== $this->seek($key);
vendor/symfony/var-dumper/Cloner/Data.php:139:        return $this->__isset($key);
vendor/symfony/var-dumper/Cloner/Data.php:144:        return $this->__get($key);
vendor/symfony/var-dumper/Cloner/Data.php:159:        $value = $this->getValue();
vendor/symfony/var-dumper/Cloner/Data.php:165:        return sprintf('%s (count=%d)', $this->getType(), count($value));
vendor/symfony/var-dumper/Cloner/Data.php:177:        return $this->data;
vendor/symfony/var-dumper/Cloner/Data.php:190:        $data->maxDepth = (int) $maxDepth;
vendor/symfony/var-dumper/Cloner/Data.php:205:        $data->maxItemsPerDepth = (int) $maxItemsPerDepth;
vendor/symfony/var-dumper/Cloner/Data.php:220:        $data->useRefHandles = $useRefHandles ? -1 : 0;
vendor/symfony/var-dumper/Cloner/Data.php:234:        $item = $this->data[$this->position][$this->key];
vendor/symfony/var-dumper/Cloner/Data.php:236:        if ($item instanceof Stub && Stub::TYPE_REF === $item->type && !$item->position) {
vendor/symfony/var-dumper/Cloner/Data.php:237:            $item = $item->value;
vendor/symfony/var-dumper/Cloner/Data.php:239:        if (!($item = $this->getStub($item)) instanceof Stub || !$item->position) {
vendor/symfony/var-dumper/Cloner/Data.php:244:        switch ($item->type) {
vendor/symfony/var-dumper/Cloner/Data.php:249:                $keys[] = "\0$item->class\0$key";
vendor/symfony/var-dumper/Cloner/Data.php:259:        $children = $this->data[$item->position];
vendor/symfony/var-dumper/Cloner/Data.php:264:                $data->key = $key;
vendor/symfony/var-dumper/Cloner/Data.php:265:                $data->position = $item->position;
vendor/symfony/var-dumper/Cloner/Data.php:279:        $this->dumpItem($dumper, new Cursor(), $refs, $this->data[$this->position][$this->key]);
vendor/symfony/var-dumper/Cloner/Data.php:283:     * Depth-first dumping of items.
vendor/symfony/var-dumper/Cloner/Data.php:292:        $cursor->refIndex = 0;
vendor/symfony/var-dumper/Cloner/Data.php:293:        $cursor->softRefTo = $cursor->softRefHandle = $cursor->softRefCount = 0;
vendor/symfony/var-dumper/Cloner/Data.php:294:        $cursor->hardRefTo = $cursor->hardRefHandle = $cursor->hardRefCount = 0;
vendor/symfony/var-dumper/Cloner/Data.php:298:            $cursor->attr = array();
vendor/symfony/var-dumper/Cloner/Data.php:301:                $item = $this->getStub($item);
vendor/symfony/var-dumper/Cloner/Data.php:303:        } elseif (Stub::TYPE_REF === $item->type) {
vendor/symfony/var-dumper/Cloner/Data.php:304:            if ($item->handle) {
vendor/symfony/var-dumper/Cloner/Data.php:305:                if (!isset($refs[$r = $item->handle - (PHP_INT_MAX >> 1)])) {
vendor/symfony/var-dumper/Cloner/Data.php:306:                    $cursor->refIndex = $refs[$r] = $cursor->refIndex ?: ++$refs[0];
vendor/symfony/var-dumper/Cloner/Data.php:310:                $cursor->hardRefTo = $refs[$r];
vendor/symfony/var-dumper/Cloner/Data.php:311:                $cursor->hardRefHandle = $this->useRefHandles & $item->handle;
vendor/symfony/var-dumper/Cloner/Data.php:312:                $cursor->hardRefCount = $item->refCount;
vendor/symfony/var-dumper/Cloner/Data.php:314:            $cursor->attr = $item->attr;
vendor/symfony/var-dumper/Cloner/Data.php:315:            $type = $item->class ?: gettype($item->value);
vendor/symfony/var-dumper/Cloner/Data.php:316:            $item = $this->getStub($item->value);
vendor/symfony/var-dumper/Cloner/Data.php:319:            if ($item->refCount) {
vendor/symfony/var-dumper/Cloner/Data.php:320:                if (!isset($refs[$r = $item->handle])) {
vendor/symfony/var-dumper/Cloner/Data.php:321:                    $cursor->refIndex = $refs[$r] = $cursor->refIndex ?: ++$refs[0];
vendor/symfony/var-dumper/Cloner/Data.php:325:                $cursor->softRefTo = $refs[$r];
vendor/symfony/var-dumper/Cloner/Data.php:327:            $cursor->softRefHandle = $this->useRefHandles & $item->handle;
vendor/symfony/var-dumper/Cloner/Data.php:328:            $cursor->softRefCount = $item->refCount;
vendor/symfony/var-dumper/Cloner/Data.php:329:            $cursor->attr = $item->attr;
vendor/symfony/var-dumper/Cloner/Data.php:330:            $cut = $item->cut;
vendor/symfony/var-dumper/Cloner/Data.php:332:            if ($item->position && $firstSeen) {
vendor/symfony/var-dumper/Cloner/Data.php:333:                $children = $this->data[$item->position];
vendor/symfony/var-dumper/Cloner/Data.php:335:                if ($cursor->stop) {
vendor/symfony/var-dumper/Cloner/Data.php:344:            switch ($item->type) {
vendor/symfony/var-dumper/Cloner/Data.php:346:                    $dumper->dumpString($cursor, $item->value, Stub::STRING_BINARY === $item->class, $cut);
vendor/symfony/var-dumper/Cloner/Data.php:351:                    $item->type = $item->class;
vendor/symfony/var-dumper/Cloner/Data.php:352:                    $item->class = $item->value;
vendor/symfony/var-dumper/Cloner/Data.php:356:                    $withChildren = $children && $cursor->depth !== $this->maxDepth && $this->maxItemsPerDepth;
vendor/symfony/var-dumper/Cloner/Data.php:357:                    $dumper->enterHash($cursor, $item->type, $item->class, $withChildren);
vendor/symfony/var-dumper/Cloner/Data.php:359:                        if ($cursor->skipChildren) {
vendor/symfony/var-dumper/Cloner/Data.php:361:                            $cut = -1;
vendor/symfony/var-dumper/Cloner/Data.php:363:                            $cut = $this->dumpChildren($dumper, $cursor, $refs, $children, $cut, $item->type, null !== $item->class);
vendor/symfony/var-dumper/Cloner/Data.php:368:                    $cursor->skipChildren = false;
vendor/symfony/var-dumper/Cloner/Data.php:369:                    $dumper->leaveHash($cursor, $item->type, $item->class, $withChildren, $cut);
vendor/symfony/var-dumper/Cloner/Data.php:373:                    throw new \RuntimeException(sprintf('Unexpected Stub type: %s', $item->type));
vendor/symfony/var-dumper/Cloner/Data.php:376:            $dumper->enterHash($cursor, Cursor::HASH_INDEXED, 0, false);
vendor/symfony/var-dumper/Cloner/Data.php:377:            $dumper->leaveHash($cursor, Cursor::HASH_INDEXED, 0, false, 0);
vendor/symfony/var-dumper/Cloner/Data.php:379:            $dumper->dumpString($cursor, $item, false, 0);
vendor/symfony/var-dumper/Cloner/Data.php:381:            $dumper->dumpScalar($cursor, $type, $item);
vendor/symfony/var-dumper/Cloner/Data.php:401:        ++$cursor->depth;
vendor/symfony/var-dumper/Cloner/Data.php:402:        $cursor->hashType = $hashType;
vendor/symfony/var-dumper/Cloner/Data.php:403:        $cursor->hashIndex = 0;
vendor/symfony/var-dumper/Cloner/Data.php:404:        $cursor->hashLength = count($children);
vendor/symfony/var-dumper/Cloner/Data.php:405:        $cursor->hashCut = $hashCut;
vendor/symfony/var-dumper/Cloner/Data.php:407:            $cursor->hashKeyIsBinary = isset($key[0]) && !preg_match('//u', $key);
vendor/symfony/var-dumper/Cloner/Data.php:408:            $cursor->hashKey = $dumpKeys ? $key : null;
vendor/symfony/var-dumper/Cloner/Data.php:409:            $this->dumpItem($dumper, $cursor, $refs, $child);
vendor/symfony/var-dumper/Cloner/Data.php:410:            if (++$cursor->hashIndex === $this->maxItemsPerDepth || $cursor->stop) {
vendor/symfony/var-dumper/Cloner/Data.php:411:                $parentCursor->stop = true;
vendor/symfony/var-dumper/Cloner/Data.php:413:                return $hashCut >= 0 ? $hashCut + $cursor->hashLength - $cursor->hashIndex : $hashCut;
vendor/symfony/var-dumper/Cloner/Data.php:427:        $stub->type = Stub::TYPE_ARRAY;
vendor/symfony/var-dumper/Cloner/Data.php:428:        foreach ($item as $stub->class => $stub->position) {
vendor/symfony/var-dumper/Cloner/Data.php:431:            $stub->cut = $item[0];
vendor/symfony/var-dumper/Cloner/Data.php:433:        $stub->value = $stub->cut + ($stub->position ? \count($this->data[$stub->position]) : 0);
vendor/symfony/var-dumper/Cloner/DumperInterface.php:35:     * @param bool   $bin    Whether $str is UTF-8 or binary encoded
vendor/symfony/var-dumper/Cloner/Stub.php:47:        return \serialize(array($this->class, $this->position, $this->cut, $this->type, $this->value, $this->handle, $this->refCount, $this->attr));
vendor/symfony/var-dumper/Cloner/Stub.php:55:        list($this->class, $this->position, $this->cut, $this->type, $this->value, $this->handle, $this->refCount, $this->attr) = \unserialize($serialized);
vendor/symfony/var-dumper/Cloner/VarCloner.php:32:        $queue = array(array($var));    // This breadth-first queue is the return value
vendor/symfony/var-dumper/Cloner/VarCloner.php:38:        $maxItems = $this->maxItems;
vendor/symfony/var-dumper/Cloner/VarCloner.php:39:        $maxString = $this->maxString;
vendor/symfony/var-dumper/Cloner/VarCloner.php:40:        $minDepth = $this->minDepth;
vendor/symfony/var-dumper/Cloner/VarCloner.php:57:        $arrayStub->type = Stub::TYPE_ARRAY;
vendor/symfony/var-dumper/Cloner/VarCloner.php:64:                $currentDepthFinalIndex = $len - 1;
vendor/symfony/var-dumper/Cloner/VarCloner.php:94:                        if ($v->value instanceof Stub && (Stub::TYPE_OBJECT === $v->value->type || Stub::TYPE_RESOURCE === $v->value->type)) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:95:                            ++$v->value->refCount;
vendor/symfony/var-dumper/Cloner/VarCloner.php:97:                        ++$v->refCount;
vendor/symfony/var-dumper/Cloner/VarCloner.php:101:                    $refs[$k]->value = $v;
vendor/symfony/var-dumper/Cloner/VarCloner.php:105:                    $vals[$k]->handle = ++$refsCounter;
vendor/symfony/var-dumper/Cloner/VarCloner.php:122:                            $stub->type = Stub::TYPE_STRING;
vendor/symfony/var-dumper/Cloner/VarCloner.php:123:                            $stub->class = Stub::STRING_BINARY;
vendor/symfony/var-dumper/Cloner/VarCloner.php:124:                            if (0 <= $maxString && 0 < $cut = \strlen($v) - $maxString) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:125:                                $stub->cut = $cut;
vendor/symfony/var-dumper/Cloner/VarCloner.php:126:                                $stub->value = \substr($v, 0, -$cut);
vendor/symfony/var-dumper/Cloner/VarCloner.php:128:                                $stub->value = $v;
vendor/symfony/var-dumper/Cloner/VarCloner.php:130:                        } elseif (0 <= $maxString && isset($v[1 + ($maxString >> 2)]) && 0 < $cut = \mb_strlen($v, 'UTF-8') - $maxString) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:132:                            $stub->type = Stub::TYPE_STRING;
vendor/symfony/var-dumper/Cloner/VarCloner.php:133:                            $stub->class = Stub::STRING_UTF8;
vendor/symfony/var-dumper/Cloner/VarCloner.php:134:                            $stub->cut = $cut;
vendor/symfony/var-dumper/Cloner/VarCloner.php:135:                            $stub->value = \mb_substr($v, 0, $maxString, 'UTF-8');
vendor/symfony/var-dumper/Cloner/VarCloner.php:147:                        $stub->class = Stub::ARRAY_INDEXED;
vendor/symfony/var-dumper/Cloner/VarCloner.php:149:                        $j = -1;
vendor/symfony/var-dumper/Cloner/VarCloner.php:152:                                $stub->class = Stub::ARRAY_ASSOC;
vendor/symfony/var-dumper/Cloner/VarCloner.php:158:                        if (Stub::ARRAY_ASSOC === $stub->class) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:183:                            $stub->type = Stub::TYPE_OBJECT;
vendor/symfony/var-dumper/Cloner/VarCloner.php:184:                            $stub->class = \get_class($v);
vendor/symfony/var-dumper/Cloner/VarCloner.php:185:                            $stub->value = $v;
vendor/symfony/var-dumper/Cloner/VarCloner.php:186:                            $stub->handle = $h;
vendor/symfony/var-dumper/Cloner/VarCloner.php:187:                            $a = $this->castObject($stub, 0 < $i);
vendor/symfony/var-dumper/Cloner/VarCloner.php:188:                            if ($v !== $stub->value) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:189:                                if (Stub::TYPE_OBJECT !== $stub->type || null === $stub->value) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:192:                                $h = $hashMask ^ \hexdec(\substr(\spl_object_hash($stub->value), $hashOffset, \PHP_INT_SIZE));
vendor/symfony/var-dumper/Cloner/VarCloner.php:193:                                $stub->handle = $h;
vendor/symfony/var-dumper/Cloner/VarCloner.php:195:                            $stub->value = null;
vendor/symfony/var-dumper/Cloner/VarCloner.php:197:                                $stub->cut = \count($a);
vendor/symfony/var-dumper/Cloner/VarCloner.php:205:                            ++$stub->refCount;
vendor/symfony/var-dumper/Cloner/VarCloner.php:213:                            $stub->type = Stub::TYPE_RESOURCE;
vendor/symfony/var-dumper/Cloner/VarCloner.php:214:                            if ('Unknown' === $stub->class = @\get_resource_type($v)) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:215:                                $stub->class = 'Closed';
vendor/symfony/var-dumper/Cloner/VarCloner.php:217:                            $stub->value = $v;
vendor/symfony/var-dumper/Cloner/VarCloner.php:218:                            $stub->handle = $h;
vendor/symfony/var-dumper/Cloner/VarCloner.php:219:                            $a = $this->castResource($stub, 0 < $i);
vendor/symfony/var-dumper/Cloner/VarCloner.php:220:                            $stub->value = null;
vendor/symfony/var-dumper/Cloner/VarCloner.php:222:                                $stub->cut = \count($a);
vendor/symfony/var-dumper/Cloner/VarCloner.php:230:                            ++$stub->refCount;
vendor/symfony/var-dumper/Cloner/VarCloner.php:239:                        $stub->position = $len++;
vendor/symfony/var-dumper/Cloner/VarCloner.php:242:                            $a = \array_slice($a, 0, $maxItems - $pos);
vendor/symfony/var-dumper/Cloner/VarCloner.php:243:                            if ($stub->cut >= 0) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:244:                                $stub->cut += $pos - $maxItems;
vendor/symfony/var-dumper/Cloner/VarCloner.php:248:                        $stub->position = $len++;
vendor/symfony/var-dumper/Cloner/VarCloner.php:249:                    } elseif ($stub->cut >= 0) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:250:                        $stub->cut += \count($a);
vendor/symfony/var-dumper/Cloner/VarCloner.php:251:                        $stub->position = 0;
vendor/symfony/var-dumper/Cloner/VarCloner.php:256:                    if ($arrayStub->cut) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:257:                        $stub = array($arrayStub->cut, $arrayStub->class => $arrayStub->position);
vendor/symfony/var-dumper/Cloner/VarCloner.php:258:                        $arrayStub->cut = 0;
vendor/symfony/var-dumper/Cloner/VarCloner.php:259:                    } elseif (isset(self::$arrayCache[$arrayStub->class][$arrayStub->position])) {
vendor/symfony/var-dumper/Cloner/VarCloner.php:260:                        $stub = self::$arrayCache[$arrayStub->class][$arrayStub->position];
vendor/symfony/var-dumper/Cloner/VarCloner.php:262:                        self::$arrayCache[$arrayStub->class][$arrayStub->position] = $stub = array($arrayStub->class => $arrayStub->position);
vendor/symfony/var-dumper/Cloner/VarCloner.php:267:                    $refs[$k]->value = $stub;
vendor/symfony/var-dumper/Cloner/VarCloner.php:277:                $j = -1;
vendor/symfony/var-dumper/Cloner/VarCloner.php:283:                        $vals->{$k} = $refs[++$j];
vendor/symfony/var-dumper/Cloner/VarCloner.php:304:        self::$hashOffset = 16 - PHP_INT_SIZE;
vendor/symfony/var-dumper/Cloner/VarCloner.php:305:        self::$hashMask = -1;
vendor/symfony/var-dumper/Exception/ThrowingCasterException.php:24:        parent::__construct('Unexpected '.get_class($prev).' thrown from a caster: '.$prev->getMessage(), 0, $prev);
vendor/symfony/var-dumper/Caster/ConstStub.php:25:        $this->class = $name;
vendor/symfony/var-dumper/Caster/ConstStub.php:26:        $this->value = $value;
vendor/symfony/var-dumper/Caster/ConstStub.php:31:        return (string) $this->value;
vendor/symfony/var-dumper/Caster/PdoCaster.php:63:        $errmode = $c->getAttribute(\PDO::ATTR_ERRMODE);
vendor/symfony/var-dumper/Caster/PdoCaster.php:64:        $c->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
vendor/symfony/var-dumper/Caster/PdoCaster.php:73:                $attr[$k] = 'ERRMODE' === $k ? $errmode : $c->getAttribute(constant('PDO::ATTR_'.$k));
vendor/symfony/var-dumper/Caster/PdoCaster.php:90:            $prefix.'errorInfo' => $c->errorInfo(),
vendor/symfony/var-dumper/Caster/PdoCaster.php:95:            $a[$prefix.'inTransaction'] = $c->inTransaction();
vendor/symfony/var-dumper/Caster/PdoCaster.php:104:        $c->setAttribute(\PDO::ATTR_ERRMODE, $errmode);
vendor/symfony/var-dumper/Caster/PdoCaster.php:112:        $a[$prefix.'errorInfo'] = $c->errorInfo();
vendor/symfony/var-dumper/Caster/AmqpCaster.php:52:            $prefix.'is_connected' => $c->isConnected(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:62:            $timeout = $c->getReadTimeout();
vendor/symfony/var-dumper/Caster/AmqpCaster.php:64:            $timeout = $c->getTimeout();
vendor/symfony/var-dumper/Caster/AmqpCaster.php:68:            $prefix.'is_connected' => $c->isConnected(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:69:            $prefix.'login' => $c->getLogin(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:70:            $prefix.'password' => $c->getPassword(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:71:            $prefix.'host' => $c->getHost(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:72:            $prefix.'vhost' => $c->getVhost(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:73:            $prefix.'port' => $c->getPort(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:85:            $prefix.'is_connected' => $c->isConnected(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:86:            $prefix.'channel_id' => $c->getChannelId(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:95:            $prefix.'connection' => $c->getConnection(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:96:            $prefix.'prefetch_size' => $c->getPrefetchSize(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:97:            $prefix.'prefetch_count' => $c->getPrefetchCount(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:108:            $prefix.'flags' => self::extractFlags($c->getFlags()),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:117:            $prefix.'connection' => $c->getConnection(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:118:            $prefix.'channel' => $c->getChannel(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:119:            $prefix.'name' => $c->getName(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:120:            $prefix.'arguments' => $c->getArguments(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:131:            $prefix.'flags' => self::extractFlags($c->getFlags()),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:134:        $type = isset(self::$exchangeTypes[$c->getType()]) ? new ConstStub(self::$exchangeTypes[$c->getType()], $c->getType()) : $c->getType();
vendor/symfony/var-dumper/Caster/AmqpCaster.php:144:            $prefix.'connection' => $c->getConnection(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:145:            $prefix.'channel' => $c->getChannel(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:146:            $prefix.'name' => $c->getName(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:148:            $prefix.'arguments' => $c->getArguments(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:158:        $deliveryMode = new ConstStub($c->getDeliveryMode().(2 === $c->getDeliveryMode() ? ' (persistent)' : ' (non-persistent)'), $c->getDeliveryMode());
vendor/symfony/var-dumper/Caster/AmqpCaster.php:168:            $a += array($prefix.'body' => $c->getBody());
vendor/symfony/var-dumper/Caster/AmqpCaster.php:172:            $prefix.'delivery_tag' => $c->getDeliveryTag(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:173:            $prefix.'is_redelivery' => $c->isRedelivery(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:174:            $prefix.'exchange_name' => $c->getExchangeName(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:175:            $prefix.'routing_key' => $c->getRoutingKey(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:176:            $prefix.'content_type' => $c->getContentType(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:177:            $prefix.'content_encoding' => $c->getContentEncoding(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:178:            $prefix.'headers' => $c->getHeaders(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:180:            $prefix.'priority' => $c->getPriority(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:181:            $prefix.'correlation_id' => $c->getCorrelationId(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:182:            $prefix.'reply_to' => $c->getReplyTo(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:183:            $prefix.'expiration' => $c->getExpiration(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:184:            $prefix.'message_id' => $c->getMessageId(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:185:            $prefix.'timestamp' => $c->getTimeStamp(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:186:            $prefix.'type' => $c->getType(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:187:            $prefix.'user_id' => $c->getUserId(),
vendor/symfony/var-dumper/Caster/AmqpCaster.php:188:            $prefix.'app_id' => $c->getAppId(),
vendor/symfony/var-dumper/Caster/LinkStub.php:28:        $this->value = $label;
vendor/symfony/var-dumper/Caster/LinkStub.php:42:            $this->attr['href'] = $href;
vendor/symfony/var-dumper/Caster/LinkStub.php:50:            $this->attr['line'] = $line;
vendor/symfony/var-dumper/Caster/LinkStub.php:52:        if ($label !== $this->attr['file'] = realpath($href) ?: $href) {
vendor/symfony/var-dumper/Caster/LinkStub.php:55:        if ($composerRoot = $this->getComposerRoot($href, $this->inVendor)) {
vendor/symfony/var-dumper/Caster/LinkStub.php:56:            $this->attr['ellipsis'] = strlen($href) - strlen($composerRoot) + 1;
vendor/symfony/var-dumper/Caster/LinkStub.php:57:            $this->attr['ellipsis-type'] = 'path';
vendor/symfony/var-dumper/Caster/LinkStub.php:58:            $this->attr['ellipsis-tail'] = 1 + ($this->inVendor ? 2 + strlen(implode(array_slice(explode(DIRECTORY_SEPARATOR, substr($href, 1 - $this->attr['ellipsis'])), 0, 2))) : 0);
vendor/symfony/var-dumper/Caster/LinkStub.php:60:            $this->attr['ellipsis'] = 2 + strlen(implode(array_slice($ellipsis, -2)));
vendor/symfony/var-dumper/Caster/LinkStub.php:61:            $this->attr['ellipsis-type'] = 'path';
vendor/symfony/var-dumper/Caster/LinkStub.php:62:            $this->attr['ellipsis-tail'] = 1;
vendor/symfony/var-dumper/Caster/LinkStub.php:74:                    $v = dirname(dirname($r->getFileName()));
vendor/symfony/var-dumper/Caster/StubCaster.php:26:            $stub->type = $c->type;
vendor/symfony/var-dumper/Caster/StubCaster.php:27:            $stub->class = $c->class;
vendor/symfony/var-dumper/Caster/StubCaster.php:28:            $stub->value = $c->value;
vendor/symfony/var-dumper/Caster/StubCaster.php:29:            $stub->handle = $c->handle;
vendor/symfony/var-dumper/Caster/StubCaster.php:30:            $stub->cut = $c->cut;
vendor/symfony/var-dumper/Caster/StubCaster.php:31:            $stub->attr = $c->attr;
vendor/symfony/var-dumper/Caster/StubCaster.php:33:            if (Stub::TYPE_REF === $c->type && !$c->class && is_string($c->value) && !preg_match('//u', $c->value)) {
vendor/symfony/var-dumper/Caster/StubCaster.php:34:                $stub->type = Stub::TYPE_STRING;
vendor/symfony/var-dumper/Caster/StubCaster.php:35:                $stub->class = Stub::STRING_BINARY;
vendor/symfony/var-dumper/Caster/StubCaster.php:46:        return $isNested ? $c->preservedSubset : $a;
vendor/symfony/var-dumper/Caster/StubCaster.php:52:            $stub->cut += count($a);
vendor/symfony/var-dumper/Caster/StubCaster.php:63:            $stub->class = $c->dumpKeys ? '' : null;
vendor/symfony/var-dumper/Caster/StubCaster.php:64:            $stub->handle = 0;
vendor/symfony/var-dumper/Caster/StubCaster.php:65:            $stub->value = null;
vendor/symfony/var-dumper/Caster/StubCaster.php:66:            $stub->cut = $c->cut;
vendor/symfony/var-dumper/Caster/StubCaster.php:67:            $stub->attr = $c->attr;
vendor/symfony/var-dumper/Caster/StubCaster.php:71:            if ($c->value) {
vendor/symfony/var-dumper/Caster/StubCaster.php:72:                foreach (array_keys($c->value) as $k) {
vendor/symfony/var-dumper/Caster/StubCaster.php:76:                $a = array_combine($keys, $c->value);
vendor/symfony/var-dumper/Caster/FrameStub.php:15: * Represents a single backtrace frame as returned by debug_backtrace() or Exception->getTrace().
vendor/symfony/var-dumper/Caster/FrameStub.php:26:        $this->value = $frame;
vendor/symfony/var-dumper/Caster/FrameStub.php:27:        $this->keepArgs = $keepArgs;
vendor/symfony/var-dumper/Caster/FrameStub.php:28:        $this->inTraceStub = $inTraceStub;
vendor/symfony/var-dumper/Caster/Caster.php:47:     * @return array The array-cast of the object, with prefixed dynamic properties
vendor/symfony/var-dumper/Caster/Caster.php:53:            $hasDebugInfo = $class->hasMethod('__debugInfo');
vendor/symfony/var-dumper/Caster/Caster.php:54:            $class = $class->name;
vendor/symfony/var-dumper/Caster/Caster.php:57:            $a = $obj->__debugInfo();
vendor/symfony/var-dumper/Caster/Caster.php:156:            $stub->class .= '('.$a['__PHP_Incomplete_Class_Name'].')';
vendor/symfony/var-dumper/Caster/DOMCaster.php:77:            'length' => $dom->length,
vendor/symfony/var-dumper/Caster/DOMCaster.php:96:            'nodeName' => $dom->nodeName,
vendor/symfony/var-dumper/Caster/DOMCaster.php:97:            'nodeValue' => new CutStub($dom->nodeValue),
vendor/symfony/var-dumper/Caster/DOMCaster.php:98:            'nodeType' => new ConstStub(self::$nodeTypes[$dom->nodeType], $dom->nodeType),
vendor/symfony/var-dumper/Caster/DOMCaster.php:99:            'parentNode' => new CutStub($dom->parentNode),
vendor/symfony/var-dumper/Caster/DOMCaster.php:100:            'childNodes' => $dom->childNodes,
vendor/symfony/var-dumper/Caster/DOMCaster.php:101:            'firstChild' => new CutStub($dom->firstChild),
vendor/symfony/var-dumper/Caster/DOMCaster.php:102:            'lastChild' => new CutStub($dom->lastChild),
vendor/symfony/var-dumper/Caster/DOMCaster.php:103:            'previousSibling' => new CutStub($dom->previousSibling),
vendor/symfony/var-dumper/Caster/DOMCaster.php:104:            'nextSibling' => new CutStub($dom->nextSibling),
vendor/symfony/var-dumper/Caster/DOMCaster.php:105:            'attributes' => $dom->attributes,
vendor/symfony/var-dumper/Caster/DOMCaster.php:106:            'ownerDocument' => new CutStub($dom->ownerDocument),
vendor/symfony/var-dumper/Caster/DOMCaster.php:107:            'namespaceURI' => $dom->namespaceURI,
vendor/symfony/var-dumper/Caster/DOMCaster.php:108:            'prefix' => $dom->prefix,
vendor/symfony/var-dumper/Caster/DOMCaster.php:109:            'localName' => $dom->localName,
vendor/symfony/var-dumper/Caster/DOMCaster.php:110:            'baseURI' => $dom->baseURI ? new LinkStub($dom->baseURI) : $dom->baseURI,
vendor/symfony/var-dumper/Caster/DOMCaster.php:111:            'textContent' => new CutStub($dom->textContent),
vendor/symfony/var-dumper/Caster/DOMCaster.php:120:            'nodeName' => $dom->nodeName,
vendor/symfony/var-dumper/Caster/DOMCaster.php:121:            'nodeValue' => new CutStub($dom->nodeValue),
vendor/symfony/var-dumper/Caster/DOMCaster.php:122:            'nodeType' => new ConstStub(self::$nodeTypes[$dom->nodeType], $dom->nodeType),
vendor/symfony/var-dumper/Caster/DOMCaster.php:123:            'prefix' => $dom->prefix,
vendor/symfony/var-dumper/Caster/DOMCaster.php:124:            'localName' => $dom->localName,
vendor/symfony/var-dumper/Caster/DOMCaster.php:125:            'namespaceURI' => $dom->namespaceURI,
vendor/symfony/var-dumper/Caster/DOMCaster.php:126:            'ownerDocument' => new CutStub($dom->ownerDocument),
vendor/symfony/var-dumper/Caster/DOMCaster.php:127:            'parentNode' => new CutStub($dom->parentNode),
vendor/symfony/var-dumper/Caster/DOMCaster.php:136:            'doctype' => $dom->doctype,
vendor/symfony/var-dumper/Caster/DOMCaster.php:137:            'implementation' => $dom->implementation,
vendor/symfony/var-dumper/Caster/DOMCaster.php:138:            'documentElement' => new CutStub($dom->documentElement),
vendor/symfony/var-dumper/Caster/DOMCaster.php:139:            'actualEncoding' => $dom->actualEncoding,
vendor/symfony/var-dumper/Caster/DOMCaster.php:140:            'encoding' => $dom->encoding,
vendor/symfony/var-dumper/Caster/DOMCaster.php:141:            'xmlEncoding' => $dom->xmlEncoding,
vendor/symfony/var-dumper/Caster/DOMCaster.php:142:            'standalone' => $dom->standalone,
vendor/symfony/var-dumper/Caster/DOMCaster.php:143:            'xmlStandalone' => $dom->xmlStandalone,
vendor/symfony/var-dumper/Caster/DOMCaster.php:144:            'version' => $dom->version,
vendor/symfony/var-dumper/Caster/DOMCaster.php:145:            'xmlVersion' => $dom->xmlVersion,
vendor/symfony/var-dumper/Caster/DOMCaster.php:146:            'strictErrorChecking' => $dom->strictErrorChecking,
vendor/symfony/var-dumper/Caster/DOMCaster.php:147:            'documentURI' => $dom->documentURI ? new LinkStub($dom->documentURI) : $dom->documentURI,
vendor/symfony/var-dumper/Caster/DOMCaster.php:148:            'config' => $dom->config,
vendor/symfony/var-dumper/Caster/DOMCaster.php:149:            'formatOutput' => $dom->formatOutput,
vendor/symfony/var-dumper/Caster/DOMCaster.php:150:            'validateOnParse' => $dom->validateOnParse,
vendor/symfony/var-dumper/Caster/DOMCaster.php:151:            'resolveExternals' => $dom->resolveExternals,
vendor/symfony/var-dumper/Caster/DOMCaster.php:152:            'preserveWhiteSpace' => $dom->preserveWhiteSpace,
vendor/symfony/var-dumper/Caster/DOMCaster.php:153:            'recover' => $dom->recover,
vendor/symfony/var-dumper/Caster/DOMCaster.php:154:            'substituteEntities' => $dom->substituteEntities,
vendor/symfony/var-dumper/Caster/DOMCaster.php:158:            $formatOutput = $dom->formatOutput;
vendor/symfony/var-dumper/Caster/DOMCaster.php:159:            $dom->formatOutput = true;
vendor/symfony/var-dumper/Caster/DOMCaster.php:160:            $a += array(Caster::PREFIX_VIRTUAL.'xml' => $dom->saveXML());
vendor/symfony/var-dumper/Caster/DOMCaster.php:161:            $dom->formatOutput = $formatOutput;
vendor/symfony/var-dumper/Caster/DOMCaster.php:170:            'data' => $dom->data,
vendor/symfony/var-dumper/Caster/DOMCaster.php:171:            'length' => $dom->length,
vendor/symfony/var-dumper/Caster/DOMCaster.php:180:            'name' => $dom->name,
vendor/symfony/var-dumper/Caster/DOMCaster.php:181:            'specified' => $dom->specified,
vendor/symfony/var-dumper/Caster/DOMCaster.php:182:            'value' => $dom->value,
vendor/symfony/var-dumper/Caster/DOMCaster.php:183:            'ownerElement' => $dom->ownerElement,
vendor/symfony/var-dumper/Caster/DOMCaster.php:184:            'schemaTypeInfo' => $dom->schemaTypeInfo,
vendor/symfony/var-dumper/Caster/DOMCaster.php:193:            'tagName' => $dom->tagName,
vendor/symfony/var-dumper/Caster/DOMCaster.php:194:            'schemaTypeInfo' => $dom->schemaTypeInfo,
vendor/symfony/var-dumper/Caster/DOMCaster.php:203:            'wholeText' => $dom->wholeText,
vendor/symfony/var-dumper/Caster/DOMCaster.php:212:            'typeName' => $dom->typeName,
vendor/symfony/var-dumper/Caster/DOMCaster.php:213:            'typeNamespace' => $dom->typeNamespace,
vendor/symfony/var-dumper/Caster/DOMCaster.php:222:            'severity' => $dom->severity,
vendor/symfony/var-dumper/Caster/DOMCaster.php:223:            'message' => $dom->message,
vendor/symfony/var-dumper/Caster/DOMCaster.php:224:            'type' => $dom->type,
vendor/symfony/var-dumper/Caster/DOMCaster.php:225:            'relatedException' => $dom->relatedException,
vendor/symfony/var-dumper/Caster/DOMCaster.php:226:            'related_data' => $dom->related_data,
vendor/symfony/var-dumper/Caster/DOMCaster.php:227:            'location' => $dom->location,
vendor/symfony/var-dumper/Caster/DOMCaster.php:236:            'lineNumber' => $dom->lineNumber,
vendor/symfony/var-dumper/Caster/DOMCaster.php:237:            'columnNumber' => $dom->columnNumber,
vendor/symfony/var-dumper/Caster/DOMCaster.php:238:            'offset' => $dom->offset,
vendor/symfony/var-dumper/Caster/DOMCaster.php:239:            'relatedNode' => $dom->relatedNode,
vendor/symfony/var-dumper/Caster/DOMCaster.php:240:            'uri' => $dom->uri ? new LinkStub($dom->uri, $dom->lineNumber) : $dom->uri,
vendor/symfony/var-dumper/Caster/DOMCaster.php:249:            'name' => $dom->name,
vendor/symfony/var-dumper/Caster/DOMCaster.php:250:            'entities' => $dom->entities,
vendor/symfony/var-dumper/Caster/DOMCaster.php:251:            'notations' => $dom->notations,
vendor/symfony/var-dumper/Caster/DOMCaster.php:252:            'publicId' => $dom->publicId,
vendor/symfony/var-dumper/Caster/DOMCaster.php:253:            'systemId' => $dom->systemId,
vendor/symfony/var-dumper/Caster/DOMCaster.php:254:            'internalSubset' => $dom->internalSubset,
vendor/symfony/var-dumper/Caster/DOMCaster.php:263:            'publicId' => $dom->publicId,
vendor/symfony/var-dumper/Caster/DOMCaster.php:264:            'systemId' => $dom->systemId,
vendor/symfony/var-dumper/Caster/DOMCaster.php:273:            'publicId' => $dom->publicId,
vendor/symfony/var-dumper/Caster/DOMCaster.php:274:            'systemId' => $dom->systemId,
vendor/symfony/var-dumper/Caster/DOMCaster.php:275:            'notationName' => $dom->notationName,
vendor/symfony/var-dumper/Caster/DOMCaster.php:276:            'actualEncoding' => $dom->actualEncoding,
vendor/symfony/var-dumper/Caster/DOMCaster.php:277:            'encoding' => $dom->encoding,
vendor/symfony/var-dumper/Caster/DOMCaster.php:278:            'version' => $dom->version,
vendor/symfony/var-dumper/Caster/DOMCaster.php:287:            'target' => $dom->target,
vendor/symfony/var-dumper/Caster/DOMCaster.php:288:            'data' => $dom->data,
vendor/symfony/var-dumper/Caster/DOMCaster.php:297:            'document' => $dom->document,
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:49:        return self::filterExceptionArray($stub->class, $a, "\0Error\0", $filter);
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:54:        return self::filterExceptionArray($stub->class, $a, "\0Exception\0", $filter);
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:75:            $a[$trace] = new TraceStub($b[$xPrefix.'trace'], false, 0, -count($a[$trace]->value));
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:115:        $stub->class = '';
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:116:        $stub->handle = 0;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:117:        $frames = $trace->value;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:122:        if (0 > $i = $trace->sliceOffset) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:125:        if (!isset($trace->value[$i])) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:132:        for ($j += $trace->numberingOffset - $i++; isset($frames[$i]); ++$i, --$j) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:142:                ) + $frames[$i - 1],
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:148:                foreach ($f[$prefix.'src']->value as $label => $frame) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:158:                $f = $frames[$i - 1];
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:159:                if ($trace->keepArgs && !empty($f['args']) && $frame instanceof EnumStub) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:160:                    $frame->value['arguments'] = new ArgsStub($f['args'], isset($f['function']) ? $f['function'] : null, isset($f['class']) ? $f['class'] : null);
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:164:                if (isset($label->attr['ellipsis'])) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:165:                    $label->attr['ellipsis'] += 2;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:166:                    $label = substr_replace($prefix, "ellipsis-type=class&ellipsis={$label->attr['ellipsis']}&ellipsis-tail=1&title=Stack level $j.", 2, 0).$label->value.'()';
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:168:                    $label = substr_replace($prefix, "title=Stack level $j.", 2, 0).$label->value.'()';
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:177:        if (null !== $trace->sliceLength) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:178:            $a = array_slice($a, 0, $trace->sliceLength, true);
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:189:        $f = $frame->value;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:196:            $cacheKey = implode('-', $cacheKey);
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:201:                if (preg_match('/\((\d+)\)(?:\([\da-f]{32}\))? : (?:eval\(\)\'d code|runtime-created function)$/', $f['file'], $match)) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:202:                    $f['file'] = substr($f['file'], 0, -strlen($match[0]));
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:209:                $srcAttr = 'collapse='.(int) $ellipsis->inVendor;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:210:                $ellipsisTail = isset($ellipsis->attr['ellipsis-tail']) ? $ellipsis->attr['ellipsis-tail'] : 0;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:211:                $ellipsis = isset($ellipsis->attr['ellipsis']) ? $ellipsis->attr['ellipsis'] : 0;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:218:                        $templateSrc = method_exists($template, 'getSourceContext') ? $template->getSourceContext()->getCode() : (method_exists($template, 'getSource') ? $template->getSource() : '');
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:219:                        $templateInfo = $template->getDebugInfo();
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:221:                            if (!method_exists($template, 'getSourceContext') || !file_exists($templatePath = $template->getSourceContext()->getPath())) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:226:                                $srcKey = ($templatePath ?: $template->getTemplateName()).':'.$templateInfo[$f['line']];
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:241:                $srcAttr .= $ellipsis ? '&ellipsis-type=path&ellipsis='.$ellipsis.'&ellipsis-tail='.$ellipsisTail : '';
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:247:        if ($frame->inTraceStub) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:255:        if ($frame->keepArgs && !empty($f['args'])) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:306:        for ($i = $line - 1 - $srcContext; $i <= $line - 1 + $srcContext; ++$i) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:314:            for ($i = $srcContext << 1; $i >= 0; --$i) {
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:327:        --$ltrim;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:333:            $c = substr($c, 0, -1);
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:339:                    $c->attr['file'] = $file;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:340:                    $c->attr['line'] = $line;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:343:            $c->attr['lang'] = $lang;
vendor/symfony/var-dumper/Caster/ExceptionCaster.php:344:            $srcLines[sprintf("\0~separator=› &%d\0", $i + $line - $srcContext)] = $c;
vendor/symfony/var-dumper/Caster/TraceStub.php:17: * Represents a backtrace as returned by debug_backtrace() or Exception->getTrace().
vendor/symfony/var-dumper/Caster/TraceStub.php:30:        $this->value = $trace;
vendor/symfony/var-dumper/Caster/TraceStub.php:31:        $this->keepArgs = $keepArgs;
vendor/symfony/var-dumper/Caster/TraceStub.php:32:        $this->sliceOffset = $sliceOffset;
vendor/symfony/var-dumper/Caster/TraceStub.php:33:        $this->sliceLength = $sliceLength;
vendor/symfony/var-dumper/Caster/TraceStub.php:34:        $this->numberingOffset = $numberingOffset;
vendor/symfony/var-dumper/Caster/PgSqlCaster.php:116:        $a['command-completion tag'] = pg_result_status($result, PGSQL_STATUS_STRING);
vendor/symfony/var-dumper/Caster/PgSqlCaster.php:118:        if (-1 === $a['num rows']) {
vendor/symfony/var-dumper/Caster/PgSqlCaster.php:141:            if ('-1 bytes' === $field['storage']) {
vendor/symfony/var-dumper/Caster/EnumStub.php:27:        $this->value = $values;
vendor/symfony/var-dumper/Caster/EnumStub.php:28:        $this->dumpKeys = $dumpKeys;
vendor/symfony/var-dumper/Caster/CutStub.php:17: * Represents the main properties of a PHP variable, pre-casted by a caster.
vendor/symfony/var-dumper/Caster/CutStub.php:25:        $this->value = $value;
vendor/symfony/var-dumper/Caster/CutStub.php:29:                $this->type = self::TYPE_OBJECT;
vendor/symfony/var-dumper/Caster/CutStub.php:30:                $this->class = get_class($value);
vendor/symfony/var-dumper/Caster/CutStub.php:31:                $this->cut = -1;
vendor/symfony/var-dumper/Caster/CutStub.php:35:                $this->type = self::TYPE_ARRAY;
vendor/symfony/var-dumper/Caster/CutStub.php:36:                $this->class = self::ARRAY_ASSOC;
vendor/symfony/var-dumper/Caster/CutStub.php:37:                $this->cut = $this->value = count($value);
vendor/symfony/var-dumper/Caster/CutStub.php:43:                $this->type = self::TYPE_RESOURCE;
vendor/symfony/var-dumper/Caster/CutStub.php:44:                $this->handle = (int) $value;
vendor/symfony/var-dumper/Caster/CutStub.php:45:                if ('Unknown' === $this->class = @get_resource_type($value)) {
vendor/symfony/var-dumper/Caster/CutStub.php:46:                    $this->class = 'Closed';
vendor/symfony/var-dumper/Caster/CutStub.php:48:                $this->cut = -1;
vendor/symfony/var-dumper/Caster/CutStub.php:52:                $this->type = self::TYPE_STRING;
vendor/symfony/var-dumper/Caster/CutStub.php:53:                $this->class = preg_match('//u', $value) ? self::STRING_UTF8 : self::STRING_BINARY;
vendor/symfony/var-dumper/Caster/CutStub.php:54:                $this->cut = self::STRING_BINARY === $this->class ? strlen($value) : mb_strlen($value, 'UTF-8');
vendor/symfony/var-dumper/Caster/CutStub.php:55:                $this->value = '';
vendor/symfony/var-dumper/Caster/ArgsStub.php:45:            $this->dumpKeys = false;
vendor/symfony/var-dumper/Caster/ArgsStub.php:46:            $this->value = $values[0]->value;
vendor/symfony/var-dumper/Caster/ArgsStub.php:48:            $this->value = array_combine($params, $values);
vendor/symfony/var-dumper/Caster/ArgsStub.php:66:        foreach ($r->getParameters() as $v) {
vendor/symfony/var-dumper/Caster/ArgsStub.php:67:            $k = '$'.$v->name;
vendor/symfony/var-dumper/Caster/ArgsStub.php:68:            if ($v->isPassedByReference()) {
vendor/symfony/var-dumper/Caster/ArgsStub.php:71:            if (method_exists($v, 'isVariadic') && $v->isVariadic()) {
vendor/symfony/var-dumper/Caster/CutArrayStub.php:27:        $this->preservedSubset = array_intersect_key($value, array_flip($preservedKeys));
vendor/symfony/var-dumper/Caster/CutArrayStub.php:28:        $this->cut -= count($this->preservedSubset);
vendor/symfony/var-dumper/Caster/DateCaster.php:26:        $location = $d->getTimezone()->getLocation();
vendor/symfony/var-dumper/Caster/DateCaster.php:27:        $fromNow = (new \DateTime())->diff($d);
vendor/symfony/var-dumper/Caster/DateCaster.php:29:        $title = $d->format('l, F j, Y')
vendor/symfony/var-dumper/Caster/DateCaster.php:31:            .($location ? ($d->format('I') ? "\nDST On" : "\nDST Off") : '')
vendor/symfony/var-dumper/Caster/DateCaster.php:37:        $stub->class .= $d->format(' @U');
vendor/symfony/var-dumper/Caster/DateCaster.php:45:        $numberOfSeconds = $now->add($interval)->getTimestamp() - $now->getTimestamp();
vendor/symfony/var-dumper/Caster/DateCaster.php:57:        if (0 === $i->y && 0 === $i->m && ($i->h >= 24 || $i->i >= 60 || $i->s >= 60)) {
vendor/symfony/var-dumper/Caster/DateCaster.php:59:            $format .= 0 < $i->days ? '%ad ' : '';
vendor/symfony/var-dumper/Caster/DateCaster.php:61:            $format .= ($i->y ? '%yy ' : '').($i->m ? '%mm ' : '').($i->d ? '%dd ' : '');
vendor/symfony/var-dumper/Caster/DateCaster.php:64:        if (\PHP_VERSION_ID >= 70100 && isset($i->f)) {
vendor/symfony/var-dumper/Caster/DateCaster.php:65:            $format .= $i->h || $i->i || $i->s || $i->f ? '%H:%I:'.self::formatSeconds($i->s, substr($i->f, 2)) : '';
vendor/symfony/var-dumper/Caster/DateCaster.php:67:            $format .= $i->h || $i->i || $i->s ? '%H:%I:%S' : '';
vendor/symfony/var-dumper/Caster/DateCaster.php:72:        return $i->format(rtrim($format));
vendor/symfony/var-dumper/Caster/DateCaster.php:77:        $location = $timeZone->getLocation();
vendor/symfony/var-dumper/Caster/DateCaster.php:78:        $formatted = (new \DateTime('now', $timeZone))->format($location ? 'e (P)' : 'P');
vendor/symfony/var-dumper/Caster/DateCaster.php:79:        $title = $location && extension_loaded('intl') ? \Locale::getDisplayRegion('-'.$location['country_code'], \Locale::getDefault()) : '';
vendor/symfony/var-dumper/Caster/DateCaster.php:97:                    $dates[] = sprintf('%s more', ($end = $p->getEndDate())
vendor/symfony/var-dumper/Caster/DateCaster.php:98:                        ? ceil(($end->format('U.u') - $d->format('U.u')) / ($now->add($p->getDateInterval())->format('U.u') - $now->format('U.u')))
vendor/symfony/var-dumper/Caster/DateCaster.php:99:                        : $p->recurrences - $i
vendor/symfony/var-dumper/Caster/DateCaster.php:109:            self::formatInterval($p->getDateInterval()),
vendor/symfony/var-dumper/Caster/DateCaster.php:110:            self::formatDateTime($p->getStartDate()),
vendor/symfony/var-dumper/Caster/DateCaster.php:111:            $p->include_start_date ? 'included' : 'excluded',
vendor/symfony/var-dumper/Caster/DateCaster.php:112:            ($end = $p->getEndDate()) ? 'to '.self::formatDateTime($end) : 'recurring '.$p->recurrences.' time/s'
vendor/symfony/var-dumper/Caster/DateCaster.php:122:        return $d->format('Y-m-d H:i:'.self::formatSeconds($d->format('s'), $d->format('u')).$extra);
vendor/symfony/var-dumper/Caster/MongoCaster.php:29:        if ($info = $cursor->info()) {
vendor/symfony/var-dumper/Caster/MongoCaster.php:34:        $a[Caster::PREFIX_VIRTUAL.'dead'] = $cursor->dead();
vendor/symfony/var-dumper/Caster/ClassStub.php:27:        $this->value = $identifier;
vendor/symfony/var-dumper/Caster/ClassStub.php:30:            $this->attr['ellipsis'] = strlen($identifier) - $i;
vendor/symfony/var-dumper/Caster/ClassStub.php:31:            $this->attr['ellipsis-type'] = 'class';
vendor/symfony/var-dumper/Caster/ClassStub.php:32:            $this->attr['ellipsis-tail'] = 1;
vendor/symfony/var-dumper/Caster/ClassStub.php:48:            } elseif (0 < $i = strpos($identifier, '::') ?: strpos($identifier, '->')) {
vendor/symfony/var-dumper/Caster/ClassStub.php:65:        if ($f = $r->getFileName()) {
vendor/symfony/var-dumper/Caster/ClassStub.php:66:            $this->attr['file'] = $f;
vendor/symfony/var-dumper/Caster/ClassStub.php:67:            $this->attr['line'] = $r->getStartLine();
vendor/symfony/var-dumper/Caster/SymfonyCaster.php:37:                $a[Caster::PREFIX_VIRTUAL.$prop] = $clone->{$getter}();
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:39:        $stub->class = 'Closure'; // HHVM generates unique class names for closures
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:43:            foreach ($a[$prefix.'parameters']->value as &$v) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:48:                        $v->value[substr($k, 3)] = $param;
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:51:                unset($v->value['position'], $v->value['isVariadic'], $v->value['byReference'], $v);
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:55:        if (!($filter & Caster::EXCLUDE_VERBOSE) && $f = $c->getFileName()) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:56:            $a[$prefix.'file'] = new LinkStub($f, $c->getStartLine());
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:57:            $a[$prefix.'line'] = $c->getStartLine().' to '.$c->getEndLine();
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:89:            $prefix.'name' => $c instanceof \ReflectionNamedType ? $c->getName() : $c->__toString(),
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:90:            $prefix.'allowsNull' => $c->allowsNull(),
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:91:            $prefix.'isBuiltin' => $c->isBuiltin(),
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:101:        if ($c->getThis()) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:102:            $a[$prefix.'this'] = new CutStub($c->getThis());
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:104:        $function = $c->getFunction();
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:106:            'class' => isset($function->class) ? $function->class : null,
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:107:            'type' => isset($function->class) ? ($function->isStatic() ? '::' : '->') : null,
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:108:            'function' => $function->name,
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:109:            'file' => $c->getExecutingFile(),
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:110:            'line' => $c->getExecutingLine(),
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:112:        if ($trace = $c->getTrace(DEBUG_BACKTRACE_IGNORE_ARGS)) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:113:            $function = new \ReflectionGenerator($c->getExecutingGenerator());
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:116:                'file' => $function->getExecutingFile(),
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:117:                'line' => $function->getExecutingLine() - 1,
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:120:            $a[$prefix.'trace'] = new TraceStub($trace, false, 0, -1, -1);
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:138:        if ($n = \Reflection::getModifierNames($c->getModifiers())) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:148:        foreach ($c->getProperties() as $n) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:149:            $a[$prefix.'properties'][$n->name] = $n;
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:152:        foreach ($c->getMethods() as $n) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:153:            $a[$prefix.'methods'][$n->name] = $n;
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:176:            $v = $v instanceof \ReflectionNamedType ? $v->getName() : $v->__toString();
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:177:            $a[$prefix.'returnType'] = new ClassStub($a[$prefix.'returnType']->allowsNull() ? '?'.$v : $v, array(class_exists($v, false) || interface_exists($v, false) || trait_exists($v, false) ? $v : '', ''));
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:186:        foreach ($c->getParameters() as $v) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:187:            $k = '$'.$v->name;
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:188:            if (method_exists($v, 'isVariadic') && $v->isVariadic()) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:191:            if ($v->isPassedByReference()) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:200:        if ($v = $c->getStaticVariables()) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:224:        $a[Caster::PREFIX_VIRTUAL.'modifiers'] = implode(' ', \Reflection::getModifierNames($c->getModifiers()));
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:244:            if ($v = $c->getType()) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:245:                $a[$prefix.'typeHint'] = $v instanceof \ReflectionNamedType ? $v->getName() : $v->__toString();
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:247:        } elseif (preg_match('/^(?:[^ ]++ ){4}([a-zA-Z_\x7F-\xFF][^ ]++)/', $c, $v)) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:259:            $a[$prefix.'default'] = $v = $c->getDefaultValue();
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:260:            if (method_exists($c, 'isDefaultValueConstant') && $c->isDefaultValueConstant()) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:261:                $a[$prefix.'default'] = new ConstStub($c->getDefaultValueConstantName(), $v);
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:267:            if (isset($a[$prefix.'typeHint']) && $c->allowsNull() && !class_exists('ReflectionNamedType', false)) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:278:        $a[Caster::PREFIX_VIRTUAL.'modifiers'] = implode(' ', \Reflection::getModifierNames($c->getModifiers()));
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:314:        $x = isset($a[Caster::PREFIX_VIRTUAL.'extra']) ? $a[Caster::PREFIX_VIRTUAL.'extra']->value : array();
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:316:        if (method_exists($c, 'getFileName') && $m = $c->getFileName()) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:317:            $x['file'] = new LinkStub($m, $c->getStartLine());
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:318:            $x['line'] = $c->getStartLine().' to '.$c->getEndLine();
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:331:            if (method_exists($c, $m) && false !== ($m = $c->$m()) && null !== $m) {
vendor/symfony/var-dumper/Caster/ReflectionCaster.php:332:                $a[$prefix.$k] = $m instanceof \Reflector ? $m->name : $m;
vendor/symfony/var-dumper/Caster/DoctrineCaster.php:31:                ++$stub->cut;
vendor/symfony/var-dumper/Caster/DoctrineCaster.php:43:                ++$stub->cut;
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:47:            'localName' => $reader->localName,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:48:            'prefix' => $reader->prefix,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:49:            'nodeType' => new ConstStub(self::$nodeTypes[$reader->nodeType], $reader->nodeType),
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:50:            'depth' => $reader->depth,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:51:            'isDefault' => $reader->isDefault,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:52:            'isEmptyElement' => \XMLReader::NONE === $reader->nodeType ? null : $reader->isEmptyElement,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:53:            'xmlLang' => $reader->xmlLang,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:54:            'attributeCount' => $reader->attributeCount,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:55:            'value' => $reader->value,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:56:            'namespaceURI' => $reader->namespaceURI,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:57:            'baseURI' => $reader->baseURI ? new LinkStub($reader->baseURI) : $reader->baseURI,
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:59:                'LOADDTD' => $reader->getParserProperty(\XMLReader::LOADDTD),
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:60:                'DEFAULTATTRS' => $reader->getParserProperty(\XMLReader::DEFAULTATTRS),
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:61:                'VALIDATE' => $reader->getParserProperty(\XMLReader::VALIDATE),
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:62:                'SUBST_ENTITIES' => $reader->getParserProperty(\XMLReader::SUBST_ENTITIES),
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:68:            $info[$props]->cut = $count;
vendor/symfony/var-dumper/Caster/XmlReaderCaster.php:73:        $stub->cut += $count + 2;
vendor/symfony/var-dumper/Caster/SplCaster.php:52:        $mode = $c->getIteratorMode();
vendor/symfony/var-dumper/Caster/SplCaster.php:53:        $c->setIteratorMode(\SplDoublyLinkedList::IT_MODE_KEEP | $mode & ~\SplDoublyLinkedList::IT_MODE_DELETE);
vendor/symfony/var-dumper/Caster/SplCaster.php:59:        $c->setIteratorMode($mode);
vendor/symfony/var-dumper/Caster/SplCaster.php:95:                $a[$prefix.$key] = $c->$accessor();
vendor/symfony/var-dumper/Caster/SplCaster.php:111:                $a[$prefix.$key] = new ConstStub(date('Y-m-d H:i:s', $a[$prefix.$key]), $a[$prefix.$key]);
vendor/symfony/var-dumper/Caster/SplCaster.php:133:                $a[$prefix.$key] = $c->$accessor();
vendor/symfony/var-dumper/Caster/SplCaster.php:158:            Caster::PREFIX_VIRTUAL.'storage' => $c->toArray(),
vendor/symfony/var-dumper/Caster/SplCaster.php:173:                'info' => $clone->getInfo(),
vendor/symfony/var-dumper/Caster/SplCaster.php:186:        $a[Caster::PREFIX_VIRTUAL.'innerIterator'] = $c->getInnerIterator();
vendor/symfony/var-dumper/Caster/SplCaster.php:194:        $class = $stub->class;
vendor/symfony/var-dumper/Caster/SplCaster.php:195:        $flags = $c->getFlags();
vendor/symfony/var-dumper/Caster/SplCaster.php:198:            $c->setFlags(\ArrayObject::STD_PROP_LIST);
vendor/symfony/var-dumper/Caster/SplCaster.php:200:            $c->setFlags($flags);
vendor/symfony/var-dumper/Caster/SplCaster.php:207:            $a[$prefix.'iteratorClass'] = new ClassStub($c->getIteratorClass());
vendor/symfony/var-dumper/Caster/SplCaster.php:209:        $a[$prefix.'storage'] = $c->getArrayCopy();
vendor/symfony/var-dumper/Caster/RedisCaster.php:17: * Casts Redis class from ext-redis to array representation.
vendor/symfony/var-dumper/Caster/RedisCaster.php:42:        if (!$connected = $c->isConnected()) {
vendor/symfony/var-dumper/Caster/RedisCaster.php:48:        $ser = $c->getOption(\Redis::OPT_SERIALIZER);
vendor/symfony/var-dumper/Caster/RedisCaster.php:49:        $retry = defined('Redis::OPT_SCAN') ? $c->getOption(\Redis::OPT_SCAN) : 0;
vendor/symfony/var-dumper/Caster/RedisCaster.php:53:            $prefix.'host' => $c->getHost(),
vendor/symfony/var-dumper/Caster/RedisCaster.php:54:            $prefix.'port' => $c->getPort(),
vendor/symfony/var-dumper/Caster/RedisCaster.php:55:            $prefix.'auth' => $c->getAuth(),
vendor/symfony/var-dumper/Caster/RedisCaster.php:56:            $prefix.'dbNum' => $c->getDbNum(),
vendor/symfony/var-dumper/Caster/RedisCaster.php:57:            $prefix.'timeout' => $c->getTimeout(),
vendor/symfony/var-dumper/Caster/RedisCaster.php:58:            $prefix.'persistentId' => $c->getPersistentID(),
vendor/symfony/var-dumper/Caster/RedisCaster.php:60:                'READ_TIMEOUT' => $c->getOption(\Redis::OPT_READ_TIMEOUT),
vendor/symfony/var-dumper/Caster/RedisCaster.php:62:                'PREFIX' => $c->getOption(\Redis::OPT_PREFIX),
vendor/symfony/var-dumper/Caster/RedisCaster.php:73:            $prefix.'hosts' => $c->_hosts(),
vendor/symfony/var-dumper/Caster/RedisCaster.php:74:            $prefix.'function' => ClassStub::wrapCallable($c->_function()),
vendor/symfony/var-dumper/Test/VarDumperTestTrait.php:30:        $this->assertSame(rtrim($dump), $this->getDump($data, null, $filter), $message);
vendor/symfony/var-dumper/Test/VarDumperTestTrait.php:41:        $this->assertStringMatchesFormat(rtrim($dump), $this->getDump($data, null, $filter), $message);
vendor/symfony/var-dumper/Test/VarDumperTestTrait.php:50:        $cloner->setMaxItems(-1);
vendor/symfony/var-dumper/Test/VarDumperTestTrait.php:52:        $dumper->setColors(false);
vendor/symfony/var-dumper/Test/VarDumperTestTrait.php:53:        $data = $cloner->cloneVar($data, $filter)->withRefHandles(false);
vendor/symfony/var-dumper/Test/VarDumperTestTrait.php:54:        if (null !== $key && null === $data = $data->seek($key)) {
vendor/symfony/var-dumper/Test/VarDumperTestTrait.php:58:        return rtrim($dumper->dump($data, true));
vendor/symfony/var-dumper/README.md:9:---------
vendor/symfony/var-dumper/VarDumper.php:34:                $dumper->dump($cloner->cloneVar($var));
vendor/symfony/var-dumper/phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/var-dumper/phpunit.xml.dist:3:<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
vendor/symfony/var-dumper/phpunit.xml.dist:12:        <ini name="error_reporting" value="-1" />
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:42:     * @param string                        $charset The default character encoding to use for non-UTF8 strings
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:47:        $this->flags = (int) $flags;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:48:        $this->setCharset($charset ?: ini_get('php.output_encoding') ?: ini_get('default_charset') ?: 'UTF-8');
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:49:        $this->decimalPoint = localeconv();
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:50:        $this->decimalPoint = $this->decimalPoint['decimal_point'];
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:51:        $this->setOutput($output ?: static::$defaultOutput);
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:53:            static::$defaultOutput = $this->outputStream;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:66:        $prev = null !== $this->outputStream ? $this->outputStream : $this->lineDumper;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:69:            $this->outputStream = null;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:70:            $this->lineDumper = $output;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:75:            $this->outputStream = $output;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:76:            $this->lineDumper = array($this, 'echoLine');
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:83:     * Sets the default character encoding to use for non-UTF8 strings.
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:85:     * @param string $charset The default character encoding to use for non-UTF8 strings
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:91:        $prev = $this->charset;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:94:        $charset = null === $charset || 'UTF-8' === $charset || 'UTF8' === $charset ? 'CP1252' : $charset;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:96:        $this->charset = $charset;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:110:        $prev = $this->indentPad;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:111:        $this->indentPad = $pad;
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:126:        $this->decimalPoint = localeconv();
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:127:        $this->decimalPoint = $this->decimalPoint['decimal_point'];
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:129:        if ($locale = $this->flags & (self::DUMP_COMMA_SEPARATOR | self::DUMP_TRAILING_COMMA) ? setlocale(LC_NUMERIC, 0) : null) {
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:137:            $prevOutput = $this->setOutput($output);
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:140:            $data->dump($this);
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:141:            $this->dumpLine(-1);
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:144:                $result = stream_get_contents($output, -1, 0);
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:151:                $this->setOutput($prevOutput);
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:163:     *                   or -1 to signal the end-of-dump to the line dumper callable
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:167:        call_user_func($this->lineDumper, $this->line, $depth, $this->indentPad);
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:168:        $this->line = '';
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:180:        if (-1 !== $depth) {
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:181:            fwrite($this->outputStream, str_repeat($indentPad, $depth).$line."\n");
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:186:     * Converts a non-UTF-8 string to UTF-8.
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:188:     * @param string $s The non-UTF-8 string to convert
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:190:     * @return string The string converted to UTF-8
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:199:            throw new \RuntimeException('Unable to convert a non-UTF-8 string to UTF-8: required function iconv() does not exist. You should install ext-iconv or symfony/polyfill-iconv.');
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:202:        if (false !== $c = @iconv($this->charset, 'UTF-8', $s)) {
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:205:        if ('CP1252' !== $this->charset && false !== $c = @iconv('CP1252', 'UTF-8', $s)) {
vendor/symfony/var-dumper/Dumper/AbstractDumper.php:209:        return iconv('CP850', 'UTF-8', $s);
vendor/symfony/var-dumper/Dumper/CliDumper.php:45:    protected static $controlCharsRx = '/[\x00-\x1F\x7F]+/';
vendor/symfony/var-dumper/Dumper/CliDumper.php:65:        if ('\\' === DIRECTORY_SEPARATOR && !$this->isWindowsTrueColor()) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:67:            $this->setStyles(array(
vendor/symfony/var-dumper/Dumper/CliDumper.php:88:        $this->colors = (bool) $colors;
vendor/symfony/var-dumper/Dumper/CliDumper.php:98:        $this->maxStringWidth = (int) $maxStringWidth;
vendor/symfony/var-dumper/Dumper/CliDumper.php:108:        $this->styles = $styles + $this->styles;
vendor/symfony/var-dumper/Dumper/CliDumper.php:116:        $this->dumpKey($cursor);
vendor/symfony/var-dumper/Dumper/CliDumper.php:119:        $attr = $cursor->attr;
vendor/symfony/var-dumper/Dumper/CliDumper.php:135:                    case -INF === $value: $value = '-INF'; break;
vendor/symfony/var-dumper/Dumper/CliDumper.php:139:                        if (false === strpos($value, $this->decimalPoint)) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:140:                            $value .= $this->decimalPoint.'0';
vendor/symfony/var-dumper/Dumper/CliDumper.php:155:                $attr += array('value' => $this->utf8Encode($value));
vendor/symfony/var-dumper/Dumper/CliDumper.php:156:                $value = $this->utf8Encode($type);
vendor/symfony/var-dumper/Dumper/CliDumper.php:160:        $this->line .= $this->style($style, $value, $attr);
vendor/symfony/var-dumper/Dumper/CliDumper.php:162:        $this->endValue($cursor);
vendor/symfony/var-dumper/Dumper/CliDumper.php:170:        $this->dumpKey($cursor);
vendor/symfony/var-dumper/Dumper/CliDumper.php:171:        $attr = $cursor->attr;
vendor/symfony/var-dumper/Dumper/CliDumper.php:174:            $str = $this->utf8Encode($str);
vendor/symfony/var-dumper/Dumper/CliDumper.php:177:            $this->line .= '""';
vendor/symfony/var-dumper/Dumper/CliDumper.php:178:            $this->endValue($cursor);
vendor/symfony/var-dumper/Dumper/CliDumper.php:181:                'length' => 0 <= $cut ? mb_strlen($str, 'UTF-8') + $cut : 0,
vendor/symfony/var-dumper/Dumper/CliDumper.php:189:            $m = count($str) - 1;
vendor/symfony/var-dumper/Dumper/CliDumper.php:192:            if (self::DUMP_STRING_LENGTH & $this->flags) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:193:                $this->line .= '('.$attr['length'].') ';
vendor/symfony/var-dumper/Dumper/CliDumper.php:196:                $this->line .= 'b';
vendor/symfony/var-dumper/Dumper/CliDumper.php:200:                $this->line .= '"""';
vendor/symfony/var-dumper/Dumper/CliDumper.php:201:                $this->dumpLine($cursor->depth);
vendor/symfony/var-dumper/Dumper/CliDumper.php:203:                $this->line .= '"';
vendor/symfony/var-dumper/Dumper/CliDumper.php:210:                if (0 < $this->maxStringWidth && $this->maxStringWidth < $len = mb_strlen($str, 'UTF-8')) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:211:                    $str = mb_substr($str, 0, $this->maxStringWidth, 'UTF-8');
vendor/symfony/var-dumper/Dumper/CliDumper.php:212:                    $lineCut = $len - $this->maxStringWidth;
vendor/symfony/var-dumper/Dumper/CliDumper.php:214:                if ($m && 0 < $cursor->depth) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:215:                    $this->line .= $this->indentPad;
vendor/symfony/var-dumper/Dumper/CliDumper.php:218:                    $this->line .= $this->style('str', $str, $attr);
vendor/symfony/var-dumper/Dumper/CliDumper.php:223:                            $this->dumpLine($cursor->depth);
vendor/symfony/var-dumper/Dumper/CliDumper.php:224:                            if (0 < $cursor->depth) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:225:                                $this->line .= $this->indentPad;
vendor/symfony/var-dumper/Dumper/CliDumper.php:228:                        $this->line .= '"""';
vendor/symfony/var-dumper/Dumper/CliDumper.php:230:                        $this->line .= '"';
vendor/symfony/var-dumper/Dumper/CliDumper.php:233:                        $this->line .= '…';
vendor/symfony/var-dumper/Dumper/CliDumper.php:240:                    $this->line .= '…'.$lineCut;
vendor/symfony/var-dumper/Dumper/CliDumper.php:245:                    $this->endValue($cursor);
vendor/symfony/var-dumper/Dumper/CliDumper.php:247:                    $this->dumpLine($cursor->depth);
vendor/symfony/var-dumper/Dumper/CliDumper.php:258:        $this->dumpKey($cursor);
vendor/symfony/var-dumper/Dumper/CliDumper.php:260:        if ($this->collapseNextHash) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:261:            $cursor->skipChildren = true;
vendor/symfony/var-dumper/Dumper/CliDumper.php:262:            $this->collapseNextHash = $hasChild = false;
vendor/symfony/var-dumper/Dumper/CliDumper.php:265:        $class = $this->utf8Encode($class);
vendor/symfony/var-dumper/Dumper/CliDumper.php:267:            $prefix = $class && 'stdClass' !== $class ? $this->style('note', $class).' {' : '{';
vendor/symfony/var-dumper/Dumper/CliDumper.php:269:            $prefix = $this->style('note', $class.' resource').($hasChild ? ' {' : ' ');
vendor/symfony/var-dumper/Dumper/CliDumper.php:271:            $prefix = $class && !(self::DUMP_LIGHT_ARRAY & $this->flags) ? $this->style('note', 'array:'.$class).' [' : '[';
vendor/symfony/var-dumper/Dumper/CliDumper.php:274:        if ($cursor->softRefCount || 0 < $cursor->softRefHandle) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:275:            $prefix .= $this->style('ref', (Cursor::HASH_RESOURCE === $type ? '@' : '#').(0 < $cursor->softRefHandle ? $cursor->softRefHandle : $cursor->softRefTo), array('count' => $cursor->softRefCount));
vendor/symfony/var-dumper/Dumper/CliDumper.php:276:        } elseif ($cursor->hardRefTo && !$cursor->refIndex && $class) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:277:            $prefix .= $this->style('ref', '&'.$cursor->hardRefTo, array('count' => $cursor->hardRefCount));
vendor/symfony/var-dumper/Dumper/CliDumper.php:279:            $prefix = substr($prefix, 0, -1);
vendor/symfony/var-dumper/Dumper/CliDumper.php:282:        $this->line .= $prefix;
vendor/symfony/var-dumper/Dumper/CliDumper.php:285:            $this->dumpLine($cursor->depth);
vendor/symfony/var-dumper/Dumper/CliDumper.php:294:        $this->dumpEllipsis($cursor, $hasChild, $cut);
vendor/symfony/var-dumper/Dumper/CliDumper.php:295:        $this->line .= Cursor::HASH_OBJECT === $type ? '}' : (Cursor::HASH_RESOURCE !== $type ? ']' : ($hasChild ? '}' : ''));
vendor/symfony/var-dumper/Dumper/CliDumper.php:296:        $this->endValue($cursor);
vendor/symfony/var-dumper/Dumper/CliDumper.php:309:            $this->line .= ' …';
vendor/symfony/var-dumper/Dumper/CliDumper.php:311:                $this->line .= $cut;
vendor/symfony/var-dumper/Dumper/CliDumper.php:314:                $this->dumpLine($cursor->depth + 1);
vendor/symfony/var-dumper/Dumper/CliDumper.php:326:        if (null !== $key = $cursor->hashKey) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:327:            if ($cursor->hashKeyIsBinary) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:328:                $key = $this->utf8Encode($key);
vendor/symfony/var-dumper/Dumper/CliDumper.php:330:            $attr = array('binary' => $cursor->hashKeyIsBinary);
vendor/symfony/var-dumper/Dumper/CliDumper.php:331:            $bin = $cursor->hashKeyIsBinary ? 'b' : '';
vendor/symfony/var-dumper/Dumper/CliDumper.php:333:            switch ($cursor->hashType) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:336:                    if (self::DUMP_LIGHT_ARRAY & $this->flags) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:343:                        $this->line .= $this->style($style, $key).' => ';
vendor/symfony/var-dumper/Dumper/CliDumper.php:345:                        $this->line .= $bin.'"'.$this->style($style, $key).'" => ';
vendor/symfony/var-dumper/Dumper/CliDumper.php:354:                        $this->line .= '+'.$bin.$this->style('public', $key).': ';
vendor/symfony/var-dumper/Dumper/CliDumper.php:361:                                $this->line .= '+'.$bin.'"'.$this->style('public', $key[1], $attr).'": ';
vendor/symfony/var-dumper/Dumper/CliDumper.php:367:                                    $attr += array('binary' => $cursor->hashKeyIsBinary);
vendor/symfony/var-dumper/Dumper/CliDumper.php:377:                                $bin = '-'.$bin;
vendor/symfony/var-dumper/Dumper/CliDumper.php:383:                                $this->collapseNextHash = true;
vendor/symfony/var-dumper/Dumper/CliDumper.php:385:                                $this->expandNextHash = true;
vendor/symfony/var-dumper/Dumper/CliDumper.php:389:                        $this->line .= $bin.$this->style($style, $key[1], $attr).(isset($attr['separator']) ? $attr['separator'] : ': ');
vendor/symfony/var-dumper/Dumper/CliDumper.php:392:                        $this->line .= '-'.$bin.'"'.$this->style('private', $key, array('class' => '')).'": ';
vendor/symfony/var-dumper/Dumper/CliDumper.php:397:            if ($cursor->hardRefTo) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:398:                $this->line .= $this->style('ref', '&'.($cursor->hardRefCount ? $cursor->hardRefTo : ''), array('count' => $cursor->hardRefCount)).' ';
vendor/symfony/var-dumper/Dumper/CliDumper.php:414:        if (null === $this->colors) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:415:            $this->colors = $this->supportsColors();
vendor/symfony/var-dumper/Dumper/CliDumper.php:418:        if (isset($attr['ellipsis'], $attr['ellipsis-type'])) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:419:            $prefix = substr($value, 0, -$attr['ellipsis']);
vendor/symfony/var-dumper/Dumper/CliDumper.php:420:            if ('cli' === PHP_SAPI && 'path' === $attr['ellipsis-type'] && isset($_SERVER[$pwd = '\\' === DIRECTORY_SEPARATOR ? 'CD' : 'PWD']) && 0 === strpos($prefix, $_SERVER[$pwd])) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:423:            if (!empty($attr['ellipsis-tail'])) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:424:                $prefix .= substr($value, -$attr['ellipsis'], $attr['ellipsis-tail']);
vendor/symfony/var-dumper/Dumper/CliDumper.php:425:                $value = substr($value, -$attr['ellipsis'] + $attr['ellipsis-tail']);
vendor/symfony/var-dumper/Dumper/CliDumper.php:427:                $value = substr($value, -$attr['ellipsis']);
vendor/symfony/var-dumper/Dumper/CliDumper.php:430:            return $this->style('default', $prefix).$this->style($style, $value);
vendor/symfony/var-dumper/Dumper/CliDumper.php:433:        $style = $this->styles[$style];
vendor/symfony/var-dumper/Dumper/CliDumper.php:436:        $startCchr = $this->colors ? "\033[m\033[{$this->styles['default']}m" : '';
vendor/symfony/var-dumper/Dumper/CliDumper.php:437:        $endCchr = $this->colors ? "\033[m\033[{$style}m" : '';
vendor/symfony/var-dumper/Dumper/CliDumper.php:446:        }, $value, -1, $cchrCount);
vendor/symfony/var-dumper/Dumper/CliDumper.php:448:        if ($this->colors) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:454:            if ($cchrCount && $endCchr === substr($value, -strlen($endCchr))) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:455:                $value = substr($value, 0, -strlen($endCchr));
vendor/symfony/var-dumper/Dumper/CliDumper.php:457:                $value .= "\033[{$this->styles['default']}m";
vendor/symfony/var-dumper/Dumper/CliDumper.php:469:        if ($this->outputStream !== static::$defaultOutput) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:470:            return $this->hasColorSupport($this->outputStream);
vendor/symfony/var-dumper/Dumper/CliDumper.php:478:            while (--$i > 0) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:481:                        case '--ansi':
vendor/symfony/var-dumper/Dumper/CliDumper.php:482:                        case '--color':
vendor/symfony/var-dumper/Dumper/CliDumper.php:483:                        case '--color=yes':
vendor/symfony/var-dumper/Dumper/CliDumper.php:484:                        case '--color=force':
vendor/symfony/var-dumper/Dumper/CliDumper.php:485:                        case '--color=always':
vendor/symfony/var-dumper/Dumper/CliDumper.php:488:                        case '--no-ansi':
vendor/symfony/var-dumper/Dumper/CliDumper.php:489:                        case '--color=no':
vendor/symfony/var-dumper/Dumper/CliDumper.php:490:                        case '--color=none':
vendor/symfony/var-dumper/Dumper/CliDumper.php:491:                        case '--color=never':
vendor/symfony/var-dumper/Dumper/CliDumper.php:498:        $h = stream_get_meta_data($this->outputStream) + array('wrapper_type' => null);
vendor/symfony/var-dumper/Dumper/CliDumper.php:499:        $h = 'Output' === $h['stream_type'] && 'PHP' === $h['wrapper_type'] ? fopen('php://stdout', 'wb') : $this->outputStream;
vendor/symfony/var-dumper/Dumper/CliDumper.php:501:        return static::$defaultColors = $this->hasColorSupport($h);
vendor/symfony/var-dumper/Dumper/CliDumper.php:509:        if ($this->colors) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:510:            $this->line = sprintf("\033[%sm%s\033[m", $this->styles['default'], $this->line);
vendor/symfony/var-dumper/Dumper/CliDumper.php:517:        if (Stub::ARRAY_INDEXED === $cursor->hashType || Stub::ARRAY_ASSOC === $cursor->hashType) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:518:            if (self::DUMP_TRAILING_COMMA & $this->flags && 0 < $cursor->depth) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:519:                $this->line .= ',';
vendor/symfony/var-dumper/Dumper/CliDumper.php:520:            } elseif (self::DUMP_COMMA_SEPARATOR & $this->flags && 1 < $cursor->hashLength - $cursor->hashIndex) {
vendor/symfony/var-dumper/Dumper/CliDumper.php:521:                $this->line .= ',';
vendor/symfony/var-dumper/Dumper/CliDumper.php:525:        $this->dumpLine($cursor->depth, true);
vendor/symfony/var-dumper/Dumper/CliDumper.php:532:     * https://github.com/composer/xdebug-handler
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:27:    protected $dumpPrefix = '<pre class=sf-dump id=%s data-indent-pad="%s">';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:29:    protected $dumpId = 'sf-dump';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:32:    protected $lastDepth = -1;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:34:        'default' => 'background-color:#18171B; color:#FF8400; line-height:1.2em; font:12px Menlo, Monaco, Consolas, monospace; word-wrap: break-word; white-space: pre-wrap; position:relative; z-index:99999; word-break: break-all',
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:35:        'num' => 'font-weight:bold; color:#1299DA',
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:36:        'const' => 'font-weight:bold',
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:37:        'str' => 'font-weight:bold; color:#56DB3A',
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:62:        $this->dumpId = 'sf-dump-'.mt_rand();
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:63:        $this->displayOptions['fileLinkFormat'] = ini_get('xdebug.file_link_format') ?: get_cfg_var('xdebug.file_link_format');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:71:        $this->headerIsDumped = false;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:72:        $this->styles = $styles + $this->styles;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:82:        $this->headerIsDumped = false;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:83:        $this->displayOptions = $displayOptions + $this->displayOptions;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:93:        $this->dumpHeader = $header;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:104:        $this->dumpPrefix = $prefix;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:105:        $this->dumpSuffix = $suffix;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:113:        $this->extraDisplayOptions = $extraDisplayOptions;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:115:        $this->dumpId = 'sf-dump-'.mt_rand();
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:125:        $this->headerIsDumped = null !== $this->outputStream ? $this->outputStream : $this->lineDumper;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:127:        if (null !== $this->dumpHeader) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:128:            return $this->dumpHeader;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:131:        $line = str_replace('{$options}', json_encode($this->displayOptions, JSON_FORCE_OBJECT), <<<'EOHTML'
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:137:    idRx = /\bsf-dump-\d+-ref[012]\w+\b/,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:158:    if (/\bsf-dump-compact\b/.test(oldClass)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:160:        newClass = 'sf-dump-expanded';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:161:    } else if (/\bsf-dump-expanded\b/.test(oldClass)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:163:        newClass = 'sf-dump-compact';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:170:        event.initEvent('sf-dump-expanded' === newClass ? 'sfbeforedumpexpand' : 'sfbeforedumpcollapse', true, false);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:176:    s.className = s.className.replace(/\bsf-dump-(compact|expanded)\b/, newClass);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:182:                if (-1 == a[s].className.indexOf(newClass)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:197:    if (/\bsf-dump-expanded\b/.test(oldClass)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:209:    if (/\bsf-dump-compact\b/.test(oldClass)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:219:    var a = root.querySelector('a.sf-dump-toggle');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:252:        if (!/\bsf-dump-highlight\b/.test(node.className)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:253:            node.className = node.className + ' sf-dump-highlight';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:257:    if (!/\bsf-dump-highlight-active\b/.test(activeNode.className)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:258:        activeNode.className = activeNode.className + ' sf-dump-highlight-active';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:263:    Array.from(root.querySelectorAll('.sf-dump-str, .sf-dump-key, .sf-dump-public, .sf-dump-protected, .sf-dump-private')).forEach(function (strNode) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:264:        strNode.className = strNode.className.replace(/\bsf-dump-highlight\b/, '');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:265:        strNode.className = strNode.className.replace(/\bsf-dump-highlight-active\b/, '');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:272:    var indentRx = new RegExp('^('+(root.getAttribute('data-indent-pad') || '  ').replace(rxEsc, '\\$1')+')+', 'm'),
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:314:        return "contains(concat(' ', normalize-space(@class), ' '), ' " + className +" ')";
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:326:                refStyle.innerHTML = 'pre.sf-dump .'+a[0]+'{background-color: #B729D9; color: #FFF !important; border-radius: 2px}';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:332:        if (/\bsf-dump-toggle\b/.test(a.className)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:347:                if (/\bsf-dump-compact\b/.test(r.className)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:362:        } else if (/\bsf-dump-str-toggle\b/.test(a.className)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:365:            e.className = e.className.replace(/\bsf-dump-str-(expand|collapse)\b/, a.parentNode.className);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:382:                a.className = 'sf-dump-ref';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:389:            a.className += ' sf-dump-toggle';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:392:            if ('sf-dump' != elt.parentNode.className) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:393:                x += elt.parentNode.getAttribute('data-depth')/1;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:395:            elt.setAttribute('data-depth', x);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:397:            elt.className = 'sf-dump-expanded';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:398:            if (className ? 'sf-dump-expanded' !== className : (x > options.maxDepth)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:401:        } else if (/\bsf-dump-ref\b/.test(elt.className) && (a = elt.getAttribute('href'))) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:415:                        elt.className = 'sf-dump-ref';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:417:                    elt.className += ' sf-dump-toggle';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:421:                        elt.className = 'sf-dump-ref';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:440:                this.idx = this.idx < (this.nodes.length - 1) ? this.idx + 1 : 0;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:448:                this.idx = this.idx > 0 ? this.idx - 1 : (this.nodes.length - 1);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:481:        search.className = 'sf-dump-search-wrapper sf-dump-search-hidden';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:483:            <input type="text" class="sf-dump-search-input">
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:484:            <span class="sf-dump-search-count">0 of 0<\/span>
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:485:            <button type="button" class="sf-dump-search-input-previous" tabindex="-1">
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:487:                    <path d="M1683 1331l-166 165q-19 19-45 19t-45-19l-531-531-531 531q-19 19-45 19t-45-19l-166-165q-19-19-19-45.5t19-45.5l742-741q19-19 45-19t45 19l742 741q19 19 19 45.5t-19 45.5z"\/>
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:490:            <button type="button" class="sf-dump-search-input-next" tabindex="-1">
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:492:                    <path d="M1683 808l-742 741q-19 19-45 19t-45-19l-742-741q-19-19-19-45.5t19-45.5l166-165q19-19 45-19t45 19l531 531 531-531q19-19 45-19t45 19l166 165q19 19 19 45.5t-19 45.5z"\/>
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:499:        var searchInput = search.querySelector('.sf-dump-search-input');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:500:        var counter = search.querySelector('.sf-dump-search-count');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:523:                    "sf-dump-str",
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:524:                    "sf-dump-key",
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:525:                    "sf-dump-public",
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:526:                    "sf-dump-protected",
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:527:                    "sf-dump-private",
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:538:        Array.from(search.querySelectorAll('.sf-dump-search-input-next, .sf-dump-search-input-previous')).forEach(function (btn) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:541:                -1 !== e.target.className.indexOf('next') ? state.next() : state.previous();
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:549:            var isSearchActive = !/\bsf-dump-search-hidden\b/.test(search.className);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:553:                search.className = search.className.replace(/\bsf-dump-search-hidden\b/, '');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:558:                    search.className += ' sf-dump-search-hidden';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:580:        elt = root.querySelectorAll('.sf-dump-str');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:591:            x = s.length - options.maxStringLength;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:595:                elt.className += ' sf-dump-str-collapse';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:596:                elt.innerHTML = '<span class=sf-dump-str-collapse>'+h+'<a class="sf-dump-ref sf-dump-str-toggle" title="Collapse"> ◀</a></span>'+
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:597:                    '<span class=sf-dump-str-expand>'+elt.innerHTML+'<a class="sf-dump-ref sf-dump-str-toggle" title="'+x+' remaining characters"> ▶</a></span>';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:606:pre.sf-dump {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:608:    white-space: pre;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:611:pre.sf-dump:after {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:618:pre.sf-dump span {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:621:pre.sf-dump .sf-dump-compact {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:624:pre.sf-dump abbr {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:625:    text-decoration: none;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:629:pre.sf-dump a {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:630:    text-decoration: none;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:636:pre.sf-dump .sf-dump-ellipsis {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:637:    display: inline-block;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:639:    text-overflow: ellipsis;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:640:    max-width: 5em;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:641:    white-space: nowrap;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:643:    vertical-align: top;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:645:pre.sf-dump .sf-dump-ellipsis+.sf-dump-ellipsis {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:646:    max-width: none;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:648:pre.sf-dump code {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:653:.sf-dump-str-collapse .sf-dump-str-collapse {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:656:.sf-dump-str-expand .sf-dump-str-expand {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:659:.sf-dump-public.sf-dump-highlight,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:660:.sf-dump-protected.sf-dump-highlight,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:661:.sf-dump-private.sf-dump-highlight,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:662:.sf-dump-str.sf-dump-highlight,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:663:.sf-dump-key.sf-dump-highlight {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:666:    border-radius: 3px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:668:.sf-dump-public.sf-dump-highlight-active,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:669:.sf-dump-protected.sf-dump-highlight-active,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:670:.sf-dump-private.sf-dump-highlight-active,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:671:.sf-dump-str.sf-dump-highlight-active,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:672:.sf-dump-key.sf-dump-highlight-active {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:675:    border-radius: 3px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:677:pre.sf-dump .sf-dump-search-hidden {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:680:pre.sf-dump .sf-dump-search-wrapper {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:682:    font-size: 0;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:683:    white-space: nowrap;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:684:    max-width: 100%;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:685:    text-align: right;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:687:pre.sf-dump .sf-dump-search-wrapper > * {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:688:    vertical-align: top;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:689:    box-sizing: border-box;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:691:    font-weight: normal;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:692:    border-radius: 0;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:697:pre.sf-dump .sf-dump-search-wrapper > input.sf-dump-search-input {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:700:    font-size: 12px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:701:    border-right: none;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:703:    border-top-left-radius: 3px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:704:    border-bottom-left-radius: 3px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:707:pre.sf-dump .sf-dump-search-wrapper > .sf-dump-search-input-next,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:708:pre.sf-dump .sf-dump-search-wrapper > .sf-dump-search-input-previous {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:711:    border-left: none;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:712:    font-size: 0;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:713:    line-height: 0;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:715:pre.sf-dump .sf-dump-search-wrapper > .sf-dump-search-input-next {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:716:    border-top-right-radius: 3px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:717:    border-bottom-right-radius: 3px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:719:pre.sf-dump .sf-dump-search-wrapper > .sf-dump-search-input-next > svg,
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:720:pre.sf-dump .sf-dump-search-wrapper > .sf-dump-search-input-previous > svg {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:721:    pointer-events: none;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:725:pre.sf-dump .sf-dump-search-wrapper > .sf-dump-search-count {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:726:    display: inline-block;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:729:    border-left: none;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:730:    line-height: 21px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:731:    font-size: 12px;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:736:        foreach ($this->styles as $class => $style) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:737:            $line .= 'pre.sf-dump'.('default' === $class ? ', pre.sf-dump' : '').' .sf-dump-'.$class.'{'.$style.'}';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:740:        return $this->dumpHeader = preg_replace('/\s+/', ' ', $line).'</style>'.$this->dumpHeader;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:750:        if ($cursor->skipChildren) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:751:            $cursor->skipChildren = false;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:752:            $eol = ' class=sf-dump-compact>';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:753:        } elseif ($this->expandNextHash) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:754:            $this->expandNextHash = false;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:755:            $eol = ' class=sf-dump-expanded>';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:761:            $this->line .= '<samp';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:762:            if ($cursor->refIndex) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:763:                $r = Cursor::HASH_OBJECT !== $type ? 1 - (Cursor::HASH_RESOURCE !== $type) : 2;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:764:                $r .= $r && 0 < $cursor->softRefHandle ? $cursor->softRefHandle : $cursor->refIndex;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:766:                $this->line .= sprintf(' id=%s-ref%s', $this->dumpId, $r);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:768:            $this->line .= $eol;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:769:            $this->dumpLine($cursor->depth);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:778:        $this->dumpEllipsis($cursor, $hasChild, $cut);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:780:            $this->line .= '</samp>';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:798:                return sprintf('<a class=sf-dump-ref>%s</a>', $v);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:800:            $r = ('#' !== $v[0] ? 1 - ('@' !== $v[0]) : 2).substr($value, 1);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:802:            return sprintf('<a class=sf-dump-ref href=#%s-ref%s title="%d occurrences">%s</a>', $this->dumpId, $r, 1 + $attr['count'], $v);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:810:            $style .= sprintf(' title="%d%s characters"', $attr['length'], $attr['binary'] ? ' binary or non-UTF-8' : '');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:812:            return sprintf('<abbr title="%s" class=sf-dump-%s>%s</abbr>', $v, $style, substr($v, $c + 1));
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:816:            $style .= sprintf(' title="%s"', esc($this->utf8Encode($attr['title'])));
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:818:            $style .= sprintf(' title="Private property defined in class:&#10;`%s`"', esc($this->utf8Encode($attr['class'])));
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:823:            $class = 'sf-dump-ellipsis';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:824:            if (isset($attr['ellipsis-type'])) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:825:                $class = sprintf('"%s sf-dump-ellipsis-%s"', $class, $attr['ellipsis-type']);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:827:            $label = esc(substr($value, -$attr['ellipsis']));
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:829:            $v = sprintf('<span class=%s>%s</span>', $class, substr($v, 0, -strlen($label)));
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:831:            if (!empty($attr['ellipsis-tail'])) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:832:                $tail = strlen(esc(substr($value, -$attr['ellipsis'], $attr['ellipsis-tail'])));
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:833:                $v .= sprintf('<span class=sf-dump-ellipsis>%s</span>%s', substr($label, 0, $tail), substr($label, $tail));
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:839:        $v = "<span class=sf-dump-{$style}>".preg_replace_callback(static::$controlCharsRx, function ($c) use ($map) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:840:            $s = '<span class=sf-dump-default>';
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:849:        if (isset($attr['file']) && $href = $this->getSourceLink($attr['file'], isset($attr['line']) ? $attr['line'] : 0)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:854:            $v = sprintf('<a href="%s"%s rel="noopener noreferrer">%s</a>', esc($this->utf8Encode($attr['href'])), $target, $v);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:868:        if (-1 === $this->lastDepth) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:869:            $this->line = sprintf($this->dumpPrefix, $this->dumpId, $this->indentPad).$this->line;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:871:        if ($this->headerIsDumped !== (null !== $this->outputStream ? $this->outputStream : $this->lineDumper)) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:872:            $this->line = $this->getDumpHeader().$this->line;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:875:        if (-1 === $depth) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:876:            $args = array('"'.$this->dumpId.'"');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:877:            if ($this->extraDisplayOptions) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:878:                $args[] = json_encode($this->extraDisplayOptions, JSON_FORCE_OBJECT);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:881:            $this->line .= sprintf(str_replace('"%s"', '%s', $this->dumpSuffix), implode(', ', $args));
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:883:        $this->lastDepth = $depth;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:885:        $this->line = mb_convert_encoding($this->line, 'HTML-ENTITIES', 'UTF-8');
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:887:        if (-1 === $depth) {
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:895:        $options = $this->extraDisplayOptions + $this->displayOptions;
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:898:            return is_string($fmt) ? strtr($fmt, array('%f' => $file, '%l' => $line)) : $fmt->format($file, $line);
vendor/symfony/var-dumper/Dumper/HtmlDumper.php:907:    return htmlspecialchars($str, ENT_QUOTES, 'UTF-8');
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:25:        $data = $this->cloneVar($values);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:28:        $this->assertInstanceOf(Data::class, $data);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:29:        $this->assertCount(count($values), $data);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:30:        $this->assertFalse(isset($data->{0}));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:31:        $this->assertFalse(isset($data[0]));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:34:            $this->assertTrue(isset($data->{$k}));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:35:            $this->assertTrue(isset($data[$k]));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:36:            $this->assertSame(gettype($values[$k]), $data->seek($k)->getType());
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:37:            $this->assertSame($values[$k], $data->seek($k)->getValue());
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:38:            $this->assertSame($values[$k], $data->{$k});
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:39:            $this->assertSame($values[$k], $data[$k]);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:40:            $this->assertSame((string) $values[$k], (string) $data->seek($k));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:42:            $clonedValues[$k] = $v->getValue();
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:45:        $this->assertSame($values, $clonedValues);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:50:        $data = $this->cloneVar(new \Exception('foo'));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:52:        $this->assertSame('Exception', $data->getType());
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:54:        $this->assertSame('foo', $data->message);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:55:        $this->assertSame('foo', $data->{Caster::PREFIX_PROTECTED.'message'});
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:57:        $this->assertSame('foo', $data['message']);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:58:        $this->assertSame('foo', $data[Caster::PREFIX_PROTECTED.'message']);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:60:        $this->assertStringMatchesFormat('Exception (count=%d)', (string) $data);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:66:        $data = $this->cloneVar($values);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:68:        $this->assertSame($values, $data->getValue(true));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:70:        $children = $data->getValue();
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:72:        $this->assertInternalType('array', $children);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:74:        $this->assertInstanceOf(Data::class, $children[0]);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:75:        $this->assertInstanceOf(Data::class, $children[1]);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:77:        $this->assertEquals($children[0], $data[0]);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:78:        $this->assertEquals($children[1], $data[1]);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:80:        $this->assertSame($values[0], $children[0]->getValue(true));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:81:        $this->assertSame($values[1], $children[1]->getValue(true));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:86:        $data = $this->cloneVar(array(new ClassStub('stdClass')));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:89:        $this->assertSame('string', $data->getType());
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:90:        $this->assertSame('stdClass', $data->getValue());
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:91:        $this->assertSame('stdClass', (string) $data);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:100:        $data = $this->cloneVar($values);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:102:        $this->assertSame(array(), $data[0]->getValue());
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:103:        $this->assertSame(array(), $data[1]->getValue());
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:104:        $this->assertEquals(array($data[2]->getValue()), $data[2]->getValue(true));
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:106:        $this->assertSame('array (count=3)', (string) $data);
vendor/symfony/var-dumper/Tests/Cloner/DataTest.php:113:        return $cloner->cloneVar($value);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:27:        $clone = $cloner->cloneVar($data);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:53:    [maxItemsPerDepth:Symfony\Component\VarDumper\Cloner\Data:private] => -1
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:54:    [useRefHandles:Symfony\Component\VarDumper\Cloner\Data:private] => -1
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:58:        $this->assertSame(sprintf($expected, PHP_INT_MAX), print_r($clone, true));
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:66:        $clone = $cloner->cloneVar($json);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:141:    [maxItemsPerDepth:Symfony\Component\VarDumper\Cloner\Data:private] => -1
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:142:    [useRefHandles:Symfony\Component\VarDumper\Cloner\Data:private] => -1
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:146:        $this->assertStringMatchesFormat($expected, print_r($clone, true));
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:190:        $cloner->setMinDepth(2);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:191:        $cloner->setMaxItems(5);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:192:        $cloner->setMaxString(20);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:193:        $clone = $cloner->cloneVar($data);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:309:    [maxItemsPerDepth:Symfony\Component\VarDumper\Cloner\Data:private] => -1
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:310:    [useRefHandles:Symfony\Component\VarDumper\Cloner\Data:private] => -1
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:314:        $this->assertStringMatchesFormat($expected, print_r($clone, true));
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:320:            $this->markTestSkipped('xdebug is active');
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:326:        $clone = $cloner->cloneVar($data);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:371:  int(-1)
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:373:  int(-1)
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:379:        $this->assertStringMatchesFormat(\PHP_VERSION_ID >= 70200 ? str_replace('"1"', '1', $expected) : $expected, ob_get_clean());
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:394:        $clone = $cloner->cloneVar($this);
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:430:    [maxItemsPerDepth:Symfony\Component\VarDumper\Cloner\Data:private] => -1
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:431:    [useRefHandles:Symfony\Component\VarDumper\Cloner\Data:private] => -1
vendor/symfony/var-dumper/Tests/Cloner/VarClonerTest.php:435:        $this->assertStringMatchesFormat($expected, print_r($clone, true));
vendor/symfony/var-dumper/Tests/Fixtures/dumb-var.php:13:$foo->bar = 'bar';
vendor/symfony/var-dumper/Tests/Fixtures/dumb-var.php:19:    'const' => 1.1, true, false, NAN, INF, -INF, PHP_INT_MAX,
vendor/symfony/var-dumper/Tests/Fixtures/dumb-var.php:25:    'line' => __LINE__ - 1,
vendor/symfony/var-dumper/Tests/Fixtures/dumb-var.php:38:$var["bin-key-\xE9"] = '';
vendor/symfony/var-dumper/Tests/Fixtures/Twig.php:13:        $this->parent = false;
vendor/symfony/var-dumper/Tests/Fixtures/Twig.php:14:        $this->blocks = array();
vendor/symfony/var-dumper/Tests/Fixtures/Twig.php:15:        $this->path = $path;
vendor/symfony/var-dumper/Tests/Fixtures/Twig.php:36:        return new Twig\Source("   foo bar\n     twig source\n\n", 'foo.twig', $this->path ?: __FILE__);
vendor/symfony/var-dumper/Tests/Fixtures/xml_reader.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:35:  aTime: %s-%s-%d %d:%d:%d
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:36:  mTime: %s-%s-%d %d:%d:%d
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:37:  cTime: %s-%s-%d %d:%d:%d
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:70:        $this->assertDumpMatchesFormat($dump, new \SplFileInfo($file));
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:76:        $var->setFlags(\SplFileObject::DROP_NEW_LINE | \SplFileObject::SKIP_EMPTY);
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:85:  aTime: %s-%s-%d %d:%d:%d
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:86:  mTime: %s-%s-%d %d:%d:%d
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:87:  cTime: %s-%s-%d %d:%d:%d
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:119:        $this->assertDumpMatchesFormat($dump, $var);
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:128:        $var->setIteratorMode($modeValue);
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:135:        $this->assertDumpMatchesFormat($dump, $var);
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:151:        $var->attach(new \stdClass());
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:152:        $var->rewind();
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:153:        $current = $var->current();
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:155:        $this->assertDumpMatchesFormat('%A', $var);
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:156:        $this->assertSame($current, $var->current());
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:162:        $var->attach(new \stdClass(), new \DateTime());
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:164:        $this->assertDumpMatchesFormat('%ADateTime%A', $var);
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:170:            $this->markTestSkipped('HHVM as different internal details.');
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:173:        $var->foo = 234;
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:186:        $this->assertDumpEquals($expected, $var);
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:192:            $this->markTestSkipped('HHVM as different internal details.');
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:198:  -foo: 123
vendor/symfony/var-dumper/Tests/Caster/SplCasterTest.php:206:        $this->assertDumpEquals($expected, $var);
vendor/symfony/var-dumper/Tests/Caster/XmlReaderCasterTest.php:29:        $this->reader = new \XmlReader();
vendor/symfony/var-dumper/Tests/Caster/XmlReaderCasterTest.php:30:        $this->reader->open(__DIR__.'/../Fixtures/xml_reader.xml');
vendor/symfony/var-dumper/Tests/Caster/XmlReaderCasterTest.php:35:        $this->reader->close();
vendor/symfony/var-dumper/Tests/Caster/XmlReaderCasterTest.php:40:        $this->reader->setParserProperty(\XMLReader::SUBST_ENTITIES, true);
vendor/symfony/var-dumper/Tests/Caster/XmlReaderCasterTest.php:53:        $this->assertDumpMatchesFormat($expectedDump, $this->reader);
vendor/symfony/var-dumper/Tests/Caster/XmlReaderCasterTest.php:61:        while ($seek--) {
vendor/symfony/var-dumper/Tests/Caster/XmlReaderCasterTest.php:62:            $this->reader->read();
vendor/symfony/var-dumper/Tests/Caster/XmlReaderCasterTest.php:64:        $this->assertDumpMatchesFormat($expectedDump, $this->reader);
vendor/symfony/var-dumper/Tests/Caster/CasterTest.php:41:            $filteredArray = Caster::filter($this->referenceArray, $filter);
vendor/symfony/var-dumper/Tests/Caster/CasterTest.php:43:            $filteredArray = Caster::filter($this->referenceArray, $filter, $listedProperties);
vendor/symfony/var-dumper/Tests/Caster/CasterTest.php:46:        $this->assertSame($expectedDiff, array_diff_assoc($this->referenceArray, $filteredArray));
vendor/symfony/var-dumper/Tests/Caster/CasterTest.php:129:                $this->referenceArray,
vendor/symfony/var-dumper/Tests/Caster/CasterTest.php:161:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Caster/CasterTest.php:164:  -foo: "foo"
vendor/symfony/var-dumper/Tests/Caster/CasterTest.php:172:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Caster/CasterTest.php:175:  -foo: "foo"
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:40:        $e = $this->getTestException('foo', $ref);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:55:    Symfony\Component\VarDumper\Tests\Caster\ExceptionCasterTest->testDefaultSettings() {}
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:59:        $this->assertDumpMatchesFormat($expectedDump, $e);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:60:        $this->assertSame(array('foo'), $ref);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:65:        $e = $this->getTestException(2);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:75:  Symfony\Component\VarDumper\Tests\Caster\ExceptionCasterTest->testSeek() {}
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:79:        $this->assertStringMatchesFormat($expectedDump, $this->getDump($e, 'trace'));
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:84:        $e = $this->getTestException(1);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:100:    Symfony\Component\VarDumper\Tests\Caster\ExceptionCasterTest->testNoArgs() {}
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:104:        $this->assertDumpMatchesFormat($expectedDump, $e);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:109:        $e = $this->getTestException(1);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:110:        ExceptionCaster::$srcContext = -1;
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:124:        $this->assertDumpMatchesFormat($expectedDump, $e);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:130:            $this->markTestSkipped('A custom file_link_format is defined.');
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:133:        $e = $this->getTestException(1);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:134:        ExceptionCaster::$srcContext = -1;
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:137:        $cloner->setMaxItems(1);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:139:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:140:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:141:        $dump = $dumper->dump($cloner->cloneVar($e)->withRefHandles(false), true);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:144:<foo></foo><bar><span class=sf-dump-note>Exception</span> {<samp>
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:145:  #<span class=sf-dump-protected title="Protected property">message</span>: "<span class=sf-dump-str>1</span>"
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:146:  #<span class=sf-dump-protected title="Protected property">code</span>: <span class=sf-dump-num>0</span>
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:147:  #<span class=sf-dump-protected title="Protected property">file</span>: "<span class=sf-dump-str title="%sExceptionCasterTest.php
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:148:%d characters"><span class="sf-dump-ellipsis sf-dump-ellipsis-path">%s%eVarDumper</span><span class=sf-dump-ellipsis>%e</span>Tests%eCaster%eExceptionCasterTest.php</span>"
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:149:  #<span class=sf-dump-protected title="Protected property">line</span>: <span class=sf-dump-num>28</span>
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:150:  <span class=sf-dump-meta>trace</span>: {<samp>
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:151:    <span class=sf-dump-meta title="%sExceptionCasterTest.php
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:152:Stack level %d."><span class="sf-dump-ellipsis sf-dump-ellipsis-path">%s%eVarDumper</span><span class=sf-dump-ellipsis>%e</span>Tests%eCaster%eExceptionCasterTest.php</span>:<span class=sf-dump-num>28</span>
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:159:        $this->assertStringMatchesFormat($expectedDump, $dump);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:212:        $this->assertDumpMatchesFormat($expectedDump, $f);
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:217:        $e = $this->getTestException('foo');
vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:228:        $this->assertDumpMatchesFormat($expectedDump, $e, Caster::EXCLUDE_VERBOSE);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:32:        if ((defined('HHVM_VERSION_ID') || PHP_VERSION_ID <= 50509) && preg_match('/[-+]\d{2}:\d{2}/', $timezone)) {
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:33:            $this->markTestSkipped('DateTimeZone GMT offsets are supported since 5.5.10. See https://github.com/facebook/hhvm/issues/5875 for HHVM.');
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:44:        $this->assertDumpEquals($xDump, $date);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:52:        if ((defined('HHVM_VERSION_ID') || PHP_VERSION_ID <= 50509) && preg_match('/[-+]\d{2}:\d{2}/', $timezone)) {
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:53:            $this->markTestSkipped('DateTimeZone GMT offsets are supported since 5.5.10. See https://github.com/facebook/hhvm/issues/5875 for HHVM.');
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:66:        $this->assertDumpEquals($xDump, $cast);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:81:        $this->assertDumpMatchesFormat($xDump, $cast["\0~\0date"]);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:87:            array('2017-04-30 00:00:00.000000', 'Europe/Zurich', '2017-04-30 00:00:00.0 Europe/Zurich (+02:00)', 1493503200, 'Sunday, April 30, 2017%Afrom now%ADST On'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:88:            array('2017-12-31 00:00:00.000000', 'Europe/Zurich', '2017-12-31 00:00:00.0 Europe/Zurich (+01:00)', 1514674800, 'Sunday, December 31, 2017%Afrom now%ADST Off'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:89:            array('2017-04-30 00:00:00.000000', '+02:00', '2017-04-30 00:00:00.0 +02:00', 1493503200, 'Sunday, April 30, 2017%Afrom now'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:91:            array('2017-04-30 00:00:00.100000', '+00:00', '2017-04-30 00:00:00.100 +00:00', 1493510400, 'Sunday, April 30, 2017%Afrom now'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:92:            array('2017-04-30 00:00:00.120000', '+00:00', '2017-04-30 00:00:00.120 +00:00', 1493510400, 'Sunday, April 30, 2017%Afrom now'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:93:            array('2017-04-30 00:00:00.123000', '+00:00', '2017-04-30 00:00:00.123 +00:00', 1493510400, 'Sunday, April 30, 2017%Afrom now'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:94:            array('2017-04-30 00:00:00.123400', '+00:00', '2017-04-30 00:00:00.123400 +00:00', 1493510400, 'Sunday, April 30, 2017%Afrom now'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:95:            array('2017-04-30 00:00:00.123450', '+00:00', '2017-04-30 00:00:00.123450 +00:00', 1493510400, 'Sunday, April 30, 2017%Afrom now'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:96:            array('2017-04-30 00:00:00.123456', '+00:00', '2017-04-30 00:00:00.123456 +00:00', 1493510400, 'Sunday, April 30, 2017%Afrom now'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:106:            $this->markTestSkipped('Skipped on 7.2 before rc4 because of php bug #75354.');
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:109:        $interval = $this->createInterval($intervalSpec, $ms, $invert);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:117:        $this->assertDumpMatchesFormat($xDump, $interval);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:126:            $this->markTestSkipped('Skipped on 7.2 before rc4 because of php bug #75354.');
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:129:        $interval = $this->createInterval($intervalSpec, $ms, $invert);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:137:        $this->assertDumpEquals($xDump, $interval, Caster::EXCLUDE_VERBOSE);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:146:            $this->markTestSkipped('Skipped on 7.2 before rc4 because of php bug #75354.');
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:149:        $interval = $this->createInterval($intervalSpec, $ms, $invert);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:160:        $this->assertDumpEquals($xDump, $cast);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:179:        $this->assertDumpMatchesFormat($xDump, $cast["\0~\0interval"]);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:185:        $ms = ($withMs = \PHP_VERSION_ID >= 70100 && isset($i->f)) ? '.0' : '';
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:203:            array('PT0S', 0.1, 1, $withMs ? '- 00:00:00.100' : '0s', '%is'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:204:            array('PT1S', 0, 1, '- 00:00:01'.$ms, '%is'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:205:            array('PT2M', 0, 1, '- 00:02:00'.$ms, '%is'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:206:            array('PT3H', 0, 1, '- 03:00:00'.$ms, '%ss'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:207:            array('P4D', 0, 1, '- 4d', '%ss'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:208:            array('P5M', 0, 1, '- 5m', null),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:209:            array('P6Y', 0, 1, '- 6y', null),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:210:            array('P1Y2M3DT4H5M6S', 0, 1, '- 1y 2m 3d 04:05:06'.$ms, null),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:211:            array('PT1M60S', 0, 1, '- 00:02:00'.$ms, null),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:212:            array('PT1H60M', 0, 1, '- 02:00:00'.$ms, null),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:213:            array('P1DT24H', 0, 1, '- 2d', null),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:214:            array('P1M32D', 0, 1, '- 1m 32d', null),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:224:            $this->markTestSkipped('DateTimeZone GMT offsets are supported since 5.5.10. See https://github.com/facebook/hhvm/issues/5875 for HHVM.');
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:235:        $this->assertDumpMatchesFormat($xDump, $timezone);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:244:            $this->markTestSkipped('DateTimeZone GMT offsets are supported since 5.5.10. See https://github.com/facebook/hhvm/issues/5875 for HHVM.');
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:255:        $this->assertDumpMatchesFormat($xDump, $timezone, Caster::EXCLUDE_VERBOSE);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:264:            $this->markTestSkipped('DateTimeZone GMT offsets are supported since 5.5.10. See https://github.com/facebook/hhvm/issues/5875 for HHVM.');
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:278:        $this->assertDumpMatchesFormat($xDump, $cast);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:293:        $this->assertDumpMatchesFormat($xDump, $cast["\0~\0timezone"]);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:302:            array('-12:00', '-12:00', ''),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:329:            $this->markTestSkipped();
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:340:        $this->assertDumpMatchesFormat($xDump, $p);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:349:            $this->markTestSkipped();
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:363:        $this->assertDumpEquals($xDump, $cast);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:378:        $this->assertDumpMatchesFormat($xDump, $cast["\0~\0period"]);
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:384:        $ms = \PHP_VERSION_ID >= 70100 && isset($i->f) ? '.0' : '';
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:387:            array('2017-01-01', 'P1D', '2017-01-03', 0, 'every + 1d, from 2017-01-01 00:00:00.0 (included) to 2017-01-03 00:00:00.0', '1) 2017-01-01%a2) 2017-01-02'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:388:            array('2017-01-01', 'P1D', 1, 0, 'every + 1d, from 2017-01-01 00:00:00.0 (included) recurring 2 time/s', '1) 2017-01-01%a2) 2017-01-02'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:390:            array('2017-01-01', 'P1D', '2017-01-04', 0, 'every + 1d, from 2017-01-01 00:00:00.0 (included) to 2017-01-04 00:00:00.0', '1) 2017-01-01%a2) 2017-01-02%a3) 2017-01-03'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:391:            array('2017-01-01', 'P1D', 2, 0, 'every + 1d, from 2017-01-01 00:00:00.0 (included) recurring 3 time/s', '1) 2017-01-01%a2) 2017-01-02%a3) 2017-01-03'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:393:            array('2017-01-01', 'P1D', '2017-01-05', 0, 'every + 1d, from 2017-01-01 00:00:00.0 (included) to 2017-01-05 00:00:00.0', '1) 2017-01-01%a2) 2017-01-02%a1 more'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:394:            array('2017-01-01', 'P1D', 3, 0, 'every + 1d, from 2017-01-01 00:00:00.0 (included) recurring 4 time/s', '1) 2017-01-01%a2) 2017-01-02%a3) 2017-01-03%a1 more'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:396:            array('2017-01-01', 'P1D', '2017-01-21', 0, 'every + 1d, from 2017-01-01 00:00:00.0 (included) to 2017-01-21 00:00:00.0', '1) 2017-01-01%a17 more'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:397:            array('2017-01-01', 'P1D', 19, 0, 'every + 1d, from 2017-01-01 00:00:00.0 (included) recurring 20 time/s', '1) 2017-01-01%a17 more'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:399:            array('2017-01-01 01:00:00', 'P1D', '2017-01-03 01:00:00', 0, 'every + 1d, from 2017-01-01 01:00:00.0 (included) to 2017-01-03 01:00:00.0', '1) 2017-01-01 01:00:00.0%a2) 2017-01-02 01:00:00.0'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:400:            array('2017-01-01 01:00:00', 'P1D', 1, 0, 'every + 1d, from 2017-01-01 01:00:00.0 (included) recurring 2 time/s', '1) 2017-01-01 01:00:00.0%a2) 2017-01-02 01:00:00.0'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:402:            array('2017-01-01', 'P1DT1H', '2017-01-03', 0, "every + 1d 01:00:00$ms, from 2017-01-01 00:00:00.0 (included) to 2017-01-03 00:00:00.0", '1) 2017-01-01 00:00:00.0%a2) 2017-01-02 01:00:00.0'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:403:            array('2017-01-01', 'P1DT1H', 1, 0, "every + 1d 01:00:00$ms, from 2017-01-01 00:00:00.0 (included) recurring 2 time/s", '1) 2017-01-01 00:00:00.0%a2) 2017-01-02 01:00:00.0'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:405:            array('2017-01-01', 'P1D', '2017-01-04', \DatePeriod::EXCLUDE_START_DATE, 'every + 1d, from 2017-01-01 00:00:00.0 (excluded) to 2017-01-04 00:00:00.0', '1) 2017-01-02%a2) 2017-01-03'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:406:            array('2017-01-01', 'P1D', 2, \DatePeriod::EXCLUDE_START_DATE, 'every + 1d, from 2017-01-01 00:00:00.0 (excluded) recurring 2 time/s', '1) 2017-01-02%a2) 2017-01-03'),
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:419:        if (\PHP_VERSION_ID >= 70100 && isset($interval->f)) {
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:420:            $interval->f = $ms;
vendor/symfony/var-dumper/Tests/Caster/DateCasterTest.php:422:        $interval->invert = $invert;
vendor/symfony/var-dumper/Tests/Caster/RedisCasterTest.php:44:        $this->assertDumpMatchesFormat($xCast, $redis);
vendor/symfony/var-dumper/Tests/Caster/RedisCasterTest.php:50:        if (!@$redis->connect('127.0.0.1')) {
vendor/symfony/var-dumper/Tests/Caster/RedisCasterTest.php:82:        $this->assertDumpMatchesFormat($xCast, $redis);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:39:        $this->assertDumpMatchesFormat($expectedDump, $args);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:57:        $this->assertDumpMatchesFormat($expectedDump, $args);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:72:        $this->assertDumpMatchesFormat($expectedDump, $args);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:87:        $this->assertDumpMatchesFormat($expectedDump, $args);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:96:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:97:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:98:        $dumper->setDisplayOptions(array('fileLinkFormat' => '%f:%l'));
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:99:        $dump = $dumper->dump($cloner->cloneVar($var), true);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:102:<foo></foo><bar><span class=sf-dump-note>array:1</span> [<samp>
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:103:  <span class=sf-dump-index>0</span> => "<a href="%sStubCasterTest.php:0" rel="noopener noreferrer"><span class=sf-dump-str title="55 characters">Symfony\Component\VarDumper\Tests\Caster\StubCasterTest</span></a>"
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:108:        $this->assertStringMatchesFormat($expectedDump, $dump);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:117:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:118:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:119:        $dumper->setDisplayOptions(array('fileLinkFormat' => '%f:%l'));
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:120:        $dump = $dumper->dump($cloner->cloneVar($var), true);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:123:<foo></foo><bar><span class=sf-dump-note>array:1</span> [<samp>
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:124:  <span class=sf-dump-index>0</span> => "<a href="http://example.com" target="_blank" rel="noopener noreferrer"><span class=sf-dump-str title="11 characters">example.com</span></a>"
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:129:        $this->assertStringMatchesFormat($expectedDump, $dump);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:138:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:139:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:140:        $dump = $dumper->dump($cloner->cloneVar($var), true, array('fileLinkFormat' => '%f:%l'));
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:143:<foo></foo><bar><span class=sf-dump-note>array:1</span> [<samp>
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:144:  <span class=sf-dump-index>0</span> => "<a href="%sFooInterface.php:10" rel="noopener noreferrer"><span class=sf-dump-str title="5 characters">hello</span></a>"
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:149:        $this->assertStringMatchesFormat($expectedDump, $dump);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:158:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:159:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:160:        $dump = $dumper->dump($cloner->cloneVar($var), true);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:163:<foo></foo><bar><span class=sf-dump-note>array:1</span> [<samp>
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:164:  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="Symfony\Component\VarDumper\Tests\Caster\NotExisting
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:165:52 characters"><span class="sf-dump-ellipsis sf-dump-ellipsis-class">Symfony\Component\VarDumper\Tests\Caster</span><span class=sf-dump-ellipsis>\</span>NotExisting</span>"
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:170:        $this->assertStringMatchesFormat($expectedDump, $dump);
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:179:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:180:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:181:        $dump = $dumper->dump($cloner->cloneVar($var), true, array('fileLinkFormat' => '%f:%l'));
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:184:<foo></foo><bar><span class=sf-dump-note>array:1</span> [<samp>
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:185:  <span class=sf-dump-index>0</span> => "<a href="%sFooInterface.php:5" rel="noopener noreferrer"><span class=sf-dump-str title="5 characters">hello</span></a>"
vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:190:        $this->assertStringMatchesFormat($expectedDump, $dump);
vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php:32:        $pdo->setAttribute(\PDO::ATTR_STATEMENT_CLASS, array('PDOStatement', array($pdo)));
vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php:36:        $this->assertInstanceOf('Symfony\Component\VarDumper\Caster\EnumStub', $cast["\0~\0attributes"]);
vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php:38:        $attr = $cast["\0~\0attributes"] = $cast["\0~\0attributes"]->value;
vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php:39:        $this->assertInstanceOf('Symfony\Component\VarDumper\Caster\ConstStub', $attr['CASE']);
vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php:40:        $this->assertSame('NATURAL', $attr['CASE']->class);
vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php:41:        $this->assertSame('BOTH', $attr['DEFAULT_FETCH_MODE']->class);
vendor/symfony/var-dumper/Tests/Caster/PdoCasterTest.php:62:        $this->assertDumpMatchesFormat($xDump, $cast);
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:31:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:70:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:99:        $this->assertDumpEquals($expectedDump, $var, Caster::EXCLUDE_VERBOSE);
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:106:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:127:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:145:        $line = __LINE__ - 1;
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:147:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:167:            $this->markTestSkipped('xdebug is active');
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:171:        $generator = $generator->baz();
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:177:    Symfony\Component\VarDumper\Tests\Fixtures\GeneratorDemo->baz() {
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:189:        $this->assertDumpMatchesFormat($expectedDump, $generator);
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:226:        $this->assertDumpMatchesFormat($expectedDump, array($r, $r->getExecutingGenerator()));
vendor/symfony/var-dumper/Tests/Caster/ReflectionCasterTest.php:236:        $this->assertDumpMatchesFormat($expectedDump, $generator);
vendor/symfony/var-dumper/Tests/Test/VarDumperTestTraitTest.php:39:        $this->assertDumpEquals($expected, $data);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:26:            $this->markTestSkipped('A custom file_link_format is defined.');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:29:        require __DIR__.'/../Fixtures/dumb-var.php';
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:32:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:33:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:35:        $cloner->addCasters(array(
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:42:        $data = $cloner->cloneVar($var);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:45:        $dumper->dump($data);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:48:        $var['file'] = htmlspecialchars($var['file'], ENT_QUOTES, 'UTF-8');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:50:        preg_match('/sf-dump-\d+/', $out, $dumpId);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:54:        $r = defined('HHVM_VERSION') ? '' : '<a class=sf-dump-ref>#%d</a>';
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:55:        $this->assertStringMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:57:<foo></foo><bar><span class=sf-dump-note>array:24</span> [<samp>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:58:  "<span class=sf-dump-key>number</span>" => <span class=sf-dump-num>1</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:59:  <span class=sf-dump-key>0</span> => <a class=sf-dump-ref href=#{$dumpId}-ref01 title="2 occurrences">&amp;1</a> <span class=sf-dump-const>null</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:60:  "<span class=sf-dump-key>const</span>" => <span class=sf-dump-num>1.1</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:61:  <span class=sf-dump-key>1</span> => <span class=sf-dump-const>true</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:62:  <span class=sf-dump-key>2</span> => <span class=sf-dump-const>false</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:63:  <span class=sf-dump-key>3</span> => <span class=sf-dump-num>NAN</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:64:  <span class=sf-dump-key>4</span> => <span class=sf-dump-num>INF</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:65:  <span class=sf-dump-key>5</span> => <span class=sf-dump-num>-INF</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:66:  <span class=sf-dump-key>6</span> => <span class=sf-dump-num>{$intMax}</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:67:  "<span class=sf-dump-key>str</span>" => "<span class=sf-dump-str title="5 characters">d&%s;j&%s;<span class=sf-dump-default>\\n</span></span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:68:  <span class=sf-dump-key>7</span> => b"<span class=sf-dump-str title="2 binary or non-UTF-8 characters">&%s;<span class=sf-dump-default>\\x00</span></span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:69:  "<span class=sf-dump-key>[]</span>" => []
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:70:  "<span class=sf-dump-key>res</span>" => <span class=sf-dump-note>stream resource</span> <a class=sf-dump-ref>@{$res}</a><samp>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:71:%A  <span class=sf-dump-meta>wrapper_type</span>: "<span class=sf-dump-str title="9 characters">plainfile</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:72:    <span class=sf-dump-meta>stream_type</span>: "<span class=sf-dump-str title="5 characters">STDIO</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:73:    <span class=sf-dump-meta>mode</span>: "<span class=sf-dump-str>r</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:74:    <span class=sf-dump-meta>unread_bytes</span>: <span class=sf-dump-num>0</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:75:    <span class=sf-dump-meta>seekable</span>: <span class=sf-dump-const>true</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:76:%A  <span class=sf-dump-meta>options</span>: []
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:78:  "<span class=sf-dump-key>obj</span>" => <abbr title="Symfony\Component\VarDumper\Tests\Fixture\DumbFoo" class=sf-dump-note>DumbFoo</abbr> {<a class=sf-dump-ref href=#{$dumpId}-ref2%d title="2 occurrences">#%d</a><samp id={$dumpId}-ref2%d>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:79:    +<span class=sf-dump-public title="Public property">foo</span>: "<span class=sf-dump-str title="3 characters">foo</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:80:    +"<span class=sf-dump-public title="Runtime added dynamic property">bar</span>": "<span class=sf-dump-str title="3 characters">bar</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:82:  "<span class=sf-dump-key>closure</span>" => <span class=sf-dump-note>Closure</span> {{$r}<samp>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:83:    <span class=sf-dump-meta>class</span>: "<span class=sf-dump-str title="Symfony\Component\VarDumper\Tests\Dumper\HtmlDumperTest
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:84:55 characters"><span class="sf-dump-ellipsis sf-dump-ellipsis-class">Symfony\Component\VarDumper\Tests\Dumper</span><span class=sf-dump-ellipsis>\</span>HtmlDumperTest</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:85:    <span class=sf-dump-meta>this</span>: <abbr title="Symfony\Component\VarDumper\Tests\Dumper\HtmlDumperTest" class=sf-dump-note>HtmlDumperTest</abbr> {{$r} &%s;}
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:86:    <span class=sf-dump-meta>parameters</span>: {<samp>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:87:      <span class=sf-dump-meta>\$a</span>: {}
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:88:      <span class=sf-dump-meta>&amp;\$b</span>: {<samp>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:89:        <span class=sf-dump-meta>typeHint</span>: "<span class=sf-dump-str title="3 characters">PDO</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:90:        <span class=sf-dump-meta>default</span>: <span class=sf-dump-const>null</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:93:    <span class=sf-dump-meta>file</span>: "<span class=sf-dump-str title="{$var['file']}
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:94:%d characters"><span class="sf-dump-ellipsis sf-dump-ellipsis-path">%s%eVarDumper</span><span class=sf-dump-ellipsis>%e</span>Tests%eFixtures%edumb-var.php</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:95:    <span class=sf-dump-meta>line</span>: "<span class=sf-dump-str title="%d characters">{$var['line']} to {$var['line']}</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:97:  "<span class=sf-dump-key>line</span>" => <span class=sf-dump-num>{$var['line']}</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:98:  "<span class=sf-dump-key>nobj</span>" => <span class=sf-dump-note>array:1</span> [<samp>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:99:    <span class=sf-dump-index>0</span> => <a class=sf-dump-ref href=#{$dumpId}-ref03 title="2 occurrences">&amp;3</a> {<a class=sf-dump-ref href=#{$dumpId}-ref2%d title="3 occurrences">#%d</a>}
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:101:  "<span class=sf-dump-key>recurs</span>" => <a class=sf-dump-ref href=#{$dumpId}-ref04 title="2 occurrences">&amp;4</a> <span class=sf-dump-note>array:1</span> [<samp id={$dumpId}-ref04>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:102:    <span class=sf-dump-index>0</span> => <a class=sf-dump-ref href=#{$dumpId}-ref04 title="2 occurrences">&amp;4</a> <span class=sf-dump-note>array:1</span> [<a class=sf-dump-ref href=#{$dumpId}-ref04 title="2 occurrences">&amp;4</a>]
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:104:  <span class=sf-dump-key>8</span> => <a class=sf-dump-ref href=#{$dumpId}-ref01 title="2 occurrences">&amp;1</a> <span class=sf-dump-const>null</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:105:  "<span class=sf-dump-key>sobj</span>" => <abbr title="Symfony\Component\VarDumper\Tests\Fixture\DumbFoo" class=sf-dump-note>DumbFoo</abbr> {<a class=sf-dump-ref href=#{$dumpId}-ref2%d title="2 occurrences">#%d</a>}
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:106:  "<span class=sf-dump-key>snobj</span>" => <a class=sf-dump-ref href=#{$dumpId}-ref03 title="2 occurrences">&amp;3</a> {<a class=sf-dump-ref href=#{$dumpId}-ref2%d title="3 occurrences">#%d</a>}
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:107:  "<span class=sf-dump-key>snobj2</span>" => {<a class=sf-dump-ref href=#{$dumpId}-ref2%d title="3 occurrences">#%d</a>}
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:108:  "<span class=sf-dump-key>file</span>" => "<span class=sf-dump-str title="%d characters">{$var['file']}</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:109:  b"<span class=sf-dump-key>bin-key-&%s;</span>" => ""
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:122:        $var = mb_convert_encoding('Словарь', 'CP1251', 'UTF-8');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:125:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:126:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:129:        $data = $cloner->cloneVar($var);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:130:        $out = $dumper->dump($data, true);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:132:        $this->assertStringMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:134:<foo></foo><bar>b"<span class=sf-dump-str title="7 binary or non-UTF-8 characters">&#1057;&#1083;&#1086;&#1074;&#1072;&#1088;&#1100;</span>"
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:148:        $dumper->setDumpHeader('<foo></foo>');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:149:        $dumper->setDumpBoundaries('<bar>', '</bar>');
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:152:        $dumper->dump($cloner->cloneVar(123), $out);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:153:        $dumper->dump($cloner->cloneVar(456), $out);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:155:        $out = stream_get_contents($out, -1, 0);
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:157:        $this->assertSame(<<<'EOTXT'
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:158:<foo></foo><bar><span class=sf-dump-num>123</span>
vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:160:<bar><span class=sf-dump-num>456</span>
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:30:        require __DIR__.'/../Fixtures/dumb-var.php';
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:33:        $dumper->setColors(false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:35:        $cloner->addCasters(array(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:42:        $data = $cloner->cloneVar($var);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:45:        $dumper->dump($data);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:52:        $this->assertStringMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:62:  5 => -INF
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:89:    file: "%s%eTests%eFixtures%edumb-var.php"
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:104:  b"bin-key-é" => ""
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:119:        $dumper->setColors(false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:128:        $dump = $dumper->dump($cloner->cloneVar($var), true);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:130:        $this->assertSame($expected, $dump);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:136:        $dumper->setColors(false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:141:        $dump = $dumper->dump($cloner->cloneVar($ex)->withRefHandles(false), true);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:143:        $this->assertStringMatchesFormat(<<<'EOTXT'
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:211:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:234:            $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:247:            $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:265:        $var->{1} = 2;
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:268:            $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:278:            $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:294:            $this->markTestSkipped();
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:301:        $dumper->setColors(false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:303:        $data = $cloner->cloneVar($var);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:306:        $dumper->dump($data);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:310:        $this->assertStringMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:330:        $this->assertDumpEquals(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:363:        $dumper->setColors(false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:365:        $cloner->addCasters(array(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:372:        $cloner->addCasters(array(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:375:                    $twig->render(array());
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:377:                    throw $e->getPrevious();
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:383:        $data = $cloner->cloneVar($out);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:384:        $dumper->dump($data, $out);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:385:        $out = stream_get_contents($out, -1, 0);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:388:        $this->assertStringMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:423:        $var->bar = &$var->foo;
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:426:        $dumper->setColors(false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:429:        $data = $cloner->cloneVar($var);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:430:        $out = $dumper->dump($data, true);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:433:        $this->assertStringMatchesFormat(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:453:        $var = $this->getSpecialVars();
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:455:        $this->assertDumpEquals(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:482:        $var = $this->getSpecialVars();
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:491:        $dumper->setColors(false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:495:        $refl->setAccessible(true);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:496:        $refl->setValue($cloner, false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:498:        $data = $cloner->cloneVar($var);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:499:        $dumper->dump($data);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:501:        $this->assertSame(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:525:            $this->markTestSkipped('PHP 5.6 fixed refs counting');
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:528:        $var = $this->getSpecialVars();
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:532:        $dumper->setColors(false);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:535:        $data = $cloner->cloneVar($var)->withMaxDepth(3);
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:537:        $dumper->dump($data, function ($line, $depth) use (&$out) {
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:543:        $this->assertSame(
vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:565:        $this->assertDumpMatchesFormat(
vendor/symfony/var-dumper/LICENSE:1:Copyright (c) 2014-2018 Fabien Potencier
vendor/symfony/var-dumper/CHANGELOG.md:5:-----
vendor/symfony/var-dumper/CHANGELOG.md:11:-----
vendor/jakub-onderka/php-console-color/composer.json:2:    "name": "jakub-onderka/php-console-color",
vendor/jakub-onderka/php-console-color/composer.json:3:    "license": "BSD-2-Clause",
vendor/jakub-onderka/php-console-color/composer.json:12:        "psr-0": {"JakubOnderka\\PhpConsoleColor": "src/"}
vendor/jakub-onderka/php-console-color/composer.json:17:    "require-dev": {
vendor/jakub-onderka/php-console-color/composer.json:19:        "jakub-onderka/php-parallel-lint": "0.*",
vendor/jakub-onderka/php-console-color/composer.json:20:        "jakub-onderka/php-var-dump-check": "0.*",
vendor/jakub-onderka/php-console-color/composer.json:22:        "jakub-onderka/php-code-style": "1.0"
vendor/jakub-onderka/php-console-color/build.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/jakub-onderka/php-console-color/build.xml:3:    <!-- Set executables according to OS -->
vendor/jakub-onderka/php-console-color/build.xml:12:    <condition property="parallel-lint" value="${basedir}/vendor/bin/parallel-lint.bat" else="${basedir}/vendor/bin/parallel-lint">
vendor/jakub-onderka/php-console-color/build.xml:16:    <condition property="var-dump-check" value="${basedir}/vendor/bin/var-dump-check.bat" else="${basedir}/vendor/bin/var-dump-check">
vendor/jakub-onderka/php-console-color/build.xml:20:    <!-- Use colors in output can be disabled when calling ant with -Duse-colors=false -->
vendor/jakub-onderka/php-console-color/build.xml:21:    <property name="use-colors" value="true" />
vendor/jakub-onderka/php-console-color/build.xml:23:    <condition property="colors-arg.color" value="--colors" else="">
vendor/jakub-onderka/php-console-color/build.xml:24:        <equals arg1="${use-colors}" arg2="true" />
vendor/jakub-onderka/php-console-color/build.xml:27:    <condition property="colors-arg.no-colors" value="" else="--no-colors">
vendor/jakub-onderka/php-console-color/build.xml:28:        <equals arg1="${use-colors}" arg2="true" />
vendor/jakub-onderka/php-console-color/build.xml:31:    <!-- Targets -->
vendor/jakub-onderka/php-console-color/build.xml:37:        <exec executable="${parallel-lint}" failonerror="true">
vendor/jakub-onderka/php-console-color/build.xml:38:            <arg line='--exclude ${basedir}/vendor/' />
vendor/jakub-onderka/php-console-color/build.xml:39:            <arg line='${colors-arg.no-colors}' />
vendor/jakub-onderka/php-console-color/build.xml:44:    <target name="var-dump-check" description="Check PHP files for forgotten variable dumps">
vendor/jakub-onderka/php-console-color/build.xml:45:        <exec executable="${var-dump-check}" failonerror="true">
vendor/jakub-onderka/php-console-color/build.xml:46:            <arg line='--exclude ${basedir}/vendor/' />
vendor/jakub-onderka/php-console-color/build.xml:47:            <arg line='${colors-arg.no-colors}' />
vendor/jakub-onderka/php-console-color/build.xml:56:            <arg line='--extensions=php' />
vendor/jakub-onderka/php-console-color/build.xml:57:            <arg line='--standard="${basedir}/vendor/jakub-onderka/php-code-style/ruleset.xml"' />
vendor/jakub-onderka/php-console-color/build.xml:58:            <arg line='--report-checkstyle="${basedir}/build/logs/checkstyle.xml"' />
vendor/jakub-onderka/php-console-color/build.xml:59:            <arg line='--report-full' />
vendor/jakub-onderka/php-console-color/build.xml:68:            <arg line='--configuration ${basedir}/phpunit.xml' />
vendor/jakub-onderka/php-console-color/build.xml:69:            <arg line='-d memory_limit=256M' />
vendor/jakub-onderka/php-console-color/build.xml:70:            <arg line='--log-junit "${basedir}/build/logs/phpunit.xml"' />
vendor/jakub-onderka/php-console-color/build.xml:71:            <arg line='${colors-arg.color}' />
vendor/jakub-onderka/php-console-color/build.xml:75:    <target name="phpunit-coverage" depends="prepare" description="PHP unit with code coverage">
vendor/jakub-onderka/php-console-color/build.xml:82:            <arg line='--configuration ${basedir}/phpunit.xml' />
vendor/jakub-onderka/php-console-color/build.xml:83:            <arg line='-d memory_limit=256M' />
vendor/jakub-onderka/php-console-color/build.xml:84:            <arg line='--log-junit "${basedir}/build/logs/phpunit.xml"' />
vendor/jakub-onderka/php-console-color/build.xml:85:            <arg line='--coverage-clover "${basedir}/build/logs/clover.xml"' />
vendor/jakub-onderka/php-console-color/build.xml:86:            <arg line='--coverage-html "${basedir}/build/coverage/"' />
vendor/jakub-onderka/php-console-color/build.xml:87:            <arg line='${colors-arg.color}' />
vendor/jakub-onderka/php-console-color/build.xml:91:    <target name="build" depends="phplint,var-dump-check,phpcs,phpunit" />
vendor/jakub-onderka/php-console-color/.travis.yml:4:  - 5.3.3
vendor/jakub-onderka/php-console-color/.travis.yml:5:  - 5.4
vendor/jakub-onderka/php-console-color/.travis.yml:6:  - 5.5
vendor/jakub-onderka/php-console-color/.travis.yml:9:  - composer self-update
vendor/jakub-onderka/php-console-color/.travis.yml:10:  - composer install --no-interaction --prefer-source --dev
vendor/jakub-onderka/php-console-color/.travis.yml:13:  - ant phplint
vendor/jakub-onderka/php-console-color/.travis.yml:14:  - ant phpcs
vendor/jakub-onderka/php-console-color/.travis.yml:15:  - ant phpunit
vendor/jakub-onderka/php-console-color/phpunit.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/jakub-onderka/php-console-color/phpunit.xml:9:    <!-- Ignore vendor folder for code coverage -->
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:12:        $this->isSupportedForce = $isSupported;
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:17:        return $this->isSupportedForce;
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:22:        $this->are256ColorsSupportedForce = $are256ColorsSupported;
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:27:        return $this->are256ColorsSupportedForce;
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:38:        $this->uut = new ConsoleColorWithForceSupport();
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:43:        $output = $this->uut->apply('none', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:44:        $this->assertEquals("text", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:49:        $output = $this->uut->apply('bold', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:50:        $this->assertEquals("\033[1mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:55:        $this->uut->setIsSupported(false);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:57:        $output = $this->uut->apply('bold', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:58:        $this->assertEquals("text", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:63:        $this->uut->setIsSupported(false);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:64:        $this->uut->setForceStyle(true);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:66:        $output = $this->uut->apply('bold', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:67:        $this->assertEquals("\033[1mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:72:        $output = $this->uut->apply('dark', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:73:        $this->assertEquals("\033[2mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:78:        $output = $this->uut->apply(array('bold', 'dark'), 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:79:        $this->assertEquals("\033[1;2mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:84:        $output = $this->uut->apply('color_255', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:85:        $this->assertEquals("\033[38;5;255mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:90:        $this->uut->setAre256ColorsSupported(false);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:92:        $output = $this->uut->apply('color_255', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:93:        $this->assertEquals("text", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:98:        $output = $this->uut->apply('bg_color_255', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:99:        $this->assertEquals("\033[48;5;255mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:104:        $output = $this->uut->apply(array('color_200', 'bg_color_255'), 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:105:        $this->assertEquals("\033[38;5;200;48;5;255mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:110:        $this->uut->setThemes(array('bold_dark' => array('bold', 'dark')));
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:111:        $output = $this->uut->apply(array('bold_dark'), 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:112:        $this->assertEquals("\033[1;2mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:117:        $this->uut->addTheme('bold_own', 'bold');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:118:        $output = $this->uut->apply(array('bold_own'), 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:119:        $this->assertEquals("\033[1mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:124:        $this->uut->addTheme('bold_dark', array('bold', 'dark'));
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:125:        $output = $this->uut->apply(array('bold_dark'), 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:126:        $this->assertEquals("\033[1;2mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:131:        $this->uut->addTheme('bold_dark', array('bold', 'dark'));
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:132:        $output = $this->uut->apply(array('bold_dark', 'italic'), 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:133:        $this->assertEquals("\033[1;2;3mtext\033[0m", $output);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:138:        $this->assertFalse($this->uut->hasTheme('bold_dark'));
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:140:        $this->uut->addTheme('bold_dark', array('bold', 'dark'));
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:141:        $this->assertTrue($this->uut->hasTheme('bold_dark'));
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:143:        $this->uut->removeTheme('bold_dark');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:144:        $this->assertFalse($this->uut->hasTheme('bold_dark'));
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:149:        $this->setExpectedException('\InvalidArgumentException');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:150:        $this->uut->apply(new stdClass(), 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:155:        $this->setExpectedException('\JakubOnderka\PhpConsoleColor\InvalidStyleException');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:156:        $this->uut->apply('invalid', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:161:        $this->setExpectedException('\JakubOnderka\PhpConsoleColor\InvalidStyleException');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:162:        $this->uut->apply('color_2134', 'text');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:167:        $this->setExpectedException('\JakubOnderka\PhpConsoleColor\InvalidStyleException');
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:168:        $this->uut->addTheme('invalid', array('invalid'));
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:173:        $this->assertFalse($this->uut->isStyleForced());
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:174:        $this->uut->setForceStyle(true);
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:175:        $this->assertTrue($this->uut->isStyleForced());
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:180:        $this->assertInternalType('array', $this->uut->getPossibleStyles());
vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php:181:        $this->assertNotEmpty($this->uut->getPossibleStyles());
vendor/jakub-onderka/php-console-color/example.php:6:echo "Colors are supported: " . ($consoleColor->isSupported() ? 'Yes' : 'No') . "\n";
vendor/jakub-onderka/php-console-color/example.php:7:echo "256 colors are supported: " . ($consoleColor->are256ColorsSupported() ? 'Yes' : 'No') . "\n\n";
vendor/jakub-onderka/php-console-color/example.php:9:if ($consoleColor->isSupported()) {
vendor/jakub-onderka/php-console-color/example.php:10:    foreach ($consoleColor->getPossibleStyles() as $style) {
vendor/jakub-onderka/php-console-color/example.php:11:        echo $consoleColor->apply($style, $style) . "\n";
vendor/jakub-onderka/php-console-color/example.php:17:if ($consoleColor->are256ColorsSupported()) {
vendor/jakub-onderka/php-console-color/example.php:20:        echo $consoleColor->apply("color_$i", str_pad($i, 6, ' ', STR_PAD_BOTH));
vendor/jakub-onderka/php-console-color/example.php:30:        echo $consoleColor->apply("bg_color_$i", str_pad($i, 6, ' ', STR_PAD_BOTH));
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:9:    const COLOR256_REGEXP = '~^(bg_)?color_([0-9]{1,3})$~';
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:74:        $this->isSupported = $this->isSupported();
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:86:        if (!$this->isStyleForced() && !$this->isSupported()) {
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:100:            if (isset($this->themes[$s])) {
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:101:                $sequences = array_merge($sequences, $this->themeSequence($s));
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:102:            } else if ($this->isValidStyle($s)) {
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:103:                $sequences[] = $this->styleSequence($s);
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:117:        return $this->escSequence(implode(';', $sequences)) . $text . $this->escSequence(self::RESET_STYLE);
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:125:        $this->forceStyle = (bool) $forceStyle;
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:133:        return $this->forceStyle;
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:143:        $this->themes = array();
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:145:            $this->addTheme($name, $styles);
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:165:            if (!$this->isValidStyle($style)) {
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:170:        $this->themes[$name] = $styles;
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:178:        return $this->themes;
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:187:        return isset($this->themes[$name]);
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:195:        unset($this->themes[$name]);
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:223:        return array_keys($this->styles);
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:234:        foreach ($this->themes[$name] as $style) {
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:235:            $sequences[] = $this->styleSequence($style);
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:247:        if (array_key_exists($style, $this->styles)) {
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:248:            return $this->styles[$style];
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:251:        if (!$this->are256ColorsSupported()) {
vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php:269:        return array_key_exists($style, $this->styles) || preg_match(self::COLOR256_REGEXP, $style);
vendor/jakub-onderka/php-console-highlighter/composer.json:2:    "name": "jakub-onderka/php-console-highlighter",
vendor/jakub-onderka/php-console-highlighter/composer.json:13:        "psr-0": {"JakubOnderka\\PhpConsoleHighlighter": "src/"}
vendor/jakub-onderka/php-console-highlighter/composer.json:17:        "jakub-onderka/php-console-color": "~0.1"
vendor/jakub-onderka/php-console-highlighter/composer.json:19:    "require-dev": {
vendor/jakub-onderka/php-console-highlighter/composer.json:21:        "jakub-onderka/php-parallel-lint": "~0.5",
vendor/jakub-onderka/php-console-highlighter/composer.json:22:        "jakub-onderka/php-var-dump-check": "~0.1",
vendor/jakub-onderka/php-console-highlighter/composer.json:24:        "jakub-onderka/php-code-style": "~1.0"
vendor/jakub-onderka/php-console-highlighter/README.md:7:-------
vendor/jakub-onderka/php-console-highlighter/README.md:8:![Example](http://jakubonderka.github.io/php-console-highlight-example.png)
vendor/jakub-onderka/php-console-highlighter/README.md:11:-------
vendor/jakub-onderka/php-console-highlighter/README.md:18:        "jakub-onderka/php-console-highlighter": "0.*"
vendor/jakub-onderka/php-console-highlighter/README.md:24:-------
vendor/jakub-onderka/php-console-highlighter/README.md:35:echo $highlighter->getWholeFile($fileContent);
vendor/jakub-onderka/php-console-highlighter/README.md:38:------
vendor/jakub-onderka/php-console-highlighter/README.md:40:[![Build Status](https://travis-ci.org/JakubOnderka/PHP-Console-Highlighter.svg?branch=master)](https://travis-ci.org/JakubOnderka/PHP-Console-Highlighter)
vendor/jakub-onderka/php-console-highlighter/build.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/jakub-onderka/php-console-highlighter/build.xml:3:    <!-- Set executables according to OS -->
vendor/jakub-onderka/php-console-highlighter/build.xml:12:    <condition property="parallel-lint" value="${basedir}/vendor/bin/parallel-lint.bat" else="${basedir}/vendor/bin/parallel-lint">
vendor/jakub-onderka/php-console-highlighter/build.xml:16:    <condition property="var-dump-check" value="${basedir}/vendor/bin/var-dump-check.bat" else="${basedir}/vendor/bin/var-dump-check">
vendor/jakub-onderka/php-console-highlighter/build.xml:20:    <!-- Use colors in output can be disabled when calling ant with -Duse-colors=false -->
vendor/jakub-onderka/php-console-highlighter/build.xml:21:    <property name="use-colors" value="true" />
vendor/jakub-onderka/php-console-highlighter/build.xml:23:    <condition property="colors-arg.color" value="--colors" else="">
vendor/jakub-onderka/php-console-highlighter/build.xml:24:        <equals arg1="${use-colors}" arg2="true" />
vendor/jakub-onderka/php-console-highlighter/build.xml:27:    <condition property="colors-arg.no-colors" value="" else="--no-colors">
vendor/jakub-onderka/php-console-highlighter/build.xml:28:        <equals arg1="${use-colors}" arg2="true" />
vendor/jakub-onderka/php-console-highlighter/build.xml:31:    <!-- Targets -->
vendor/jakub-onderka/php-console-highlighter/build.xml:37:        <exec executable="${parallel-lint}" failonerror="true">
vendor/jakub-onderka/php-console-highlighter/build.xml:38:            <arg line='--exclude ${basedir}/vendor/' />
vendor/jakub-onderka/php-console-highlighter/build.xml:39:            <arg line='${colors-arg.no-colors}' />
vendor/jakub-onderka/php-console-highlighter/build.xml:44:    <target name="var-dump-check" description="Check PHP files for forgotten variable dumps">
vendor/jakub-onderka/php-console-highlighter/build.xml:45:        <exec executable="${var-dump-check}" failonerror="true">
vendor/jakub-onderka/php-console-highlighter/build.xml:46:            <arg line='--exclude ${basedir}/vendor/' />
vendor/jakub-onderka/php-console-highlighter/build.xml:47:            <arg line='${colors-arg.no-colors}' />
vendor/jakub-onderka/php-console-highlighter/build.xml:56:            <arg line='--extensions=php' />
vendor/jakub-onderka/php-console-highlighter/build.xml:57:            <arg line='--standard="${basedir}/vendor/jakub-onderka/php-code-style/ruleset.xml"' />
vendor/jakub-onderka/php-console-highlighter/build.xml:58:            <arg line='--report-checkstyle="${basedir}/build/logs/checkstyle.xml"' />
vendor/jakub-onderka/php-console-highlighter/build.xml:59:            <arg line='--report-full' />
vendor/jakub-onderka/php-console-highlighter/build.xml:68:            <arg line='--configuration ${basedir}/phpunit.xml' />
vendor/jakub-onderka/php-console-highlighter/build.xml:69:            <arg line='-d memory_limit=256M' />
vendor/jakub-onderka/php-console-highlighter/build.xml:70:            <arg line='--log-junit "${basedir}/build/logs/phpunit.xml"' />
vendor/jakub-onderka/php-console-highlighter/build.xml:71:            <arg line='${colors-arg.color}' />
vendor/jakub-onderka/php-console-highlighter/build.xml:75:    <target name="phpunit-coverage" depends="prepare" description="PHP unit with code coverage">
vendor/jakub-onderka/php-console-highlighter/build.xml:82:            <arg line='--configuration ${basedir}/phpunit.xml' />
vendor/jakub-onderka/php-console-highlighter/build.xml:83:            <arg line='-d memory_limit=256M' />
vendor/jakub-onderka/php-console-highlighter/build.xml:84:            <arg line='--log-junit "${basedir}/build/logs/phpunit.xml"' />
vendor/jakub-onderka/php-console-highlighter/build.xml:85:            <arg line='--coverage-clover "${basedir}/build/logs/clover.xml"' />
vendor/jakub-onderka/php-console-highlighter/build.xml:86:            <arg line='--coverage-html "${basedir}/build/coverage/"' />
vendor/jakub-onderka/php-console-highlighter/build.xml:87:            <arg line='${colors-arg.color}' />
vendor/jakub-onderka/php-console-highlighter/build.xml:91:    <target name="build" depends="phplint,var-dump-check,phpcs,phpunit" />
vendor/jakub-onderka/php-console-highlighter/.travis.yml:4:  - 5.3.3
vendor/jakub-onderka/php-console-highlighter/.travis.yml:5:  - 5.4
vendor/jakub-onderka/php-console-highlighter/.travis.yml:6:  - 5.5
vendor/jakub-onderka/php-console-highlighter/.travis.yml:7:  - 5.6
vendor/jakub-onderka/php-console-highlighter/.travis.yml:8:  - 7.0
vendor/jakub-onderka/php-console-highlighter/.travis.yml:9:  - hhvm
vendor/jakub-onderka/php-console-highlighter/.travis.yml:10:  - hhvm-nightly
vendor/jakub-onderka/php-console-highlighter/.travis.yml:14:    - php: 7.0
vendor/jakub-onderka/php-console-highlighter/.travis.yml:15:    - php: hhvm-nightly
vendor/jakub-onderka/php-console-highlighter/.travis.yml:18:  - composer install --no-interaction --prefer-source
vendor/jakub-onderka/php-console-highlighter/.travis.yml:21:  - ant
vendor/jakub-onderka/php-console-highlighter/examples/whole_file.php:10:echo $highlighter->getWholeFile($fileContent);
vendor/jakub-onderka/php-console-highlighter/examples/whole_file_line_numbers.php:10:echo $highlighter->getWholeFileWithLineNumbers($fileContent);
vendor/jakub-onderka/php-console-highlighter/examples/snippet.php:10:echo $highlighter->getCodeSnippet($fileContent, 3);
vendor/jakub-onderka/php-console-highlighter/phpunit.xml:1:<?xml version="1.0" encoding="UTF-8"?>
vendor/jakub-onderka/php-console-highlighter/phpunit.xml:9:    <!-- Ignore vendor folder for code coverage -->
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:11:        $mock = $this->getMock('\JakubOnderka\PhpConsoleColor\ConsoleColor');
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:13:        $mock->expects($this->any())
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:14:            ->method('apply')
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:15:            ->will($this->returnCallback(function ($style, $text) {
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:19:        $mock->expects($this->any())
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:20:            ->method('hasTheme')
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:21:            ->will($this->returnValue(true));
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:28:        $this->uut = new Highlighter($this->getConsoleColorMock());
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:33:        $output = $this->uut->getWholeFile($original);
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:34:        $this->assertEquals($expected, $output);
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:39:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:54:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:69:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:84:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:99:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:118:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:133:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:148:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:178:            $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:197:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:212:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:227:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:242:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php:257:        $this->compare(
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:37:        $this->color = $color;
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:39:        foreach ($this->defaultTheme as $name => $styles) {
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:40:            if (!$this->color->hasTheme($name)) {
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:41:                $this->color->addTheme($name, $styles);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:57:        $tokenLines = $this->getHighlightedLines($source);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:59:        $offset = $lineNumber - $linesBefore - 1;
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:64:        $lines = $this->colorLines($tokenLines);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:66:        return $this->lineNumbers($lines, $lineNumber);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:77:        $tokenLines = $this->getHighlightedLines($source);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:78:        $lines = $this->colorLines($tokenLines);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:90:        $tokenLines = $this->getHighlightedLines($source);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:91:        $lines = $this->colorLines($tokenLines);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:92:        return $this->lineNumbers($lines);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:102:        $tokens = $this->tokenize($source);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:103:        return $this->splitToLines($tokens);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:232:                if ($this->color->hasTheme($tokenType)) {
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:233:                    $line .= $this->color->apply($tokenType, $tokenValue);
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:258:                $snippet .= ($markLine === $i + 1 ? $this->color->apply(self::ACTUAL_LINE_MARK, '  > ') : '    ');
vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php:261:            $snippet .= $this->color->apply(self::LINE_NUMBER, str_pad($i + 1, $lineStrlen, ' ', STR_PAD_LEFT) . '| ');
vendor/jean85/pretty-package-versions/composer.json:2:    "name": "jean85/pretty-package-versions",
vendor/jean85/pretty-package-versions/composer.json:3:    "description": "A wrapper for ocramius/package-versions to get pretty versions strings",
vendor/jean85/pretty-package-versions/composer.json:7:        "ocramius/package-versions": "^1.2.0"
vendor/jean85/pretty-package-versions/composer.json:9:    "require-dev": {
vendor/jean85/pretty-package-versions/composer.json:20:        "issues": "https://github.com/Jean85/pretty-package-versions/issues"
vendor/jean85/pretty-package-versions/composer.json:29:        "branch-alias": {
vendor/jean85/pretty-package-versions/composer.json:30:            "dev-master": "1.x-dev"
vendor/jean85/pretty-package-versions/composer.json:34:        "psr-4": {
vendor/jean85/pretty-package-versions/composer.json:38:    "autoload-dev": {
vendor/jean85/pretty-package-versions/composer.json:39:        "psr-4": {
vendor/jean85/pretty-package-versions/src/Version.php:28:        $this->packageName = $packageName;
vendor/jean85/pretty-package-versions/src/Version.php:30:        $this->shortVersion = $splittedVersion[0];
vendor/jean85/pretty-package-versions/src/Version.php:31:        $this->commitHash = $splittedVersion[1];
vendor/jean85/pretty-package-versions/src/Version.php:32:        $this->versionIsTagged = preg_match('/[^v\d\.]/', $this->getShortVersion()) === 0;
vendor/jean85/pretty-package-versions/src/Version.php:37:        if ($this->versionIsTagged) {
vendor/jean85/pretty-package-versions/src/Version.php:38:            return $this->getShortVersion();
vendor/jean85/pretty-package-versions/src/Version.php:41:        return $this->getVersionWithShortCommit();
vendor/jean85/pretty-package-versions/src/Version.php:46:        return $this->getShortVersion() . '@' . $this->getCommitHash();
vendor/jean85/pretty-package-versions/src/Version.php:51:        return $this->getShortVersion() . '@' . $this->getShortCommitHash();
vendor/jean85/pretty-package-versions/src/Version.php:56:        return $this->packageName;
vendor/jean85/pretty-package-versions/src/Version.php:61:        return $this->shortVersion;
vendor/jean85/pretty-package-versions/src/Version.php:66:        return $this->commitHash;
vendor/jean85/pretty-package-versions/src/Version.php:71:        return substr($this->commitHash, 0, self::SHORT_COMMIT_LENGTH);
vendor/jean85/pretty-package-versions/src/Version.php:76:        return $this->getPrettyVersion();
getAreaCSV.php:5:error_reporting(-1);
getAreaCSV.php:21:  header('Content-Type: application/csv');
getAreaCSV.php:22:  header('Content-Disposition: attachment; filename="'.$filename.'";');
getAreaCSV.php:25:  // see http://www.php.net/manual/en/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq
getAreaCSV.php:30:  $stmt = $conn->prepare("SELECT m.mark_id as mark_id, m.image_id as image_id, m.author as author, m.path as path, m.poor_quality as poor_quality, i.path as name FROM MarkedData m, Images i where i.image_id = m.image_id AND m.author = 'David' AND m.image_id IN (SELECT image_id FROM MarkedData WHERE author='Jae') ORDER BY mark_id");
getAreaCSV.php:31:  //$stmt->bind_param("s", $author);
getAreaCSV.php:32:  $stmt->execute();
getAreaCSV.php:33:  $res = $stmt->get_result();
getAreaCSV.php:39:  while ($row = $res->fetch_assoc()) {
getAreaCSV.php:79:			$xj = $diseasePath[count($diseasePath) - 2][1];
getAreaCSV.php:80:			$yj = 512 - $diseasePath[count($diseasePath) - 2][2];
getAreaCSV.php:87:					$yi = 512 - $diseasePathCoord[2];
getAreaCSV.php:89:					$pathArea += ($xj + $xi) * ($yj - $yi);
getAreaCSV.php:106:		$sevStmt = $conn->prepare("Select severity from Severity where mark_id = ? and disease = ?");
getAreaCSV.php:107:		$sevStmt->bind_param("ii", $mark_id, $diseaseId);
getAreaCSV.php:109:		$sevStmt->execute();
getAreaCSV.php:110:		$sev_res = $sevStmt->get_result();
getAreaCSV.php:112:		$obj = $sev_res->fetch_assoc();
getAreaCSV.php:114:		$sevStmt->close();
getAreaCSV.php:132:  $stmt->close();
getAreaCSV.php:146:        return ($a[4] < $b[4]) ? -1 : 1;
getAreaCSV.php:148:    return ($a[2] < $b[2]) ? -1 : 1;
getAreaCSV.php:156:    "errorMessage" => $e->getMessage()
getPoorQualities.php:5:error_reporting(-1);
getPoorQualities.php:21:  header('Content-Type: application/csv');
getPoorQualities.php:22:  header('Content-Disposition: attachment; filename="'.$filename.'";');
getPoorQualities.php:25:  // see http://www.php.net/manual/en/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq
getPoorQualities.php:30:  $imagesStmt = $conn->prepare("SELECT m.mark_id as mark_id, m.image_id as image_id, m.path as path, m.poor_quality as poor_quality, i.path as name FROM MarkedData m, Images i where m.poor_quality = 1 AND i.image_id = m.image_id AND m.author = ? AND m.image_id IN (SELECT image_id FROM MarkedData WHERE author='Jae') ORDER BY mark_id;");
getPoorQualities.php:31:  $imagesStmt->bind_param("s", $AUTHOR);
getPoorQualities.php:32:  $imagesStmt->execute();
getPoorQualities.php:33:  $imagesRes = $imagesStmt->get_result();
getPoorQualities.php:35:  while($imageRow = $imagesRes->fetch_assoc()){
getPoorQualities.php:44:  $imagesStmt->close();
getPoorQualities.php:58:        return ($a[4] < $b[4]) ? -1 : 1;
getPoorQualities.php:60:    return ($a[2] < $b[2]) ? -1 : 1;
getPoorQualities.php:74:		"errorMessage" => $e->getMessage()
upload.php:4:error_reporting(-1);
upload.php:18:  $stmt = $conn->prepare("SELECT mark_id FROM MarkedData WHERE image_id = ? AND author = ?");
upload.php:19:  $stmt->bind_param("is", $image_id, $author);
upload.php:20:  $stmt->execute();
upload.php:22:  $res = $stmt->get_result();
upload.php:23:  $row = $res->fetch_assoc();
upload.php:28:	  $stmt = $conn->prepare("INSERT INTO MarkedData (image_id, author, path, poor_quality) VALUES (?, ?, ?, ?)");
upload.php:29:	  $stmt->bind_param("issi", $image_id, $author, $paths, $pq);
upload.php:30:	  $stmt->execute();
upload.php:32:	  $mark_id = $stmt->insert_id;
upload.php:36:	  $stmt->close();
upload.php:44:	  $stmt = $conn->prepare("UPDATE MarkedData SET path = ?, poor_quality = ? WHERE image_id = ? AND author = ?");
upload.php:45:	  $stmt->bind_param("siis", $paths, $pq, $image_id, $author);
upload.php:46:	  $stmt->execute();
upload.php:47:	  $stmt->close();
upload.php:65:  echo json_encode(array ("errorMessage" => $e->getMessage()));
getPreviousImage.php:4:error_reporting(-1);
getPreviousImage.php:12:  $stmt = $conn->prepare("SELECT image_id FROM MarkedData WHERE author = ? ORDER BY image_id DESC LIMIT 1");
getPreviousImage.php:13:  $stmt->bind_param("s", $author);
getPreviousImage.php:14:  $stmt->execute();
getPreviousImage.php:16:  $res = $stmt->get_result();
getPreviousImage.php:17:  $row = $res->fetch_assoc();
getPreviousImage.php:20:    return array( "id" => -1, "name" => "error getting previous order index");  // done
getPreviousImage.php:24:  $stmt = $conn->prepare("SELECT path from Images WHERE image_id = ?");
getPreviousImage.php:25:  $stmt->bind_param("i", $image_id);
getPreviousImage.php:26:  $stmt->execute();
getPreviousImage.php:27:  $res = $stmt->get_result();
getPreviousImage.php:28:  $row = $res->fetch_assoc();
getPreviousImage.php:30:    return array( "id" => -1, "name" => "error getting previous order index");  // done
getPreviousImage.php:51:    "errorMessage" => $e->getMessage()
composer.lock:4:        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
composer.lock:8:    "content-hash": "7717c176cc20fb69c497a2eb5528e56f",
composer.lock:11:            "name": "dnoegel/php-xdg-base-dir",
composer.lock:15:                "url": "https://github.com/dnoegel/php-xdg-base-dir.git",
composer.lock:20:                "url": "https://api.github.com/repos/dnoegel/php-xdg-base-dir/zipball/265b8593498b997dc2d31e75b89f053b5cc9621a",
composer.lock:27:            "require-dev": {
composer.lock:32:                "psr-4": {
composer.lock:36:            "notification-url": "https://packagist.org/downloads/",
composer.lock:41:            "time": "2014-10-24 07:27:01"
composer.lock:44:            "name": "jakub-onderka/php-console-color",
composer.lock:48:                "url": "https://github.com/JakubOnderka/PHP-Console-Color.git",
composer.lock:53:                "url": "https://api.github.com/repos/JakubOnderka/PHP-Console-Color/zipball/e0b393dacf7703fc36a4efc3df1435485197e6c1",
composer.lock:60:            "require-dev": {
composer.lock:61:                "jakub-onderka/php-code-style": "1.0",
composer.lock:62:                "jakub-onderka/php-parallel-lint": "0.*",
composer.lock:63:                "jakub-onderka/php-var-dump-check": "0.*",
composer.lock:69:                "psr-0": {
composer.lock:73:            "notification-url": "https://packagist.org/downloads/",
composer.lock:75:                "BSD-2-Clause"
composer.lock:84:            "time": "2014-04-08 15:00:19"
composer.lock:87:            "name": "jakub-onderka/php-console-highlighter",
composer.lock:91:                "url": "https://github.com/JakubOnderka/PHP-Console-Highlighter.git",
composer.lock:96:                "url": "https://api.github.com/repos/JakubOnderka/PHP-Console-Highlighter/zipball/7daa75df45242c8d5b75a22c00a201e7954e4fb5",
composer.lock:101:                "jakub-onderka/php-console-color": "~0.1",
composer.lock:104:            "require-dev": {
composer.lock:105:                "jakub-onderka/php-code-style": "~1.0",
composer.lock:106:                "jakub-onderka/php-parallel-lint": "~0.5",
composer.lock:107:                "jakub-onderka/php-var-dump-check": "~0.1",
composer.lock:113:                "psr-0": {
composer.lock:117:            "notification-url": "https://packagist.org/downloads/",
composer.lock:128:            "time": "2015-04-20 18:58:01"
composer.lock:131:            "name": "nikic/php-parser",
composer.lock:135:                "url": "https://github.com/nikic/PHP-Parser.git",
composer.lock:140:                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/bb87e28e7d7b8d9a7fda231d37457c9210faf6ce",
composer.lock:145:                "ext-tokenizer": "*",
composer.lock:148:            "require-dev": {
composer.lock:152:                "bin/php-parse"
composer.lock:156:                "branch-alias": {
composer.lock:157:                    "dev-master": "3.0-dev"
composer.lock:161:                "psr-4": {
composer.lock:165:            "notification-url": "https://packagist.org/downloads/",
composer.lock:167:                "BSD-3-Clause"
composer.lock:179:            "time": "2018-02-28 20:30:58"
composer.lock:186:                "url": "https://github.com/php-fig/log.git",
composer.lock:191:                "url": "https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
composer.lock:200:                "branch-alias": {
composer.lock:201:                    "dev-master": "1.0.x-dev"
composer.lock:205:                "psr-4": {
composer.lock:209:            "notification-url": "https://packagist.org/downloads/",
composer.lock:215:                    "name": "PHP-FIG",
composer.lock:216:                    "homepage": "http://www.php-fig.org/"
composer.lock:220:            "homepage": "https://github.com/php-fig/log",
composer.lock:224:                "psr-3"
composer.lock:226:            "time": "2016-10-10 12:19:37"
composer.lock:243:                "dnoegel/php-xdg-base-dir": "0.1",
composer.lock:244:                "jakub-onderka/php-console-highlighter": "0.3.*",
composer.lock:245:                "nikic/php-parser": "~1.3|~2.0|~3.0|~4.0",
composer.lock:248:                "symfony/var-dumper": "~2.7|~3.0|~4.0"
composer.lock:250:            "require-dev": {
composer.lock:251:                "bamarni/composer-bin-plugin": "^1.2",
composer.lock:256:                "ext-pcntl": "Enabling the PCNTL extension makes PsySH a lot happier :)",
composer.lock:257:                "ext-pdo-sqlite": "The doc command requires SQLite to work.",
composer.lock:258:                "ext-posix": "If you have PCNTL, you'll want the POSIX extension as well.",
composer.lock:259:                "ext-readline": "Enables support for arrow-key history navigation, and showing and manipulating command history.",
composer.lock:267:                "branch-alias": {
composer.lock:268:                    "dev-develop": "0.9.x-dev"
composer.lock:275:                "psr-4": {
composer.lock:279:            "notification-url": "https://packagist.org/downloads/",
composer.lock:298:            "time": "2018-06-10 17:57:20"
composer.lock:317:                "symfony/polyfill-mbstring": "~1.0"
composer.lock:320:                "symfony/dependency-injection": "<3.4",
composer.lock:323:            "require-dev": {
composer.lock:326:                "symfony/dependency-injection": "~3.4|~4.0",
composer.lock:327:                "symfony/event-dispatcher": "~2.8|~3.0|~4.0",
composer.lock:332:                "psr/log-implementation": "For using the console logger",
composer.lock:333:                "symfony/event-dispatcher": "",
composer.lock:339:                "branch-alias": {
composer.lock:340:                    "dev-master": "3.4-dev"
composer.lock:344:                "psr-4": {
composer.lock:347:                "exclude-from-classmap": [
composer.lock:351:            "notification-url": "https://packagist.org/downloads/",
composer.lock:367:            "time": "2018-05-16 08:49:21"
composer.lock:388:                "symfony/http-kernel": ">=2.3,<2.3.24|~2.4.0|>=2.5,<2.5.9|>=2.6,<2.6.2"
composer.lock:390:            "require-dev": {
composer.lock:391:                "symfony/http-kernel": "~2.8|~3.0|~4.0"
composer.lock:395:                "branch-alias": {
composer.lock:396:                    "dev-master": "3.4-dev"
composer.lock:400:                "psr-4": {
composer.lock:403:                "exclude-from-classmap": [
composer.lock:407:            "notification-url": "https://packagist.org/downloads/",
composer.lock:423:            "time": "2018-05-16 14:03:39"
composer.lock:426:            "name": "symfony/polyfill-mbstring",
composer.lock:430:                "url": "https://github.com/symfony/polyfill-mbstring.git",
composer.lock:435:                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/3296adf6a6454a050679cde90f95350ad604b171",
composer.lock:443:                "ext-mbstring": "For best performance"
composer.lock:447:                "branch-alias": {
composer.lock:448:                    "dev-master": "1.8-dev"
composer.lock:452:                "psr-4": {
composer.lock:459:            "notification-url": "https://packagist.org/downloads/",
composer.lock:482:            "time": "2018-04-26 10:06:28"
composer.lock:485:            "name": "symfony/var-dumper",
composer.lock:489:                "url": "https://github.com/symfony/var-dumper.git",
composer.lock:494:                "url": "https://api.github.com/repos/symfony/var-dumper/zipball/e173954a28a44a32c690815fbe4d0f2eac43accb",
composer.lock:500:                "symfony/polyfill-mbstring": "~1.0"
composer.lock:505:            "require-dev": {
composer.lock:506:                "ext-iconv": "*",
composer.lock:510:                "ext-iconv": "To convert non-UTF-8 strings to UTF-8 (or symfony/polyfill-iconv in case ext-iconv cannot be used).",
composer.lock:511:                "ext-intl": "To show region name in time zone dump",
composer.lock:512:                "ext-symfony_debug": ""
composer.lock:516:                "branch-alias": {
composer.lock:517:                    "dev-master": "3.4-dev"
composer.lock:524:                "psr-4": {
composer.lock:527:                "exclude-from-classmap": [
composer.lock:531:            "notification-url": "https://packagist.org/downloads/",
composer.lock:551:            "time": "2018-06-15 07:47:49"
composer.lock:554:    "packages-dev": [
composer.lock:556:            "name": "jean85/pretty-package-versions",
composer.lock:560:                "url": "https://github.com/Jean85/pretty-package-versions.git",
composer.lock:565:                "url": "https://api.github.com/repos/Jean85/pretty-package-versions/zipball/75c7effcf3f77501d0e0caa75111aff4daa0dd48",
composer.lock:570:                "ocramius/package-versions": "^1.2.0",
composer.lock:573:            "require-dev": {
composer.lock:578:                "branch-alias": {
composer.lock:579:                    "dev-master": "1.x-dev"
composer.lock:583:                "psr-4": {
composer.lock:587:            "notification-url": "https://packagist.org/downloads/",
composer.lock:597:            "description": "A wrapper for ocramius/package-versions to get pretty versions strings",
composer.lock:604:            "time": "2018-06-13 13:22:40"
composer.lock:628:            "require-dev": {
composer.lock:636:                "nette/robot-loader": "^2.4.2 || ^3.0",
composer.lock:637:                "nette/safe-stream": "~2.2",
composer.lock:643:                "nette/robot-loader": "to use Configurator::createRobotLoader()",
composer.lock:648:                "branch-alias": {
composer.lock:649:                    "dev-master": "2.4-dev"
composer.lock:657:            "notification-url": "https://packagist.org/downloads/",
composer.lock:659:                "BSD-3-Clause",
composer.lock:660:                "GPL-2.0",
composer.lock:661:                "GPL-3.0"
composer.lock:680:            "time": "2018-05-17 12:52:20"
composer.lock:697:                "ext-tokenizer": "*",
composer.lock:699:                "nette/php-generator": "^2.6.1 || ~3.0.0",
composer.lock:707:            "require-dev": {
composer.lock:713:                "branch-alias": {
composer.lock:714:                    "dev-master": "2.4-dev"
composer.lock:722:            "notification-url": "https://packagist.org/downloads/",
composer.lock:724:                "BSD-3-Clause",
composer.lock:725:                "GPL-2.0",
composer.lock:726:                "GPL-3.0"
composer.lock:738:            "description": "💎 Nette Dependency Injection Container: Flexible, compiled and full-featured DIC with perfectly usable autowiring and support for all new PHP 7.1 features.",
composer.lock:749:            "time": "2018-04-26 09:18:42"
composer.lock:772:            "require-dev": {
composer.lock:778:                "branch-alias": {
composer.lock:779:                    "dev-master": "2.4-dev"
composer.lock:787:            "notification-url": "https://packagist.org/downloads/",
composer.lock:789:                "BSD-3-Clause",
composer.lock:790:                "GPL-2.0",
composer.lock:791:                "GPL-3.0"
composer.lock:805:            "time": "2017-07-10 23:47:08"
composer.lock:822:                "ext-iconv": "*",
composer.lock:823:                "ext-json": "*",
composer.lock:826:            "require-dev": {
composer.lock:832:                "branch-alias": {
composer.lock:833:                    "dev-master": "2.4-dev"
composer.lock:841:            "notification-url": "https://packagist.org/downloads/",
composer.lock:843:                "BSD-3-Clause",
composer.lock:844:                "GPL-2.0",
composer.lock:845:                "GPL-3.0"
composer.lock:858:            "homepage": "http://ne-on.org",
composer.lock:859:            "time": "2017-07-11 18:29:08"
composer.lock:862:            "name": "nette/php-generator",
composer.lock:866:                "url": "https://github.com/nette/php-generator.git",
composer.lock:871:                "url": "https://api.github.com/repos/nette/php-generator/zipball/b381ecacbf5a0b5f99cc0b303d5b0578d409f446",
composer.lock:882:            "require-dev": {
composer.lock:888:                "branch-alias": {
composer.lock:889:                    "dev-master": "3.0-dev"
composer.lock:897:            "notification-url": "https://packagist.org/downloads/",
composer.lock:899:                "BSD-3-Clause",
composer.lock:900:                "GPL-2.0",
composer.lock:901:                "GPL-3.0"
composer.lock:921:            "time": "2018-04-26 16:48:20"
composer.lock:924:            "name": "nette/robot-loader",
composer.lock:928:                "url": "https://github.com/nette/robot-loader.git",
composer.lock:933:                "url": "https://api.github.com/repos/nette/robot-loader/zipball/92d4b40b49d5e2d9e37fc736bbcebe6da55fa44a",
composer.lock:938:                "ext-tokenizer": "*",
composer.lock:946:            "require-dev": {
composer.lock:952:                "branch-alias": {
composer.lock:953:                    "dev-master": "3.0-dev"
composer.lock:961:            "notification-url": "https://packagist.org/downloads/",
composer.lock:963:                "BSD-3-Clause",
composer.lock:964:                "GPL-2.0",
composer.lock:965:                "GPL-3.0"
composer.lock:986:            "time": "2017-09-26 13:42:21"
composer.lock:1008:            "require-dev": {
composer.lock:1013:                "ext-gd": "to use Image",
composer.lock:1014:                "ext-iconv": "to use Strings::webalize() and toAscii()",
composer.lock:1015:                "ext-intl": "for script transliteration in Strings::webalize() and toAscii()",
composer.lock:1016:                "ext-json": "to use Nette\\Utils\\Json",
composer.lock:1017:                "ext-mbstring": "to use Strings::lower() etc...",
composer.lock:1018:                "ext-xml": "to use Strings::length() etc. when mbstring is not available"
composer.lock:1022:                "branch-alias": {
composer.lock:1023:                    "dev-master": "2.5-dev"
composer.lock:1034:            "notification-url": "https://packagist.org/downloads/",
composer.lock:1036:                "BSD-3-Clause",
composer.lock:1037:                "GPL-2.0",
composer.lock:1038:                "GPL-3.0"
composer.lock:1064:                "utf-8",
composer.lock:1068:            "time": "2018-05-02 17:16:08"
composer.lock:1071:            "name": "ocramius/package-versions",
composer.lock:1085:                "composer-plugin-api": "^1.0",
composer.lock:1088:            "require-dev": {
composer.lock:1090:                "ext-zip": "*",
composer.lock:1091:                "humbug/humbug": "dev-master",
composer.lock:1094:            "type": "composer-plugin",
composer.lock:1097:                "branch-alias": {
composer.lock:1098:                    "dev-master": "2.0.x-dev"
composer.lock:1102:                "psr-4": {
composer.lock:1106:            "notification-url": "https://packagist.org/downloads/",
composer.lock:1117:            "time": "2017-11-24 11:07:03"
composer.lock:1120:            "name": "phpstan/phpdoc-parser",
composer.lock:1124:                "url": "https://github.com/phpstan/phpdoc-parser.git",
composer.lock:1129:                "url": "https://api.github.com/repos/phpstan/phpdoc-parser/zipball/02f909f134fe06f0cd4790d8627ee24efbe84d6a",
composer.lock:1136:            "require-dev": {
composer.lock:1137:                "consistence/coding-standard": "^2.0.0",
composer.lock:1138:                "jakub-onderka/php-parallel-lint": "^0.9.2",
composer.lock:1142:                "slevomat/coding-standard": "^3.3.0"
composer.lock:1146:                "branch-alias": {
composer.lock:1147:                    "dev-master": "0.1-dev"
composer.lock:1151:                "psr-4": {
composer.lock:1157:            "notification-url": "https://packagist.org/downloads/",
composer.lock:1162:            "time": "2018-01-13 18:19:41"
composer.lock:1179:                "jean85/pretty-package-versions": "^1.0.3",
composer.lock:1182:                "nette/robot-loader": "^3.0.1",
composer.lock:1184:                "nikic/php-parser": "^3.1",
composer.lock:1186:                "phpstan/phpdoc-parser": "^0.2",
composer.lock:1190:            "require-dev": {
composer.lock:1191:                "consistence/coding-standard": "2.2.1",
composer.lock:1192:                "ext-gd": "*",
composer.lock:1193:                "ext-intl": "*",
composer.lock:1194:                "ext-mysqli": "*",
composer.lock:1195:                "jakub-onderka/php-parallel-lint": "^0.9.2",
composer.lock:1197:                "phpstan/phpstan-php-parser": "^0.9",
composer.lock:1198:                "phpstan/phpstan-phpunit": "^0.9.3",
composer.lock:1199:                "phpstan/phpstan-strict-rules": "^0.9",
composer.lock:1201:                "slevomat/coding-standard": "4.0.0"
composer.lock:1208:                "branch-alias": {
composer.lock:1209:                    "dev-master": "0.9-dev"
composer.lock:1213:                "psr-4": {
composer.lock:1220:            "notification-url": "https://packagist.org/downloads/",
composer.lock:1224:            "description": "PHPStan - PHP Static Analysis Tool",
composer.lock:1225:            "time": "2018-01-28 13:22:19"
composer.lock:1246:                "branch-alias": {
composer.lock:1247:                    "dev-master": "3.4-dev"
composer.lock:1251:                "psr-4": {
composer.lock:1254:                "exclude-from-classmap": [
composer.lock:1258:            "notification-url": "https://packagist.org/downloads/",
composer.lock:1274:            "time": "2018-05-16 08:49:21"
composer.lock:1278:    "minimum-stability": "stable",
composer.lock:1279:    "stability-flags": {
composer.lock:1282:    "prefer-stable": false,
composer.lock:1283:    "prefer-lowest": false,
composer.lock:1285:    "platform-dev": []
api_spec.md:2:GET getProgress.php?author=xxx -> {"marked": int, "total": int}
api_spec.md:4:GET getNextImage.php?author=xxx -> {"next_image": int, "image_url": "0/xxx.jpg"}
api_spec.md:5:  - image_url part still TODO
api_spec.md:6:  - if no images left, next_image == -1
api_spec.md:8:GET getDiseases.php -> [{"name": string, "id:" int}, ...]
api_spec.md:19:  -> {"mark_id": int}
api_spec.md:21:GET getImage.php?id=xxx -> raw image data
api_spec.md:23:GET addNewImages.php -> add new images in $imgdir to the Images table (will skip duplicates), meant to be opened in a web browser (has UI + preview before adding)
